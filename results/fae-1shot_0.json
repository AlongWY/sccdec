[
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, count = 0;\n    int flag[256] = {0};\n    char c;\n    for (i = 0; str[i] != '\\0'; i++) {\n        c = tolower(str[i]);\n        if (flag[c] == 0 && (__ctype_b_loc()[c] & 0x0400)) {\n            flag[c] = 1;\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(char *s, int *n) {\n  static int a[10];\n  int i = 0;\n  char *p, *q;\n  const char *cs;\n  while (*s) {\n    if ((((*(const _ctype_t *)__ctype_b_loc()))._table[(int)*s] & (0x08)) || *s == '-') {\n      long v = strtol(s, &q, 10);\n      if (q == s) {\n        s = q;\n        while (*s && *s != ',')\n          s++;\n      }\n      if (*s == ',')\n        s++;\n      a[i++] = v;\n    }\n    s++;\n  }\n  *n = i;\n  return a;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(char *s, int *n) {\n  static int a[10];\n  char *p, *q;\n  int i = 0;\n  while (*s) {\n    if (((__ctype_b_loc())[(int)*(s)] & (0200)) || *s == '-') {\n      long t = strtol(s, &q, 10);\n      if (q == s)\n        s = q + 1;\n      else\n        s = q;\n      if (*s == ',' || *s == '\\0')\n        a[i++] = t;\n      else\n        break;\n    } else\n      s++;\n  }\n  *n = i;\n  return a;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(char *s, int *n) {\n    static int a[100];\n    int i = 0;\n    char *p, *q;\n    while (*s) {\n        if (!(*(__ctype_b_loc() + 1) & (1 << (1 * (*s & 0x1f))) || *s == '-')) {\n            s++;\n            continue;\n        }\n        p = s;\n        long t = strtol(s, &q, 10);\n        if (p == q) {\n            while (*q && *q != ',')\n                q++;\n            s = q;\n            continue;\n        }\n        if (*q == ',')\n            s = q + 1;\n        else if (*q)\n            s = q;\n        a[i++] = t;\n    }\n    *n = i;\n    return a;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
    "c_func_decompile": " int *func0(char *s, int *n) {\n  static int a[100];\n  int i = 0;\n  char *p, *q;\n  int x;\n  for (p = s; *p; p++) {\n    while (*p && !((*(const unsigned short *)&((__ctype_b_loc())->_table[ (unsigned char)(*p) ])) & 0x0800) && *p != '-')\n      p++;\n    if (!*p)\n      break;\n    x = strtol(p, &q, 10);\n    if (q != p) {\n      if (*q == ',' || !*q)\n        a[i++] = x;\n      else\n        while (*q && *q != ',')\n          q++;\n    }\n    p = q;\n  }\n  *n = i;\n  return a;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
    "c_func_decompile": " float func0(float x) {\n  return x - (int)x;\n}",
    "c_func_re_decompile": " float func0(float x) {\n  return x - (int)x;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
    "c_func_decompile": " float func0(float x) {\n  int i = (int)x;\n  return x - i;\n}",
    "c_func_re_decompile": "\nfloat func0(float x) {\n  int i = (int)x;\n  return x - i;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
    "c_func_decompile": " float func0(float x) {\n  int i = (int)x;\n  return x - i;\n}",
    "c_func_re_decompile": "\nfloat func0(float x) {\n  int i = (int)x;\n  return x - i;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
    "c_func_decompile": " float func0(float x) {\n  int i = (int)x;\n  return x - i;\n}",
    "c_func_re_decompile": "\nfloat func0(float x) {\n  int i = (int)x;\n  return x - i;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    if (sum < 0)\n      return 1;\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    if (sum < 0)\n      return 1;\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum;\n  sum = 0;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    if (sum < 0)\n      return 1;\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum;\n  sum = 0;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    if (sum < 0)\n      return 1;\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n  int i, sum;\n  sum = a[0];\n  for (i = 0; i < n; i++) {\n    if (sum < 0)\n      return 1;\n    sum += a[i];\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum;\n  sum = a[0];\n  for (i = 0; i < n; i++) {\n    if (sum < 0)\n      return 1;\n    sum += a[i];\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n  int i, sum;\n  sum = a[0];\n  for (i = 0; i < n; i++) {\n    if (sum < 0)\n      return 1;\n    sum += a[i+1];\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum;\n  sum = a[0];\n  for (i = 0; i < n; i++) {\n    if (sum < 0)\n      return 1;\n    sum += a[i+1];\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
    "c_func_decompile": " int func0(float *x, int n, float eps) {\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (fabsf(x[i] - x[j]) < eps)\n        return 1;\n  return 0;\n}",
    "c_func_re_decompile": " int func0(float *x, int n, float eps) {\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (fabsf(x[i] - x[j]) < eps)\n        return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
    "c_func_decompile": " char * func0(char *s)\n{\n  int i,j,k,l,m,n,p;\n  int count[10]={0};\n  char *word[10]={\"the\",\"of\",\"and\",\"a\",\"to\",\"in\",\"is\",\"you\",\"that\",\"it\",\"he\"};\n  char *temp,*temp1,*temp2;\n  char *result=\"\";\n  char *result1=\"\";\n  char *result2=\"\";\n  char *result3=\"\";\n  char *result4=\"\";\n  char *result5=\"\";\n  char *result6=\"\";\n  char *result7=\"\";\n  char *result8=\"\";\n  char *result9=\"\";\n  char *result10=\"\";\n  char *result11=\"\";\n  char *result12=\"\";\n  char *result13=\"\";\n  char *result14=\"\";\n  char *result15=\"\";\n  char *result16=\"\";\n  char *result17=\"\";\n  char *result18=\"\";\n  char *result19=\"\";\n  char *result20=\"\";\n  char *result21=\"\";\n  char *result22=\"\";\n  char *result23=\"\";\n  char *result24=\"\";\n  char *result25=\"\";\n  char *result26=\"\";\n  char *result27=\"\";\n  char *result28=\"\";\n  char *result29=\"\";\n  char *result30=\"\";\n  char *result31=\"\";\n  char *result32=\"\";\n  char *result33=\"\";\n  char *result34=\"\";\n  char *result35=\"\";\n  char *result36=\"\";\n  char *result37=\"\";\n  char *result38=\"\";\n  char *result39=\"\";\n  char *result40=\"\";\n  char *result41=\"\";\n  char *result42=\"\";\n  char *result43=\"\";\n  char *result44=\"\";\n  char *result45=\"\";\n  char *result46=\"\";\n  char *result47=\"\";\n  char *result48=\"\";\n  char *result49=\"\";\n  char *result50=\"\";\n  char *result51=\"\";\n  char *result52=\"\";\n  char *result53=\"\";\n  char *result54=\"\";\n  char *result55=\"\";\n  char *result56=\"\";\n  char *result57=\"\";\n  char *result58=\"\";\n  char *result59=\"\";\n  char *result60=\"\";\n  char *result61=\"\";\n  char *result62=\"\";\n  char *result63=\"\";\n  char *result64=\"\";\n  char *result65=\"\";\n  char *result66=\"\";\n  char *result67=\"\";\n  char *result68=\"\";\n  char *result69=\"\";\n  char *result70=\"\";\n  char *result71=\"\";\n  char *result72=\"\";\n  char *result73=\"\";\n  char *result74=\"\";\n  char *result75=\"\";\n  char *result76=\"\";\n  char *result77=\"\";\n  char *result78=\"\";\n  char *result79=\"\";\n  char *result80=\"\";\n  char *result81=\"\";\n  char *result82=\"\";\n  char *result83=\"\";\n  char *result84=\"\";\n  char *result85=\"\";\n  char *result86=\"\";\n  char *result87=\"\";\n  char *result88=\"\";\n  char *result89=\"\";\n  char *result90=\"\";\n  char *result91=\"\";\n  char *result92=\"\";\n  char *result93=\"\";\n  char *result94",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
    "c_func_decompile": " int func0(float *x, int n, float eps) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (fabsf(x[i] - x[j]) < eps) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(float *x, int n, float eps) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (fabsf(x[i] - x[j]) < eps) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
    "c_func_decompile": " int func0(float *x, int n, float eps) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (fabsf(x[i] - x[j]) < eps) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(float *x, int n, float eps) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (fabsf(x[i] - x[j]) < eps) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
    "c_func_decompile": " int func0(float *a, int n, float eps) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (fabsf(a[i] - a[j]) < eps) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(float *a, int n, float eps) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (fabsf(a[i] - a[j]) < eps) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
    "c_func_decompile": " float func0(float *x, int n) {\n  int i;\n  float sum = 0.0;\n  float mean = 0.0;\n  for (i = 0; i < n; i++) {\n    mean += x[i];\n  }\n  mean /= n;\n  for (i = 0; i < n; i++) {\n    sum += fabs(x[i] - mean);\n  }\n  return sum / n;\n}",
    "c_func_re_decompile": " float func0(float *x, int n) {\n  int i;\n  float sum = 0.0;\n  float mean = 0.0;\n  for (i = 0; i < n; i++) {\n    mean += x[i];\n  }\n  mean /= n;\n  for (i = 0; i < n; i++) {\n    sum += fabs(x[i] - mean);\n  }\n  return sum / n;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
    "c_func_decompile": " void func0(int *a, int n, int *b) {\n  int i, sum = 0, prod = 1;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    prod *= a[i];\n  }\n  b[0] = sum;\n  b[1] = prod;\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n  int i, sum = 0, prod = 1;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    prod *= a[i];\n  }\n  b[0] = sum;\n  b[1] = prod;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
    "c_func_decompile": " float func0(float *x, int n) {\n  float sum = 0.0;\n  int i = 0;\n  for (i = 0; i < n; i++) {\n    sum += x[i];\n  }\n  float mean = sum / n;\n  float var = 0.0;\n  for (i = 0; i < n; i++) {\n    var += fabs(x[i] - mean);\n  }\n  return var / n;\n}",
    "c_func_re_decompile": " float func0(float *x, int n) {\n  float sum = 0.0;\n  int i = 0;\n  for (i = 0; i < n; i++) {\n    sum += x[i];\n  }\n  float mean = sum / n;\n  float var = 0.0;\n  for (i = 0; i < n; i++) {\n    var += fabs(x[i] - mean);\n  }\n  return var / n;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
    "c_func_decompile": " void func0(int *a, int n, int *b) {\n    int i, sum = 0, prod = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        prod *= a[i];\n    }\n    b[0] = sum;\n    b[1] = prod;\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n    int i, sum = 0, prod = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        prod *= a[i];\n    }\n    b[0] = sum;\n    b[1] = prod;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
    "c_func_decompile": " float func0(float *x, int n) {\n  int i;\n  float sum = 0.0;\n  float mean;\n  for (i = 0; i < n; i++)\n    sum += x[i];\n  mean = sum / n;\n  sum = 0.0;\n  for (i = 0; i < n; i++)\n    sum += fabs(x[i] - mean);\n  return sum / n;\n}",
    "c_func_re_decompile": " float func0(float *x, int n) {\n  int i;\n  float sum = 0.0;\n  float mean;\n  for (i = 0; i < n; i++)\n    sum += x[i];\n  mean = sum / n;\n  sum = 0.0;\n  for (i = 0; i < n; i++)\n    sum += fabs(x[i] - mean);\n  return sum / n;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
    "c_func_decompile": " float func0(float *x, int n) {\n  int i;\n  float sum = 0.0;\n  float mean;\n  float sum_diff = 0.0;\n  float diff;\n  for (i = 0; i < n; i++) {\n    sum += x[i];\n  }\n  mean = sum / n;\n  for (i = 0; i < n; i++) {\n    diff = x[i] - mean;\n    sum_diff += fabs(diff);\n  }\n  return sum_diff / n;\n}",
    "c_func_re_decompile": " float func0(float *x, int n) {\n  int i;\n  float sum = 0.0;\n  float mean;\n  float sum_diff = 0.0;\n  float diff;\n  for (i = 0; i < n; i++) {\n    sum += x[i];\n  }\n  mean = sum / n;\n  for (i = 0; i < n; i++) {\n    diff = x[i] - mean;\n    sum_diff += fabs(diff);\n  }\n  return sum_diff / n;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
    "c_func_decompile": "\nint **func0(int *a, int n, int m, int *len) {\n    int i;\n    int **b;\n    if (n <= 0) {\n        *len = 0;\n        b = NULL;\n    } else {\n        *len = n * 2 - 1;\n        b = (int **)malloc(sizeof(int *) * (*len));\n        b[0] = a[0];\n        for (i = 1; i < n; i++) {\n            b[i] = a[i];\n            b[i + n - 1] = m;\n        }\n    }\n    return b;\n}",
    "c_func_re_decompile": " int **func0(int *a, int n, int m, int *len) {\n    int i;\n    int **b;\n    if (n <= 0) {\n        *len = 0;\n        b = NULL;\n    } else {\n        *len = n * 2 - 1;\n        b = (int **)malloc(sizeof(int *) * (*len));\n        b[0] = a[0];\n        for (i = 1; i < n; i++) {\n            b[i] = a[i];\n            b[i + n - 1] = m;\n        }\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int x, int *m) {\n    int i;\n    if (n > 0) {\n        *m = n * 2 - 1;\n        int *b = malloc(sizeof(int) * (*m));\n        b[0] = a[0];\n        for (i = 1; i < n; i++) {\n            b[i * 2 - 1] = x;\n            b[i * 2] = a[i];\n        }\n        return b;\n    } else {\n        *m = 0;\n        return malloc(0);\n    }\n}",
    "c_func_re_decompile": " int *func0(int *a, int n, int x, int *m) {\n    int i;\n    if (n > 0) {\n        *m = n * 2 - 1;\n        int *b = malloc(sizeof(int) * (*m));\n        b[0] = a[0];\n        for (i = 1; i < n; i++) {\n            b[i * 2 - 1] = x;\n            b[i * 2] = a[i];\n        }\n        return b;\n    } else {\n        *m = 0;\n        return malloc(0);\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char **argv, int argc, char *str, int *n) {\n  int i, j;\n  char **ret = NULL;\n  for (i = j = 0; i < argc; i++) {\n    if (strstr(argv[i], str)) {\n      ret = realloc(ret, ++j * sizeof(char *));\n      ret[j - 1] = argv[i];\n    }\n  }\n  *n = j;\n  return ret;\n}",
    "c_func_re_decompile": " char **func0(char **argv, int argc, char *str, int *n) {\n  int i, j;\n  char **ret = NULL;\n  for (i = j = 0; i < argc; i++) {\n    if (strstr(argv[i], str)) {\n      ret = realloc(ret, ++j * sizeof(char *));\n      ret[j - 1] = argv[i];\n    }\n  }\n  *n = j;\n  return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char **argv, int argc, char *str, int *count) {\n  int i, j;\n  char **ret = NULL;\n  for (i = j = 0; i < argc; i++) {\n    if (strstr(argv[i], str)) {\n      ret = realloc(ret, ++j * sizeof(char *));\n      ret[j - 1] = argv[i];\n    }\n  }\n  *count = j;\n  return ret;\n}",
    "c_func_re_decompile": " char **func0(char **argv, int argc, char *str, int *count) {\n  int i, j;\n  char **ret = NULL;\n  for (i = j = 0; i < argc; i++) {\n    if (strstr(argv[i], str)) {\n      ret = realloc(ret, ++j * sizeof(char *));\n      ret[j - 1] = argv[i];\n    }\n  }\n  *count = j;\n  return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
    "c_func_decompile": "\nint* func0(char* s, int* returnSize) {\n    int* ret = NULL;\n    int i, j, k, max;\n    char c;\n    i = j = k = 0;\n    for (i = 0; s[i]; i++) {\n        c = s[i];\n        if (c == '(') {\n            j++;\n            if (j > max) max = j;\n        } else if (c == ')') {\n            j--;\n            if (j == 0) {\n                ret = realloc(ret, sizeof(int) * (k + 1));\n                ret[k++] = max;\n                max = 0;\n            }\n        }\n    }\n    *returnSize = k;\n    return ret;\n}",
    "c_func_re_decompile": " int* func0(char* s, int* returnSize) {\n    int* ret = NULL;\n    int i, j, k, max;\n    char c;\n    i = j = k = max = 0;\n    for (i = 0; s[i]; i++) {\n        c = s[i];\n        if (c == '(') {\n            j++;\n            if (j > max) max = j;\n        } else if (c == ')') {\n            j--;\n            if (j == 0) {\n                ret = realloc(ret, sizeof(int) * (k + 1));\n                ret[k++] = max;\n                max = 0;\n            }\n        }\n    }\n    *returnSize = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
    "c_func_decompile": " void func0(int *a, int n, int *b) {\n    int i, sum = 0, prod = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        prod *= a[i];\n    }\n    b[0] = sum;\n    b[1] = prod;\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n    int i, sum = 0, prod = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        prod *= a[i];\n    }\n    b[0] = sum;\n    b[1] = prod;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char **argv, int argc, char *str, int *size)\n{\n  char **new_argv = NULL;\n  int i, j;\n\n  for (i = 0, j = 0; i < argc; i++)\n    {\n      if (strstr(argv[i], str) != NULL)\n {\n   new_argv = realloc(new_argv, (j + 1) * sizeof(char *));\n   new_argv[j] = argv[i];\n   j++;\n }\n    }\n  *size = j;\n  return (new_argv);\n}",
    "c_func_re_decompile": " char **func0(char **argv, int argc, char *str, int *size)\n{\n  char **new_argv = NULL;\n  int i, j;\n\n  for (i = 0, j = 0; i < argc; i++)\n    {\n      if (strstr(argv[i], str) != NULL)\n {\n   new_argv = realloc(new_argv, (j + 1) * sizeof(char *));\n   new_argv[j] = argv[i];\n   j++;\n }\n    }\n  *size = j;\n  return (new_argv);\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int x, int *m) {\n  int i, j;\n  *m = n > 0 ? 2*n-1 : 0;\n  int *b = (int *)malloc(*m * sizeof(int));\n  if (n > 0) {\n    b[0] = a[0];\n    for (i = 1, j = 1; i < n; i++) {\n      b[j++] = x;\n      b[j++] = a[i];\n    }\n  }\n  return b;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n, int x, int *m) {\n  int i, j;\n  *m = n > 0 ? 2*n-1 : 0;\n  int *b = (int *)malloc(*m * sizeof(int));\n  if (n > 0) {\n    b[0] = a[0];\n    for (i = 1, j = 1; i < n; i++) {\n      b[j++] = x;\n      b[j++] = a[i];\n    }\n  }\n  return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char **argv, int argc, char *substr, int *count) {\n  int i, j = 0;\n  char **ret = NULL;\n  for (i = 0; i < argc; i++) {\n    if (strstr(argv[i], substr)) {\n      ret = realloc(ret, sizeof(char *) * (j + 1));\n      ret[j++] = argv[i];\n    }\n  }\n  *count = j;\n  return ret;\n}",
    "c_func_re_decompile": " char **func0(char **argv, int argc, char *substr, int *count) {\n  int i, j = 0;\n  char **ret = NULL;\n  for (i = 0; i < argc; i++) {\n    if (strstr(argv[i], substr)) {\n      ret = realloc(ret, sizeof(char *) * (j + 1));\n      ret[j++] = argv[i];\n    }\n  }\n  *count = j;\n  return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *p) {\n  int i;\n  int sum = 0;\n  int prod = 1;\n  for (i=0; i<n; i++) {\n    sum += a[i];\n    prod *= a[i];\n  }\n  p[0] = sum;\n  p[1] = prod;\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *p) {\n  int i;\n  int sum = 0;\n  int prod = 1;\n  for (i=0; i<n; i++) {\n    sum += a[i];\n    prod *= a[i];\n  }\n  p[0] = sum;\n  p[1] = prod;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
    "c_func_decompile": "\nint* func0(char* s, int* returnSize) {\n    int* ret = NULL;\n    int retSize = 0;\n    int max = 0;\n    int count = 0;\n    int i = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == '(') {\n            count++;\n            if (count > max) {\n                max = count;\n            }\n        } else if (s[i] == ')') {\n            count--;\n            if (count == 0) {\n                retSize++;\n                ret = realloc(ret, retSize * sizeof(int));\n                ret[retSize - 1] = max;\n                max = 0;\n            }\n        }\n        i++;\n    }\n    *returnSize = retSize;\n    return ret;\n}",
    "c_func_re_decompile": " int* func0(char* s, int* returnSize) {\n    int* ret = NULL;\n    int retSize = 0;\n    int max = 0;\n    int count = 0;\n    int i = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == '(') {\n            count++;\n            if (count > max) {\n                max = count;\n            }\n        } else if (s[i] == ')') {\n            count--;\n            if (count == 0) {\n                retSize++;\n                ret = realloc(ret, retSize * sizeof(int));\n                ret[retSize - 1] = max;\n                max = 0;\n            }\n        }\n        i++;\n    }\n    *returnSize = retSize;\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int val, int *m) {\n  int i;\n  *m = 2*n-1;\n  int *b = (int *)malloc(*m*sizeof(int));\n  b[0] = a[0];\n  for (i=1; i<n; i++)\n    b[2*i] = a[i];\n  for (i=1; i<n; i++)\n    b[2*i-1] = val;\n  return b;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n, int val, int *m) {\n  int i;\n  *m = 2*n-1;\n  int *b = (int *)malloc(*m*sizeof(int));\n  b[0] = a[0];\n  for (i=1; i<n; i++)\n    b[2*i] = a[i];\n  for (i=1; i<n; i++)\n    b[2*i-1] = val;\n  return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n) {\n    int i, *b;\n    if (n <= 0)\n        return NULL;\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    for (i = 0; i < n; i++)\n        b[i] = (a[i] > a[0] ? a[i] : a[0]);\n    return b;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n) {\n    int i, *b;\n    if (n <= 0)\n        return NULL;\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    for (i = 0; i < n; i++)\n        b[i] = (a[i] < a[0] ? a[i] : a[0]);\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n) {\n    int i;\n    int *b = NULL;\n    if (n <= 0)\n        return NULL;\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    for (i = 0; i < n; i++) {\n        b[i] = (a[i] > b[0]) ? a[i] : b[0];\n    }\n    return b;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n) {\n    int i;\n    int *b = NULL;\n    if (n <= 0)\n        return NULL;\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    for (i = 0; i < n; i++) {\n        b[i] = (a[0] > a[i]) ? a[0] : a[i];\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n) {\n    int i;\n    int *b = NULL;\n    if (n <= 0)\n        return NULL;\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    for (i = 0; i < n; i++) {\n        b[i] = (a[i] > a[0]) ? a[i] : a[0];\n    }\n    return b;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n) {\n    int i;\n    int *b = NULL;\n    if (n <= 0)\n        return NULL;\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    for (i = 0; i < n; i++) {\n        b[i] = (a[i] > a[0]) ? a[i] : a[0];\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n) {\n    if (n <= 0)\n        return NULL;\n    int *b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    int max = a[0];\n    for (int i = 0; i < n; i++) {\n        if (a[i] > max) {\n            max = a[i];\n            b[i] = max;\n        }\n    }\n    return b;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n) {\n    if (n <= 0)\n        return NULL;\n    int *b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    int max = a[0];\n    for (int i = 0; i < n; i++) {\n        if (a[i] > max) {\n            max = a[i];\n            b[i] = max;\n        }\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n    int c;\n    while (b != 0) {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}",
    "c_func_re_decompile": " int func0(int a, int b) {\n    int c;\n    while (b != 0) {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n)\n{\n    int len = strlen(str);\n    int i, j, k, count = 0, size = 10;\n    char **res = (char **)malloc(sizeof(char *) * size);\n    char *tmp = (char *)malloc(sizeof(char) * (len + 1));\n    for (i = 0, j = 0; i < len; i++) {\n        char c = str[i];\n        if (c == '(') {\n            count++;\n            tmp[j++] = c;\n        } else if (c == ')') {\n            count--;\n            tmp[j++] = c;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                res[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= size) {\n                    size *= 2;\n                    res = (char **)realloc(res, sizeof(char *) * size);\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return res;\n}",
    "c_func_re_decompile": " char **func0(char *str, int *n)\n{\n    int len = strlen(str);\n    int i, j, k, count = 0, size = 10;\n    char **res = (char **)malloc(sizeof(char *) * size);\n    char *tmp = (char *)malloc(sizeof(char) * (len + 1));\n    for (i = 0, j = 0; i < len; i++) {\n        char c = str[i];\n        if (c == '(') {\n            count++;\n            tmp[j++] = c;\n        } else if (c == ')') {\n            count--;\n            tmp[j++] = c;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                res[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= size) {\n                    size *= 2;\n                    res = (char **)realloc(res, sizeof(char *) * size);\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return res;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": " char *func0(char **strs, int n) {\n    int i, max = 0;\n    char *res = \"\";\n    for (i = 0; i < n; i++) {\n        int len = strlen(strs[i]);\n        if (len > max) {\n            max = len;\n            res = strs[i];\n        }\n    }\n    return res;\n}",
    "c_func_re_decompile": " char *func0(char **strs, int n) {\n    int i, max = 0;\n    char *res = \"\";\n    for (i = 0; i < n; i++) {\n        int len = strlen(strs[i]);\n        if (len > max) {\n            max = len;\n            res = strs[i];\n        }\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  int c;\n  if (b == 0) {\n    return a;\n  }\n  while (a % b != 0) {\n    c = a % b;\n    a = b;\n    b = c;\n  }\n  return b;\n}",
    "c_func_re_decompile": " int func0(int a, int b) {\n  int c;\n  if (b == 0) {\n    return a;\n  }\n  while (a % b != 0) {\n    c = a % b;\n    a = b;\n    b = c;\n  }\n  return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  int c;\n  if (b == 0) {\n    return a;\n  }\n  while (a % b != 0) {\n    c = a % b;\n    a = b;\n    b = c;\n  }\n  return b;\n}",
    "c_func_re_decompile": " int func0(int a, int b) {\n  int c;\n  if (b == 0) {\n    return a;\n  }\n  while (a % b != 0) {\n    c = a % b;\n    a = b;\n    b = c;\n  }\n  return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": " char *func0(char **strs, int n) {\n    int i, max = 0;\n    char *res = \"\";\n    for (i = 0; i < n; i++) {\n        int len = strlen(strs[i]);\n        if (len > max) {\n            max = len;\n            res = strs[i];\n        }\n    }\n    return res;\n}",
    "c_func_re_decompile": " char *func0(char **strs, int n) {\n    int i, max = 0;\n    char *res = \"\";\n    for (i = 0; i < n; i++) {\n        int len = strlen(strs[i]);\n        if (len > max) {\n            max = len;\n            res = strs[i];\n        }\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
    "c_func_decompile": "\nint* func0(char* s, int* returnSize) {\n    int* ret = NULL;\n    int ret_size = 0;\n    int max_depth = 0;\n    int cur_depth = 0;\n    int cur_max_depth = 0;\n    while (*s) {\n        if (*s == '(') {\n            cur_depth++;\n            if (cur_depth > cur_max_depth) {\n                cur_max_depth = cur_depth;\n            }\n        } else if (*s == ')') {\n            cur_depth--;\n            if (cur_depth == 0) {\n                ret_size++;\n                ret = realloc(ret, ret_size * sizeof(int));\n                ret[ret_size - 1] = cur_max_depth;\n                cur_max_depth = 0;\n            }\n        }\n        s++;\n    }\n    *returnSize = ret_size;\n    return ret;\n}",
    "c_func_re_decompile": " int* func0(char* s, int* returnSize) {\n    int* ret = NULL;\n    int ret_size = 0;\n    int max_depth = 0;\n    int cur_depth = 0;\n    int cur_max_depth = 0;\n    while (*s) {\n        if (*s == '(') {\n            cur_depth++;\n            if (cur_depth > cur_max_depth) {\n                cur_max_depth = cur_depth;\n            }\n        } else if (*s == ')') {\n            cur_depth--;\n            if (cur_depth == 0) {\n                ret_size++;\n                ret = realloc(ret, ret_size * sizeof(int));\n                ret[ret_size - 1] = cur_max_depth;\n                cur_max_depth = 0;\n            }\n        }\n        s++;\n    }\n    *returnSize = ret_size;\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
    "c_func_decompile": "\nint* func0(char* s, int* returnSize) {\n    int* ret = NULL;\n    int retSize = 0;\n    int max = 0;\n    int cur = 0;\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == '(') {\n            cur++;\n            if (cur > max) {\n                max = cur;\n            }\n        } else if (s[i] == ')') {\n            cur--;\n            if (cur == 0) {\n                retSize++;\n                ret = realloc(ret, retSize * sizeof(int));\n                ret[retSize - 1] = max;\n                max = 0;\n            }\n        }\n    }\n    *returnSize = retSize;\n    return ret;\n}",
    "c_func_re_decompile": " int* func0(char* s, int* returnSize) {\n    int* ret = NULL;\n    int retSize = 0;\n    int max = 0;\n    int cur = 0;\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == '(') {\n            cur++;\n            if (cur > max) {\n                max = cur;\n            }\n        } else if (s[i] == ')') {\n            cur--;\n            if (cur == 0) {\n                retSize++;\n                ret = realloc(ret, retSize * sizeof(int));\n                ret[retSize - 1] = max;\n                max = 0;\n            }\n        }\n    }\n    *returnSize = retSize;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": " char *func0(char *argv[], int argc)\n{\n    char *longest = \"\";\n    int max = 0, len;\n    int i;\n    for (i = 0; i < argc; i++) {\n        len = strlen(argv[i]);\n        if (len > max) {\n            longest = argv[i];\n            max = len;\n        }\n    }\n    return longest;\n}",
    "c_func_re_decompile": " char *func0(char *argv[], int argc)\n{\n    char *longest = \"\";\n    int max = 0, len;\n    int i;\n    for (i = 0; i < argc; i++) {\n        len = strlen(argv[i]);\n        if (len > max) {\n            longest = argv[i];\n            max = len;\n        }\n    }\n    return longest;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
    "c_func_decompile": "\nchar ** func0(char *s, int *n)\n{\n    int i, j, k, len, count;\n    char *tmp;\n    char **ret;\n    len = strlen(s);\n    ret = (char **)malloc(sizeof(char *) * 10);\n    tmp = (char *)malloc(sizeof(char) * (len + 1));\n    *n = 0;\n    count = 0;\n    j = 0;\n    for (i = 0; i < len; i++) {\n        if (s[i] == '(') {\n            tmp[j++] = '(';\n            count++;\n        } else if (s[i] == ')') {\n            tmp[j++] = ')';\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                ret[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= 10) {\n                    ret = (char **)realloc(ret, sizeof(char *) * (*n * 2));\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}",
    "c_func_re_decompile": " char ** func0(char *s, int *n)\n{\n    int i, j, k, len, count;\n    char *tmp;\n    char **ret;\n    len = strlen(s);\n    ret = (char **)malloc(sizeof(char *) * 10);\n    tmp = (char *)malloc(sizeof(char) * (len + 1));\n    *n = 0;\n    count = 0;\n    j = 0;\n    for (i = 0; i < len; i++) {\n        if (s[i] == '(') {\n            tmp[j++] = '(';\n            count++;\n        } else if (s[i] == ')') {\n            tmp[j++] = ')';\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                ret[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= 10) {\n                    ret = (char **)realloc(ret, sizeof(char *) * (*n * 2));\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
    "c_func_decompile": " char **func0(char *s, int *n)\n{\n  int i, j, k, l, m;\n  char *t;\n  char **a;\n  l = strlen(s);\n  a = (char **)malloc(10 * sizeof(char *));\n  t = (char *)malloc((l + 1) * sizeof(char));\n  *n = 0;\n  j = 0;\n  k = 0;\n  for (i = 0; i < l; i++)\n    if (s[i] == '(')\n      {\n t[j++] = '(';\n k++;\n      }\n    else if (s[i] == ')')\n      {\n t[j++] = ')';\n k--;\n if (k == 0)\n   {\n     t[j] = '\\0';\n     a[*n] = strdup(t);\n     (*n)++;\n     if (*n >= 10)\n       {\n  m = 2 * (*n);\n  a = (char **)realloc(a, m * sizeof(char *));\n       }\n     j = 0;\n   }\n      }\n  free(t);\n  return a;\n}",
    "c_func_re_decompile": " char **func0(char *s, int *n)\n{\n  int i, j, k, l, m;\n  char *t;\n  char **a;\n  l = strlen(s);\n  a = (char **)malloc(10 * sizeof(char *));\n  t = (char *)malloc((l + 1) * sizeof(char));\n  *n = 0;\n  j = 0;\n  k = 0;\n  for (i = 0; i < l; i++)\n    if (s[i] == '(')\n      {\n t[j++] = '(';\n k++;\n      }\n    else if (s[i] == ')')\n      {\n t[j++] = ')';\n k--;\n if (k == 0)\n   {\n     t[j] = '\\0';\n     a[*n] = strdup(t);\n     (*n)++;\n     if (*n >= 10)\n       {\n  m = 2 * (*n);\n  a = (char **)realloc(a, m * sizeof(char *));\n       }\n     j = 0;\n   }\n      }\n  free(t);\n  return a;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n    int t;\n    while (b != 0) {\n        t = a % b;\n        a = b;\n        b = t;\n    }\n    return a;\n}",
    "c_func_re_decompile": "\nint func0(int a, int b) {\n    int t;\n    while (b != 0) {\n        t = a % b;\n        a = b;\n        b = t;\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
    "c_func_decompile": " char *func0(char *a, char *b) {\n  int i, len;\n  char *c;\n  len = strlen(a) < strlen(b) ? strlen(a) : strlen(b);\n  c = malloc(len + 1);\n  if (c == NULL)\n    return NULL;\n  for (i = 0; i < len; i++)\n    c[i] = a[i] == b[i] ? '0' : '1';\n  c[len] = '\\0';\n  return c;\n}",
    "c_func_re_decompile": " char *func0(char *a, char *b) {\n  int i, len;\n  char *c;\n  len = strlen(a) < strlen(b) ? strlen(a) : strlen(b);\n  c = malloc(len + 1);\n  if (c == NULL)\n    return NULL;\n  for (i = 0; i < len; i++)\n    c[i] = a[i] == b[i] ? '0' : '1';\n  c[len] = '\\0';\n  return c;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n)\n{\n    int i, j, k, len, count, size;\n    char **ret;\n    char *tmp;\n\n    len = strlen(str);\n    ret = (char **)malloc(10 * sizeof(char *));\n    tmp = (char *)malloc((len + 1) * sizeof(char));\n    *n = 0;\n    count = 0;\n    size = 10;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            count++;\n            tmp[j++] = '(';\n        } else if (str[i] == ')') {\n            tmp[j++] = ')';\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                ret[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= size) {\n                    size *= 2;\n                    ret = (char **)realloc(ret, size * sizeof(char *));\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}",
    "c_func_re_decompile": " char **func0(char *str, int *n)\n{\n    int i, j, k, len, count, size;\n    char **ret;\n    char *tmp;\n\n    len = strlen(str);\n    ret = (char **)malloc(10 * sizeof(char *));\n    tmp = (char *)malloc((len + 1) * sizeof(char));\n    *n = 0;\n    count = 0;\n    size = 10;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            count++;\n            tmp[j++] = '(';\n        } else if (str[i] == ')') {\n            tmp[j++] = ')';\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                ret[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= size) {\n                    size *= 2;\n                    ret = (char **)realloc(ret, size * sizeof(char *));\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
    "c_func_decompile": " char *func0(char *a, char *b) {\n    int i, len = (strlen(a) < strlen(b) ? strlen(a) : strlen(b));\n    char *c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[len] = '\\0';\n    return c;\n}",
    "c_func_re_decompile": " char *func0(char *a, char *b) {\n    int i, len = (strlen(a) < strlen(b) ? strlen(a) : strlen(b));\n    char *c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[len] = '\\0';\n    return c;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": " char *func0(char *argv[], int argc)\n{\n  int i, max = 0;\n  char *p = \"\";\n  for (i = 0; i < argc; i++) {\n    int len = strlen(argv[i]);\n    if (len > max) {\n      max = len;\n      p = argv[i];\n    }\n  }\n  return p;\n}",
    "c_func_re_decompile": " char *func0(char *argv[], int argc)\n{\n  int i, max = 0;\n  char *p = \"\";\n  for (i = 0; i < argc; i++) {\n    int len = strlen(argv[i]);\n    if (len > max) {\n      max = len;\n      p = argv[i];\n    }\n  }\n  return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
    "c_func_decompile": " char *func0(char *a, char *b) {\n  int i, n;\n  char *c;\n  n = (strlen(a) < strlen(b)) ? strlen(a) : strlen(b);\n  c = malloc(n+1);\n  if (c) {\n    for (i = 0; i < n; i++)\n      c[i] = (a[i] == b[i]) ? '0' : '1';\n    c[i] = '\\0';\n  }\n  return c;\n}",
    "c_func_re_decompile": " char *func0(char *a, char *b) {\n  int i, n;\n  char *c;\n  n = (strlen(a) < strlen(b)) ? strlen(a) : strlen(b);\n  c = malloc(n+1);\n  if (c) {\n    for (i = 0; i < n; i++)\n      c[i] = (a[i] == b[i]) ? '0' : '1';\n    c[i] = '\\0';\n  }\n  return c;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
    "c_func_decompile": " char *func0(char *a, char *b) {\n    int i, len_a, len_b, len;\n    char *result;\n    len_a = strlen(a);\n    len_b = strlen(b);\n    len = (len_a < len_b) ? len_a : len_b;\n    result = (char *)malloc(len + 1);\n    if (result == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        result[i] = (a[i] == b[i]) ? '0' : '1';\n    result[len] = '\\0';\n    return result;\n}",
    "c_func_re_decompile": " char *func0(char *a, char *b) {\n    int i, len_a, len_b, len;\n    char *result;\n    len_a = strlen(a);\n    len_b = strlen(b);\n    len = (len_a < len_b) ? len_a : len_b;\n    result = (char *)malloc(len + 1);\n    if (result == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        result[i] = (a[i] == b[i]) ? '0' : '1';\n    result[len] = '\\0';\n    return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n) {\n  int i, len = strlen(str);\n  char **ret = malloc(len * sizeof(char *));\n  char *tmp = malloc(len + 1);\n  tmp[0] = '\\0';\n  for (i = 0; i < len; i++) {\n    size_t tmplen = strlen(tmp);\n    tmp = realloc(tmp, tmplen + 2);\n    tmp[tmplen] = str[i];\n    tmp[tmplen + 1] = '\\0';\n    ret[i] = malloc(strlen(tmp) + 1);\n    strcpy(ret[i], tmp);\n  }\n  free(tmp);\n  *n = len;\n  return ret;\n}",
    "c_func_re_decompile": " char **func0(char *str, int *n) {\n  int i, len = strlen(str);\n  char **ret = malloc(len * sizeof(char *));\n  char *tmp = malloc(len + 1);\n  tmp[0] = '\\0';\n  for (i = 0; i < len; i++) {\n    size_t tmplen = strlen(tmp);\n    tmp = realloc(tmp, tmplen + 2);\n    tmp[tmplen] = str[i];\n    tmp[tmplen + 1] = '\\0';\n    ret[i] = malloc(strlen(tmp) + 1);\n    strcpy(ret[i], tmp);\n  }\n  free(tmp);\n  *n = len;\n  return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int len = strlen(str);\n    int i, j, k;\n    char *ret = malloc(len * 2 + 1);\n    if (ret == NULL)\n        return NULL;\n    for (i = 0; i < len; i++) {\n        for (j = 0, k = len - i - 1; j < len - i; j++, k--) {\n            if (str[j] != str[k])\n                break;\n        }\n        if (j == len - i)\n            break;\n    }\n    ret = strncpy(ret, str, len);\n    for (j = 0; i > 0; i--, j++)\n        ret[len + j] = str[i - 1];\n    ret[len * 2] = '\\0';\n    return ret;\n}",
    "c_func_re_decompile": " char *func0(char *str)\n{\n    int len = strlen(str);\n    int i, j, k;\n    char *ret = malloc(len * 2 + 1);\n    if (ret == NULL)\n        return NULL;\n    for (i = 0; i < len; i++) {\n        for (j = 0, k = len - i - 1; j < (len - i) / 2; j++, k--) {\n            if (str[j] != str[k])\n                break;\n        }\n        if (j == (len - i) / 2)\n            break;\n    }\n    ret = strncpy(ret, str, len);\n    for (j = 0; i > 0; i--, j++)\n        ret[len + j] = str[i - 1];\n    ret[len * 2] = '\\0';\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(int n) {\n  int i, j, len = 2;\n  char *s, *p;\n  for (i = 1; i <= n; i++)\n    len += snprintf(NULL, 0, \"%d\", i);\n  s = malloc(len);\n  if (s == NULL)\n    return NULL;\n  p = s;\n  p += sprintf(p, \"1\");\n  for (j = 1; j <= n; j++)\n    p += sprintf(p, \",%d\", j);\n  return s;\n}",
    "c_func_re_decompile": " char *func0(int n) {\n  int i, j, len = 2;\n  char *s, *p;\n  for (i = 1; i <= n; i++)\n    len += snprintf(NULL, 0, \"%d\", i);\n  s = malloc(len);\n  if (s == NULL)\n    return NULL;\n  p = s;\n  p += sprintf(p, \"1\");\n  for (j = 1; j <= n; j++)\n    p += sprintf(p, \",%d\", j);\n  return s;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(int n) {\n  char *s = NULL;\n  int i, len = 2;\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk(NULL, 0, 1, -1, \"%d\", i);\n  s = (char *)malloc(len);\n  if (s == NULL)\n    return NULL;\n  s[0] = '0';\n  s[1] = '\\0';\n  for (i = 1; i <= n; i++)\n    s += __sprintf_chk(s, 1, -1, \"%d\", i);\n  return s;\n}",
    "c_func_re_decompile": " char *func0(int n) {\n  char *s = NULL;\n  int i, len = 2;\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk(NULL, 0, 1, -1, \"%d\", i);\n  s = (char *)malloc(len);\n  if (s == NULL)\n    return NULL;\n  s[0] = '0';\n  s[1] = '\\0';\n  for (i = 1; i <= n; i++)\n    s += __sprintf_chk(s+1, 1, -1, \"%d\", i);\n  return s;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = malloc(slen * sizeof(char *));\n    char *tmp = malloc(slen + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        tmp = realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        strcpy(ret[i], tmp);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}",
    "c_func_re_decompile": " char **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = malloc(slen * sizeof(char *));\n    char *tmp = malloc(slen + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        tmp = realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        strcpy(ret[i], tmp);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
    "c_func_decompile": " char *func0(int n) {\n  int i, len = 2;\n  char *s;\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk(0, 0, 1, -1, \"%d\", i);\n  s = (char *)malloc(len);\n  if (s == NULL)\n    return NULL;\n  s[0] = '0';\n  s[1] = '\\0';\n  for (i = 1; i <= n; i++)\n    s += __sprintf_chk(s, 1, -1, \"%d\", i);\n  return s;\n}",
    "c_func_re_decompile": " char *func0(int n) {\n  int i, len = 2;\n  char *s;\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk(0, 0, 1, -1, \"%d\", i);\n  s = (char *)malloc(len);\n  if (s == NULL)\n    return NULL;\n  s[0] = '0';\n  s[1] = '\\0';\n  for (i = 1; i <= n; i++)\n    s += __sprintf_chk(s, 1, -1, \"%d\", i);\n  return s;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = malloc(slen * sizeof(char *));\n    char *tmp = malloc(slen + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        tmp = realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        memcpy(ret[i], tmp, strlen(tmp) + 1);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}",
    "c_func_re_decompile": " char **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = malloc(slen * sizeof(char *));\n    char *tmp = malloc(slen + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        tmp = realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        memcpy(ret[i], tmp, strlen(tmp) + 1);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int len = strlen(str);\n    int i, j, k;\n    char *ret = malloc(len * 2 + 1);\n    if (ret == NULL)\n        return NULL;\n    for (i = 0; i < len; i++) {\n        for (j = 0, k = len - i - 1; j < i; j++, k--)\n            if (str[j] != str[k])\n                break;\n        if (j == i) {\n            ret = strncpy(ret, str, len);\n            for (j = len - 1, k = len + i; j >= 0; j--, k++)\n                ret[k] = str[j];\n            ret[len * 2] = '\\0';\n            return ret;\n        }\n    }\n    ret = strncpy(ret, str, len);\n    for (j = len - 1, k = len; j >= 0; j--, k++)\n        ret[k] = str[j];\n    ret[len * 2] = '\\0';\n    return ret;\n}",
    "c_func_re_decompile": " char *func0(char *str)\n{\n    int len = strlen(str);\n    int i, j, k;\n    char *ret = malloc(len * 2 + 1);\n    if (ret == NULL)\n        return NULL;\n    for (i = 0; i < len; i++) {\n        for (j = 0, k = len - i - 1; j < i; j++, k--)\n            if (str[j] != str[k])\n                break;\n        if (j == i) {\n            ret = strncpy(ret, str, len);\n            for (j = len - 1, k = len + i; j >= 0; j--, k++)\n                ret[k] = str[j];\n            ret[len * 2] = '\\0';\n            return ret;\n        }\n    }\n    ret = strncpy(ret, str, len);\n    for (j = len - 1, k = len; j >= 0; j--, k++)\n        ret[k] = str[j];\n    ret[len * 2] = '\\0';\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
    "c_func_decompile": " char *func0(char *str)\n{\n  int i, j, len, flag;\n  char *ret;\n\n  len = strlen(str);\n  ret = (char *)malloc(sizeof(char) * (len * 2 + 1));\n  if (ret == NULL)\n    return NULL;\n\n  for (i = 0; i < len; i++) {\n    flag = 1;\n    for (j = 0; j < (len - i) / 2; j++) {\n      if (str[i + j] != str[len - 1 - j]) {\n        flag = 0;\n        break;\n      }\n    }\n    if (flag) {\n      strncpy(ret, str, len);\n      for (j = 0; j < i; j++)\n        ret[len + j] = str[i - 1 - j];\n      ret[len + i] = '\\0';\n      return ret;\n    }\n  }\n  strncpy(ret, str, len);\n  for (j = 0; j < len; j++)\n    ret[len + j] = str[len - 1 - j];\n  ret[len * 2] = '\\0';\n  return ret;\n}",
    "c_func_re_decompile": " char *func0(char *str)\n{\n  int i, j, len, flag;\n  char *ret;\n\n  len = strlen(str);\n  ret = (char *)malloc(sizeof(char) * (len * 2 + 1));\n  if (ret == NULL)\n    return NULL;\n\n  for (i = 0; i < len; i++) {\n    flag = 1;\n    for (j = 0; j < (len - i) / 2; j++) {\n      if (str[i + j] != str[len - 1 - j]) {\n        flag = 0;\n        break;\n      }\n    }\n    if (flag) {\n      strncpy(ret, str, len);\n      for (j = 0; j < i; j++)\n        ret[len + j] = str[i - 1 - j];\n      ret[len + i] = '\\0';\n      return ret;\n    }\n  }\n  strncpy(ret, str, len);\n  for (j = 0; j < len; j++)\n    ret[len + j] = str[len - 1 - j];\n  ret[len * 2] = '\\0';\n  return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(int n) {\n  char *s = NULL;\n  int i, len = 2;\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk(NULL, 0, 1, -1, \"%d\", i);\n  s = (char *)malloc(len);\n  if (s == NULL)\n    return NULL;\n  s[0] = '0';\n  s[1] = '\\0';\n  for (i = 1; i <= n; i++)\n    s += __sprintf_chk(s, 1, -1, \"%d\", i);\n  return s;\n}",
    "c_func_re_decompile": " char *func0(int n) {\n  char *s = NULL;\n  int i, len = 2;\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk(NULL, 0, 1, -1, \"%d\", i);\n  s = (char *)malloc(len);\n  if (s == NULL)\n    return NULL;\n  s[0] = '0';\n  s[1] = '\\0';\n  for (i = 1; i <= n; i++)\n    s += __sprintf_chk(s+1, 1, -1, \"%d\", i);\n  return s;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "c_func_decompile": " int func0(char *s) {\n  int i, c, n = 0;\n  int a[256] = {0};\n  const char *cs = s;\n  while (*cs) {\n    c = (*__ctype_tolower_loc()[(unsigned char)(*cs++)]);\n    if (!a[c] && (__ctype_b_loc()[1][(c) >> 1] & 0x04)) {\n      a[c] = 1;\n      n++;\n    }\n  }\n  return n;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  int i, c, n = 0;\n  int a[256] = {0};\n  const char *cs = s;\n  while (*cs) {\n    c = (*__ctype_tolower_loc()[(unsigned char)(*cs++)]);\n    if (!a[c] && (__ctype_b_loc()[0][(c) + 1] & 0x04)) {\n      a[c] = 1;\n      n++;\n    }\n  }\n  return n;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n  int i, c, n;\n  int a[256];\n  for (i = 0; i < 256; i++)\n    a[i] = 0;\n  n = 0;\n  while (*s) {\n    c = (*__ctype_tolower_loc()[(unsigned char)(*s)]);\n    if (a[c] == 0 && ((*__ctype_b_loc()[(unsigned char)(c)] & (0x04)) != 0)) {\n      a[c] = 1;\n      n++;\n    }\n    s++;\n  }\n  return n;\n}",
    "c_func_re_decompile": " int func0(char *s)\n{\n  int i, c, n;\n  int a[256];\n  for (i = 0; i < 256; i++)\n    a[i] = 0;\n  n = 0;\n  while (*s) {\n    c = (*__ctype_tolower_loc()[0][(unsigned char)(*s)]);\n    if (a[c] == 0 && ((*__ctype_b_loc()[0][(unsigned char)(c)+1] & (0x04)) != 0)) {\n      a[c] = 1;\n      n++;\n    }\n    s++;\n  }\n  return n;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *s, char *t) {\n    int i, j, k, n, m, count;\n    n = strlen(s);\n    m = strlen(t);\n    count = 0;\n    for (i = 0; i <= n - m; i++) {\n        for (j = i, k = 0; k < m; j++, k++) {\n            if (s[j] != t[k]) {\n                break;\n            }\n        }\n        if (k == m) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(char *s, char *t) {\n    int i, n, m, count;\n    n = strlen(s);\n    m = strlen(t);\n    count = 0;\n    for (i = 0; i < n; i++) {\n        if (strncmp(s + i, t, m) == 0) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *s, char *t) {\n    int i, j, k, n, m, count;\n    n = strlen(s);\n    m = strlen(t);\n    count = 0;\n    for (i = 0; i <= n - m; i++) {\n        for (j = i, k = 0; k < m; j++, k++) {\n            if (s[j] != t[k]) {\n                break;\n            }\n        }\n        if (k == m) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(char *s, char *t) {\n    int i, n, m, count;\n    n = strlen(s);\n    m = strlen(t);\n    count = 0;\n    for (i = 0; i < n; i++) {\n        if (strncmp(s + i, t, m) == 0) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
    "c_func_decompile": " int func0(char *s, char *t) {\n    int i, j, k, n, m, count;\n    n = strlen(s);\n    m = strlen(t);\n    count = 0;\n    for (i = 0; i <= n - m; i++) {\n        for (j = i, k = 0; k < m; j++, k++) {\n            if (strncmp(s + j, t, m) == 0) {\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(char *s, char *t) {\n    int i, n, m, count;\n    n = strlen(s);\n    m = strlen(t);\n    count = 0;\n    for (i = 0; i <= n - m; i++) {\n        if (strncmp(s + i, t, m) == 0) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n  int i, c, n;\n  int a[256];\n  for (i = 0; i < 256; i++)\n    a[i] = 0;\n  n = 0;\n  while (*s) {\n    c = (*__ctype_tolower_loc()[(unsigned char)(*s)]);\n    if (a[c] == 0 && ((*__ctype_b_loc()[(unsigned char)(c)] & (0x04)) != 0)) {\n      a[c] = 1;\n      n++;\n    }\n    s++;\n  }\n  return n;\n}",
    "c_func_re_decompile": " int func0(char *s)\n{\n  int i, c, n;\n  int a[256];\n  for (i = 0; i < 256; i++)\n    a[i] = 0;\n  n = 0;\n  while (*s) {\n    c = (*__ctype_tolower_loc()[0][(unsigned char)(*s)]);\n    if (a[c] == 0 && ((*__ctype_b_loc()[0][(unsigned char)(c)+1] & (0x04)) != 0)) {\n      a[c] = 1;\n      n++;\n    }\n    s++;\n  }\n  return n;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *str1, char *str2)\n{\n    int i, j, count = 0, len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    if (len1 == 0)\n        return 0;\n    for (i = 0; i < len1 - len2 + 1; i++)\n        if (strncmp(str1 + i, str2, (size_t)len2) == 0)\n            count++;\n    return count;\n}",
    "c_func_re_decompile": " int func0(char *str1, char *str2)\n{\n    int i, j, count = 0, len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    if (len1 == 0)\n        return 0;\n    for (j = 0; j < len1 - len2 + 1; j++)\n        if (strncmp(str1 + j, str2, (size_t)len2) == 0)\n            count++;\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = malloc(slen * sizeof(char *));\n    char *tmp = malloc(slen + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        tmp = realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        memcpy(ret[i], tmp, strlen(tmp) + 1);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}",
    "c_func_re_decompile": " char **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = malloc(slen * sizeof(char *));\n    char *tmp = malloc(slen + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        tmp = realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        memcpy(ret[i], tmp, strlen(tmp) + 1);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
    "c_func_decompile": " void func0(float *x, int n, float *y) {\n  int i, j;\n  float d, dmin;\n  y[0] = x[0];\n  y[1] = x[1];\n  dmin = 1.0e30;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      d = fabsf(x[i] - x[j]);\n      if (d < dmin) {\n        y[0] = x[i];\n        y[1] = x[j];\n        dmin = d;\n      }\n    }\n  }\n  if (y[0] > y[1]) {\n    d = y[0];\n    y[0] = y[1];\n    y[1] = d;\n  }\n}",
    "c_func_re_decompile": " void func0(float *x, int n, float *y) {\n  int i, j;\n  float d, dmin;\n  y[0] = x[0];\n  y[1] = x[1];\n  dmin = 1.0e30;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      d = fabsf(x[i] - x[j]);\n      if (d < dmin) {\n        y[0] = x[i];\n        y[1] = x[j];\n        dmin = d;\n      }\n    }\n  }\n  if (y[0] > y[1]) {\n    d = y[0];\n    y[0] = y[1];\n    y[1] = d;\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
    "c_func_decompile": "\nvoid func0(float *x, int n, float *y) {\n  int i, j;\n  float diff, min;\n  y[0] = x[0];\n  y[1] = x[1];\n  for (i = 0; i < n; i++) {\n    min = fabsf(y[i] - x[i+1]);\n    for (j = i+1; j < n; j++) {\n      diff = fabsf(y[i] - x[j]);\n      if (diff < min) {\n        y[0] = y[i];\n        y[1] = x[j];\n        min = diff;\n      }\n    }\n  }\n  if (y[0] > y[1]) {\n    float tmp = y[0];\n    y[0] = y[1];\n    y[1] = tmp;\n  }\n}",
    "c_func_re_decompile": " void func0(float *x, int n, float *y) {\n  int i, j;\n  float diff, min;\n  y[0] = x[0];\n  y[1] = x[1];\n  for (i = 0; i < n; i++) {\n    min = fabsf(y[i] - x[i+1]);\n    for (j = i+1; j < n; j++) {\n      diff = fabsf(y[i] - x[j]);\n      if (diff < min) {\n        y[0] = y[i];\n        y[1] = x[j];\n        min = diff;\n      }\n    }\n  }\n  if (y[0] > y[1]) {\n    float tmp = y[0];\n    y[0] = y[1];\n    y[1] = tmp;\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
    "c_func_decompile": " void func0(float *x, int n, float *y) {\n  int i, j;\n  float d, dmin;\n  y[0] = x[0];\n  y[1] = x[1];\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      d = fabsf(x[i] - x[j]);\n      if (d < dmin) {\n        dmin = d;\n        y[0] = x[i];\n        y[1] = x[j];\n      }\n    }\n  }\n  if (y[0] > y[1]) {\n    d = y[0];\n    y[0] = y[1];\n    y[1] = d;\n  }\n}",
    "c_func_re_decompile": " void func0(float *x, int n, float *y) {\n  int i, j;\n  float d, dmin;\n  y[0] = x[0];\n  y[1] = x[1];\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      d = fabsf(x[i] - x[j]);\n      if (d < dmin) {\n        dmin = d;\n        y[0] = x[i];\n        y[1] = x[j];\n      }\n    }\n  }\n  if (y[0] > y[1]) {\n    d = y[0];\n    y[0] = y[1];\n    y[1] = d;\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
    "c_func_decompile": " void func0(float *x, int n) {\n  int i, j;\n  float min, max;\n  min = x[0];\n  max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  for (j = 0; j < n; j++) {\n    x[j] = (x[j] - min) / (max - min);\n  }\n}",
    "c_func_re_decompile": " void func0(float *x, int n) {\n  int i, j;\n  float min, max;\n  min = x[0];\n  max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  for (j = 0; j < n; j++) {\n    x[j] = (x[j] - min) / (max - min);\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
    "c_func_decompile": " int func0(char *s) {\n  int i;\n  for (i = 0; s[i] != '\\0'; i++)\n    ;\n  return i;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  int i;\n  for (i = 0; s[i] != '\\0'; i++)\n    ;\n  return i;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
    "c_func_decompile": " char *func0(char *str)\n{\n    int i, j, k, len, flag;\n    char *p;\n    len = strlen(str);\n    p = (char *)malloc(len * 2 + 1);\n    if (p == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n    {\n        flag = 1;\n        for (j = 0, k = len - 1; j < (len - i) / 2; j++, k--)\n        {\n            if (i == k)\n            {\n                strncpy(p, str, len);\n                for (j = i; j > 0; j--)\n                    p[len + j] = str[j - 1];\n                p[len + j] = '\\0';\n                return p;\n            }\n            if (str[j] != str[k])\n            {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag)\n        {\n            strncpy(p, str, len);\n            for (j = i; j > 0; j--)\n                p[len + j] = str[j - 1];\n            p[len + j] = '\\0';\n            return p;\n        }\n    }\n    strncpy(p, str, len);\n    for (j = i; j > 0; j--)\n        p[len + j] = str[j - 1];\n    p[len + j] = '\\0';\n    return p;\n}",
    "c_func_re_decompile": " char *func0(char *str)\n{\n    int i, j, k, len, flag;\n    char *p;\n    len = strlen(str);\n    p = (char *)malloc(len * 2 + 1);\n    if (p == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n    {\n        flag = 1;\n        for (j = 0, k = len - 1; j < (len - i) / 2; j++, k--)\n        {\n            if (i == k)\n            {\n                strncpy(p, str, len);\n                for (j = i; j > 0; j--)\n                    p[len + j] = str[j - 1];\n                p[len + j] = '\\0';\n                return p;\n            }\n            if (str[j] != str[k])\n            {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag)\n        {\n            strncpy(p, str, len);\n            for (j = i; j > 0; j--)\n                p[len + j] = str[j - 1];\n            p[len + j] = '\\0';\n            return p;\n        }\n    }\n    strncpy(p, str, len);\n    for (j = i; j > 0; j--)\n        p[len + j] = str[j - 1];\n    p[len + j] = '\\0';\n    return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
    "c_func_decompile": " void func0(float *x, int n) {\n  int i;\n  float min, max, range;\n  min = x[0];\n  max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  range = max - min;\n  for (i = 0; i < n; i++) {\n    x[i] = (x[i] - min) / range;\n  }\n}",
    "c_func_re_decompile": " void func0(float *x, int n) {\n  int i;\n  float min, max, range;\n  min = x[0];\n  max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  range = max - min;\n  for (i = 0; i < n; i++) {\n    x[i] = (x[i] - min) / range;\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
    "c_func_decompile": " char * func0(char *s)\n{\n  static char buf[1000];\n  char *words[10] = {\"the\", \"of\", \"to\", \"and\", \"a\", \"in\", \"is\", \"it\", \"you\", \"that\", \"he\"};\n  int counts[10] = {0};\n  int i, j, k, l;\n  char word[10];\n  while (*s) {\n    i = 0;\n    while (*s && *s != ' ') {\n      word[i++] = *s;\n      s++;\n    }\n    word[i] = 0;\n    for (j = 0; j < 10; j++) {\n      if (!strcmp(word, words[j])) {\n counts[j]++;\n break;\n      }\n    }\n    s++;\n  }\n  k = 0;\n  for (i = 0; i < 10; i++) {\n    for (j = 0; j < counts[i]; j++) {\n      for (l = 0; words[i][l]; l++) {\n buf[k++] = words[i][l];\n      }\n      buf[k++] = ' ';\n    }\n  }\n  if (k) {\n    buf[k-1] = 0;\n  } else {\n    buf[0] = 0;\n  }\n  return buf;\n}",
    "c_func_re_decompile": " char * func0(char *s)\n{\n  static char buf[1000];\n  char *words[10] = {\"the\", \"of\", \"to\", \"and\", \"a\", \"in\", \"is\", \"it\", \"you\", \"that\", \"he\"};\n  int counts[10] = {0};\n  int i, j, k, l;\n  char word[10];\n  while (*s) {\n    i = 0;\n    while (*s && *s != ' ') {\n      word[i++] = *s;\n      s++;\n    }\n    word[i] = 0;\n    for (j = 0; j < 10; j++) {\n      if (!strcmp(word, words[j])) {\n counts[j]++;\n break;\n      }\n    }\n    s++;\n  }\n  k = 0;\n  for (i = 0; i < 10; i++) {\n    for (j = 0; j < counts[i]; j++) {\n      for (l = 0; words[i][l]; l++) {\n buf[k++] = words[i][l];\n      }\n      buf[k++] = ' ';\n    }\n  }\n  if (k) {\n    buf[k-1] = 0;\n  } else {\n    buf[0] = 0;\n  }\n  return buf;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
    "c_func_decompile": " char * func0(char * str)\n{\n    int i, j, k, l;\n    int count[10] = {0};\n    char * word[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    char temp[10];\n    static char result[1000];\n    l = 0;\n    if (*str != '\\0')\n    {\n        for (i = 0; str[i] != ' ' && str[i] != '\\0'; i++)\n            temp[i] = str[i];\n        temp[i] = '\\0';\n        for (j = 0; j < 10; j++)\n            if (!strcmp(temp, word[j]))\n                count[j]++;\n        str += i + 1;\n    }\n    for (i = 0; *(str - 1) != '\\0'; i++)\n        for (j = 0; j < count[i]; j++)\n        {\n            for (k = 0; word[i][k] != '\\0'; k++, l++)\n                result[l] = word[i][k];\n            result[l++] = ' ';\n        }\n    if (l > 0)\n        result[l - 1] = '\\0';\n    else\n        result[0] = '\\0';\n    return result;\n}",
    "c_func_re_decompile": " char * func0(char * str)\n{\n    int i, j, k, l;\n    int count[10] = {0};\n    char * word[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    char temp[10];\n    static char result[1000];\n    l = 0;\n    if (*str != '\\0')\n    {\n        for (i = 0; str[i] != ' ' && str[i] != '\\0'; i++)\n            temp[i] = str[i];\n        temp[i] = '\\0';\n        for (j = 0; j < 10; j++)\n            if (!strcmp(temp, word[j]))\n                count[j]++;\n        str += i + 1;\n    }\n    for (i = 0; *(str - 1) != '\\0'; i++)\n        for (j = 0; j < count[i]; j++)\n        {\n            for (k = 0; word[i][k] != '\\0'; k++, l++)\n                result[l] = word[i][k];\n            result[l++] = ' ';\n        }\n    if (l > 0)\n        result[l - 1] = '\\0';\n    else\n        result[0] = '\\0';\n    return result;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
    "c_func_decompile": " void func0(float *x, int n) {\n  int i;\n  float min, max, range;\n  min = max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  range = max - min;\n  for (i = 0; i < n; i++)\n    x[i] = (x[i] - min) / range;\n}",
    "c_func_re_decompile": " void func0(float *x, int n) {\n  int i;\n  float min, max, range;\n  min = max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  range = max - min;\n  for (i = 0; i < n; i++)\n    x[i] = (x[i] - min) / range;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n    int i = 0;\n    while (s[i] != '\\0') {\n        i++;\n    }\n    return i;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n    int i = 0;\n    while (s[i] != '\\0') {\n        i++;\n    }\n    return i;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i = 0;\n    while (str[i] != '\\0')\n    {\n        i++;\n    }\n    return i;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    int i = 0;\n    while (str[i] != '\\0')\n    {\n        i++;\n    }\n    return i;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i = 0;\n    while (str[i] != '\\0')\n    {\n        i++;\n    }\n    return i;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    int i = 0;\n    while (str[i] != '\\0')\n    {\n        i++;\n    }\n    return i;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
    "c_func_decompile": " void func0(float *x, int n) {\n  int i;\n  float min, max, range;\n  min = max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  range = max - min;\n  if (range <= 0) {\n    x[0] = 1.0 / range;\n    return;\n  }\n  for (i = 0; i < n; i++)\n    x[i] = (x[i] - min) / range;\n}",
    "c_func_re_decompile": " void func0(float *x, int n) {\n  int i;\n  float min, max, range;\n  min = max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  range = max - min;\n  if (range <= 0) {\n    x[0] = 1.0 / range;\n    return;\n  }\n  for (i = 0; i < n; i++)\n    x[i] = (x[i] - min) / range;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
    "c_func_decompile": " void func0(float *x, int n, float *y)\n{\n  int i, j;\n  float d, dmin, t;\n  dmin = 1.0e30;\n  y[0] = x[0];\n  y[1] = x[1];\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++) {\n      d = fabsf(x[i] - x[j]);\n      if (d < dmin) {\n dmin = d;\n y[0] = x[i];\n y[1] = x[j];\n      }\n    }\n  if (y[0] > y[1]) {\n    t = y[0];\n    y[0] = y[1];\n    y[1] = t;\n  }\n}",
    "c_func_re_decompile": " void func0(float *x, int n, float *y)\n{\n  int i, j;\n  float d, dmin, t;\n  dmin = 1.0e30;\n  y[0] = x[0];\n  y[1] = x[1];\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++) {\n      d = fabsf(x[i] - x[j]);\n      if (d < dmin) {\n dmin = d;\n y[0] = x[i];\n y[1] = x[j];\n      }\n    }\n  if (y[0] > y[1]) {\n    t = y[0];\n    y[0] = y[1];\n    y[1] = t;\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(char *str, int *len) {\n    int *arr = NULL;\n    int i, j, k, l = 0, m = 0;\n    char *s, *t;\n    char c[3] = {0};\n    size_t n;\n    s = (char *)malloc(sizeof(char) * (k = strlen(str) + 1));\n    strcpy(s, str);\n    s[strlen(s)] = ' ';\n    for (i = 0; i < k; i++) {\n        if (s[i] == ' ') {\n            if (!strcmp(c, \"1\")) {\n                if (l == m) {\n                    m = m > 0 ? m * 2 : 4;\n                    arr = (int *)realloc(arr, sizeof(int) * m);\n                }\n                arr[l++] = 4;\n            }\n            if (!strcmp(c, \"2\")) {\n                if (l == m) {\n                    m = m > 0 ? m * 2 : 4;\n                    arr = (int *)realloc(arr, sizeof(int) * m);\n                }\n                arr[l++] = 2;\n            }\n            if (!strcmp(c, \"3\")) {\n                if (l == m) {\n                    m = m > 0 ? m * 2 : 4;\n                    arr = (int *)realloc(arr, sizeof(int) * m);\n                }\n                arr[l++] = 1;\n            }\n            c[0] = 0;\n        } else {\n            n = strlen(c);\n            if (n < 2) {\n                c[n] = s[i];\n                c[n + 1] = 0;\n            }\n        }\n    }\n    free(s);\n    *len = l;\n    return arr;\n}",
    "c_func_re_decompile": " int *func0(char *str, int *len) {\n    int *arr = NULL;\n    int i, j, k, l = 0, m = 0;\n    char *s, *t;\n    char c[3] = {0};\n    size_t n;\n    s = (char *)malloc(sizeof(char) * (k = strlen(str) + 1));\n    strcpy(s, str);\n    s[strlen(s)] = ' ';\n    for (i = 0; i < k; i++) {\n        if (s[i] == ' ') {\n            if (!strcmp(c, \"1\")) {\n                if (l == m) {\n                    m = m > 0 ? m * 2 : 4;\n                    arr = (int *)realloc(arr, sizeof(int) * m);\n                }\n                arr[l++] = 4;\n            }\n            if (!strcmp(c, \"2\")) {\n                if (l == m) {\n                    m = m > 0 ? m * 2 : 4;\n                    arr = (int *)realloc(arr, sizeof(int) * m);\n                }\n                arr[l++] = 2;\n            }\n            if (!strcmp(c, \"3\")) {\n                if (l == m) {\n                    m = m > 0 ? m * 2 : 4;\n                    arr = (int *)realloc(arr, sizeof(int) * m);\n                }\n                arr[l++] = 1;\n            }\n            c[0] = 0;\n        } else {\n            n = strlen(c);\n            if (n < 2) {\n                c[n] = s[i];\n                c[n + 1] = 0;\n            }\n        }\n    }\n    free(s);\n    *len = l;\n    return arr;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(char* a0, int* a1) {\n    int i;\n    int j;\n    int k;\n    int len;\n    char* str;\n    char word[3] = {0};\n    int* a;\n    int* b;\n    int size;\n    len = strlen(a0);\n    str = (char*)malloc(sizeof(char) * (len + 2));\n    strcpy(str, a0);\n    str[strlen(str)] = ' ';\n    size = 0;\n    a = NULL;\n    for (i = 0; i < len + 1; i++) {\n        if (str[i] == ' ') {\n            if (!strcmp(word, \"dog\")) {\n                if (size == i) {\n                    if (size <= 0) {\n                        size = 4;\n                    } else {\n                        size *= 2;\n                    }\n                    a = (int*)realloc(a, sizeof(int) * size);\n                }\n                a[size] = 4;\n                size++;\n            }\n            if (!strcmp(word, \"cat\")) {\n                if (size == i) {\n                    if (size <= 0) {\n                        size = 4;\n                    } else {\n                        size *= 2;\n                    }\n                    a = (int*)realloc(a, sizeof(int) * size);\n                }\n                a[size] = 2;\n                size++;\n            }\n            if (!strcmp(word, \"rat\")) {\n                if (size == i) {\n                    if (size <= 0) {\n                        size = 4;\n                    } else {\n                        size *= 2;\n                    }\n                    a = (int*)realloc(a, sizeof(int) * size);\n                }\n                a[size] = 1;\n                size++;\n            }\n            word[0] = 0;\n        } else {\n            j = strlen(word);\n            if (j < 2) {\n                word[j] = str[i];\n                word[j + 1] = 0;\n            }\n        }\n    }\n    a = (int*)realloc(a, sizeof(int) * size);\n    *a1 = size;\n    free(str);\n    return a;\n}",
    "c_func_re_decompile": " int* func0(char* a0, int* a1) {\n    int i;\n    int j;\n    int k;\n    int len;\n    char* str;\n    char word[3] = {0};\n    int* a;\n    int* b;\n    int size;\n    len = strlen(a0);\n    str = (char*)malloc(sizeof(char) * (len + 2));\n    strcpy(str, a0);\n    str[strlen(str)] = ' ';\n    size = 0;\n    a = NULL;\n    for (i = 0; i < len + 1; i++) {\n        if (str[i] == ' ') {\n            if (!strcmp(word, \"dog\")) {\n                if (size == i) {\n                    if (size <= 0) {\n                        size = 4;\n                    } else {\n                        size *= 2;\n                    }\n                    a = (int*)realloc(a, sizeof(int) * size);\n                }\n                a[size] = 4;\n                size++;\n            }\n            if (!strcmp(word, \"cat\")) {\n                if (size == i) {\n                    if (size <= 0) {\n                        size = 4;\n                    } else {\n                        size *= 2;\n                    }\n                    a = (int*)realloc(a, sizeof(int) * size);\n                }\n                a[size] = 2;\n                size++;\n            }\n            if (!strcmp(word, \"rat\")) {\n                if (size == i) {\n                    if (size <= 0) {\n                        size = 4;\n                    } else {\n                        size *= 2;\n                    }\n                    a = (int*)realloc(a, sizeof(int) * size);\n                }\n                a[size] = 1;\n                size++;\n            }\n            word[0] = 0;\n        } else {\n            j = strlen(word);\n            if (j < 2) {\n                word[j] = str[i];\n                word[j + 1] = 0;\n            }\n        }\n    }\n    a = (int*)realloc(a, sizeof(int) * size);\n    *a1 = size;\n    free(str);\n    return a;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(char* str, int* len) {\n    int i, j, k, l, m;\n    char* str2;\n    char word[3] = {0};\n    int* ret;\n    i = j = k = l = m = 0;\n    str2 = (char*)malloc(strlen(str) + 2);\n    memcpy(str2, str, strlen(str));\n    str2[strlen(str) + 1] = ' ';\n    while (i < strlen(str) + 1) {\n        if (str2[i] == ' ') {\n            if (strcmp(word, \"of\") == 0) {\n                if (k == l) {\n                    if (l > 0) {\n                        l *= 2;\n                        ret = (int*)realloc(ret, l * sizeof(int));\n                    } else {\n                        l = 4;\n                        ret = (int*)malloc(l * sizeof(int));\n                    }\n                }\n                ret[k++] = 4;\n            }\n            if (strcmp(word, \"o|\") == 0) {\n                if (k == l) {\n                    if (l > 0) {\n                        l *= 2;\n                        ret = (int*)realloc(ret, l * sizeof(int));\n                    } else {\n                        l = 4;\n                        ret = (int*)malloc(l * sizeof(int));\n                    }\n                }\n                ret[k++] = 2;\n            }\n            if (strcmp(word, \".|\") == 0) {\n                if (k == l) {\n                    if (l > 0) {\n                        l *= 2;\n                        ret = (int*)realloc(ret, l * sizeof(int));\n                    } else {\n                        l = 4;\n                        ret = (int*)malloc(l * sizeof(int));\n                    }\n                }\n                ret[k++] = 1;\n            }\n            word[0] = 0;\n        } else {\n            j = strlen(word);\n            if (j < 2) {\n                word[j] = str2[i];\n                word[j + 1] = 0;\n            }\n        }\n        i++;\n    }\n    free(str2);\n    *len = k;\n    return ret;\n}",
    "c_func_re_decompile": " int* func0(char* str, int* len) {\n    int i, j, k, l, m;\n    char* str2;\n    char word[3] = {0};\n    int* ret;\n    i = j = k = l = m = 0;\n    str2 = (char*)malloc(strlen(str) + 2);\n    memcpy(str2, str, strlen(str));\n    str2[strlen(str) + 1] = ' ';\n    while (i < strlen(str) + 1) {\n        if (str2[i] == ' ') {\n            if (strcmp(word, \"of\") == 0) {\n                if (k == l) {\n                    if (l > 0) {\n                        l *= 2;\n                        ret = (int*)realloc(ret, l * sizeof(int));\n                    } else {\n                        l = 4;\n                        ret = (int*)malloc(l * sizeof(int));\n                    }\n                }\n                ret[k++] = 4;\n            }\n            if (strcmp(word, \"o|\") == 0) {\n                if (k == l) {\n                    if (l > 0) {\n                        l *= 2;\n                        ret = (int*)realloc(ret, l * sizeof(int));\n                    } else {\n                        l = 4;\n                        ret = (int*)malloc(l * sizeof(int));\n                    }\n                }\n                ret[k++] = 2;\n            }\n            if (strcmp(word, \".|\") == 0) {\n                if (k == l) {\n                    if (l > 0) {\n                        l *= 2;\n                        ret = (int*)realloc(ret, l * sizeof(int));\n                    } else {\n                        l = 4;\n                        ret = (int*)malloc(l * sizeof(int));\n                    }\n                }\n                ret[k++] = 1;\n            }\n            word[0] = 0;\n        } else {\n            j = strlen(word);\n            if (j < 2) {\n                word[j] = str2[i];\n                word[j + 1] = 0;\n            }\n        }\n        i++;\n    }\n    free(str2);\n    *len = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *len) {\n    int *arr = malloc(sizeof(int) * 32);\n    *len = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            arr[(*len)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        arr[(*len)++] = n;\n    }\n    return arr;\n}",
    "c_func_re_decompile": " int *func0(int n, int *len) {\n    int *arr = malloc(sizeof(int) * 32);\n    *len = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            arr[(*len)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        arr[(*len)++] = n;\n    }\n    return arr;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
    "c_func_decompile": " char *func0(char *s)\n{\n  static char buf[1000];\n  char *p, *q;\n  char *w[] = { \"the\", \"a\", \"an\", \"and\", \"of\", \"in\", \"on\", \"at\", \"to\", \"for\" };\n  int i, j, k, n, cnt[10] = { 0 };\n  for (p = s; *p; p += n) {\n    for (n = 0; *p && *p != ' '; p++, n++)\n      ;\n    for (i = 0; i < 10; i++) {\n      q = buf;\n      for (j = 0; j < n; j++)\n        *q++ = *p + j;\n      *q = 0;\n      if (!strcmp(buf, \"the\"))\n        cnt[0]++;\n      else if (!strcmp(buf, \"a\"))\n        cnt[1]++;\n      else if (!strcmp(buf, \"an\"))\n        cnt[2]++;\n      else if (!strcmp(buf, \"and\"))\n        cnt[3]++;\n      else if (!strcmp(buf, \"of\"))\n        cnt[4]++;\n      else if (!strcmp(buf, \"in\"))\n        cnt[5]++;\n      else if (!strcmp(buf, \"on\"))\n        cnt[6]++;\n      else if (!strcmp(buf, \"at\"))\n        cnt[7]++;\n      else if (!strcmp(buf, \"to\"))\n        cnt[8]++;\n      else if (!strcmp(buf, \"for\"))\n        cnt[9]++;\n    }\n  }\n  q = buf;\n  for (i = 0; i < 10; i++)\n    for (j = 0; j < cnt[i]; j++) {\n      for (k = 0; w[i][k]; k++)\n        *q++ = w[i][k];\n      *q++ = ' ';\n    }\n  if (q != buf)\n    q--;\n  *q = 0;\n  return buf;\n}",
    "c_func_re_decompile": " char *func0(char *s)\n{\n  static char buf[1000];\n  char *p, *q;\n  char *w[] = { \"the\", \"a\", \"an\", \"and\", \"of\", \"in\", \"on\", \"at\", \"to\", \"for\" };\n  int i, j, k, n, cnt[10] = { 0 };\n  for (p = s; *p; p += n) {\n    for (n = 0; *p && *p != ' '; p++, n++)\n      ;\n    for (i = 0; i < 10; i++) {\n      q = buf;\n      for (j = 0; j < n; j++)\n        *q++ = *p + j;\n      *q = 0;\n      if (!strcmp(buf, \"the\"))\n        cnt[0]++;\n      else if (!strcmp(buf, \"a\"))\n        cnt[1]++;\n      else if (!strcmp(buf, \"an\"))\n        cnt[2]++;\n      else if (!strcmp(buf, \"and\"))\n        cnt[3]++;\n      else if (!strcmp(buf, \"of\"))\n        cnt[4]++;\n      else if (!strcmp(buf, \"in\"))\n        cnt[5]++;\n      else if (!strcmp(buf, \"on\"))\n        cnt[6]++;\n      else if (!strcmp(buf, \"at\"))\n        cnt[7]++;\n      else if (!strcmp(buf, \"to\"))\n        cnt[8]++;\n      else if (!strcmp(buf, \"for\"))\n        cnt[9]++;\n    }\n  }\n  q = buf;\n  for (i = 0; i < 10; i++)\n    for (j = 0; j < cnt[i]; j++) {\n      for (k = 0; w[i][k]; k++)\n        *q++ = w[i][k];\n      *q++ = ' ';\n    }\n  if (q != buf)\n    q--;\n  *q = 0;\n  return buf;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *len) {\n    int i, j;\n    int *a = malloc(256);\n    *len = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            a[(*len)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        a[(*len)++] = n;\n    }\n    return a;\n}",
    "c_func_re_decompile": " int *func0(int n, int *len) {\n    int i, j;\n    int *a = malloc(256);\n    *len = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            a[(*len)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        a[(*len)++] = n;\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *len) {\n    int *factors = malloc(sizeof(int) * 32);\n    *len = 0;\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n            factors[(*len)++] = i;\n        }\n    }\n    if (n > 1) {\n        factors[(*len)++] = n;\n    }\n    return factors;\n}",
    "c_func_re_decompile": " int *func0(int n, int *len) {\n    int *factors = malloc(sizeof(int) * 32);\n    *len = 0;\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n            factors[(*len)++] = i;\n        }\n    }\n    if (n > 1) {\n        factors[(*len)++] = n;\n    }\n    return factors;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *len) {\n    int *arr = malloc(sizeof(int) * 32);\n    int i = 2;\n    *len = 0;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            arr[(*len)++] = i;\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        arr[(*len)++] = n;\n    }\n    return arr;\n}",
    "c_func_re_decompile": " int *func0(int n, int *len) {\n    int *arr = malloc(sizeof(int) * 32);\n    int i = 2;\n    *len = 0;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            arr[(*len)++] = i;\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        arr[(*len)++] = n;\n    }\n    return arr;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t) {\n    int i, len;\n    char c;\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        c = s[i];\n        if (c >= 'a' && c <= 'z')\n            c -= 32;\n        else if (c >= 'A' && c <= 'Z')\n            c += 32;\n        t[i] = c;\n    }\n    t[len] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *s, char *t) {\n    int i, len;\n    char c;\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        c = s[i];\n        if (c >= 'a' && c <= 'z')\n            c -= 32;\n        else if (c >= 'A' && c <= 'Z')\n            c += 32;\n        t[i] = c;\n    }\n    t[len] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
    "c_func_decompile": " char *func0(char **argv, int argc) {\n    int i, j, len = 0;\n    char *ret;\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n    if ((ret = malloc(len + 1)) == NULL)\n        return NULL;\n    ret[0] = '\\0';\n    for (j = 0; j < argc; j++)\n        strcat(ret, argv[j]);\n    return ret;\n}",
    "c_func_re_decompile": " char *func0(char **argv, int argc) {\n    int i, j, len = 0;\n    char *ret;\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n    if ((ret = malloc(len + 1)) == NULL)\n        return NULL;\n    ret[0] = '\\0';\n    for (j = 0; j < argc; j++)\n        strcat(ret, argv[j]);\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
    "c_func_decompile": " char *func0(char **argv, int argc)\n{\n  int i, len = 0;\n  char *ret;\n  for (i = 0; i < argc; i++)\n    len += strlen(argv[i]);\n  ret = malloc(len + 1);\n  if (ret == NULL)\n    return NULL;\n  ret[0] = '\\0';\n  for (i = 0; i < argc; i++)\n    strcat(ret, argv[i]);\n  return ret;\n}",
    "c_func_re_decompile": " char *func0(char **argv, int argc)\n{\n  int i, len = 0;\n  char *ret;\n  for (i = 0; i < argc; i++)\n    len += strlen(argv[i]);\n  ret = malloc(len + 1);\n  if (ret == NULL)\n    return NULL;\n  ret[0] = '\\0';\n  for (i = 0; i < argc; i++)\n    strcat(ret, argv[i]);\n  return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
    "c_func_decompile": " char *func0(char **argv, int argc) {\n  int i, len = 0;\n  char *result;\n  for (i = 0; i < argc; i++)\n    len += strlen(argv[i]);\n  result = (char *)malloc(len + 1);\n  if (result == NULL)\n    return NULL;\n  result[0] = '\\0';\n  for (i = 0; i < argc; i++)\n    result = strcat(result, argv[i]);\n  return result;\n}",
    "c_func_re_decompile": " char *func0(char **argv, int argc) {\n  int i, len = 0;\n  char *result;\n  for (i = 0; i < argc; i++)\n    len += strlen(argv[i]);\n  result = (char *)malloc(len + 1);\n  if (result == NULL)\n    return NULL;\n  result[0] = '\\0';\n  for (i = 0; i < argc; i++)\n    result = strcat(result, argv[i]);\n  return result;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *str1)\n{\n int i, len;\n len = strlen(str);\n for (i = 0; i < len; i++)\n {\n  if (str[i] >= 'a' && str[i] <= 'z')\n   str1[i] = str[i] - 32;\n  else if (str[i] >= 'A' && str[i] <= 'Z')\n   str1[i] = str[i] + 32;\n  else\n   str1[i] = str[i];\n }\n str1[len] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *str, char *str1)\n{\n int i, len;\n len = strlen(str);\n for (i = 0; i < len; i++)\n {\n  if (str[i] >= 'a' && str[i] <= 'z')\n   str1[i] = str[i] - 32;\n  else if (str[i] >= 'A' && str[i] <= 'Z')\n   str1[i] = str[i] + 32;\n  else\n   str1[i] = str[i];\n }\n str1[len] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
    "c_func_decompile": " float * func0(float *a, int n, int *m) {\n    float *b = malloc(n * sizeof(float));\n    *m = 0;\n    for (int i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            b[(*m)++] = a[i];\n        }\n    }\n    return b;\n}",
    "c_func_re_decompile": " float * func0(float *a, int n, int *m) {\n    float *b = malloc(n * sizeof(float));\n    *m = 0;\n    for (int i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            b[(*m)++] = a[i];\n        }\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *str1)\n{\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len; i++)\n    {\n        if (str[i] >= 'a' && str[i] <= 'z')\n            str1[i] = str[i] - 32;\n        else if (str[i] >= 'A' && str[i] <= 'Z')\n            str1[i] = str[i] + 32;\n        else\n            str1[i] = str[i];\n    }\n    str1[i] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *str, char *str1)\n{\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len; i++)\n    {\n        if (str[i] >= 'a' && str[i] <= 'z')\n            str1[i] = str[i] - 32;\n        else if (str[i] >= 'A' && str[i] <= 'Z')\n            str1[i] = str[i] + 32;\n        else\n            str1[i] = str[i];\n    }\n    str1[i] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
    "c_func_decompile": " char *func0(char **argv, int argc) {\n  int i, len = 0;\n  char *p;\n  for (i = 0; i < argc; i++)\n    len += strlen(argv[i]);\n  p = malloc(len + 1);\n  if (p == NULL)\n    return NULL;\n  *p = '\\0';\n  for (i = 0; i < argc; i++)\n    p = strcat(p, argv[i]);\n  return p;\n}",
    "c_func_re_decompile": " char *func0(char **argv, int argc) {\n  int i, len = 0;\n  char *p;\n  for (i = 0; i < argc; i++)\n    len += strlen(argv[i]);\n  p = malloc(len + 1);\n  if (p == NULL)\n    return NULL;\n  *p = '\\0';\n  for (i = 0; i < argc; i++)\n    p = strcat(p, argv[i]);\n  return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(long n) {\n    long i;\n    if (n <= 1) return 0;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) return 0;\n    }\n    return 1;\n}",
    "c_func_re_decompile": " int func0(long n) {\n    long i;\n    if (n <= 1) return 0;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) return 0;\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
    "c_func_decompile": " int func0(char **a, int n, char *s, char ***b) {\n    int i, j, len;\n    len = strlen(s);\n    *b = (char **)malloc(n * sizeof(char *));\n    j = 0;\n    for (i = 0; i < n; i++) {\n        if (!strncmp(a[i], s, len)) {\n            (*b)[j++] = a[i];\n        }\n    }\n    return j;\n}",
    "c_func_re_decompile": " int func0(char **a, int n, char *s, char ***b) {\n    int i, j, len;\n    len = strlen(s);\n    *b = (char **)malloc(n * sizeof(char *));\n    i = 0;\n    for (j = 0; j < n; j++) {\n        if (!strncmp(a[j], s, len)) {\n            (*b)[i++] = a[j];\n        }\n    }\n    return i;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
    "c_func_decompile": "\nint func0(char **a, int n, char *s, char ***b) {\n    int i, j, len;\n    len = strlen(s);\n    *b = (char **)malloc(n * sizeof(char *));\n    for (i = 0, j = 0; i < n; i++) {\n        if (!strncmp(a[i], s, len)) {\n            (*b)[j++] = a[i];\n        }\n    }\n    return j;\n}",
    "c_func_re_decompile": " int func0(char **a, int n, char *s, char ***b) {\n    int i, j, len;\n    len = strlen(s);\n    *b = (char **)malloc(n * sizeof(char *));\n    for (i = 0, j = 0; i < n; i++) {\n        if (!strncmp(a[i], s, len)) {\n            (*b)[j++] = a[i];\n        }\n    }\n    return j;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
    "c_func_decompile": " float * func0(float *a, int n, int *m) {\n  int i;\n  float *b = (float *)malloc(n * sizeof(float));\n  *m = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > 0) {\n      b[(*m)++] = a[i];\n    }\n  }\n  return b;\n}",
    "c_func_re_decompile": " float * func0(float *a, int n, int *m) {\n  int i;\n  float *b = (float *)malloc(n * sizeof(float));\n  *m = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > 0) {\n      b[(*m)++] = a[i];\n    }\n  }\n  return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
    "c_func_decompile": "\nint func0(char **argv, int argc, char *str, char ***ret) {\n  int i, j;\n  size_t len = strlen(str);\n  char **tmp = malloc(argc * sizeof(char *));\n  *ret = tmp;\n  for (i = 0, j = 0; i < argc; i++) {\n    if (!strncmp(argv[i], str, len)) {\n      tmp[j++] = argv[i];\n    }\n  }\n  return j;\n}",
    "c_func_re_decompile": " int func0(char **argv, int argc, char *str, char ***ret) {\n  int i, j;\n  size_t len = strlen(str);\n  char **tmp = malloc(argc * sizeof(char *));\n  *ret = tmp;\n  for (i = 0, j = 0; i < argc; i++) {\n    if (!strncmp(argv[i], str, len)) {\n      tmp[j++] = argv[i];\n    }\n  }\n  return j;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
    "c_func_decompile": " float * func0(float *a, int n, int *m) {\n    int i;\n    float *b = (float *)malloc(n * sizeof(float));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            b[*m] = a[i];\n            (*m)++;\n        }\n    }\n    return b;\n}",
    "c_func_re_decompile": " float * func0(float *a, int n, int *m) {\n    int i;\n    float *b = (float *)malloc(n * sizeof(float));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            b[(*m)++] = a[i];\n        }\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(char* str, int* len) {\n    int i, j, k, l;\n    char* str2;\n    char word[3] = {0};\n    int* ret;\n    int ret_len = 0;\n    int ret_size = 0;\n    l = strlen(str);\n    str2 = (char*)malloc(l + 2);\n    memcpy(str2, str, l);\n    str2[l] = ' ';\n    str2[l + 1] = 0;\n    for (i = 0; i < l + 1; i++) {\n        if (str2[i] == ' ') {\n            if (strcmp(word, \"of\") == 0) {\n                if (ret_len == ret_size) {\n                    if (ret_size > 0) {\n                        ret_size *= 2;\n                        ret = (int*)realloc(ret, ret_size * sizeof(int));\n                    } else {\n                        ret_size = 4;\n                        ret = (int*)malloc(ret_size * sizeof(int));\n                    }\n                }\n                ret[ret_len++] = 4;\n            }\n            if (strcmp(word, \"o|\") == 0) {\n                if (ret_len == ret_size) {\n                    if (ret_size > 0) {\n                        ret_size *= 2;\n                        ret = (int*)realloc(ret, ret_size * sizeof(int));\n                    } else {\n                        ret_size = 4;\n                        ret = (int*)malloc(ret_size * sizeof(int));\n                    }\n                }\n                ret[ret_len++] = 2;\n            }\n            if (strcmp(word, \".|\") == 0) {\n                if (ret_len == ret_size) {\n                    if (ret_size > 0) {\n                        ret_size *= 2;\n                        ret = (int*)realloc(ret, ret_size * sizeof(int));\n                    } else {\n                        ret_size = 4;\n                        ret = (int*)malloc(ret_size * sizeof(int));\n                    }\n                }\n                ret[ret_len++] = 1;\n            }\n            word[0] = 0;\n        } else {\n            j = strlen(word);\n            if (j < 2) {\n                word[j] = str2[i];\n                word[j + 1] = 0;\n            }\n        }\n    }\n    free(str2);\n    *len = ret_len;\n    return ret;\n}",
    "c_func_re_decompile": " int* func0(char* str, int* len) {\n    int i, j, k, l;\n    char* str2;\n    char word[3] = {0};\n    int* ret;\n    int ret_len = 0;\n    int ret_size = 0;\n    l = strlen(str);\n    str2 = (char*)malloc(l + 2);\n    memcpy(str2, str, l);\n    str2[l] = ' ';\n    for (i = 0; i < l + 1; i++) {\n        if (str2[i] == ' ') {\n            if (strcmp(word, \"of\") == 0) {\n                if (ret_len == ret_size) {\n                    if (ret_size > 0) {\n                        ret_size *= 2;\n                        ret = (int*)realloc(ret, ret_size * sizeof(int));\n                    } else {\n                        ret_size = 4;\n                        ret = (int*)malloc(ret_size * sizeof(int));\n                    }\n                }\n                ret[ret_len++] = 4;\n            }\n            if (strcmp(word, \"o|\") == 0) {\n                if (ret_len == ret_size) {\n                    if (ret_size > 0) {\n                        ret_size *= 2;\n                        ret = (int*)realloc(ret, ret_size * sizeof(int));\n                    } else {\n                        ret_size = 4;\n                        ret = (int*)malloc(ret_size * sizeof(int));\n                    }\n                }\n                ret[ret_len++] = 2;\n            }\n            if (strcmp(word, \".|\") == 0) {\n                if (ret_len == ret_size) {\n                    if (ret_size > 0) {\n                        ret_size *= 2;\n                        ret = (int*)realloc(ret, ret_size * sizeof(int));\n                    } else {\n                        ret_size = 4;\n                        ret = (int*)malloc(ret_size * sizeof(int));\n                    }\n                }\n                ret[ret_len++] = 1;\n            }\n            word[0] = 0;\n        } else {\n            j = strlen(word);\n            if (j < 2) {\n                word[j] = str2[i];\n                word[j + 1] = 0;\n            }\n        }\n    }\n    free(str2);\n    *len = ret_len;\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
    "c_func_decompile": " float * func0(float *a, int n, int *m) {\n    int i;\n    float *b = (float *)malloc(n * sizeof(float));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            b[*m] = a[i];\n            (*m)++;\n        }\n    }\n    return b;\n}",
    "c_func_re_decompile": " float * func0(float *a, int n, int *m) {\n    int i;\n    float *b = (float *)malloc(n * sizeof(float));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            b[(*m)++] = a[i];\n        }\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
    "c_func_decompile": "\nint func0(char **argv, int argc, char *str, char ***ret) {\n    int i, j, len;\n    len = strlen(str);\n    *ret = (char **)malloc(argc * sizeof(char *));\n    for (i = 0, j = 0; i < argc; i++) {\n        if (!strncmp(argv[i], str, len)) {\n            (*ret)[j++] = argv[i];\n        }\n    }\n    return j;\n}",
    "c_func_re_decompile": " int func0(char **argv, int argc, char *str, char ***ret) {\n    int i, j, len;\n    len = strlen(str);\n    *ret = (char **)malloc(argc * sizeof(char *));\n    for (i = 0, j = 0; i < argc; i++) {\n        if (!strncmp(argv[i], str, len)) {\n            (*ret)[j++] = argv[i];\n        }\n    }\n    return j;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *a, char *b) {\n  int i, len;\n  len = strlen(a);\n  for (i = 0; i < len; i++) {\n    if (a[i] >= 'a' && a[i] <= 'z')\n      b[i] = a[i] - 'a' + 'A';\n    else if (a[i] >= 'A' && a[i] <= 'Z')\n      b[i] = a[i] - 'A' + 'a';\n    else\n      b[i] = a[i];\n  }\n  b[len] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *a, char *b) {\n  int i, len;\n  len = strlen(a);\n  for (i = 0; i < len; i++) {\n    if (a[i] >= 'a' && a[i] <= 'z')\n      b[i] = a[i] - 'a' + 'A';\n    else if (a[i] >= 'A' && a[i] <= 'Z')\n      b[i] = a[i] - 'A' + 'a';\n    else\n      b[i] = a[i];\n  }\n  b[len] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(long n) {\n    long i;\n    if (n <= 1) return 0;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) return 0;\n    }\n    return 1;\n}",
    "c_func_re_decompile": " int func0(long n) {\n    long i;\n    if (n <= 1) return 0;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) return 0;\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(long n) {\n    long i;\n    if (n <= 1) return 0;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) return 0;\n    }\n    return 1;\n}",
    "c_func_re_decompile": " int func0(long n) {\n    long i;\n    if (n <= 1) return 0;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) return 0;\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(long n) {\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return 0;\n    }\n    return 1;\n}",
    "c_func_re_decompile": " int func0(long n) {\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return 0;\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int *m) {\n    int i, j, k;\n    int *b = malloc(n * sizeof(int));\n    int *c = calloc(n, sizeof(int));\n    int *d = calloc(n, sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (d[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            d[k] = a[i];\n            k++;\n        }\n        for (j = 0; j < k; j++) {\n            if (d[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            d[k] = a[i];\n            k++;\n        }\n        for (j = 0; j < k; j++) {\n            if (c[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            c[k] = a[i];\n            k++;\n        }\n    }\n    *m = k;\n    free(c);\n    free(d);\n    return b;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n, int *m) {\n    int i, j, k;\n    int *b = malloc(n * sizeof(int));\n    int *c = calloc(n, sizeof(int));\n    int *d = calloc(n, sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (d[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            d[k] = a[i];\n            k++;\n        }\n        for (j = 0; j < k; j++) {\n            if (d[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            d[k] = a[i];\n            k++;\n        }\n        for (j = 0; j < k; j++) {\n            if (c[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            c[k] = a[i];\n            k++;\n        }\n    }\n    *m = k;\n    free(c);\n    free(d);\n    return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, int* m) {\n    int i, j, k, l, *b, *c, *d, *e;\n    b = (int*)malloc(n * sizeof(int));\n    c = (int*)calloc(n, sizeof(int));\n    d = (int*)calloc(n, sizeof(int));\n    e = (int*)calloc(n, sizeof(int));\n    k = 0;\n    l = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (e[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            e[k] = a[i];\n            k++;\n        }\n        for (j = 0; j < l; j++) {\n            if (d[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == l) {\n            d[l] = a[i];\n            l++;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (e[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            b[i] = a[i];\n        }\n    }\n    *m = k;\n    free(c);\n    free(e);\n    return b;\n}",
    "c_func_re_decompile": " int* func0(int* a, int n, int* m) {\n    int i, j, k, l, *b, *c, *d, *e;\n    b = (int*)malloc(n * sizeof(int));\n    c = (int*)calloc(n, sizeof(int));\n    d = (int*)calloc(n, sizeof(int));\n    e = (int*)calloc(n, sizeof(int));\n    k = 0;\n    l = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (e[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            e[k] = a[i];\n            k++;\n        }\n        for (j = 0; j < l; j++) {\n            if (d[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == l) {\n            d[l] = a[i];\n            l++;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (e[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            b[i] = a[i];\n        }\n    }\n    *m = k;\n    free(c);\n    free(e);\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, int* m) {\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    int i, j, k, l, m1 = 0, m2 = 0, m3 = 0;\n    for (i = 0; i < n; i++) {\n        int x = a[i];\n        int flag = 0;\n        for (j = 0; j < m2; j++) {\n            if (d[j] == x) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag) {\n            continue;\n        }\n        int flag2 = 0;\n        for (k = 0; k < m1; k++) {\n            if (c[k] == x) {\n                flag2 = 1;\n                break;\n            }\n        }\n        if (flag2) {\n            d[m2++] = x;\n        } else {\n            c[m1++] = x;\n        }\n    }\n    for (l = 0; l < n; l++) {\n        int x = a[l];\n        int flag = 0;\n        for (j = 0; j < m2; j++) {\n            if (d[j] == x) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            b[m3++] = x;\n        }\n    }\n    *m = m3;\n    free(c);\n    free(d);\n    return b;\n}",
    "c_func_re_decompile": " int* func0(int* a, int n, int* m) {\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    int i, j, k, l, m1 = 0, m2 = 0, m3 = 0;\n    for (i = 0; i < n; i++) {\n        int x = a[i];\n        int flag = 0;\n        for (j = 0; j < m2; j++) {\n            if (d[j] == x) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag) {\n            continue;\n        }\n        int flag2 = 0;\n        for (k = 0; k < m1; k++) {\n            if (c[k] == x) {\n                flag2 = 1;\n                break;\n            }\n        }\n        if (flag2) {\n            d[m2++] = x;\n        } else {\n            c[m1++] = x;\n        }\n    }\n    for (l = 0; l < n; l++) {\n        int x = a[l];\n        int flag = 0;\n        for (j = 0; j < m2; j++) {\n            if (d[j] == x) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            b[m3++] = x;\n        }\n    }\n    *m = m3;\n    free(c);\n    free(d);\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, int* m) {\n    int i, j, k, l, *b, *c, *d, *e;\n    b = (int*)malloc(n * sizeof(int));\n    c = (int*)calloc(n, sizeof(int));\n    d = (int*)calloc(n, sizeof(int));\n    e = (int*)calloc(n, sizeof(int));\n    k = 0;\n    l = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (e[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            e[k] = a[i];\n            k++;\n        }\n        for (j = 0; j < l; j++) {\n            if (d[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == l) {\n            d[l] = a[i];\n            l++;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (e[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            b[i] = a[i];\n        }\n    }\n    *m = k;\n    free(c);\n    free(e);\n    return b;\n}",
    "c_func_re_decompile": " int* func0(int* a, int n, int* m) {\n    int i, j, k, l, *b, *c, *d, *e;\n    b = (int*)malloc(n * sizeof(int));\n    c = (int*)calloc(n, sizeof(int));\n    d = (int*)calloc(n, sizeof(int));\n    e = (int*)calloc(n, sizeof(int));\n    k = 0;\n    l = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (e[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            e[k] = a[i];\n            k++;\n        }\n        for (j = 0; j < l; j++) {\n            if (d[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == l) {\n            d[l] = a[i];\n            l++;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (e[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            b[i] = a[i];\n        }\n    }\n    *m = k;\n    free(c);\n    free(e);\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
    "c_func_decompile": " double func0(double *x, int N)\n{\n    int i, j, k;\n    double sum1, sum2, term, result;\n    result = 0.0;\n    sum1 = x[0];\n    for (i = 1; i < N; i++) {\n        term = 1.0;\n        for (j = 0; j < i; j++)\n            term *= result;\n        sum1 += term * x[i];\n    }\n    while (fabs(sum1) > 0.0000001) {\n        sum2 = 0.0;\n        for (i = 1; i < N; i++) {\n            term = 1.0;\n            for (k = 1; k < i; k++)\n                term *= result;\n            sum2 += i * x[i] * term;\n        }\n        result -= sum1 / sum2;\n        sum1 = x[0];\n        for (i = 1; i < N; i++) {\n            term = 1.0;\n            for (j = 0; j < i; j++)\n                term *= result;\n            sum1 += term * x[i];\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": " double func0(double *x, int N)\n{\n    int i, j, k;\n    double sum1, sum2, term, result;\n    result = 0.0;\n    sum1 = x[0];\n    for (i = 1; i < N; i++) {\n        term = 1.0;\n        for (j = 0; j < i; j++)\n            term *= result;\n        sum1 += term * x[i];\n    }\n    while (fabs(sum1) > 0.0000001) {\n        sum2 = 0.0;\n        for (i = 1; i < N; i++) {\n            term = 1.0;\n            for (k = 1; k < i; k++)\n                term *= result;\n            sum2 += i * x[i] * term;\n        }\n        result -= sum1 / sum2;\n        sum1 = x[0];\n        for (i = 1; i < N; i++) {\n            term = 1.0;\n            for (j = 0; j < i; j++)\n                term *= result;\n            sum1 += term * x[i];\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
    "c_func_decompile": " float func0(float *x, int n) {\n  int i;\n  float max = -1.0e+37F;\n  for (i = 0; i < n; i++)\n    if (x[i] > max)\n      max = x[i];\n  return max;\n}",
    "c_func_re_decompile": " float func0(float *x, int n) {\n  int i;\n  float max = -1.0e+37F;\n  for (i = 0; i < n; i++)\n    if (x[i] > max)\n      max = x[i];\n  return max;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
    "c_func_decompile": " float func0(float *a, int n) {\n  int i;\n  float max = -1.0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > max)\n      max = a[i];\n  }\n  return max;\n}",
    "c_func_re_decompile": " float func0(float *a, int n) {\n  int i;\n  float max = -1.0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > max)\n      max = a[i];\n  }\n  return max;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b) {\n  int i, j, k, t;\n  int *c = (int *)malloc((n/3+1)*sizeof(int));\n  i = 0;\n  j = 0;\n  for (k = 0; k < 3*k; k++) {\n    c[k] = a[3*k];\n    j++;\n  }\n  for (k = 0; k < j-1; k++) {\n    t = k;\n    for (i = k+1; i < j; i++) {\n      if (c[i] < c[t]) {\n        t = i;\n      }\n    }\n    if (t != k) {\n      t = c[k];\n      c[k] = c[t];\n      c[t] = t;\n    }\n  }\n  for (k = 0; k < n; k++) {\n    if (k % 3 == 0) {\n      b[k] = c[k/3];\n    } else {\n      b[k] = a[k];\n    }\n  }\n  free(c);\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n  int i, j, k, t;\n  int *c = (int *)malloc((n/3+1)*sizeof(int));\n  i = 0;\n  j = 0;\n  for (k = 0; k < 3*k; k++) {\n    c[k] = a[3*k];\n    j++;\n  }\n  for (k = 0; k < j-1; k++) {\n    t = k;\n    for (i = k+1; i < j; i++) {\n      if (c[i] < c[t]) {\n        t = i;\n      }\n    }\n    if (t != k) {\n      t = c[k];\n      c[k] = c[t];\n      c[t] = t;\n    }\n  }\n  for (k = 0; k < n; k++) {\n    if (k % 3 == 0) {\n      b[k] = c[k/3];\n    } else {\n      b[k] = a[k];\n    }\n  }\n  free(c);\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b) {\n  int i, j, k, t;\n  int *c = (int *)malloc((n / 3 + 1) * sizeof(int));\n  for (i = 0; i < n; i += 3)\n    c[i / 3] = a[i];\n  for (i = 0; i < n / 3; i++) {\n    k = i;\n    for (j = i + 1; j < n / 3; j++)\n      if (c[j] < c[k])\n        k = j;\n    if (k != i) {\n      t = c[i];\n      c[i] = c[k];\n      c[k] = t;\n    }\n  }\n  for (i = 0; i < n; i++)\n    if (i % 3 == 0)\n      b[i] = c[i / 3];\n    else\n      b[i] = a[i];\n  free(c);\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n  int i, j, k, t;\n  int *c = (int *)malloc((n / 3 + 1) * sizeof(int));\n  for (i = 0; i < n; i += 3)\n    c[i / 3] = a[i];\n  for (i = 0; i < n / 3; i++) {\n    k = i;\n    for (j = i + 1; j < n / 3; j++)\n      if (c[j] < c[k])\n        k = j;\n    if (k != i) {\n      t = c[i];\n      c[i] = c[k];\n      c[k] = t;\n    }\n  }\n  for (i = 0; i < n; i++)\n    if (i % 3 == 0)\n      b[i] = c[i / 3];\n    else\n      b[i] = a[i];\n  free(c);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b) {\n  int i, j, k, t;\n  int *c = (int *)malloc((n / 3 + 1) * sizeof(int));\n  for (i = 0; i < n; i++)\n    c[i / 3] = a[i];\n  for (i = 0; i < n; i++) {\n    k = i;\n    for (j = i + 1; j < n; j++)\n      if (c[j / 3] < c[k / 3])\n        k = j;\n    if (k != i) {\n      t = c[i / 3];\n      c[i / 3] = c[k / 3];\n      c[k / 3] = t;\n    }\n  }\n  for (i = 0; i < n; i++)\n    b[i] = c[i / 3];\n  free(c);\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n  int i, j, k, t;\n  int *c = (int *)malloc((n / 3 + 1) * sizeof(int));\n  for (i = 0; i < n; i++)\n    c[i / 3] = a[i];\n  for (i = 0; i < n; i++) {\n    k = i;\n    for (j = i + 1; j < n; j++)\n      if (c[j / 3] < c[k / 3])\n        k = j;\n    if (k != i) {\n      t = c[i / 3];\n      c[i / 3] = c[k / 3];\n      c[k / 3] = t;\n    }\n  }\n  for (i = 0; i < n; i++)\n    b[i] = c[i / 3];\n  free(c);\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int *m) {\n    int i, j, k;\n    int *b = (int *)malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < i; j++) {\n            if (a[i] == b[j]) {\n                break;\n            }\n        }\n        if (j == i) {\n            b[i] = a[i];\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (b[i] > b[j]) {\n                k = b[i];\n                b[i] = b[j];\n                b[j] = k;\n            }\n        }\n    }\n    *m = i;\n    return b;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n, int *m) {\n    int i, j, k;\n    int *b = (int *)malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < i; j++) {\n            if (a[i] == b[j]) {\n                break;\n            }\n        }\n        if (j == i) {\n            b[i] = a[i];\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (b[i] > b[j]) {\n                k = b[i];\n                b[i] = b[j];\n                b[j] = k;\n            }\n        }\n    }\n    *m = i;\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int *m) {\n    int i, j, k, t;\n    int *b = (int *)malloc(n * sizeof(int));\n    for (i = 0, k = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (b[j] == a[i])\n                break;\n        }\n        if (j == k)\n            b[k++] = a[i];\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n, int *m) {\n    int i, j, k, t;\n    int *b = (int *)malloc(n * sizeof(int));\n    for (i = 0, k = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (b[j] == a[i])\n                break;\n        }\n        if (j == k)\n            b[k++] = a[i];\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
    "c_func_decompile": " double func0(double *x, int N)\n{\n  int i,j;\n  double sum=0.0, term=1.0, num=0.0, den=0.0;\n  for (i=1;i<N;i++)\n  {\n    term=1.0;\n    for (j=0;j<i;j++)\n      term*=x[j];\n    sum+=term*x[i];\n  }\n  if (fabs(sum)>0.0000001)\n  {\n    for (i=1;i<N;i++)\n    {\n      term=1.0;\n      for (j=0;j<i;j++)\n        term*=x[j];\n      num+=term*i*(x[i]*i);\n    }\n    den=sum/2.0;\n    sum-=num/den;\n  }\n  while (fabs(sum)>0.0000001)\n  {\n    term=1.0;\n    for (i=1;i<N;i++)\n    {\n      term=1.0;\n      for (j=0;j<i;j++)\n        term*=x[j];\n      sum+=term*x[i];\n    }\n    sum/=N;\n    term=1.0;\n    num=0.0;\n    for (i=1;i<N;i++)\n    {\n      term=1.0;\n      for (j=0;j<i;j++)\n        term*=x[j];\n      num+=term*i*(x[i]*i);\n    }\n    den=sum;\n    sum-=num/den;\n  }\n  return sum;\n}",
    "c_func_re_decompile": " double func0(double *x, int N)\n{\n  int i,j;\n  double sum=0.0, term=1.0, num=0.0, den=0.0;\n  for (i=1;i<N;i++)\n  {\n    term=1.0;\n    for (j=0;j<i;j++)\n      term*=x[j];\n    sum+=term*x[i];\n  }\n  if (fabs(sum)>0.0000001)\n  {\n    for (i=1;i<N;i++)\n    {\n      term=1.0;\n      for (j=0;j<i;j++)\n        term*=x[j];\n      num+=term*i*(x[i]*i);\n    }\n    den=sum/2.0;\n    sum-=num/den;\n  }\n  while (fabs(sum)>0.0000001)\n  {\n    term=1.0;\n    for (i=1;i<N;i++)\n    {\n      term=1.0;\n      for (j=0;j<i;j++)\n        term*=x[j];\n      sum+=term*x[i];\n    }\n    sum/=N;\n    term=1.0;\n    num=0.0;\n    for (i=1;i<N;i++)\n    {\n      term=1.0;\n      for (j=0;j<i;j++)\n        term*=x[j];\n      num+=term*i*(x[i]*i);\n    }\n    den=sum;\n    sum-=num/den;\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int *m) {\n    int i, j, k, *b, flag, temp;\n    b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            b[k++] = a[i];\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                temp = b[i];\n                b[i] = b[j];\n                b[j] = temp;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n, int *m) {\n    int i, j, k, *b, flag, temp;\n    b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            b[k++] = a[i];\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                temp = b[i];\n                b[i] = b[j];\n                b[j] = temp;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
    "c_func_decompile": " float func0(float *x, int n) {\n    int i;\n    float max = -1.0;\n    for (i = 0; i < n; i++) {\n        if (x[i] > max)\n            max = x[i];\n    }\n    return max;\n}",
    "c_func_re_decompile": " float func0(float *x, int n) {\n    int i;\n    float max = -1.0;\n    for (i = 0; i < n; i++) {\n        if (x[i] > max)\n            max = x[i];\n    }\n    return max;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
    "c_func_decompile": " float func0(float *x, int n) {\n    int i;\n    float max = -1.0;\n    for (i = 0; i < n; i++) {\n        if (x[i] > max)\n            max = x[i];\n    }\n    return max;\n}",
    "c_func_re_decompile": " float func0(float *x, int n) {\n    int i;\n    float max = -1.0;\n    for (i = 0; i < n; i++) {\n        if (x[i] > max)\n            max = x[i];\n    }\n    return max;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b) {\n  int i, j, k, t;\n  int *c;\n  c = (int *)malloc((n / 3 + 1) * sizeof(int));\n  for (i = 0; i < n; i += 3) {\n    c[i / 3] = a[i];\n  }\n  for (i = 0; i < n / 3; i++) {\n    k = i;\n    for (j = i + 1; j < n / 3; j++) {\n      if (c[j] < c[k]) {\n        k = j;\n      }\n    }\n    if (k != i) {\n      t = c[i];\n      c[i] = c[k];\n      c[k] = t;\n    }\n  }\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      b[i] = c[i / 3];\n    } else {\n      b[i] = a[i];\n    }\n  }\n  free(c);\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n  int i, j, k, t;\n  int *c;\n  c = (int *)malloc((n / 3 + 1) * sizeof(int));\n  for (i = 0; i < n; i += 3) {\n    c[i / 3] = a[i];\n  }\n  for (i = 0; i < n / 3; i++) {\n    k = i;\n    for (j = i + 1; j < n / 3; j++) {\n      if (c[j] < c[k]) {\n        k = j;\n      }\n    }\n    if (k != i) {\n      t = c[i];\n      c[i] = c[k];\n      c[k] = t;\n    }\n  }\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      b[i] = c[i / 3];\n    } else {\n      b[i] = a[i];\n    }\n  }\n  free(c);\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
    "c_func_decompile": "\nint func0(int x) {\n  return x * x;\n}",
    "c_func_re_decompile": " int func0(int x) {\n  return x * x;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
    "c_func_decompile": "\nint func0(int x) {\n  return x * x;\n}",
    "c_func_re_decompile": "\nint func0(int x) {\n  return x * x;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int *m) {\n    int i, j, k, t;\n    int *b = (int *)malloc(n * sizeof(int));\n    for (i = 0, k = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (b[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            b[k++] = a[i];\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n, int *m) {\n    int i, j, k, t;\n    int *b = (int *)malloc(n * sizeof(int));\n    for (i = 0, k = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (b[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            b[k++] = a[i];\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
    "c_func_decompile": "\nint func0(int x) {\n  return x * x;\n}",
    "c_func_re_decompile": "\nint func0(int x) {\n  return x * x;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
    "c_func_decompile": " double func0(double *x, int N)\n{\n  int i,j;\n  double f,f1,f2,h;\n  f1=x[0];\n  for(i=1;i<N;i++)\n    {\n      h=1.0;\n      for(j=0;j<i;j++)\n h*=x[i];\n      f1+=h*x[i];\n    }\n  if(fabs(f1)>1.0e-10)\n    {\n      f2=x[1];\n      for(i=2;i<N;i++)\n {\n   h=1.0;\n   for(j=1;j<i;j++)\n     h*=x[i];\n   f2+=h*i*x[i];\n }\n      f=1.0-f1/f2;\n      while(fabs(f)>1.0e-10)\n {\n   f1=x[0];\n   for(i=1;i<N;i++)\n     {\n       h=1.0;\n       for(j=0;j<i;j++)\n  h*=f;\n       f1+=h*x[i];\n     }\n   f2=x[1];\n   for(i=2;i<N;i++)\n     {\n       h=1.0;\n       for(j=1;j<i;j++)\n  h*=f;\n       f2+=h*i*x[i];\n     }\n   f=1.0-f1/f2;\n }\n    }\n  else\n    f=0.0;\n  return(f);\n}",
    "c_func_re_decompile": " double func0(double *x, int N)\n{\n  int i,j;\n  double f,f1,f2,h;\n  f1=x[0];\n  for(i=1;i<N;i++)\n    {\n      h=1.0;\n      for(j=0;j<i;j++)\n h*=x[i];\n      f1+=h*x[i];\n    }\n  if(fabs(f1)>1.0e-10)\n    {\n      f2=x[1];\n      for(i=2;i<N;i++)\n {\n   h=1.0;\n   for(j=1;j<i;j++)\n     h*=x[i];\n   f2+=h*i*x[i];\n }\n      f=1.0-f1/f2;\n      while(fabs(f)>1.0e-10)\n {\n   f1=x[0];\n   for(i=1;i<N;i++)\n     {\n       h=1.0;\n       for(j=0;j<i;j++)\n  h*=f;\n       f1+=h*x[i];\n     }\n   f2=x[1];\n   for(i=2;i<N;i++)\n     {\n       h=1.0;\n       for(j=1;j<i;j++)\n  h*=f;\n       f2+=h*i*x[i];\n     }\n   f=1.0-f1/f2;\n }\n    }\n  else\n    f=0.0;\n  return(f);\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i, j, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (j = i; j > 0; j /= 10) {\n                if (j % 10 == 7) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i, j, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (j = i; j > 0; j /= 10) {\n                if (j % 10 == 7) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
    "c_func_decompile": "\nint func0(int x) {\n  return x * x;\n}",
    "c_func_re_decompile": "\nint func0(int x) {\n  return x * x;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
    "c_func_decompile": " int func0(int n) {\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 13 == 0 || i % 17 == 0) {\n            j = i;\n            while (j > 0) {\n                k = j % 10;\n                if (k == 7)\n                    count++;\n                j /= 10;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 13 == 0 || i % 17 == 0) {\n            j = i;\n            while (j > 0) {\n                k = j % 10;\n                if (k == 7)\n                    count++;\n                j /= 10;\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 7 == 0 || i % 11 == 0) {\n            j = i;\n            while (j != 0) {\n                k = j % 10;\n                if (k == 7) {\n                    count++;\n                }\n                j = j / 10;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 7 == 0 || i % 11 == 0) {\n            j = i;\n            while (j != 0) {\n                k = j % 10;\n                if (k == 7) {\n                    count++;\n                }\n                j = j / 10;\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 7 == 0 || i % 11 == 0) {\n            j = i;\n            while (j != 0) {\n                k = j % 10;\n                if (k == 7) {\n                    count++;\n                }\n                j = j / 10;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 7 == 0 || i % 11 == 0) {\n            j = i;\n            while (j != 0) {\n                k = j % 10;\n                if (k == 7) {\n                    count++;\n                }\n                j = j / 10;\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
    "c_func_decompile": " void func0(int *a, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    a[i]++;\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    a[i]++;\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
    "c_func_decompile": " void func0(int *a, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    a[i] = a[i] + 1;\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    a[i] = a[i] + 1;\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
    "c_func_decompile": " double func0(double *x, int N)\n{\n  int i,j;\n  double f,f1,f2,h,h1,h2,sum;\n  f1=x[0];\n  for(i=1;i<N;i++)\n    {\n      h1=1.0;\n      for(j=0;j<i;j++)\n h1*=x[i];\n      f1+=h1*x[i];\n    }\n  if(fabs(f1)>1.0e-10)\n    {\n      h2=1.0;\n      sum=0.0;\n      for(i=1;i<N;i++)\n {\n   h2*=x[i];\n   sum+=h2*i*x[i];\n }\n      h=1.0-f1/sum;\n      f2=x[0];\n      for(i=1;i<N;i++)\n {\n   h1=1.0;\n   for(j=0;j<i;j++)\n     h1*=h;\n   f2+=h1*x[i];\n }\n      while(fabs(f2)>1.0e-10)\n {\n   h1=1.0;\n   for(i=1;i<N;i++)\n     {\n       h1*=h;\n       sum=0.0;\n       for(j=1;j<=i;j++)\n  sum+=h1*j*x[j];\n       h2=1.0-f2/sum;\n       f2=x[0];\n       for(j=1;j<=i;j++)\n  {\n    h1=1.0;\n    for(i=0;i<j;i++)\n      h1*=h2;\n    f2+=h1*x[j];\n  }\n     }\n   h=h2;\n }\n    }\n  else\n    h=1.0;\n  return(h);\n}",
    "c_func_re_decompile": " double func0(double *x, int N)\n{\n  int i,j,k;\n  double f,f1,f2,h,h1,h2,sum;\n  f1=x[0];\n  for(i=1;i<N;i++)\n    {\n      h1=1.0;\n      for(j=0;j<i;j++)\n h1*=x[i];\n      f1+=h1*x[i];\n    }\n  if(fabs(f1)>1.0e-10)\n    {\n      h2=1.0;\n      sum=0.0;\n      for(i=1;i<N;i++)\n {\n   h2*=x[i];\n   sum+=h2*i*x[i];\n }\n      h=1.0-f1/sum;\n      f2=x[0];\n      for(i=1;i<N;i++)\n {\n   h1=1.0;\n   for(j=0;j<i;j++)\n     h1*=h;\n   f2+=h1*x[i];\n }\n      while(fabs(f2)>1.0e-10)\n {\n   h1=1.0;\n   for(i=1;i<N;i++)\n     {\n       h1*=h;\n       sum=0.0;\n       for(j=1;j<=i;j++)\n  sum+=h1*j*x[j];\n       h2=1.0-f2/sum;\n       f2=x[0];\n       for(j=1;j<=i;j++)\n  {\n    h1=1.0;\n    for(k=0;k<j;k++)\n      h1*=h2;\n    f2+=h1*x[j];\n  }\n     }\n   h=h2;\n }\n    }\n  else\n    h=1.0;\n  return(h);\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    a[i] = a[i] + 1;\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    a[i] = a[i] + 1;\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n) {\n  int i;\n  for (i=0; i<n; i++) {\n    a[i] = a[i] + 1;\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n) {\n  int i;\n  for (i=0; i<n; i++) {\n    a[i] = a[i] + 1;\n  }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i, j, sum = 1;\n    for (i = 2; i <= n; i++) {\n        if (i < n) {\n            sum += i;\n        }\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            sum = 0;\n            break;\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "ull func0(ull n) {\n    ull i, j, sum = 1;\n    for (i = 2; i <= n; i++) {\n        if (i < n) {\n            sum += i;\n        }\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            sum = 0;\n            break;\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i, j, k;\n    for (i = 0; i < n; i++) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            return i;\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "ull func0(int n) {\n    ull i, j, k;\n    ull count = 0;\n    for (i = 2; count < n; i++) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            count++;\n        }\n    }\n    if (count < n) {\n        return 0;\n    }\n    return i - 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
    "c_func_decompile": "\nvoid func0(float *a, int n, float *b) {\n  int i, j;\n  float *c = (float *)malloc((n/2+1)*sizeof(float));\n  for (i = 0; i < n; i++)\n    c[i] = a[i];\n  for (i = 0; i < n-1; i++)\n    for (j = 0; j < n-i-1; j++)\n      if (c[j] > c[j+1]) {\n        float t = c[j];\n        c[j] = c[j+1];\n        c[j+1] = t;\n      }\n  for (i = 0; i < n; i++)\n    b[i] = (i%2==0) ? c[i/2] : a[i];\n  free(c);\n}",
    "c_func_re_decompile": " void func0(float *a, int n, float *b) {\n  int i, j;\n  float *c = (float *)malloc((n/2+1)*sizeof(float));\n  for (i = 0; i < n; i += 2)\n    c[i/2] = a[i];\n  for (i = 0; i < n-1; i++)\n    for (j = 0; j < n-i-1; j++)\n      if (c[j] > c[j+1]) {\n        float t = c[j];\n        c[j] = c[j+1];\n        c[j+1] = t;\n      }\n  for (i = 0; i < n; i++)\n    b[i] = (i%2==0) ? c[i/2] : a[i];\n  free(c);\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int a = 1;\n    int b = 2;\n    int c = 0;\n    while (c < n) {\n        int t = a;\n        a = b;\n        b = t;\n        int d = 1;\n        int e = 2;\n        while (e * e <= a) {\n            if (a % e == 0) {\n                d = 0;\n                break;\n            }\n            e++;\n        }\n        if (d) {\n            c++;\n        }\n        if (c == n) {\n            return a;\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int a = 1;\n    int b = 2;\n    int c = 0;\n    while (c < n) {\n        a += b;\n        int t = a;\n        a = b;\n        b = t;\n        int d = 1;\n        int e = 2;\n        while (e * e <= a) {\n            if (a % e == 0) {\n                d = 0;\n                break;\n            }\n            e++;\n        }\n        if (d) {\n            c++;\n        }\n        if (c == n) {\n            return a;\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 2; j < n; j++) {\n      if (a[i] + a[i + 1] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 2; j < n; j++) {\n      if (a[i] + a[i + 1] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
    "c_func_decompile": " void func0(float *a, int n, float *b) {\n  int i, j;\n  float *tmp;\n  tmp = (float *)malloc((n/2+1)*sizeof(float));\n  for (i=0; i<n; i+=2)\n    tmp[i/2] = a[i];\n  for (i=n/2-1; i>0; i--)\n    for (j=0; j<i; j++)\n      if (tmp[j] > tmp[j+1]) {\n        float t = tmp[j];\n        tmp[j] = tmp[j+1];\n        tmp[j+1] = t;\n      }\n  for (i=0; i<n; i++)\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = a[i];\n  free(tmp);\n}",
    "c_func_re_decompile": " void func0(float *a, int n, float *b) {\n  int i, j;\n  float *tmp;\n  tmp = (float *)malloc((n/2+1)*sizeof(float));\n  for (i=0; i<n; i+=2)\n    tmp[i/2] = a[i];\n  for (i=n/2-1; i>0; i--)\n    for (j=0; j<i; j++)\n      if (tmp[j] > tmp[j+1]) {\n        float t = tmp[j];\n        tmp[j] = tmp[j+1];\n        tmp[j+1] = t;\n      }\n  for (i=0; i<n; i++)\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = a[i];\n  free(tmp);\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
    "c_func_decompile": " void func0(float *a, int n, float *b) {\n  float *c;\n  int i, j, k;\n  c = (float *)malloc((n/2+1)*sizeof(float));\n  k = 0;\n  for (i = 0; i < n; i += 2)\n    c[k++] = a[i];\n  for (i = 0; i < k-1; i++)\n    for (j = 0; j < k-i-1; j++)\n      if (c[j] > c[j+1]) {\n        float t = c[j];\n        c[j] = c[j+1];\n        c[j+1] = t;\n      }\n  for (i = 0; i < n; i++)\n    if (i%2 == 0)\n      b[i] = c[i/2];\n    else\n      b[i] = a[i];\n  free(c);\n}",
    "c_func_re_decompile": " void func0(float *a, int n, float *b) {\n  float *c;\n  int i, j, k;\n  c = (float *)malloc((n/2+1)*sizeof(float));\n  k = 0;\n  for (i = 0; i < n; i += 2)\n    c[k++] = a[i];\n  for (i = 0; i < k-1; i++)\n    for (j = 0; j < k-i-1; j++)\n      if (c[j] > c[j+1]) {\n        float t = c[j];\n        c[j] = c[j+1];\n        c[j+1] = t;\n      }\n  for (i = 0; i < n; i++)\n    if (i%2 == 0)\n      b[i] = c[i/2];\n    else\n      b[i] = a[i];\n  free(c);\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
    "c_func_decompile": " float func0(float x, float y) {\n  return x * y * 0.5f;\n}",
    "c_func_re_decompile": " float func0(float x, float y) {\n  return x * y * 0.5f;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
    "c_func_decompile": " float func0(float x, float y) {\n  return x * y * 0.5f;\n}",
    "c_func_re_decompile": " float func0(float x, float y) {\n  return x * y * 0.5f;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
    "c_func_decompile": " float func0(float x, float y) {\n  return 1.0f * x * y * 2.0f;\n}",
    "c_func_re_decompile": " float func0(float x, float y) {\n  return 1.0f * x * y * 0.5f;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
    "c_func_decompile": "\nvoid func0(float *a, int n, float *b) {\n  int i, j;\n  float *c;\n  c = (float *)malloc((n/2+1)*sizeof(float));\n  for (i=0; i<n; i++) {\n    c[i] = a[i];\n  }\n  for (i=0; i<n/2; i++) {\n    for (j=0; j<n/2-i; j++) {\n      if (c[j] > c[j+1]) {\n        { float t=c[j]; c[j]=c[j+1]; c[j+1]=t; };\n      }\n    }\n  }\n  for (i=0; i<n; i++) {\n    if (i%2 == 0) {\n      b[i] = c[i/2];\n    }\n  }\n  free(c);\n}",
    "c_func_re_decompile": " void func0(float *a, int n, float *b) {\n  int i, j;\n  float *c;\n  c = (float *)malloc((n/2+1)*sizeof(float));\n  for (i=0; i<n; i++) {\n    c[i] = a[i];\n  }\n  for (i=0; i<n/2; i++) {\n    for (j=0; j<n/2-i; j++) {\n      if (c[j] > c[j+1]) {\n        { float t=c[j]; c[j]=c[j+1]; c[j+1]=t; };\n      }\n    }\n  }\n  for (i=0; i<n; i++) {\n    if (i%2 == 0) {\n      b[i] = c[i/2];\n    }\n  }\n  free(c);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i, j, k;\n    for (i = 0; i < n; i++) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            return i;\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "ull func0(int n) {\n    ull i, j, k;\n    ull count = 0;\n    for (i = 2; count < n; i++) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            count++;\n        }\n    }\n    if (count < n) {\n        return 0;\n    }\n    return i - 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
    "c_func_decompile": "\nvoid func0(char *str, int flag) {\n    int len = strlen(str);\n    int i, j, k;\n    int n = (len + 2) / 3;\n    char tmp[4];\n    for (i = 0; i < n; i++) {\n        k = (i + 1) * 3 > len ? 3 : len - i * 3;\n        strncpy(tmp, str + i * 3, k);\n        tmp[k] = '\\0';\n        if (k == 3) {\n            if (flag) {\n                char t = tmp[0];\n                tmp[0] = tmp[2];\n                tmp[2] = tmp[1];\n                tmp[1] = t;\n            } else {\n                char t = tmp[0];\n                tmp[0] = tmp[1];\n                tmp[1] = tmp[2];\n                tmp[2] = t;\n            }\n        }\n        strncpy(str + i * 3, tmp, k);\n    }\n}",
    "c_func_re_decompile": " void func0(char *str, int flag) {\n    int len = strlen(str);\n    int i, j, k;\n    int n = (len + 2) / 3;\n    char tmp[4];\n    for (i = 0; i < n; i++) {\n        k = (i + 1) * 3 > len ? 3 : len - i * 3;\n        strncpy(tmp, str + i * 3, k);\n        tmp[k] = '\\0';\n        if (k == 3) {\n            if (flag) {\n                char t = tmp[1];\n                tmp[1] = tmp[2];\n                tmp[2] = tmp[0];\n                tmp[0] = t;\n            } else {\n                char t = tmp[0];\n                tmp[0] = tmp[1];\n                tmp[1] = tmp[2];\n                tmp[2] = t;\n            }\n        }\n        strncpy(str + i * 3, tmp, k);\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, j, k;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      for (k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] == 0) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, j, k;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      for (k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] == 0) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(int num, int base, char *str)\n{\n    char buf[32];\n    int i = 0;\n    while (num > 0) {\n        buf[i++] = num % base + '0';\n        num /= base;\n    }\n    while (i > 0) {\n        *str++ = buf[--i];\n    }\n    *str = '\\0';\n}",
    "c_func_re_decompile": " void func0(int num, int base, char *str)\n{\n    char buf[32];\n    int i = 0;\n    while (num > 0) {\n        buf[i++] = num % base + '0';\n        num /= base;\n    }\n    while (i > 0) {\n        *str++ = buf[--i];\n    }\n    *str = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, j, k;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      for (k = i; k < j; k++) {\n        if (a[i] + a[j] == a[k]) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, j, k;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      for (k = i; k < j; k++) {\n        if (a[i] + a[j] == a[k]) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n  int i, j, k;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      for (k = i; k < j; k++) {\n        if (a[i] + a[j] == a[k]) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, j, k;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      for (k = i; k < j; k++) {\n        if (a[i] + a[j] == a[k]) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
    "c_func_decompile": " float func0(float x, float y) {\n  return x * y * 3.141592653589793238462643383279502884197169399375105820976;\n}",
    "c_func_re_decompile": " float func0(float x, float y) {\n  return x * y * 3.141592653589793238462643383279502884197169399375105820976;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(int num, int base, char *str)\n{\n    char tmp[32];\n    int i = 0;\n    while (num > 0) {\n        tmp[i++] = num % base + '0';\n        num /= base;\n    }\n    while (i > 0) {\n        *str++ = tmp[--i];\n    }\n    *str = '\\0';\n}",
    "c_func_re_decompile": " void func0(int num, int base, char *str)\n{\n    char tmp[32];\n    int i = 0;\n    while (num > 0) {\n        tmp[i++] = num % base + '0';\n        num /= base;\n    }\n    while (i > 0) {\n        *str++ = tmp[--i];\n    }\n    *str = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
    "c_func_decompile": " void func0(int num, int base, char *str)\n{\n    char tmp[32];\n    int i = 0;\n    while (num > 0) {\n        tmp[i++] = num % base + '0';\n        num /= base;\n    }\n    int j = 0;\n    while (i > 0) {\n        str[j++] = tmp[--i];\n    }\n    str[j] = '\\0';\n}",
    "c_func_re_decompile": " void func0(int num, int base, char *str)\n{\n    char tmp[32];\n    int i = 0;\n    while (num > 0) {\n        tmp[i++] = num % base + '0';\n        num /= base;\n    }\n    int j = 0;\n    while (i > 0) {\n        str[j++] = tmp[--i];\n    }\n    str[j] = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(int n, int b, char *s)\n{\n    char buf[32];\n    int i = 0;\n    while (n > 0) {\n        buf[i++] = '0' + n % b;\n        n /= b;\n    }\n    while (i > 0) {\n        *s++ = buf[--i];\n    }\n    *s = '\\0';\n}",
    "c_func_re_decompile": " void func0(int n, int b, char *s)\n{\n    char buf[32];\n    int i = 0;\n    while (n > 0) {\n        buf[i++] = '0' + n % b;\n        n /= b;\n    }\n    while (i > 0) {\n        *s++ = buf[--i];\n    }\n    *s = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n, int m) {\n  int i, x = 1;\n  for (i = 0; i < n; i++) {\n    x = (2 * x) % m;\n  }\n  return x;\n}",
    "c_func_re_decompile": " int func0(int n, int m) {\n  int i, x = 1;\n  for (i = 0; i < n; i++) {\n    x = (2 * x) % m;\n  }\n  return x;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int a[100];\n  int i;\n  a[0] = 0;\n  a[1] = 2;\n  for (i = 2; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int a[100];\n  int i;\n  a[0] = 0;\n  a[1] = 2;\n  for (i = 2; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n int len = strlen(str);\n int i;\n for (i = 0; i < len / 2; i++)\n  if (str[i] != str[len - 1 - i])\n   return 0;\n return 1;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n int len = strlen(str);\n int i;\n for (i = 0; i < len / 2; i++)\n  if (str[i] != str[len - 1 - i])\n   return 0;\n return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - i - 1])\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - i - 1])\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - i - 1])\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - i - 1])\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n, int m) {\n    int i, x = 1;\n    for (i = 0; i < n; i++) {\n        x = (x * 2) % m;\n    }\n    return x;\n}",
    "c_func_re_decompile": " int func0(int n, int m) {\n    int i, x = 1;\n    for (i = 0; i < n; i++) {\n        x = (x * 2) % m;\n    }\n    return x;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - i - 1])\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - i - 1])\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int a[100];\n  int i;\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 2;\n  a[3] = 0;\n  for (i = 4; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int a[100];\n  int i;\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 2;\n  a[3] = 0;\n  for (i = 4; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int a[100];\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 2;\n  a[3] = 0;\n  a[4] = 4;\n  int i;\n  for (i = 4; i <= n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int a[100];\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 2;\n  a[3] = 0;\n  a[4] = 4;\n  int i;\n  for (i = 4; i <= n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  return a + b;\n}",
    "c_func_re_decompile": " int func0(int a, int b) {\n  return a + b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n, int m) {\n    int i, x = 1;\n    for (i = 0; i < n; i++) {\n        x = (x * 2) % m;\n    }\n    return x;\n}",
    "c_func_re_decompile": " int func0(int n, int m) {\n    int i, x = 1;\n    for (i = 0; i < n; i++) {\n        x = (x * 2) % m;\n    }\n    return x;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n, int m) {\n    int i, x = 1;\n    for (i = 0; i < n; i++) {\n        x = (x * 2) % m;\n    }\n    return x;\n}",
    "c_func_re_decompile": " int func0(int n, int m) {\n    int i, x = 1;\n    for (i = 0; i < n; i++) {\n        x = (x * 2) % m;\n    }\n    return x;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int i, a[100];\n  a[0] = 0;\n  a[1] = 1;\n  a[2] = 2;\n  a[3] = 3;\n  for (i = 4; i <= n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int i, a[100];\n  a[0] = 0;\n  a[1] = 1;\n  a[2] = 2;\n  a[3] = 3;\n  for (i = 4; i <= n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
    "c_func_decompile": "\nvoid func0(char *s, int flag) {\n    int i, j, k, len;\n    char t[4];\n    len = strlen(s);\n    for (i = 0; i < len / 3 + 1; i++) {\n        if (3 * i + 3 <= len) {\n            strncpy(t, s + 3 * i, 3);\n            t[3] = '\\0';\n        } else {\n            strncpy(t, s + 3 * i, len - 3 * i);\n            t[len - 3 * i] = '\\0';\n        }\n        if (flag) {\n            k = t[0];\n            t[0] = t[1];\n            t[1] = t[2];\n            t[2] = k;\n        } else {\n            k = t[0];\n            t[0] = t[2];\n            t[2] = t[1];\n            t[1] = k;\n        }\n        strncpy(s + 3 * i, t, 3);\n    }\n}",
    "c_func_re_decompile": " void func0(char *s, int flag) {\n    int i, j, k, len;\n    char t[4];\n    len = strlen(s);\n    for (i = 0; i < len / 3 + 1; i++) {\n        if (3 * i + 3 <= len) {\n            strncpy(t, s + 3 * i, 3);\n            t[3] = '\\0';\n        } else {\n            strncpy(t, s + 3 * i, len - 3 * i);\n            t[len - 3 * i] = '\\0';\n        }\n        if (flag) {\n            k = t[0];\n            t[0] = t[1];\n            t[1] = t[2];\n            t[2] = k;\n        } else {\n            k = t[0];\n            t[0] = t[2];\n            t[2] = t[1];\n            t[1] = k;\n        }\n        if (len - 3 * i == 3) {\n            strncpy(s + 3 * i, t, 3);\n        } else {\n            strncpy(s + 3 * i, t, len - 3 * i);\n        }\n        s += 3;\n        len -= 3;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  return a + b;\n}",
    "c_func_re_decompile": " int func0(int a, int b) {\n  return a + b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  return a + b;\n}",
    "c_func_re_decompile": " int func0(int a, int b) {\n  return a + b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
    "c_func_decompile": " float func0(float *a, int n) {\n  int i, j;\n  float tmp;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        tmp = a[i];\n        a[i] = a[j];\n        a[j] = tmp;\n      }\n  return (n % 2 == 1) ? a[n / 2] : (a[n / 2] + a[n / 2 - 1]) / 2.0;\n}",
    "c_func_re_decompile": " float func0(float *a, int n) {\n  int i, j;\n  float tmp;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        tmp = a[i];\n        a[i] = a[j];\n        a[j] = tmp;\n      }\n  return (n % 2 == 1) ? a[n / 2] : (a[n / 2] + a[n / 2 - 1]) / 2.0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(int *a, int n, int m) {\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= m) {\n      return 0;\n    }\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(int *a, int n, int m) {\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= m) {\n      return 0;\n    }\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
    "c_func_decompile": "\nvoid func0(char *str, int flag) {\n    int i, offset = flag ? 5 : 21;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++) {\n        str[i] = (str[i] - 'a' + offset) % 26 + 'a';\n    }\n}",
    "c_func_re_decompile": " void func0(char *str, int flag) {\n    int i, offset = flag ? 5 : 21;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++) {\n        str[i] = (str[i] - 'a' + offset) % 26 + 'a';\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
    "c_func_decompile": "\nvoid func0(char *str, int flag) {\n    int i, len, key;\n    key = flag ? 5 : 21;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        int c = (str[i] - 'a' + key) % 26 + 'a';\n        str[i] = c;\n    }\n}",
    "c_func_re_decompile": " void func0(char *str, int flag) {\n    int i, len, key;\n    key = flag ? 5 : 21;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        int c = (str[i] - 'a' + key) % 26 + 'a';\n        str[i] = c;\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
    "c_func_decompile": " void func0(char *s) {\n    char *p, *q;\n    char *delim = \" \\t\\n\";\n    for (p = q = s; *s; s++)\n        if (strchr(delim, *s) == NULL)\n            *p++ = *s;\n    *p = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *s) {\n    char *p, *q;\n    char *delim = \" \\t\\n\";\n    for (p = q = s; *s; s++)\n        if (strchr(delim, *s) == NULL)\n            *p++ = *s;\n    *p = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s) {\n    char *p = s;\n    char *q = s;\n    while (*p) {\n        if (strchr(\" \\t\\n\", *p)) {\n            p++;\n        } else {\n            *q++ = *p++;\n        }\n    }\n    *q = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *s) {\n    char *p = s;\n    char *q = s;\n    while (*p) {\n        if (strchr(\" \\t\\n\", *p)) {\n            p++;\n        } else {\n            *q++ = *p++;\n        }\n    }\n    *q = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
    "c_func_decompile": "\nvoid func0(char *str, int flag) {\n    int i, offset = (flag ? 5 : 21);\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++) {\n        str[i] = (str[i] - 'a' + offset) % 26 + 'a';\n    }\n}",
    "c_func_re_decompile": " void func0(char *str, int flag) {\n    int i, offset = (flag ? 5 : 21);\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++) {\n        str[i] = (str[i] - 'a' + offset) % 26 + 'a';\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
    "c_func_decompile": " float func0(float *a, int n) {\n  int i, j;\n  float t;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  if (n % 2 == 1)\n    return a[n / 2];\n  else\n    return (a[n / 2] + a[n / 2 - 1]) / 2.0;\n}",
    "c_func_re_decompile": " float func0(float *a, int n) {\n  int i, j;\n  float t;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  if (n % 2 == 1)\n    return a[n / 2];\n  else\n    return (a[n / 2] + a[n / 2 - 1]) / 2.0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  return a + b;\n}",
    "c_func_re_decompile": " int func0(int a, int b) {\n  return a + b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
    "c_func_decompile": " float func0(float *a, int n) {\n  int i, j;\n  float t;\n  for (i = 0; i < n-1; i++)\n    for (j = i+1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  if (n % 2 == 1)\n    return a[n/2];\n  else\n    return (a[n/2-1] + a[n/2]) / 2.0;\n}",
    "c_func_re_decompile": " float func0(float *a, int n) {\n  int i, j;\n  float t;\n  for (i = 0; i < n-1; i++)\n    for (j = i+1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  if (n % 2 == 1)\n    return a[n/2];\n  else\n    return (a[n/2-1] + a[n/2]) / 2.0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
    "c_func_decompile": " float func0(float *x, int n) {\n  int i, j;\n  float t;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (x[i] > x[j]) {\n        t = x[i];\n        x[i] = x[j];\n        x[j] = t;\n      }\n  if (n % 2 == 1)\n    return x[(n + n % 2) / 2];\n  else\n    return (x[n / 2] + x[n / 2 - 1]) / 2.0;\n}",
    "c_func_re_decompile": " float func0(float *x, int n) {\n  int i, j;\n  float t;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (x[i] > x[j]) {\n        t = x[i];\n        x[i] = x[j];\n        x[j] = t;\n      }\n  if (n % 2 == 1)\n    return x[(n + n % 2) / 2];\n  else\n    return (x[n / 2] + x[n / 2 - 1]) / 2.0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(int *a, int n, int x) {\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= x) {\n      return 0;\n    }\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(int *a, int n, int x) {\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= x) {\n      return 0;\n    }\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
    "c_func_decompile": " int func0(int *a, int n, int x) {\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= x) {\n      return 0;\n    }\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(int *a, int n, int x) {\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= x) {\n      return 0;\n    }\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
    "c_func_decompile": " int func0(int *a, int n, int x) {\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= x) {\n      return 0;\n    }\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(int *a, int n, int x) {\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= x) {\n      return 0;\n    }\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
    "c_func_decompile": "\nvoid func0(char *s, int flag) {\n    int i, len = strlen(s);\n    char buf[4];\n    for (i = 0; i < len / 3; i++) {\n        if (3 * (i + 1) <= len) {\n            strncpy(buf, s + 3 * i, 3);\n        } else {\n            __strncpy_chk(buf, s + 3 * i, len - 3 * i, __builtin_object_size(buf, 0));\n        }\n        buf[len - 3 * i] = '\\0';\n        if (len - 3 * i == 1) {\n            buf[2] = buf[1];\n            buf[1] = buf[0];\n            buf[0] = buf[3];\n        } else if (len - 3 * i == 2) {\n            buf[2] = buf[1];\n            buf[1] = buf[0];\n        }\n        if (flag) {\n            buf[0] = buf[3];\n            buf[3] = buf[2];\n            buf[2] = buf[1];\n            buf[1] = buf[0];\n        }\n        strncpy(s + 3 * i, buf, 3);\n    }\n}",
    "c_func_re_decompile": " void func0(char *s, int flag) {\n    int i, len = strlen(s);\n    char buf[4];\n    for (i = 0; i < len / 3; i++) {\n        if (3 * (i + 1) <= len) {\n            strncpy(buf, s + 3 * i, 3);\n        } else {\n            __strncpy_chk(buf, s + 3 * i, len - 3 * i, __builtin_object_size(buf, 0));\n        }\n        buf[len - 3 * i] = '\\0';\n        if (len - 3 * i == 3) {\n            buf[2] = buf[1];\n            buf[1] = buf[0];\n            buf[0] = buf[3];\n        } else if (len - 3 * i == 2) {\n            buf[2] = buf[1];\n            buf[1] = buf[0];\n        }\n        if (flag) {\n            buf[0] = buf[3];\n            buf[3] = buf[2];\n            buf[2] = buf[1];\n            buf[1] = buf[0];\n        }\n        strncpy(s + 3 * i, buf, 3);\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
    "c_func_decompile": "\nvoid func0(char *str, int flag) {\n    int i, len, key;\n    len = strlen(str);\n    key = flag ? 5 : 17;\n    for (i = 0; i < len; i++) {\n        str[i] = (str[i] - 'a' + key) % 26 + 'a';\n    }\n}",
    "c_func_re_decompile": " void func0(char *str, int flag) {\n    int i, len, key;\n    len = strlen(str);\n    key = flag ? 5 : 17;\n    for (i = 0; i < len; i++) {\n        str[i] = (str[i] - 'a' + key) % 26 + 'a';\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s) {\n    char *p = s;\n    while (*p) {\n        if (strchr(\"aeiou\", *p)) {\n            p++;\n        } else {\n            *s++ = *p++;\n        }\n    }\n    *s = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *s) {\n    char *p = s;\n    while (*p) {\n        if (strchr(\"aeiou\", *p)) {\n            p++;\n        } else {\n            *s++ = *p++;\n        }\n    }\n    *s = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int a[500] = {0};\n  a[1] = 1;\n  for (int i = 2; i <= n; i++) {\n    a[i] = a[i-1] + a[i-2];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int a[500] = {0};\n  a[1] = 1;\n  for (int i = 2; i <= n; i++) {\n    a[i] = a[i-1] + a[i-2];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
    "c_func_decompile": " void func0(char *s) {\n    char *p = s;\n    char *q = s;\n    while (*p) {\n        if (strchr(\"aeiou\", *p) == NULL) {\n            *q = *p;\n            q++;\n        }\n        p++;\n    }\n    *q = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *s) {\n    char *p = s;\n    char *q = s;\n    while (*p) {\n        if (strchr(\"aeiou\", *p) == NULL) {\n            *q = *p;\n            q++;\n        }\n        p++;\n    }\n    *q = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
    "c_func_decompile": "\nint func0(int x) {\n  return (x * (x + 1)) / 2;\n}",
    "c_func_re_decompile": "ull func0(ull x) {\n  return (x * (x + 1)) / 2;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int a[500] = {0};\n    a[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int a[500] = {0};\n    a[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int a[500] = {0};\n  a[1] = 1;\n  int i;\n  for (i = 2; i <= n; i++) {\n    a[i] = a[i-1] + a[i-2];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int a[500] = {0};\n  a[1] = 1;\n  int i;\n  for (i = 2; i <= n; i++) {\n    a[i] = a[i-1] + a[i-2];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int a[500] = {0};\n  a[0] = 0;\n  a[1] = 1;\n  int i;\n  for (i = 2; i <= n; i++) {\n    a[i] = a[i-1] + a[i-2];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int a[500] = {0};\n  a[0] = 0;\n  a[1] = 1;\n  int i;\n  for (i = 2; i <= n; i++) {\n    a[i] = a[i-1] + a[i-2];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nbool func0(char *str) {\n    int i = 0;\n    while (*str) {\n        if (*str == '<') {\n            i++;\n        } else if (*str == '>') {\n            i--;\n        }\n        if (i < 0) {\n            return false;\n        }\n        str++;\n    }\n    return i == 0;\n}",
    "c_func_re_decompile": " bool func0(char *str) {\n    int i = 0;\n    while (*str) {\n        if (*str == '<') {\n            i++;\n        } else if (*str == '>') {\n            i--;\n        }\n        if (i < 0) {\n            return false;\n        }\n        str++;\n    }\n    return i == 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nbool func0(char *str) {\n    int i = 0;\n    while (*str) {\n        if (*str == '<') {\n            i++;\n        } else if (*str == '>') {\n            i--;\n            if (i < 0) {\n                return false;\n            }\n        }\n        str++;\n    }\n    return i == 0;\n}",
    "c_func_re_decompile": " bool func0(char *str) {\n    int i = 0;\n    while (*str) {\n        if (*str == '<') {\n            i++;\n        } else if (*str == '>') {\n            i--;\n            if (i < 0) {\n                return false;\n            }\n        }\n        str++;\n    }\n    return i == 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nbool func0(char *str) {\n    int count = 0;\n    while (*str) {\n        if (*str == '<') {\n            count++;\n        } else if (*str == '>') {\n            count--;\n            if (count < 0) {\n                return false;\n            }\n        }\n        str++;\n    }\n    return count == 0;\n}",
    "c_func_re_decompile": " bool func0(char *str) {\n    int count = 0;\n    while (*str) {\n        if (*str == '<') {\n            count++;\n        } else if (*str == '>') {\n            count--;\n            if (count < 0) {\n                return false;\n            }\n        }\n        str++;\n    }\n    return count == 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0 && n > i) {\n            n /= i;\n        }\n    }\n    return n;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  int i, cnt = 0;\n  for (i = 0; s[i]; i++) {\n    if (s[i] == '<') cnt++;\n    if (s[i] == '>') cnt--;\n    if (cnt < 0) return 0;\n  }\n  if (cnt != 0) return 0;\n  return 1;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  int i, cnt = 0;\n  for (i = 0; s[i]; i++) {\n    if (s[i] == '<') cnt++;\n    if (s[i] == '>') cnt--;\n    if (cnt < 0) return 0;\n  }\n  if (cnt != 0) return 0;\n  return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
    "c_func_decompile": " int func0(float *arr, int n) {\n  int i, asc, desc;\n  asc = desc = 0;\n  for (i = 1; i < n; i++) {\n    if (arr[i] > arr[i-1]) asc = 1;\n    if (arr[i] < arr[i-1]) desc = 1;\n  }\n  if (asc + desc == 2) return 0;\n  return 1;\n}",
    "c_func_re_decompile": " int func0(float *arr, int n) {\n  int i, asc, desc;\n  asc = desc = 0;\n  for (i = 1; i < n; i++) {\n    if (arr[i] > arr[i-1]) asc = 1;\n    if (arr[i] < arr[i-1]) desc = 1;\n  }\n  if (asc + desc == 2) return 0;\n  return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
    "c_func_decompile": " bool func0(float *arr, int n) {\n    int i, c1 = 0, c2 = 0;\n    for (i = 1; i < n; i++) {\n        if (arr[i] < arr[i - 1])\n            c1 = 1;\n        if (arr[i] > arr[i - 1])\n            c2 = 1;\n    }\n    return (c1 + c2) != 2;\n}",
    "c_func_re_decompile": " bool func0(float *arr, int n) {\n    int i, c1 = 0, c2 = 0;\n    for (i = 1; i < n; i++) {\n        if (arr[i] < arr[i - 1])\n            c1 = 1;\n        if (arr[i] > arr[i - 1])\n            c2 = 1;\n    }\n    return (c1 + c2) != 2;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
    "c_func_decompile": " bool func0(float *arr, int n) {\n    int i, c1 = 0, c2 = 0;\n    for (i = 1; i < n; i++) {\n        if (arr[i] > arr[i - 1])\n            c1++;\n        if (arr[i] < arr[i - 1])\n            c2++;\n    }\n    return (c1 + c2 == 2);\n}",
    "c_func_re_decompile": " bool func0(float *arr, int n) {\n    int i, c1 = 0, c2 = 0;\n    for (i = 1; i < n; i++) {\n        if (arr[i] > arr[i - 1])\n            c1++;\n        if (arr[i] < arr[i - 1])\n            c2++;\n    }\n    return (c1 + c2 != 2);\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
    "c_func_decompile": "\nint func0(int x) {\n  return (x * (x + 1)) / 2;\n}",
    "c_func_re_decompile": " int func0(int x) {\n  return (x * (x + 1)) / 2;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
    "c_func_decompile": "\nint func0(int x) {\n  return (x * (x + 1)) / 2;\n}",
    "c_func_re_decompile": " int func0(int x) {\n  return (x * (x + 1)) / 2;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
    "c_func_decompile": "\nint func0(int x) {\n  return (x * (x + 1)) / 2;\n}",
    "c_func_re_decompile": "\nint func0(int x) {\n  return (x * (x + 1)) / 2;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
    "c_func_decompile": "\nbool func0(float *arr, int n) {\n  int i, j, c1 = 0, c2 = 0;\n  for (i = 1; i < n; i++) {\n    if (arr[i] < arr[i-1])\n      c1++;\n    if (arr[i] > arr[i-1])\n      c2++;\n  }\n  return (c1 + c2 == 2);\n}",
    "c_func_re_decompile": " bool func0(float *arr, int n) {\n  int i, j, c1 = 0, c2 = 0;\n  for (i = 1; i < n; i++) {\n    if (arr[i] < arr[i-1])\n      c1++;\n    if (arr[i] > arr[i-1])\n      c2++;\n  }\n  return (c1 + c2 != 2);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            int j = n / i;\n            if (j > i && j % i == 0) {\n                return j;\n            }\n        }\n    }\n    return n;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            int j = n / i;\n            if (j > i && j % i == 0) {\n                return j;\n            }\n        }\n    }\n    return n;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *a, char *b) {\n    int i, j, k, l;\n    int m = strlen(a);\n    int n = strlen(b);\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i] == b[j]) {\n                for (k = i + 1, l = j + 1; k < m && l < n; k++, l++) {\n                    if (a[k] != b[l]) {\n                        break;\n                    }\n                }\n                if (k == m) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": " int func0(char *a, char *b) {\n    int i, j, k, l;\n    int m = strlen(a);\n    int n = strlen(b);\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i] == b[j]) {\n                for (k = i + 1, l = j + 1; k < m && l < n; k++, l++) {\n                    if (a[k] != b[l]) {\n                        break;\n                    }\n                }\n                if (k == m) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
    "c_func_decompile": "\nbool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}",
    "c_func_re_decompile": " bool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
    "c_func_decompile": "\nbool func0(char *str)\n{\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == '(')\n            count++;\n        else if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return (count == 0);\n}",
    "c_func_re_decompile": " bool func0(char *str)\n{\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == '(')\n            count++;\n        else if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return (count == 0);\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
    "c_func_decompile": " void func0(float *a, int n, float *b) {\n  int i;\n  for (i = 1; i < n; i++)\n    b[i-1] = i * a[i];\n}",
    "c_func_re_decompile": " void func0(float *a, int n, float *b) {\n  int i;\n  for (i = 1; i < n; i++)\n    b[i-1] = i * a[i];\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
    "c_func_decompile": " void func0(float *a, int n, float *b) {\n  int i;\n  for (i = 1; i < n; i++)\n    b[i-1] = i * a[i];\n}",
    "c_func_re_decompile": " void func0(float *a, int n, float *b) {\n  int i;\n  for (i = 1; i < n; i++)\n    b[i-1] = i * a[i];\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
    "c_func_decompile": "\nbool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}",
    "c_func_re_decompile": " bool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
    "c_func_decompile": " int func0(char *s1, char *s2) {\n    int i, j, k, l1, l2;\n    l1 = strlen(s1);\n    l2 = strlen(s2);\n    for (i = 0; i < l1; i++) {\n        for (j = 0; j < l2; j++) {\n            if (s1[i] == s2[j]) {\n                break;\n            }\n        }\n        if (j >= l2) {\n            return 0;\n        }\n    }\n    for (i = 0; i < l2; i++) {\n        for (j = 0; j < l1; j++) {\n            if (s2[i] == s1[j]) {\n                break;\n            }\n        }\n        if (j >= l1) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": " int func0(char *s1, char *s2) {\n    int i, j, k, l1, l2;\n    l1 = strlen(s1);\n    l2 = strlen(s2);\n    for (i = 0; i < l1; i++) {\n        for (j = 0; j < l2; j++) {\n            if (s1[i] == s2[j]) {\n                break;\n            }\n        }\n        if (j >= l2) {\n            return 0;\n        }\n    }\n    for (i = 0; i < l2; i++) {\n        for (j = 0; j < l1; j++) {\n            if (s2[i] == s1[j]) {\n                break;\n            }\n        }\n        if (j >= l1) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
    "c_func_decompile": " int func0(char *str1, char *str2)\n{\n  int i, j, k, l;\n  int len1, len2;\n  len1 = strlen(str1);\n  len2 = strlen(str2);\n  for (i = 0; i < len1; i++)\n    {\n      for (j = 0; j < len2; j++)\n {\n   if (str1[i] == str2[j])\n     break;\n }\n      if (j >= len2)\n return 0;\n    }\n  for (i = 0; i < len2; i++)\n    {\n      for (j = 0; j < len1; j++)\n {\n   if (str2[i] == str1[j])\n     break;\n }\n      if (j >= len1)\n return 0;\n    }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(char *str1, char *str2)\n{\n  int i, j, k, l;\n  int len1, len2;\n  len1 = strlen(str1);\n  len2 = strlen(str2);\n  for (i = 0; i < len1; i++)\n    {\n      for (j = 0; j < len2; j++)\n {\n   if (str1[i] == str2[j])\n     break;\n }\n      if (j >= len2)\n return 0;\n    }\n  for (i = 0; i < len2; i++)\n    {\n      for (j = 0; j < len1; j++)\n {\n   if (str2[i] == str1[j])\n     break;\n }\n      if (j >= len1)\n return 0;\n    }\n  return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *a, char *b) {\n  int i, j, k, l, m, n;\n  n = strlen(a);\n  m = strlen(b);\n  for (i = 0; i < n; i++) {\n    bool flag = false;\n    for (j = 0; j < m; j++) {\n      if (a[i] == b[j]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      return 0;\n    }\n  }\n  for (k = 0; k < m; k++) {\n    bool flag = false;\n    for (l = 0; l < n; l++) {\n      if (b[k] == a[l]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      return 0;\n    }\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(char *a, char *b) {\n  int i, j, k, l, m, n;\n  n = strlen(a);\n  m = strlen(b);\n  for (i = 0; i < n; i++) {\n    bool flag = false;\n    for (j = 0; j < m; j++) {\n      if (a[i] == b[j]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      return 0;\n    }\n  }\n  for (k = 0; k < m; k++) {\n    bool flag = false;\n    for (l = 0; l < n; l++) {\n      if (b[k] == a[l]) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) {\n      return 0;\n    }\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
    "c_func_decompile": " void func0(float *x, int n, float *y) {\n  int i;\n  for (i = 1; i < n; i++)\n    y[i-1] = i * x[i];\n}",
    "c_func_re_decompile": " void func0(float *x, int n, float *y) {\n  int i;\n  for (i = 1; i < n; i++)\n    y[i-1] = i * x[i];\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
    "c_func_decompile": " void func0(float *x, int n, float *y) {\n  int i;\n  for (i = 1; i < n; i++)\n    y[i-1] = i * x[i];\n}",
    "c_func_re_decompile": " void func0(float *x, int n, float *y) {\n  int i;\n  for (i = 1; i < n; i++)\n    y[i-1] = i * x[i];\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
    "c_func_decompile": "\nbool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}",
    "c_func_re_decompile": "\nbool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int na, int *b, int nb, int *n) {\n  int i, j, k, *c;\n  c = (int *)malloc(na * sizeof(int));\n  k = 0;\n  for (i = 0; i < na; i++) {\n    for (j = 0; j < nb; j++) {\n      if (a[i] == b[j]) {\n        c[k] = a[i];\n        k++;\n        break;\n      }\n    }\n  }\n  for (i = 0; i < k; i++) {\n    for (j = k - 1; j > i; j--) {\n      if (c[j] < c[j - 1]) {\n        { int t = c[j]; c[j] = c[j - 1]; c[j - 1] = t; };\n      }\n    }\n  }\n  *n = k;\n  return c;\n}",
    "c_func_re_decompile": " int *func0(int *a, int na, int *b, int nb, int *n) {\n  int i, j, k, *c;\n  c = (int *)malloc(na * sizeof(int));\n  k = 0;\n  for (i = 0; i < na; i++) {\n    for (j = 0; j < nb; j++) {\n      if (a[i] == b[j]) {\n        c[k] = a[i];\n        k++;\n        break;\n      }\n    }\n  }\n  for (i = 0; i < k; i++) {\n    for (j = k - 1; j > i; j--) {\n      if (c[j] < c[j - 1]) {\n        { int t = c[j]; c[j] = c[j - 1]; c[j - 1] = t; };\n      }\n    }\n  }\n  *n = k;\n  return c;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, int* b, int m, int* returnSize) {\n    int* res = (int*)malloc(n * sizeof(int));\n    int i, j, k, l, flag, tmp;\n    for (i = 0, k = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (res[j] == a[i]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            for (l = 0; l < m; l++) {\n                if (a[i] == b[l]) {\n                    res[k++] = a[i];\n                    break;\n                }\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (res[j] > res[j + 1]) {\n                tmp = res[j];\n                res[j] = res[j + 1];\n                res[j + 1] = tmp;\n            }\n        }\n    }\n    *returnSize = k;\n    return res;\n}",
    "c_func_re_decompile": " int* func0(int* a, int n, int* b, int m, int* returnSize) {\n    int* res = (int*)malloc(n * sizeof(int));\n    int i, j, k, l, flag, tmp;\n    for (i = 0, k = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (res[j] == a[i]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            for (l = 0; l < m; l++) {\n                if (a[i] == b[l]) {\n                    res[k++] = a[i];\n                    break;\n                }\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (res[j] > res[j + 1]) {\n                tmp = res[j];\n                res[j] = res[j + 1];\n                res[j + 1] = tmp;\n            }\n        }\n    }\n    *returnSize = k;\n    return res;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int na, int *b, int nb, int *ret) {\n    int i, j, k, *c, nc;\n    c = (int *)malloc(na * sizeof(int));\n    nc = 0;\n    for (i = 0; i < na; i++) {\n        for (j = 0; j < nc; j++) {\n            if (c[j] == a[i])\n                break;\n        }\n        if (j < nc)\n            continue;\n        for (j = 0; j < nb; j++) {\n            if (a[i] == b[j])\n                break;\n        }\n        if (j < nb)\n            continue;\n        c[nc++] = a[i];\n    }\n    for (i = 0; i < nc - 1; i++) {\n        for (j = 0; j < nc - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                k = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = k;\n            }\n        }\n    }\n    *ret = nc;\n    return c;\n}",
    "c_func_re_decompile": " int *func0(int *a, int na, int *b, int nb, int *ret) {\n    int i, j, k, *c, nc;\n    c = (int *)malloc(na * sizeof(int));\n    nc = 0;\n    for (i = 0; i < na; i++) {\n        for (j = 0; j < nc; j++) {\n            if (c[j] == a[i])\n                break;\n        }\n        if (j < nc)\n            continue;\n        for (j = 0; j < nb; j++) {\n            if (a[i] == b[j])\n                break;\n        }\n        if (j < nb)\n            continue;\n        c[nc++] = a[i];\n    }\n    for (i = 0; i < nc - 1; i++) {\n        for (j = 0; j < nc - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                k = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = k;\n            }\n        }\n    }\n    *ret = nc;\n    return c;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
    "c_func_decompile": "\nvoid func0(char *str, int flag) {\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < len; i++) {\n        if (i * 3 + 3 <= len) {\n            char tmp[4];\n            __strncpy_chk(tmp, str + i * 3, 4, __builtin_object_size(tmp, 0));\n            tmp[4 - 1] = '\\0';\n            if (4 - 1 != 3)\n                tmp[4 - 1] = '\\0';\n            if (flag == 0) {\n                char tmp2[4];\n                strncpy(tmp2, tmp, 3);\n                tmp2[3] = '\\0';\n                tmp[0] = tmp2[2];\n                tmp[1] = tmp2[1];\n                tmp[2] = tmp2[0];\n            } else {\n                char tmp2[4];\n                strncpy(tmp2, tmp, 3);\n                tmp2[3] = '\\0';\n                tmp[0] = tmp2[1];\n                tmp[1] = tmp2[2];\n                tmp[2] = tmp2[0];\n            }\n            strncpy(str + i * 3, tmp, 3);\n        } else {\n            char tmp[4];\n            __strncpy_chk(tmp, str + i * 3, len - i * 3, __builtin_object_size(tmp, 0));\n            tmp[len - i * 3] = '\\0';\n            if (len - i * 3 != 3)\n                tmp[len - i * 3] = '\\0';\n            if (flag == 0) {\n                char tmp2[4];\n                strncpy(tmp2, tmp, 3);\n                tmp2[3] = '\\0';\n                tmp[0] = tmp2[2];\n                tmp[1] = tmp2[1];\n                tmp[2] = tmp2[0];\n            } else {\n                char tmp2[4];\n                strncpy(tmp2, tmp, 3);\n                tmp2[3] = '\\0';\n                tmp[0] = tmp2[1];\n                tmp[1] = tmp2[2];\n                tmp[2] = tmp2[0];\n            }\n            strncpy(str + i * 3, tmp, 3);\n        }\n    }\n}",
    "c_func_re_decompile": " void func0(char *str, int flag) {\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < (len + 2) / 3; i++) {\n        if (i * 3 + 3 <= len) {\n            char tmp[4];\n            __strncpy_chk(tmp, str + i * 3, 4, __builtin_object_size(tmp, 0));\n            tmp[4 - 1] = '\\0';\n            if (4 - 1 != 3)\n                tmp[4 - 1] = '\\0';\n            if (flag == 0) {\n                char tmp2[4];\n                strncpy(tmp2, tmp, 3);\n                tmp2[3] = '\\0';\n                tmp[0] = tmp2[2];\n                tmp[1] = tmp2[1];\n                tmp[2] = tmp2[0];\n            } else {\n                char tmp2[4];\n                strncpy(tmp2, tmp, 3);\n                tmp2[3] = '\\0';\n                tmp[0] = tmp2[1];\n                tmp[1] = tmp2[2];\n                tmp[2] = tmp2[0];\n            }\n            strncpy(str + i * 3, tmp, 3);\n        } else {\n            char tmp[4];\n            __strncpy_chk(tmp, str + i * 3, len - i * 3, __builtin_object_size(tmp, 0));\n            tmp[len - i * 3] = '\\0';\n            if (len - i * 3 != 3)\n                tmp[len - i * 3] = '\\0';\n            if (flag == 0) {\n                char tmp2[4];\n                strncpy(tmp2, tmp, 3);\n                tmp2[3] = '\\0';\n                tmp[0] = tmp2[2];\n                tmp[1] = tmp2[1];\n                tmp[2] = tmp2[0];\n            } else {\n                char tmp2[4];\n                strncpy(tmp2, tmp, 3);\n                tmp2[3] = '\\0';\n                tmp[0] = tmp2[1];\n                tmp[1] = tmp2[2];\n                tmp[2] = tmp2[0];\n            }\n            strncpy(str + i * 3, tmp, 3);\n        }\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int na, int *b, int nb, int *n) {\n    int i, j, k, *c, flag;\n    c = (int *)malloc(na * sizeof(int));\n    k = 0;\n    for (i = 0; i < na; i++) {\n        flag = 0;\n        for (j = 0; j < nb; j++) {\n            if (a[i] == b[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag) {\n            for (j = 0; j < k; j++) {\n                if (a[i] == c[j]) {\n                    flag = 0;\n                    break;\n                }\n            }\n            if (flag) {\n                c[k] = a[i];\n                k++;\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                int t = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = t;\n            }\n        }\n    }\n    *n = k;\n    return c;\n}",
    "c_func_re_decompile": " int *func0(int *a, int na, int *b, int nb, int *n) {\n    int i, j, k, *c, flag;\n    c = (int *)malloc(na * sizeof(int));\n    k = 0;\n    for (i = 0; i < na; i++) {\n        flag = 0;\n        for (j = 0; j < nb; j++) {\n            if (a[i] == b[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag) {\n            for (j = 0; j < k; j++) {\n                if (a[i] == c[j]) {\n                    flag = 0;\n                    break;\n                }\n            }\n            if (flag) {\n                c[k] = a[i];\n                k++;\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                int t = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = t;\n            }\n        }\n    }\n    *n = k;\n    return c;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int a[50] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    int i;\n    for (i = 3; i <= n; i++) {\n        a[i] = a[i-1] + a[i-2] + a[i-3];\n    }\n    return a[n];\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int a[50] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    int i;\n    for (i = 3; i <= n; i++) {\n        a[i] = a[i-1] + a[i-2] + a[i-3];\n    }\n    return a[n];\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
    "c_func_decompile": " int func0(int n) {\n  int a[100] = {0};\n  a[1] = 1;\n  for (int i = 2; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int a[100] = {0};\n  a[2] = 1;\n  for (int i = 3; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int a[50];\n  int i;\n  a[0] = 1;\n  for (i = 1; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int a[50];\n  int i;\n  a[0] = 1;\n  for (i = 1; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_decompile": "\nint func0(char *str, int n)\n{\n    char num1[10] = {0};\n    char num2[10] = {0};\n    int i, j, flag = 0;\n    for (i = 0, j = 0; str[i] != '\\0'; i++)\n    {\n        if (__ctype_b_loc()[(int)str[i]] & 0x0800)\n        {\n            if (flag == 0)\n                num1[j++] = str[i];\n            else\n                num2[j++] = str[i];\n        }\n        else\n        {\n            if (flag == 0 && j > 0)\n            {\n                flag = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_decompile": "\nint func0(char *s, int n) {\n  char *p = s;\n  char num[10] = {0};\n  char num2[10] = {0};\n  int i = 0;\n  int flag = 0;\n  while (*p != '\\0') {\n    if (__ctype_b_loc()[*p + 1] & 0x08) {\n      if (flag == 0) {\n        num[i++] = *p;\n      } else {\n        num2[i++] = *p;\n      }\n    } else {\n      if (flag == 0 && i > 0) {\n        flag = 1;\n        i = 0;\n      }\n    }\n    p++;\n  }\n  n -= strtol(num, NULL, 10);\n  n -= strtol(num2, NULL, 10);\n  return n;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n) {\n    int i, max = -1, max_i = -1;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (max_i == -1 || a[i] > max) {\n                max = a[i];\n                max_i = i;\n            }\n        }\n    }\n    if (max_i == -1) {\n        return NULL;\n    }\n    int *res = malloc(2 * sizeof(int));\n    res[0] = max;\n    res[1] = max_i;\n    return res;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_decompile": "\nint func0(char *s, int n) {\n  int i = 0;\n  int j = 0;\n  int k = 0;\n  int flag = 0;\n  char *p = s;\n  char num1[10] = {0};\n  char num2[10] = {0};\n  while (*p != '\\0') {\n    if (__ctype_b_loc()[*p + 1] & 0x08) {\n      if (flag == 0) {\n        num1[i++] = *p;\n      } else {\n        num2[j++] = *p;\n      }\n    } else {\n      if (flag == 0 && i > 0) {\n        flag = 1;\n      }\n    }\n    p++;\n  }\n  k = n - (strtol(num1, NULL, 10) + strtol(num2, NULL, 10));\n  return k;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_decompile": "\nint func0(char *s, int n) {\n  int i = 0;\n  int j = 0;\n  int k = 0;\n  int flag = 0;\n  char *p = s;\n  char *q = s;\n  char *r = s;\n  char *s1 = s;\n  char *t = s;\n  char *u = s;\n  char *v = s;\n  char *w = s;\n  char *x = s;\n  char *y = s;\n  char *z = s;\n  char a[10] = {0};\n  char b[10] = {0};\n  while (*p != '\\0') {\n    if (((*(*(__ctype_b_loc() + 1) + (uchar)(*p)) & (0x08)) != 0)) {\n      if (flag == 0) {\n        a[i] = *p;\n        i++;\n      } else {\n        b[j] = *p;\n        j++;\n      }\n    } else {\n      if (flag == 0) {\n        if (i > 0) {\n          flag = 1;\n        }\n      }\n    }\n    p++;\n  }\n  k = n - (strtol(a, NULL, 10) - strtol(b, NULL, 10));\n  return k;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
    "c_func_decompile": " int func0(int n) {\n  int i, a[50];\n  for (i = 0; i < 50; i++)\n    a[i] = 0;\n  a[1] = 1;\n  for (i = 3; i <= n; i += 4) {\n    a[i] = a[i-1] + a[i-2] + a[i-3];\n    a[i+1] = a[i] + a[i-1] + a[i-2];\n    a[i+2] = a[i+1] + a[i] + a[i-1];\n    a[i+3] = a[i+2] + a[i+1] + a[i];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int i, a[50];\n  for (i = 0; i < 50; i++)\n    a[i] = 0;\n  a[1] = 1;\n  for (i = 3; i <= n; i += 4) {\n    a[i] = a[i-1] + a[i-2] + a[i-3];\n    a[i+1] = a[i] + a[i-1] + a[i-2];\n    a[i+2] = a[i+1] + a[i] + a[i-1];\n    a[i+3] = a[i+2] + a[i+1] + a[i];\n  }\n  for (i = 3; i <= n; i++)\n    a[i] += a[i-1] + a[i-2] + a[i-3];\n  return a[n];\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int b, int *c, int *d) {\n    *d = b;\n    if (b) {\n        func1(a, b, c, d);\n    } else {\n        *c = 0;\n    }\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int b, int *c, int *d) {\n    *d = b;\n    if (b) {\n        func1(a, b, c, d);\n    } else {\n        *c = 0;\n    }\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
    "c_func_decompile": "\nstruct Assistant **func0(int **a, int n, int *b, int c, int *m) {\n  int i, j, k;\n  struct Assistant **r = malloc(100 * sizeof(struct Assistant *));\n  k = 0;\n  for (i = 0; i < n; i++) {\n    for (j = b[i] - 1; j >= 0; j--) {\n      if (a[i][j] == c) {\n        r[k] = malloc(sizeof(struct Assistant));\n        r[k]->x = i;\n        r[k]->y = j;\n        k++;\n      }\n    }\n  }\n  *m = k;\n  return r;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    char *vowels = \"aeiou\";\n    int count = 0;\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < len; i++)\n    {\n        if (strchr(vowels, str[i]) != NULL)\n        {\n            count++;\n        }\n    }\n    if (len > 0 && (str[len - 1] == 'y' || str[len - 1] == 'Y'))\n    {\n        count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    char *vowels = \"aeiou\";\n    int count = 0;\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < len; i++)\n    {\n        if (strchr(vowels, str[i]) != NULL)\n        {\n            count++;\n        }\n    }\n    if (len > 0 && (str[len - 1] == 'y' || str[len - 1] == 'Y'))\n    {\n        count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  int i, c, state, n;\n  const char *cs;\n  cs = s;\n  n = 0;\n  state = 0;\n  for (i = 0; cs[i] != '\\0'; i++) {\n    c = cs[i];\n    if (state == 0) {\n      if (c == 'I') {\n        state = 1;\n      } else {\n        state = 0;\n      }\n    } else {\n      if (__ctype_b_loc()[c] & (1 << 5)) {\n        state = 1;\n      } else {\n        state = 0;\n      }\n    }\n    if (state == 1) {\n      if (c == 'I') {\n        n++;\n      }\n    }\n  }\n  return n;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *str) {\n  int i, sum = 0;\n  for (i = 0; str[i]; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      sum += str[i];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(char *str) {\n  int i, sum = 0;\n  for (i = 0; str[i]; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      sum += str[i];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n    int sum = 0;\n    while (*s) {\n        if (*s >= 'A' && *s <= 'Z')\n            sum += *s;\n        s++;\n    }\n    return sum;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n    int sum = 0;\n    while (*s) {\n        if (*s >= 'A' && *s <= 'Z')\n            sum += *s;\n        s++;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": " int func0(char *s) {\n    int i, j, k, l;\n    i = 1;\n    j = 0;\n    k = 0;\n    l = 0;\n    while (s[l] != '\\0') {\n        if (((__ctype_b_loc()[s[l]] & 0x2000) != 0) && j) {\n            j = 0;\n            k++;\n        }\n        if (s[l] == 'I' && i) {\n            j = 1;\n        } else if ((__ctype_b_loc()[s[l]] & 0x2000) == 0) {\n            j = 0;\n        }\n        if ((__ctype_b_loc()[s[l]] & 0x2000) == 0) {\n            i = 0;\n        }\n        if (s[l] == '.' || s[l] == '?' || s[l] == '!') {\n            i = 1;\n        }\n        l++;\n    }\n    return k;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n    int sum = 0;\n    while (*s) {\n        if (*s >= 'A' && *s <= 'Z')\n            sum += *s;\n        s++;\n    }\n    return sum;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n    int sum = 0;\n    while (*s) {\n        if (*s >= 'A' && *s <= 'Z')\n            sum += *s;\n        s++;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": " int func0(char *s) {\n  int i = 0;\n  int c = 0;\n  int in_word = 0;\n  int in_sentence = 0;\n  char *p = s;\n  while (*p) {\n    if ((((*(const unsigned short *)&(*(const _ctype_t *)__ctype_b_loc() + 1) + (unsigned short)(*p & 0xff)) & 0x2000) && in_word) {\n      in_word = 0;\n      c++;\n    }\n    if (in_sentence && *p == 'I') {\n      in_sentence = 0;\n    }\n    if (!in_sentence && !in_word && (*p == '.' || *p == '?' || *p == '!')) {\n      in_sentence = 1;\n    }\n    if (!in_sentence && !in_word && (*p == ' ' || *p == '\\t' || *p == '\\n')) {\n      in_word = 0;\n    }\n    if (!in_sentence && !in_word) {\n      in_word = 1;\n    }\n    p++;\n  }\n  return c;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
    "c_func_decompile": " int func0(char *s) {\n    int i, len, count;\n    char *p;\n    count = 0;\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        p = strchr(\"aeiou\", s[i]);\n        if (p != NULL)\n            count++;\n    }\n    if (s[len - 1] == 'y' || s[len - 1] == 'Y')\n        count++;\n    return count;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n    int i, len, count;\n    char *p;\n    count = 0;\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        p = strchr(\"aeiou\", s[i]);\n        if (p != NULL)\n            count++;\n    }\n    if (s[len - 1] == 'y' || s[len - 1] == 'Y')\n        count++;\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
    "c_func_decompile": " int func0(char *s) {\n    int i, len, count;\n    char *p;\n    count = 0;\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        p = strchr(\"aeiou\", s[i]);\n        if (p != NULL)\n            count++;\n    }\n    if (s[len - 1] == 'y' || s[len - 1] == 'Y')\n        count++;\n    return count;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n    int i, len, count;\n    char *p;\n    count = 0;\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        p = strchr(\"aeiou\", s[i]);\n        if (p != NULL)\n            count++;\n    }\n    if (s[len - 1] == 'y' || s[len - 1] == 'Y')\n        count++;\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    char c;\n    char *p = \" \\t\\n\\r\\f\\v\";\n    for (i = 0; s[i]; i++) {\n        c = s[i];\n        if (__ctype_b_loc()[c] & 0x0200)\n            c = toupper(c);\n        else if (__ctype_b_loc()[c] & 0x0100)\n            c = tolower(c);\n        for (j = 0; p[j]; j++)\n            if (p[j] == c) {\n                if (j < 10)\n                    c += 2;\n                break;\n            }\n        t[i] = c;\n    }\n    t[i] = 0;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
    "c_func_decompile": " int func0(char *s) {\n    int i, len, count;\n    char *vowels = \"aeiou\";\n    count = 0;\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        if (strchr(vowels, s[i]) != NULL) {\n            count++;\n        }\n    }\n    if (s[len - 1] == 'y' || s[len - 1] == 'Y') {\n        count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n    int i, len, count;\n    char *vowels = \"aeiou\";\n    count = 0;\n    len = strlen(s);\n    for (i = 0; i < len; i++) {\n        if (strchr(vowels, s[i]) != NULL) {\n            count++;\n        }\n    }\n    if (s[len - 1] == 'y' || s[len - 1] == 'Y') {\n        count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  if (b == 0) {\n    return 0;\n  }\n  return func1(a, b);\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    char c;\n    char *p = \"abcdefghijklmnopqrstuvwxyz\";\n    struct _ctype_t *ct = __ctype_b_loc();\n    for (i = 0; (c = s[i]) != '\\0'; i++) {\n        if (ct->_table[(unsigned char)c] & (0x200))\n            c = __ctype_toupper_loc()->_table[(unsigned char)c];\n        else if (ct->_table[(unsigned char)c] & (0x100))\n            c = __ctype_tolower_loc()->_table[(unsigned char)c];\n        for (j = 0; p[j] != '\\0'; j++)\n            if (p[j] == c)\n                break;\n        if (j < 10)\n            c += 2;\n        t[i] = c;\n    }\n    t[i] = '\\0';\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    char *p = \"aeiou\";\n    const struct _ctype_t *ct = __ctype_b_loc();\n    for (i = 0; s[i]; i++) {\n        if (ct->_mb_cur_max == 1) {\n            if (ct->_mb_cur_max & 2)\n                t[i] = (__ctype_toupper_loc())->__mb_table[s[i]];\n            else\n                t[i] = (__ctype_tolower_loc())->__mb_table[s[i]];\n        } else {\n            t[i] = s[i];\n        }\n        for (j = 0; p[j]; j++) {\n            if (t[i] == p[j]) {\n                t[i] = j + 'a';\n                break;\n            }\n        }\n        if (j >= 10)\n            t[i] += 2;\n    }\n    t[i] = 0;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    char c;\n    char *p = \"abcdefghijklmnopqrstuvwxyz\";\n    struct _ctype_t *ct = __ctype_b_loc();\n    for (i = 0; (c = s[i]) != '\\0'; i++) {\n        if (ct->_table[(unsigned char)c] & (0x200))\n            c = __ctype_toupper_loc()->_table[(unsigned char)c];\n        else if (ct->_table[(unsigned char)c] & (0x100))\n            c = __ctype_tolower_loc()->_table[(unsigned char)c];\n        for (j = 0; p[j] != '\\0'; j++)\n            if (p[j] == c)\n                break;\n        if (j < 10)\n            c += 2;\n        t[i] = c;\n    }\n    t[i] = '\\0';\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int *b = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        if (b[a[i]]++ > max)\n            max = a[i];\n    }\n    free(b);\n    return max;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int *b = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        if (b[a[i]]++ > max)\n            max = a[i];\n        if (b[a[i]] > max)\n            max = a[i];\n    }\n    free(b);\n    return max;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
    "c_func_decompile": " char *func0(int i, int j)\n{\n  static char buf[1000];\n  static char buf2[1000];\n  int k, len;\n  char c;\n\n  sprintf(buf, \"i=%d\", i);\n  len = strlen(buf);\n  if (len < j) {\n    for (k = 0; k < len/2; k++) {\n      c = buf[k];\n      buf[k] = buf[len-1-k];\n      buf[len-1-k] = c;\n    }\n  } else {\n    strcpy(buf2, buf+len-j);\n    buf2[j] = '\\0';\n    strncat(buf2, buf, len-j);\n    strcpy(buf, buf2);\n  }\n  return buf;\n}",
    "c_func_re_decompile": " char *func0(int i, int j)\n{\n  static char buf[1000];\n  char buf2[100];\n  int k, len;\n  char c;\n\n  sprintf(buf, \"i=%d\", i);\n  len = strlen(buf);\n  if (len < j) {\n    for (k = 0; k < len/2; k++) {\n      c = buf[k];\n      buf[k] = buf[len-1-k];\n      buf[len-1-k] = c;\n    }\n  } else {\n    strcpy(buf2, buf+len-j);\n    buf2[j] = '\\0';\n    strncat(buf2, buf, len-j);\n    strcpy(buf, buf2);\n  }\n  return buf;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int *b = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        if (b[a[i]]++ > max)\n            max = a[i];\n    }\n    free(b);\n    return max;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int *b = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        if (b[a[i]]++ > max)\n            max = a[i];\n        if (b[a[i]] > max)\n            max = a[i];\n    }\n    free(b);\n    return max;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
    "c_func_decompile": " char *func0(int a, int b) {\n  char buf[50];\n  char *p = buf;\n  int i, j;\n  __sprintf_chk(buf, 1, 50, \"%s%d\", \"func0\", a);\n  for (i = strlen(buf), j = 0; i < b; i++, j++) {\n    char tmp = buf[i];\n    buf[i] = buf[j];\n    buf[j] = tmp;\n  }\n  if (i > b) {\n    char tmp[50];\n    p = __strcpy_chk(tmp, buf + i - b, 50);\n    tmp[b] = '\\0';\n    p = __strncat_chk(p, buf, 50, b);\n    p = __strcpy_chk(buf, p, 50);\n  }\n  return buf;\n}",
    "c_func_re_decompile": " char *func0(int a, int b) {\n  char buf[50];\n  char *p = buf;\n  int i, j;\n  __sprintf_chk(buf, 1, 50, \"%s%d\", \"func0\", a);\n  for (i = strlen(buf), j = 0; i < b; i++, j++) {\n    char tmp = buf[i];\n    buf[i] = buf[j];\n    buf[j] = tmp;\n  }\n  if (i > b) {\n    char tmp[50];\n    p = __strcpy_chk(tmp, buf + i - b, 50);\n    tmp[b] = '\\0';\n    p = __strncat_chk(p, buf, 50, b);\n    p = __strcpy_chk(buf, p, 50);\n  }\n  return buf;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int *b = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] >= a[i] && a[i] > max)\n            max = a[i];\n    }\n    free(b);\n    return max;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int *b = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] >= a[i] && a[i] > max)\n            max = a[i];\n    }\n    free(b);\n    return max;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
    "c_func_decompile": " char *func0(int a, int b) {\n  char buf[50];\n  char buf2[50];\n  int i;\n  int len;\n  __sprintf_chk(buf, 1, sizeof(buf), \"%d\", a);\n  len = strlen(buf);\n  if (len < b) {\n    for (i = 0; i < len / 2; i++) {\n      char tmp = buf[i];\n      buf[i] = buf[len - i - 1];\n      buf[len - i - 1] = tmp;\n    }\n  } else {\n    __strcpy_chk(buf2, buf + len - b, sizeof(buf2));\n    buf2[b] = '\\0';\n    __strncat_chk(buf2, buf, len - b, sizeof(buf2));\n    __strcpy_chk(buf, buf2, sizeof(buf));\n  }\n  return buf;\n}",
    "c_func_re_decompile": " char *func0(int a, int b) {\n  char buf[50];\n  char buf2[50];\n  int i;\n  int len;\n  __sprintf_chk(buf, 1, sizeof(buf), \"%d\", a);\n  len = strlen(buf);\n  if (len < b) {\n    for (i = 0; i < len / 2; i++) {\n      char tmp = buf[i];\n      buf[i] = buf[len - i - 1];\n      buf[len - i - 1] = tmp;\n    }\n  } else {\n    __strcpy_chk(buf2, buf + len - b, sizeof(buf2));\n    buf2[b] = '\\0';\n    __strncat_chk(buf2, buf, len - b, sizeof(buf2));\n    __strcpy_chk(buf, buf2, sizeof(buf));\n  }\n  return buf;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
    "c_func_decompile": " char *func0(int a, int b) {\n  char buf[50];\n  char *p = buf;\n  int i, j;\n  __sprintf_chk(buf, 1, 50, \"%s%d\", \"func0\", a);\n  for (i = strlen(buf), j = 0; i < b; i++, j++) {\n    char tmp = buf[i];\n    buf[i] = buf[j];\n    buf[j] = tmp;\n  }\n  if (i > b) {\n    char tmp[50];\n    p = __strcpy_chk(tmp, buf + i - b, 50);\n    tmp[b] = '\\0';\n    p = __strncat_chk(p, buf, 50, b);\n    p = __strcpy_chk(buf, p, 50);\n  }\n  return buf;\n}",
    "c_func_re_decompile": " char *func0(int a, int b) {\n  char buf[50];\n  char *p = buf;\n  int i, j;\n  __sprintf_chk(buf, 1, 50, \"%s%d\", \"func0\", a);\n  for (i = strlen(buf), j = 0; i < b; i++, j++) {\n    char tmp = buf[i];\n    buf[i] = buf[j];\n    buf[j] = tmp;\n  }\n  if (i > b) {\n    char tmp[50];\n    p = __strcpy_chk(tmp, buf + i - b, 50);\n    tmp[b] = '\\0';\n    p = __strncat_chk(p, buf, 50, b);\n    p = __strcpy_chk(buf, p, 50);\n  }\n  return buf;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char **argv, int argc) {\n  int i, j, k, l, m;\n  char *s;\n  if (argc == 0) return 0;\n  l = 0;\n  m = 0;\n  for (i = 0; i < argc; i++) {\n    s = argv[i];\n    for (j = 0; s[j] != '\\0'; j++) {\n      if (!((*(const unsigned short*)(__ctype_b_loc()+(s[j]<<1)+1)&0x0400))\n          return 0;\n      if ((*(const unsigned short*)(__ctype_b_loc()+(s[j]<<1)+1)&0x0100))\n        m = 1;\n      if ((*(const unsigned short*)(__ctype_b_loc()+(s[j]<<1)+1)&0x0200))\n        l = 1;\n      if (m + l == 2)\n        return 0;\n    }\n  }\n  return 1;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, int* ret) {\n    int min = 0x7fffffff;\n    int index = -1;\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (a[i] < min || index == -1) {\n                min = a[i];\n                index = i;\n            }\n        }\n    }\n    if (index == -1) {\n        return NULL;\n    }\n    ret[0] = min;\n    ret[1] = index;\n    return ret;\n}",
    "c_func_re_decompile": " int* func0(int* a, int n, int* ret) {\n    int min = 0x7fffffff;\n    int index = -1;\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (a[i] < min || index == -1) {\n                min = a[i];\n                index = i;\n            }\n        }\n    }\n    if (index == -1) {\n        return NULL;\n    }\n    ret[0] = min;\n    ret[1] = index;\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int *b = calloc(n+1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] > b[max]) max = a[i];\n        if (b[a[i]] < b[max]) max = -1;\n    }\n    free(b);\n    return max;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int *b = calloc(n+1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] > b[max]) max = a[i];\n        if (b[a[i]] < b[max]) max = -1;\n    }\n    free(b);\n    return max;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n    int i, j, count = 0;\n    for (i = 0, j = n - 1; i < n / 2; i++, j--)\n        if (a[i] != a[j])\n            count++;\n    return count;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, j, count = 0;\n    for (i = 0, j = n - 1; i < n / 2; i++, j--)\n        if (a[i] != a[j])\n            count++;\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int i, cnt = 0;\n    for (i = 0; i < n/2; i++) {\n        if (a[i] != a[n-1-i]) {\n            cnt++;\n        }\n    }\n    return cnt;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, cnt = 0;\n    for (i = 0; i < n/2; i++) {\n        if (a[i] != a[n-1-i]) {\n            cnt++;\n        }\n    }\n    return cnt;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n    int i, j, count = 0;\n    for (i = 0, j = n - 1; i < n / 2; i++, j--) {\n        if (a[i] != a[j]) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, j, count = 0;\n    for (i = 0, j = n - 1; i < n / 2; i++, j--) {\n        if (a[i] != a[j]) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int *b) {\n    int i, max = -1, max_i = -1;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (max_i == -1 || a[i] > max) {\n                max = a[i];\n                max_i = i;\n            }\n        }\n    }\n    if (max_i == -1) {\n        return NULL;\n    }\n    b[0] = max;\n    b[1] = max_i;\n    return b;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n, int *b) {\n    int i, min = 0x7fffffff, min_i = -1;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (min_i == -1 || a[i] < min) {\n                min = a[i];\n                min_i = i;\n            }\n        }\n    }\n    if (min_i == -1) {\n        return NULL;\n    }\n    b[0] = min;\n    b[1] = min_i;\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
    "c_func_decompile": " float func0(float a, float b, float c) {\n    float s, t;\n    if (a + b >= c || a + c >= b || b + c >= a)\n        return 1.0;\n    s = (a + b + c) / 2.0;\n    t = sqrtf(s * (s - a) * (s - b) * (s - c));\n    return roundf(t * 1000.0) / 1000.0;\n}",
    "c_func_re_decompile": " float func0(float a, float b, float c) {\n    float s, t;\n    if (a + b >= c || a + c >= b || b + c >= a)\n        return 1.0;\n    s = (a + b + c) / 2.0;\n    t = sqrtf(s * (s - a) * (s - b) * (s - c));\n    return roundf(t * 1000.0) / 1000.0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int *b) {\n    int i, max = -1, max_i = -1;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (max_i == -1 || a[i] > max) {\n                max = a[i];\n                max_i = i;\n            }\n        }\n    }\n    if (max_i == -1) {\n        return NULL;\n    }\n    b[0] = max;\n    b[1] = max_i;\n    return b;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n, int *b) {\n    int i, min = 0x7fffffff, min_i = -1;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (min_i == -1 || a[i] < min) {\n                min = a[i];\n                min_i = i;\n            }\n        }\n    }\n    if (min_i == -1) {\n        return NULL;\n    }\n    b[0] = min;\n    b[1] = min_i;\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
    "c_func_decompile": " bool func0(int *arr, int len, int k) {\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] + arr[len - i - 1];\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}",
    "c_func_re_decompile": " bool func0(int *arr, int len, int k) {\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] + arr[len - i - 1];\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
    "c_func_decompile": "\nbool func0(int *arr, int len, int k) {\n    int sum = 0;\n    for (int i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - 1 - i]) {\n            return false;\n        }\n        sum += arr[i] + arr[len - 1 - i];\n    }\n    if (len % 2 == 1) {\n        sum += arr[len / 2];\n    }\n    return sum <= k;\n}",
    "c_func_re_decompile": " bool func0(int *arr, int len, int k) {\n    int sum = 0;\n    for (int i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - 1 - i]) {\n            return false;\n        }\n        sum += arr[i] + arr[len - 1 - i];\n    }\n    if (len % 2 == 1) {\n        sum += arr[len / 2];\n    }\n    return sum <= k;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
    "c_func_decompile": " bool func0(int *arr, int len, int k) {\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] * 2;\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}",
    "c_func_re_decompile": " bool func0(int *arr, int len, int k) {\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] * 2;\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
    "c_func_decompile": " bool func0(int *arr, int len, int k) {\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] * 2;\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}",
    "c_func_re_decompile": " bool func0(int *arr, int len, int k) {\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] * 2;\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
    "c_func_decompile": " void func0(int *a, int n, int *b) {\n  int i, j, t;\n  for (i = 0; i < n - 1; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n  int l = 0, r = n - 1, k = 0;\n  while (l <= r) {\n    if (l == r) {\n      b[k++] = a[l++];\n    } else {\n      b[k++] = a[l++];\n      b[k++] = a[r--];\n    }\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n  int i, j, t;\n  for (i = 0; i < n - 1; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n  int l = 0, r = n - 1, k = 0;\n  while (l <= r) {\n    if (l == r) {\n      b[k++] = a[l++];\n    } else {\n      b[k++] = a[l++];\n      b[k++] = a[r--];\n    }\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
    "c_func_decompile": " float func0(float a, float b, float c) {\n    float p, q, r;\n    if (a + b >= c) return 1.0;\n    if (a + c >= b) return 1.0;\n    if (b + c >= a) return 1.0;\n    p = (a + b + c) / 2.0;\n    q = p * (p - a) * (p - b) * (p - c);\n    return roundf(4.0f * sqrtf(q) / 3.0f) / 3.0f;\n}",
    "c_func_re_decompile": " float func0(float a, float b, float c) {\n    float p, q, r;\n    if (a + b >= c) return 1.0;\n    if (a + c >= b) return 1.0;\n    if (b + c >= a) return 1.0;\n    p = (a + b + c) / 2.0;\n    q = p * (p - a) * (p - b) * (p - c);\n    return roundf(4.0f * sqrtf(q) / 3.0f) / 3.0f;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
    "c_func_decompile": " float func0(float a, float b, float c) {\n    float p, q, r;\n    if (a + b >= c) return 1.0;\n    if (a + c >= b) return 1.0;\n    if (b + c >= a) return 1.0;\n    p = (a + b + c) / 2.0;\n    q = p * (p - a) * (p - b) * (p - c);\n    return roundf(sqrtf(q) / 4.0) / 3.0;\n}",
    "c_func_re_decompile": " float func0(float a, float b, float c) {\n    float p, q, r;\n    if (a + b >= c) return 1.0;\n    if (a + c >= b) return 1.0;\n    if (b + c >= a) return 1.0;\n    p = (a + b + c) / 2.0;\n    q = p * (p - a) * (p - b) * (p - c);\n    return roundf(sqrtf(q) / 4.0) / 3.0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b) {\n  int i, j, t;\n  for (i = 0; i < n-1; i++) {\n    for (j = i+1; j < n; j++) {\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n  i = 0;\n  j = n-1;\n  t = 0;\n  while (i <= j) {\n    b[t++] = a[i++];\n    if (i <= j) {\n      b[t++] = a[j--];\n    }\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n  int i, j, t;\n  for (i = 0; i < n-1; i++) {\n    for (j = i+1; j < n; j++) {\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n  i = 0;\n  j = n-1;\n  t = 0;\n  while (i <= j) {\n    b[t++] = a[i++];\n    if (i <= j) {\n      b[t++] = a[j--];\n    }\n  }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
    "c_func_decompile": " void func0(int *a, int n, int *b) {\n  int i, j, t;\n  for (i = 0; i < n-1; i++)\n    for (j = i+1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  for (i = 0; i < n-i-1; i++) {\n    b[2*i] = a[i];\n    b[2*i+1] = a[n-i-1];\n  }\n  if (i == n-i-1)\n    b[2*i] = a[i];\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n  int i, j, t;\n  for (i = 0; i < n-1; i++)\n    for (j = i+1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  for (i = 0; i < n-i-1; i++) {\n    b[2*i] = a[i];\n    b[2*i+1] = a[n-i-1];\n  }\n  if (i == n-i-1)\n    b[2*i] = a[i];\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, j, k, count = 0;\n  for (i = 0, j = n - 1; i < j; i++, j--) {\n    if (a[i] != a[j])\n      count++;\n  }\n  return count;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, j, k, count = 0;\n  for (i = 0, j = n - 1; i < j; i++, j--) {\n    if (a[i] != a[j])\n      count++;\n  }\n  return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int i;\n  for (i = 0; i*i*i <= (n > 0 ? n : -n); i++) {\n    if (i*i*i == (n > 0 ? n : -n)) {\n      return 1;\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int i;\n  for (i = 0; i*i*i <= (n > 0 ? n : -n); i++) {\n    if (i*i*i == (n > 0 ? n : -n)) {\n      return 1;\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b) {\n  int i, j, k, t;\n  for (i = 0; i < n - 1; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n  k = 0;\n  for (i = 0; i < n; i++) {\n    b[k++] = a[i];\n    if (i != n - 1) {\n      b[k++] = a[n - 1];\n    }\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n  int i, j, k, t;\n  for (i = 0; i < n - 1; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n  k = 0;\n  for (i = 0; i < n; i++) {\n    b[k++] = a[i];\n    if (i != n - 1) {\n      b[k++] = a[n - 1];\n    }\n  }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i;\n    if (n < 0)\n        n = -n;\n    for (i = 1; i * i * i <= n; i++)\n        if (i * i * i == n)\n            return 1;\n    return 0;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i;\n    if (n < 0)\n        n = -n;\n    if (n == 0)\n        return 1;\n    for (i = 1; i * i * i <= n; i++)\n        if (i * i * i == n)\n            return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
    "c_func_decompile": " float func0(float x, float y, float z) {\n    float a, b, c, s, t;\n    if (x + z <= y || y + z <= x || y + z <= x)\n        return 1.0;\n    s = (x + y + z) / 2.0;\n    t = s * (s - x) * (s - y) * (s - z);\n    a = (x + y + z) / 2.0;\n    b = (x + y - z) / 2.0;\n    c = (x - y + z) / 2.0;\n    return roundf(sqrtf(t) * 4.0 / 3.0) / 3.613;\n}",
    "c_func_re_decompile": " float func0(float x, float y, float z) {\n    float a, b, c, s, t;\n    if (x + y <= z || y + z <= x || y + z <= x)\n        return 1.0;\n    s = (x + y + z) / 2.0;\n    t = s * (s - x) * (s - y) * (s - z);\n    a = (x + y + z) / 2.0;\n    b = (x + y - z) / 2.0;\n    c = (x - y + z) / 2.0;\n    return roundf(sqrtf(t) * 4.0 / 3.0) / 3.613;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  int i, j;\n  i = 1;\n  j = 0;\n  while (i <= a && j < 100) {\n    if (i == a) {\n      return 1;\n    }\n    i = i * b;\n    j = j + 1;\n  }\n  return 0;\n}",
    "c_func_re_decompile": " int func0(int a, int b) {\n  int i, j;\n  i = 1;\n  j = 0;\n  while (i <= a && j < 100) {\n    if (i == a) {\n      return 1;\n    }\n    i = i * b;\n    j = j + 1;\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n, int k) {\n    int i, j;\n    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    for (i = 1, j = 0; i <= n && j < 100; i *= k, j++)\n        if (i == n) return 1;\n    return 0;\n}",
    "c_func_re_decompile": " int func0(int n, int k) {\n    int i, j;\n    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    for (i = 1, j = 0; i <= n && j < 100; i *= k, j++)\n        if (i == n) return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n, int k) {\n    int i, j;\n    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    for (i = 1, j = 0; i <= n && j < 100; i *= k, j++)\n        if (i == n) return 1;\n    return 0;\n}",
    "c_func_re_decompile": " int func0(int n, int k) {\n    int i, j;\n    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    for (i = 1, j = 0; i <= n && j < 100; i *= k, j++)\n        if (i == n) return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  int i, n = 0;\n  for (i = 0; i < strlen(s); i++)\n    if (strchr(\"aeiou\", s[i]))\n      n++;\n  return n;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  int i, n = 0;\n  for (i = 0; i < strlen(s); i++)\n    if (strchr(\"aeiou\", s[i]))\n      n++;\n  return n;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  int i, n = 0;\n  for (i = 0; i < strlen(s); i++)\n    if (strchr(\"aeiou\", s[i]))\n      n++;\n  return n;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  int i, n = 0;\n  for (i = 0; i < strlen(s); i++)\n    if (strchr(\"aeiou\", s[i]))\n      n++;\n  return n;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
    "c_func_decompile": "\nchar **func0(char **s1, int n1, char **s2, int n2) {\n  int i, len1 = 0, len2 = 0;\n  for (i = 0; i < n1; i++)\n    len1 += strlen(s1[i]);\n  for (i = 0; i < n2; i++)\n    len2 += strlen(s2[i]);\n  return len1 > len2 ? s1 : s2;\n}",
    "c_func_re_decompile": " char **func0(char **s1, int n1, char **s2, int n2) {\n  int i, len1 = 0, len2 = 0;\n  for (i = 0; i < n1; i++)\n    len1 += strlen(s1[i]);\n  for (i = 0; i < n2; i++)\n    len2 += strlen(s2[i]);\n  return len1 > len2 ? s1 : s2;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
    "c_func_decompile": "\nchar **func0(char **s1, int n1, char **s2, int n2) {\n    int i, len1 = 0, len2 = 0;\n    for (i = 0; i < n1; i++)\n        len1 += strlen(s1[i]);\n    for (i = 0; i < n2; i++)\n        len2 += strlen(s2[i]);\n    return len1 > len2 ? s1 : s2;\n}",
    "c_func_re_decompile": " char **func0(char **s1, int n1, char **s2, int n2) {\n    int i, len1 = 0, len2 = 0;\n    for (i = 0; i < n1; i++)\n        len1 += strlen(s1[i]);\n    for (i = 0; i < n2; i++)\n        len2 += strlen(s2[i]);\n    return len1 > len2 ? s1 : s2;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i, cnt = 0;\n    if (n < 2) return 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n            cnt++;\n        }\n    }\n    if (n > 1) cnt++;\n    return cnt == 3;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i, cnt = 0;\n    if (n < 2) return 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n            cnt++;\n        }\n    }\n    if (n > 1) cnt++;\n    return cnt == 3;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i, cnt = 0;\n    if (n < 2) return 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            cnt++;\n            n /= i;\n        }\n    }\n    if (n > 1) cnt++;\n    return cnt == 2;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i, cnt = 0;\n    if (n < 2) return 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            cnt++;\n            n /= i;\n        }\n    }\n    if (n > 1) cnt++;\n    return cnt == 3;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i, cnt = 0;\n    if (n < 2) return 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            cnt++;\n            n /= i;\n        }\n    }\n    if (n > 1) cnt++;\n    return cnt == 2;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i, cnt = 0;\n    if (n < 2) return 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            cnt++;\n            n /= i;\n        }\n    }\n    if (n > 1) cnt++;\n    return cnt == 3;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int count = 0;\n    int i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            n /= i;\n            count++;\n        }\n        i++;\n    }\n    if (n > 1) {\n        count++;\n    }\n    return count == 3;\n}",
    "c_func_re_decompile": "\nint func0(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int count = 0;\n    int i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            n /= i;\n            count++;\n        }\n        i++;\n    }\n    if (n > 1) {\n        count++;\n    }\n    return count == 3;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n, int m) {\n    int i = 0;\n    int p = 1;\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    while (p < n && i < 100) {\n        p = p * m;\n        i = i + 1;\n    }\n    if (p == n)\n        return 1;\n    else\n        return 0;\n}",
    "c_func_re_decompile": " int func0(int n, int m) {\n    int i = 0;\n    int p = 1;\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    while (p < n && i < 100) {\n        p = p * m;\n        i = i + 1;\n    }\n    if (p == n)\n        return 1;\n    else\n        return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    char *delim = \" \\t\\n\";\n    int count = 0;\n    int i;\n    for (i = 0; i < strlen(str); i++)\n        if (strchr(delim, str[i]) != NULL)\n            count++;\n    return count;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    char *delim = \" \\t\\n\";\n    int count = 0;\n    int i;\n    for (i = 0; i < strlen(str); i++)\n        if (strchr(delim, str[i]) != NULL)\n            count++;\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
    "c_func_decompile": "\nchar **func0(char **a, int n, char **b, int m) {\n  int i, sum1 = 0, sum2 = 0;\n  for (i = 0; i < n; i++)\n    sum1 += strlen(a[i]);\n  for (i = 0; i < m; i++)\n    sum2 += strlen(b[i]);\n  if (sum1 < sum2)\n    return a;\n  else if (sum1 > sum2)\n    return b;\n  else\n    return a;\n}",
    "c_func_re_decompile": " char **func0(char **a, int n, char **b, int m) {\n  int i, sum1 = 0, sum2 = 0;\n  for (i = 0; i < n; i++)\n    sum1 += strlen(a[i]);\n  for (i = 0; i < m; i++)\n    sum2 += strlen(b[i]);\n  if (sum1 < sum2)\n    return a;\n  else if (sum1 > sum2)\n    return b;\n  else\n    return a;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
    "c_func_decompile": "\nchar **func0(char **s1, int n1, char **s2, int n2) {\n    int i, len1 = 0, len2 = 0;\n    for (i = 0; i < n1; i++)\n        len1 += strlen(s1[i]);\n    for (i = 0; i < n2; i++)\n        len2 += strlen(s2[i]);\n    return len1 > len2 ? s1 : s2;\n}",
    "c_func_re_decompile": " char **func0(char **s1, int n1, char **s2, int n2) {\n    int i, len1 = 0, len2 = 0;\n    for (i = 0; i < n1; i++)\n        len1 += strlen(s1[i]);\n    for (i = 0; i < n2; i++)\n        len2 += strlen(s2[i]);\n    return len1 > len2 ? s1 : s2;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++)\n        if (strchr(\"aeiou\", str[i]) != NULL)\n            count++;\n    return count;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++)\n        if (strchr(\"aeiou\", str[i]) != NULL)\n            count++;\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i, j;\n    if (n < 0)\n        n = -n;\n    if (n == 0)\n        return 1;\n    for (i = 1;; i++) {\n        j = i * i * i;\n        if (j > n)\n            break;\n        if (j == n)\n            return i;\n    }\n    return 0;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i, j;\n    if (n < 0)\n        n = -n;\n    if (n == 0)\n        return 1;\n    for (i = 1;; i++) {\n        j = i * i * i;\n        if (j > n)\n            break;\n        if (j == n)\n            return i;\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i, j;\n    if (n < 0)\n        n = -n;\n    if (n == 0)\n        return 1;\n    for (i = 1;; i++) {\n        j = i * i * i;\n        if (j > n)\n            break;\n        if (j == n)\n            return i;\n    }\n    return 0;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i, j;\n    if (n < 0)\n        n = -n;\n    if (n == 0)\n        return 1;\n    for (i = 1;; i++) {\n        j = i * i * i;\n        if (j > n)\n            break;\n        if (j == n)\n            return i;\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i;\n    if (strlen(str) < 3)\n        return 0;\n    for (i = 2; i < strlen(str); i++)\n        if (str[i] == str[i - 1] || str[i] == str[i - 2])\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    int i;\n    if (strlen(str) < 3)\n        return 0;\n    for (i = 2; i < strlen(str); i++)\n        if (str[i] == str[i - 1] || str[i] == str[i - 2])\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
    "c_func_decompile": " int func0(char *s) {\n  size_t i, len = strlen(s);\n  for (i = 0; i < len - 2; i++) {\n    if (s[i] == s[i+2] || s[i+1] == s[i+2])\n      return 0;\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  size_t i, len = strlen(s);\n  for (i = 0; i < len - 2; i++) {\n    if (s[i] == s[i+2] || s[i+1] == s[i+2])\n      return 0;\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int len = strlen(str);\n    int i;\n    if (len < 2)\n        return 0;\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    int len = strlen(str);\n    int i;\n    if (len < 2)\n        return 0;\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n int i, len;\n\n len = strlen(str);\n if (len < 2)\n  return 0;\n for (i = 2; i * i <= len; i++)\n  if (len % i == 0)\n   return 0;\n return 1;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n int i, len;\n\n len = strlen(str);\n if (len < 2)\n  return 0;\n for (i = 2; i * i <= len; i++)\n  if (len % i == 0)\n   return 0;\n return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len;\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    int i, len;\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int i, result;\n  if (n <= 0) return 0;\n  if (n == 1) return 1;\n  result = 18;\n  for (i = 2; i < n; i++) {\n    result = result * 10;\n  }\n  return result;\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int i, result;\n  if (n <= 0) return 0;\n  if (n == 1) return 1;\n  result = 18;\n  for (i = 2; i < n; i++) {\n    result = result * 10;\n  }\n  return result;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int i, result = 1;\n  for (i = 0; i < n; i++) {\n    result *= 2;\n  }\n  return result;\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int i, result = 1;\n  for (i = 0; i < n; i++) {\n    result *= 2;\n  }\n  return result;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  int i, c, state, n;\n  const char *cs;\n  cs = s;\n  n = 0;\n  state = 0;\n  for (i = 0; cs[i] != '\\0'; i++) {\n    c = cs[i];\n    if (state == 0) {\n      if (c == 'I') {\n        state = 1;\n      } else {\n        state = 0;\n      }\n    } else {\n      if (state == 1) {\n        if (__ctype_b_loc()[(unsigned char)c] & (0x20)) {\n          state = 1;\n        } else {\n          state = 0;\n        }\n      }\n    }\n    if (state == 1) {\n      if (c == 'I') {\n        state = 1;\n      } else {\n        state = 0;\n      }\n    } else {\n      if (state == 0) {\n        if (c == 'I') {\n          state = 1;\n        } else {\n          state = 0;\n        }\n      }\n    }\n    if (state == 1) {\n      if (c == 'I') {\n        state = 1;\n      } else {\n        state = 0;\n      }\n    } else {\n      if (state == 0) {\n        if (c == 'I') {\n          state = 1;\n        } else {\n          state = 0;\n        }\n      }\n    }\n    if (state == 1) {\n      if (c == 'I') {\n        state = 1;\n      } else {\n        state = 0;\n      }\n    } else {\n      if (state == 0) {\n        if (c == 'I') {\n          state = 1;\n        } else {\n          state = 0;\n        }\n      }\n    }\n    if (state == 1) {\n      if (c == 'I') {\n        state = 1;\n      } else {\n        state = 0;\n      }\n    } else {\n      if (state == 0) {\n        if (c == 'I') {\n          state = 1;\n        } else {\n          state = 0;\n        }\n      }\n    }\n    if (state == 1) {\n      if (c == 'I') {\n        state = 1;\n      } else {\n        state = 0;\n      }\n    } else {\n      if (state == 0) {\n        if (c == 'I') {\n          state = 1;\n        } else {\n          state = 0;\n        }\n      }\n    }\n    if (state == 1) {\n      if (c == 'I') {\n        state = 1;\n      } else {\n        state = 0;\n      }\n    } else {\n      if (state == 0) {\n        if (c == 'I') {\n          state = 1;\n        } else {\n          state = 0;\n        }\n      }\n    }\n    if (state == 1) {\n      if (c == 'I') {\n        state = 1;\n      } else {\n        state = 0;\n      }\n    } else {\n      if (state == 0) {\n        if (c == 'I') {\n          state = 1;\n        } else {\n          state = 0;\n        }\n      }\n    }\n    if (state == 1) {\n      if (c == 'I') {\n        state = 1;\n      } else {\n        state = 0;\n      }\n    } else {\n      if (state == 0) {\n        if (c == 'I') {\n          state = 1;\n        } else {\n          state = 0;\n        }\n      }\n    }\n    if (state == 1) {\n      if (c == 'I') {\n        state = 1;\n      } else {\n        state = 0;\n      }\n    } else {\n      if (state == 0) {\n        if (c == 'I') {\n          state = 1;\n        } else {\n          state = 0;\n        }\n      }\n    }\n    if (state == 1) {\n      if (c == 'I') {\n        state = 1;\n      } else {\n        state = 0;\n      }\n",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len;\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    int i, len;\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    size_t len = strlen(str);\n    size_t i;\n    for (i = 0; i < len - 2; i++) {\n        if (str[i] == str[i + 2] || str[i + 1] == str[i + 2]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    size_t len = strlen(str);\n    size_t i;\n    for (i = 0; i < len - 2; i++) {\n        if (str[i] == str[i + 2] || str[i + 1] == str[i + 2]) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    size_t len = strlen(str);\n    size_t i;\n    for (i = 0; i < len - 2; i++) {\n        if (str[i] == str[i + 2] || str[i + 1] == str[i + 2]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    size_t len = strlen(str);\n    size_t i;\n    for (i = 0; i < len - 2; i++) {\n        if (str[i] == str[i + 2] || str[i + 1] == str[i + 2]) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 1; i < n; i += 2) {\n    if (a[i] % 2 == 0)\n      sum += a[i];\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 1; i < n; i += 2) {\n    if (a[i] % 2 == 0)\n      sum += a[i];\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int i, sum = 18;\n  if (n <= 0) return 0;\n  if (n == 1) return 18;\n  for (i = 2; i <= n; i++) {\n    sum *= 10;\n    sum += 18;\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int i, sum = 18;\n  if (n <= 0) return 0;\n  if (n == 1) return 18;\n  for (i = 2; i <= n; i++) {\n    sum *= 10;\n    sum += 18;\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int i, result;\n  if (n <= 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 18;\n  }\n  result = 18;\n  for (i = 2; i < n; i++) {\n    result *= 10;\n  }\n  return result;\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int i, result;\n  if (n <= 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 18;\n  }\n  result = 18;\n  for (i = 2; i < n; i++) {\n    result *= 10;\n  }\n  return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < 2*i+1 < n; i++) {\n    if (a[2*i+1] % 2 == 0) {\n      sum += a[2*i+1];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < 2*i+1 < n; i++) {\n    if (a[2*i+1] % 2 == 0) {\n      sum += a[2*i+1];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 1; i < n; i++) {\n    if (a[i] % 2 == 0)\n      sum += a[i];\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 1; i < n; i += 2) {\n    if (a[i] % 2 == 0)\n      sum += a[i];\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 1; i < n; i++) {\n    if (a[i] % 2 == 0)\n      sum += a[i];\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 1; i < n; i++) {\n    if (a[i] % 2 == 0)\n      sum += a[i];\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
    "c_func_decompile": " char *func0(int n) {\n  char *s = malloc(64);\n  if (s == NULL)\n    return NULL;\n  s[63] = '\\0';\n  int i = 62;\n  if (n == 0)\n    s[i--] = '0';\n  while (n > 0) {\n    s[i--] = '0' + n % 2;\n    n /= 2;\n  }\n  s[i--] = 'b';\n  s[i--] = 'd';\n  char *t = malloc(65 - i);\n  if (t == NULL) {\n    free(s);\n    return NULL;\n  }\n  strcpy(t, s + i);\n  t[strlen(t)] = 'd';\n  t[strlen(t) + 1] = 'b';\n  t[strlen(t) + 2] = '\\0';\n  free(s);\n  return t;\n}",
    "c_func_re_decompile": " char *func0(int n) {\n  char *s = malloc(64);\n  if (s == NULL)\n    return NULL;\n  s[63] = '\\0';\n  int i = 62;\n  if (n == 0)\n    s[i--] = '0';\n  while (n > 0) {\n    s[i--] = '0' + n % 2;\n    n /= 2;\n  }\n  s[i--] = 'b';\n  char *t = malloc(65 - i);\n  if (t == NULL) {\n    free(s);\n    return NULL;\n  }\n  strcpy(t, s + i);\n  t[strlen(t)] = 'd';\n  t[strlen(t) + 1] = 'b';\n  t[strlen(t) + 2] = '\\0';\n  free(s);\n  return t;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
    "c_func_decompile": " char *func0(int n) {\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    int i = 62;\n    s[63] = '\\0';\n    if (n == 0)\n        s[i--] = '0';\n    else\n        while (n > 0) {\n            s[i--] = (n % 2) + '0';\n            n /= 2;\n        }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    int j = i + 1;\n    int k = 62 - j;\n    char *t = malloc(k + 3);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    strcpy(t, s + j);\n    t[strlen(t)] = 'b';\n    t[strlen(t)] = 'd';\n    t[strlen(t)] = '\\0';\n    free(s);\n    return t;\n}",
    "c_func_re_decompile": " char *func0(int n) {\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    int i = 62;\n    s[63] = '\\0';\n    if (n == 0)\n        s[i--] = '0';\n    else\n        while (n > 0) {\n            s[i--] = (n % 2) + '0';\n            n /= 2;\n        }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    int j = i + 1;\n    int k = 62 - j;\n    char *t = malloc(k + 3);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    strcpy(t, s + j);\n    strcpy(t + strlen(t), \"bd\");\n    free(s);\n    return t;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
    "c_func_decompile": " char *func0(int n) {\n  char *s = malloc(64);\n  if (s == NULL)\n    return NULL;\n  s[63] = '\\0';\n  int i = 62;\n  if (n == 0) {\n    s[62] = '0';\n    i--;\n  } else {\n    while (n != 0) {\n      s[i] = (n & 1) + '0';\n      n >>= 1;\n      i--;\n    }\n  }\n  s[i] = 'b';\n  i--;\n  s[i] = 'd';\n  char *t = malloc(5);\n  if (t == NULL) {\n    free(s);\n    return NULL;\n  }\n  t = stpcpy(t, s + i);\n  t[0] = 'b';\n  t[1] = 'd';\n  t[2] = '\\0';\n  free(s);\n  return t;\n}",
    "c_func_re_decompile": " char *func0(int n) {\n  char *s = malloc(64);\n  if (s == NULL)\n    return NULL;\n  s[63] = '\\0';\n  int i = 62;\n  if (n == 0) {\n    s[62] = '0';\n    i--;\n  } else {\n    while (n != 0) {\n      s[i] = (n & 1) + '0';\n      n >>= 1;\n      i--;\n    }\n  }\n  s[i] = 'b';\n  i--;\n  s[i] = 'd';\n  char *t = malloc(5);\n  if (t == NULL) {\n    free(s);\n    return NULL;\n  }\n  t = stpcpy(t, s + i);\n  t[0] = 'b';\n  t[1] = 'd';\n  t[2] = '\\0';\n  free(s);\n  return t;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
    "c_func_decompile": " char *func0(int n) {\n    char buf[6];\n    char *p, *q;\n    int i, j, k;\n    __sprintf_chk(buf, 1, 6, \"%d\", n);\n    for (i = 0; buf[i]; i++)\n        k += buf[i] - '0';\n    p = malloc(33);\n    for (i = 0; k; k >>= 1, i++)\n        p[i] = k & 1 ? '1' : '0';\n    p[i] = 0;\n    for (j = i >> 1, q = p; --i; q++) {\n        k = *q;\n        *q = p[i];\n        p[i] = k;\n    }\n    return p;\n}",
    "c_func_re_decompile": " char *func0(int n) {\n    char buf[6];\n    char *p, *q;\n    int i, j, k;\n    __sprintf_chk(buf, 1, 6, \"%d\", n);\n    for (i = 0; buf[i]; i++)\n        k += buf[i] - '0';\n    p = malloc(33);\n    for (i = 0; k; k >>= 1, i++)\n        p[i] = k & 1 ? '1' : '0';\n    p[i] = 0;\n    for (j = i >> 1, q = p; --i; q++) {\n        k = *q;\n        *q = p[i];\n        p[i] = k;\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
    "c_func_decompile": " char *func0(int n) {\n  char *s = malloc(64);\n  if (s == NULL)\n    return NULL;\n  s[63] = '\\0';\n  int i = 62;\n  if (n == 0) {\n    s[62] = '0';\n    i--;\n  } else {\n    while (n != 0) {\n      s[i] = (n & 1) + '0';\n      n >>= 1;\n      i--;\n    }\n  }\n  s[i] = 'b';\n  i--;\n  s[i] = 'd';\n  char *t = malloc(5);\n  if (t == NULL) {\n    free(s);\n    return NULL;\n  }\n  t = stpcpy(t, s + i);\n  t[0] = 'b';\n  t[1] = 'd';\n  t[2] = '\\0';\n  free(s);\n  return t;\n}",
    "c_func_re_decompile": " char *func0(int n) {\n  char *s = malloc(64);\n  if (s == NULL)\n    return NULL;\n  s[63] = '\\0';\n  int i = 62;\n  if (n == 0) {\n    s[62] = '0';\n    i--;\n  } else {\n    while (n != 0) {\n      s[i] = (n & 1) + '0';\n      n >>= 1;\n      i--;\n    }\n  }\n  s[i] = 'b';\n  i--;\n  s[i] = 'd';\n  char *t = malloc(5);\n  if (t == NULL) {\n    free(s);\n    return NULL;\n  }\n  t = stpcpy(t, s + i);\n  t[0] = 'b';\n  t[1] = 'd';\n  t[2] = '\\0';\n  free(s);\n  return t;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
    "c_func_decompile": " char * func0(int n)\n{\n    char str[10];\n    sprintf(str, \"%d\", n);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n    char *ret = (char *)malloc(33);\n    int len = 0;\n    if (sum == 0)\n        ret[len++] = '0';\n    while (sum > 0) {\n        ret[len++] = sum % 2 + '0';\n        sum /= 2;\n    }\n    ret[len] = '\\0';\n    for (int i = 0; i < len / 2; i++) {\n        char tmp = ret[i];\n        ret[i] = ret[len - i - 1];\n        ret[len - i - 1] = tmp;\n    }\n    return ret;\n}",
    "c_func_re_decompile": " char * func0(int n)\n{\n    char str[10];\n    sprintf(str, \"%d\", n);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n    char *ret = (char *)malloc(33);\n    int len = 0;\n    if (sum == 0)\n        ret[len++] = '0';\n    while (sum > 0) {\n        ret[len++] = sum % 2 + '0';\n        sum /= 2;\n    }\n    ret[len] = '\\0';\n    for (int i = 0; i < len / 2; i++) {\n        char tmp = ret[i];\n        ret[i] = ret[len - i - 1];\n        ret[len - i - 1] = tmp;\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
    "c_func_decompile": " char *func0(int n) {\n    char buf[6];\n    char *p;\n    int i, j, k;\n    __sprintf_chk(buf, 1, 6, \"%d\", n);\n    for (i = 0; buf[i] && buf[i] != '\\n'; i++)\n        ;\n    for (j = 0; buf[j]; j++)\n        n = n - '0' + buf[j];\n    p = malloc(33);\n    for (k = 0; n; n >>= 1, k++)\n        p[k] = n & 1 ? '1' : '0';\n    p[k] = '\\0';\n    for (i = 0, j = k - 1; i < j; i++, j--) {\n        k = p[i];\n        p[i] = p[j];\n        p[j] = k;\n    }\n    return p;\n}",
    "c_func_re_decompile": " char *func0(int n) {\n    char buf[6];\n    char *p;\n    int i, j, k;\n    __sprintf_chk(buf, 1, 6, \"%d\", n);\n    for (i = 0; buf[i] && buf[i] != '\\n'; i++)\n        ;\n    for (j = 0; buf[j]; j++)\n        n = n - '0' + buf[j];\n    p = malloc(33);\n    for (k = 0; n; n >>= 1, k++)\n        p[k] = n & 1 ? '1' : '0';\n    p[k] = '\\0';\n    for (i = 0, j = k - 1; i < j; i++, j--) {\n        k = p[i];\n        p[i] = p[j];\n        p[j] = k;\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(float *x, int n) {\n  char **y = (char **)malloc(n * sizeof(char *));\n  int i;\n  for (i = 0; i < n; i++) {\n    if (x[i] >= 100)\n      y[i] = \"A\";\n    else if (x[i] >= 90)\n      y[i] = \"B\";\n    else if (x[i] >= 80)\n      y[i] = \"C\";\n    else if (x[i] >= 70)\n      y[i] = \"D\";\n    else if (x[i] >= 60)\n      y[i] = \"E\";\n    else if (x[i] >= 50)\n      y[i] = \"F\";\n    else if (x[i] >= 40)\n      y[i] = \"G\";\n    else if (x[i] >= 30)\n      y[i] = \"H\";\n    else if (x[i] >= 20)\n      y[i] = \"I\";\n    else if (x[i] >= 10)\n      y[i] = \"J\";\n    else\n      y[i] = \"K\";\n  }\n  return y;\n}",
    "c_func_re_decompile": " char **func0(float *x, int n) {\n  char **y = (char **)malloc(n * sizeof(char *));\n  int i;\n  for (i = 0; i < n; i++) {\n    if (x[i] >= 100)\n      y[i] = \"A\";\n    else if (x[i] >= 90)\n      y[i] = \"B\";\n    else if (x[i] >= 80)\n      y[i] = \"C\";\n    else if (x[i] >= 70)\n      y[i] = \"D\";\n    else if (x[i] >= 60)\n      y[i] = \"E\";\n    else if (x[i] >= 50)\n      y[i] = \"F\";\n    else if (x[i] >= 40)\n      y[i] = \"G\";\n    else if (x[i] >= 30)\n      y[i] = \"H\";\n    else if (x[i] >= 20)\n      y[i] = \"I\";\n    else if (x[i] >= 10)\n      y[i] = \"J\";\n    else if (x[i] >= 0)\n      y[i] = \"K\";\n    else\n      y[i] = \"L\";\n  }\n  return y;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(float *x, int n) {\n  char **y = (char **)malloc(n * sizeof(char *));\n  int i;\n  for (i = 0; i < n; i++) {\n    if (x[i] >= 100)\n      y[i] = \"A\";\n    else if (x[i] >= 90)\n      y[i] = \"B\";\n    else if (x[i] >= 80)\n      y[i] = \"C\";\n    else if (x[i] >= 70)\n      y[i] = \"D\";\n    else if (x[i] >= 60)\n      y[i] = \"E\";\n    else if (x[i] >= 50)\n      y[i] = \"F\";\n    else if (x[i] >= 40)\n      y[i] = \"G\";\n    else if (x[i] >= 30)\n      y[i] = \"H\";\n    else if (x[i] >= 20)\n      y[i] = \"I\";\n    else if (x[i] >= 10)\n      y[i] = \"J\";\n    else\n      y[i] = \"K\";\n  }\n  return y;\n}",
    "c_func_re_decompile": " char **func0(float *x, int n) {\n  char **y = (char **)malloc(n * sizeof(char *));\n  int i;\n  for (i = 0; i < n; i++) {\n    if (x[i] >= 100)\n      y[i] = \"A\";\n    else if (x[i] >= 90)\n      y[i] = \"B\";\n    else if (x[i] >= 80)\n      y[i] = \"C\";\n    else if (x[i] >= 70)\n      y[i] = \"D\";\n    else if (x[i] >= 60)\n      y[i] = \"E\";\n    else if (x[i] >= 50)\n      y[i] = \"F\";\n    else if (x[i] >= 40)\n      y[i] = \"G\";\n    else if (x[i] >= 30)\n      y[i] = \"H\";\n    else if (x[i] >= 20)\n      y[i] = \"I\";\n    else if (x[i] >= 10)\n      y[i] = \"J\";\n    else if (x[i] >= 0)\n      y[i] = \"K\";\n    else\n      y[i] = \"L\";\n  }\n  return y;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *a, char *b) {\n    int i, j;\n    for (i = 0; a[i] != '\\0'; i++) {\n        j = (a[i] - 93) % 26 + 97;\n        b[i] = j;\n    }\n    b[i] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *a, char *b) {\n    int i, j;\n    for (i = 0; a[i] != '\\0'; i++) {\n        j = (a[i] - 93) % 26 + 97;\n        b[i] = j;\n    }\n    b[i] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t) {\n    int i = 0;\n    while (*s) {\n        *t = *s - 'a' + 'A';\n        t++;\n        s++;\n        i++;\n    }\n    *t = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *s, char *t) {\n    int i = 0;\n    while (*s) {\n        *t = *s - 'a' + 'A';\n        t++;\n        s++;\n        i++;\n    }\n    *t = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t) {\n    int i = 0;\n    while (s[i] != '\\0') {\n        t[i] = s[i] - ']' + 'a';\n        t[i] = t[i] % 26 + 'a';\n        i++;\n    }\n    t[i] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *s, char *t) {\n    int i = 0;\n    while (s[i] != '\\0') {\n        t[i] = s[i] - ']' + 'a';\n        t[i] = t[i] % 26 + 'a';\n        i++;\n    }\n    t[i] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
    "c_func_decompile": " char* func0(int n) {\n    char str[6];\n    __sprintf_chk(str, 1, 6, \"%d\", n);\n    int i = 0;\n    int num = 0;\n    while (str[i] != '\\0') {\n        num = num * 10 + (str[i] - '0');\n        i++;\n    }\n    char* result = (char*)malloc(33);\n    i = 0;\n    while (num != 0) {\n        result[i] = num % 2 + '0';\n        num /= 2;\n        i++;\n    }\n    result[i] = '\\0';\n    int j, len = i;\n    for (j = 0; j < len / 2; j++) {\n        char temp = result[j];\n        result[j] = result[len - j - 1];\n        result[len - j - 1] = temp;\n    }\n    return result;\n}",
    "c_func_re_decompile": " char* func0(int n) {\n    char str[6];\n    __sprintf_chk(str, 1, 6, \"%d\", n);\n    int i = 0;\n    int num = 0;\n    while (str[i] != '\\0') {\n        num = num * 10 + (str[i] - '0');\n        i++;\n    }\n    char* result = (char*)malloc(33);\n    i = 0;\n    while (num > 0) {\n        result[i] = num % 2 + '0';\n        num /= 2;\n        i++;\n    }\n    if (i == 0) {\n        result[i] = '0';\n        i++;\n    }\n    result[i] = '\\0';\n    int j, len = i;\n    for (j = 0; j < len / 2; j++) {\n        char temp = result[j];\n        result[j] = result[len - j - 1];\n        result[len - j - 1] = temp;\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t) {\n    int i = 0;\n    while (*s) {\n        *t = *s - 'a' + 'A';\n        t++;\n        s++;\n        i++;\n    }\n    *t = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *s, char *t) {\n    int i = 0;\n    while (*s) {\n        *t = (*s - 'a' + 1) % 26 + 'a';\n        t++;\n        s++;\n        i++;\n    }\n    *t = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
    "c_func_decompile": "\nint **func0(int **arr, int n, int *m, int k, int *len) {\n    int **res = (int **)malloc(100 * sizeof(int *));\n    int i, j, cnt = 0;\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (arr[i][j] == k) {\n                res[cnt] = (int *)malloc(2 * sizeof(int));\n                res[cnt][0] = i;\n                res[cnt][1] = j;\n                cnt++;\n            }\n        }\n    }\n    *len = cnt;\n    return res;\n}",
    "c_func_re_decompile": " int **func0(int **arr, int n, int *m, int k, int *len) {\n    int **res = (int **)malloc(100 * sizeof(int *));\n    int i, j, cnt = 0;\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (arr[i][j] == k) {\n                res[cnt] = (int *)malloc(2 * sizeof(int));\n                res[cnt][0] = i;\n                res[cnt][1] = j;\n                cnt++;\n            }\n        }\n    }\n    *len = cnt;\n    return res;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
    "c_func_decompile": "\nint **func0(int **a, int n, int *m, int x, int *k) {\n    int i, j, l = 0;\n    int **b = (int **)malloc(100 * sizeof(int *));\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (a[i][j] == x) {\n                b[l] = (int *)malloc(2 * sizeof(int));\n                b[l][0] = i;\n                b[l][1] = j;\n                l++;\n            }\n        }\n    }\n    *k = l;\n    return b;\n}",
    "c_func_re_decompile": " int **func0(int **a, int n, int *m, int x, int *k) {\n    int i, j, l = 0;\n    int **b = (int **)malloc(100 * sizeof(int *));\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (a[i][j] == x) {\n                b[l] = (int *)malloc(2 * sizeof(int));\n                b[l][0] = i;\n                b[l][1] = j;\n                l++;\n            }\n        }\n    }\n    *k = l;\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
    "c_func_decompile": "\nint **func0(int **arr, int n, int *m, int x, int *k) {\n    int i, j, l = 0;\n    int **res = (int **)malloc(100 * sizeof(int *));\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (arr[i][j] == x) {\n                res[l] = (int *)malloc(2 * sizeof(int));\n                res[l][0] = i;\n                res[l][1] = j;\n                l++;\n            }\n        }\n    }\n    *k = l;\n    return res;\n}",
    "c_func_re_decompile": " int **func0(int **arr, int n, int *m, int x, int *k) {\n    int i, j, l = 0;\n    int **res = (int **)malloc(100 * sizeof(int *));\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (arr[i][j] == x) {\n                res[l] = (int *)malloc(2 * sizeof(int));\n                res[l][0] = i;\n                res[l][1] = j;\n                l++;\n            }\n        }\n    }\n    *k = l;\n    return res;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
    "c_func_decompile": " char **func0(float *x, int n) {\n    int i;\n    char **y = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        if (x[i] >= 0.9) {\n            y[i] = \"A\";\n        } else if (x[i] >= 0.8) {\n            y[i] = \"B\";\n        } else if (x[i] >= 0.7) {\n            y[i] = \"C\";\n        } else if (x[i] >= 0.6) {\n            y[i] = \"D\";\n        } else if (x[i] >= 0.5) {\n            y[i] = \"E\";\n        } else if (x[i] >= 0.4) {\n            y[i] = \"F\";\n        } else if (x[i] >= 0.3) {\n            y[i] = \"G\";\n        } else if (x[i] >= 0.2) {\n            y[i] = \"H\";\n        } else if (x[i] >= 0.1) {\n            y[i] = \"I\";\n        } else if (x[i] >= 0.05) {\n            y[i] = \"J\";\n        } else if (x[i] >= 0.01) {\n            y[i] = \"K\";\n        } else if (x[i] >= 0.001) {\n            y[i] = \"L\";\n        } else {\n            y[i] = \"M\";\n        }\n    }\n    return y;\n}",
    "c_func_re_decompile": " char **func0(float *x, int n) {\n    int i;\n    char **y = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        if (x[i] >= 0.9) {\n            y[i] = \"A\";\n        } else if (x[i] >= 0.8) {\n            y[i] = \"B\";\n        } else if (x[i] >= 0.7) {\n            y[i] = \"C\";\n        } else if (x[i] >= 0.6) {\n            y[i] = \"D\";\n        } else if (x[i] >= 0.5) {\n            y[i] = \"E\";\n        } else if (x[i] >= 0.4) {\n            y[i] = \"F\";\n        } else if (x[i] >= 0.3) {\n            y[i] = \"G\";\n        } else if (x[i] >= 0.2) {\n            y[i] = \"H\";\n        } else if (x[i] >= 0.1) {\n            y[i] = \"I\";\n        } else if (x[i] >= 0.05) {\n            y[i] = \"J\";\n        } else if (x[i] >= 0.01) {\n            y[i] = \"K\";\n        } else if (x[i] >= 0.001) {\n            y[i] = \"L\";\n        } else {\n            y[i] = \"M\";\n        }\n    }\n    return y;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(float a, float b, float c) {\n  if (roundf(a) != a) return 0;\n  if (roundf(b) != b) return 0;\n  if (roundf(c) != c) return 0;\n  if (a + b == c || a + c == b || b + c == a) return 1;\n  return 0;\n}",
    "c_func_re_decompile": " int func0(float a, float b, float c) {\n  if (roundf(a) != a) return 0;\n  if (roundf(b) != b) return 0;\n  if (roundf(c) != c) return 0;\n  if (a + b == c || a + c == b || b + c == a) return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
    "c_func_decompile": " char *func0(char *str)\n{\n    int i, j, k, len, pos, temp;\n    char *result, ch[50];\n    len = strlen(str);\n    result = (char *)malloc(len + 2);\n    pos = 0;\n    k = 0;\n    for (i = 0; i <= len; i++)\n    {\n        if (str[i] == ' ' || str[i] == '\\0')\n        {\n            for (j = 0; j < k - 1; j++)\n            {\n                for (temp = j + 1; temp < k; temp++)\n                {\n                    if (ch[j] > ch[temp])\n                    {\n                        char t = ch[j];\n                        ch[j] = ch[temp];\n                        ch[temp] = t;\n                    }\n                }\n            }\n            if (pos > 0)\n                result[pos++] = ' ';\n            for (j = 0; j < k; j++)\n                result[pos++] = ch[j];\n            k = 0;\n        }\n        else\n            ch[k++] = str[i];\n    }\n    result[pos] = '\\0';\n    return result;\n}",
    "c_func_re_decompile": " char *func0(char *str)\n{\n    int i, j, k, len, pos, temp;\n    char *result, ch[50];\n    len = strlen(str);\n    result = (char *)malloc(len + 2);\n    pos = 0;\n    k = 0;\n    for (i = 0; i <= len; i++)\n    {\n        if (str[i] == ' ' || str[i] == '\\0')\n        {\n            for (j = 0; j < k - 1; j++)\n            {\n                for (temp = j + 1; temp < k; temp++)\n                {\n                    if (ch[j] > ch[temp])\n                    {\n                        char t = ch[j];\n                        ch[j] = ch[temp];\n                        ch[temp] = t;\n                    }\n                }\n            }\n            if (pos > 0)\n                result[pos++] = ' ';\n            for (j = 0; j < k; j++)\n                result[pos++] = ch[j];\n            k = 0;\n        }\n        else\n            ch[k++] = str[i];\n    }\n    result[pos] = '\\0';\n    return result;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
    "c_func_decompile": " char *func0(char *s) {\n    int i, j, k, l, m, n;\n    char *p, *q, t;\n    char a[32];\n    n = strlen(s);\n    p = (char *)malloc(n + 2);\n    i = j = k = 0;\n    while (i <= n) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (l = 0; l < j - 1; l++)\n                for (m = l + 1; m < j; m++)\n                    if (a[l] > a[m]) {\n                        t = a[l];\n                        a[l] = a[m];\n                        a[m] = t;\n                    }\n            if (k > 0)\n                p[k++] = ' ';\n            for (l = 0; l < j; l++)\n                p[k++] = a[l];\n            j = 0;\n        } else\n            a[j++] = s[i];\n        i++;\n    }\n    p[k] = '\\0';\n    return p;\n}",
    "c_func_re_decompile": " char *func0(char *s) {\n    int i, j, k, l, m, n;\n    char *p, *q, t;\n    char a[32];\n    n = strlen(s);\n    p = (char *)malloc(n + 2);\n    i = j = k = 0;\n    while (i <= n) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (l = 0; l < j - 1; l++)\n                for (m = l + 1; m < j; m++)\n                    if (a[l] > a[m]) {\n                        t = a[l];\n                        a[l] = a[m];\n                        a[m] = t;\n                    }\n            if (k > 0)\n                p[k++] = ' ';\n            for (l = 0; l < j; l++)\n                p[k++] = a[l];\n            j = 0;\n        } else\n            a[j++] = s[i];\n        i++;\n    }\n    p[k] = '\\0';\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int i, max, second;\n    max = second = 0x7fffffff;\n    for (i = 0; i < n; i++) {\n        if (a[i] < max) {\n            second = max;\n            max = a[i];\n        } else if (a[i] != max) {\n            if (a[i] < second) {\n                second = a[i];\n            }\n        }\n    }\n    if (second == 0x7fffffff) {\n        return -1;\n    }\n    return second;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, max, second;\n    max = second = 0x7fffffff;\n    for (i = 0; i < n; i++) {\n        if (a[i] < max) {\n            second = max;\n            max = a[i];\n        } else if (a[i] != max) {\n            if (a[i] < second) {\n                second = a[i];\n            }\n        }\n    }\n    if (second == 0x7fffffff) {\n        return -1;\n    }\n    return second;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int i, max, second;\n    if (n <= 1) return -1;\n    max = second = 0x7fffffff;\n    for (i = 0; i < n; i++) {\n        if (a[i] >= max) {\n            second = max;\n            max = a[i];\n        } else if (a[i] < max && a[i] >= second) {\n            second = a[i];\n        }\n    }\n    if (second == 0x7fffffff) return -1;\n    return second;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, max, second;\n    if (n <= 1) return -1;\n    max = second = 0x7fffffff;\n    for (i = 0; i < n; i++) {\n        if (a[i] >= max) {\n            second = max;\n            max = a[i];\n        } else if (a[i] < max && a[i] >= second) {\n            second = a[i];\n        }\n    }\n    if (second == 0x7fffffff) return -1;\n    return second;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, max, second;\n  max = second = 0x7fffffff;\n  for (i = 0; i < n; i++) {\n    if (a[i] < second) {\n      second = a[i];\n    } else if (a[i] < max) {\n      max = a[i];\n    } else if (a[i] == second) {\n      second = max;\n    }\n  }\n  if (max == 0x7fffffff) {\n    return -1;\n  }\n  return max;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, max, second;\n  max = second = 0x7fffffff;\n  for (i = 0; i < n; i++) {\n    if (a[i] < second) {\n      second = a[i];\n    } else if (a[i] < max) {\n      max = a[i];\n    } else if (a[i] == second) {\n      second = max;\n    }\n  }\n  if (max == 0x7fffffff) {\n    return -1;\n  }\n  return max;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(float *a, int n) {\n  char **b = (char **)malloc(n * sizeof(char *));\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= 1.0) {\n      b[i] = \"A\";\n    } else if (a[i] > 0.9) {\n      b[i] = \"B\";\n    } else if (a[i] > 0.8) {\n      b[i] = \"C\";\n    } else if (a[i] > 0.7) {\n      b[i] = \"D\";\n    } else if (a[i] > 0.6) {\n      b[i] = \"E\";\n    } else if (a[i] > 0.5) {\n      b[i] = \"F\";\n    } else if (a[i] > 0.4) {\n      b[i] = \"G\";\n    } else if (a[i] > 0.3) {\n      b[i] = \"H\";\n    } else if (a[i] > 0.2) {\n      b[i] = \"I\";\n    } else if (a[i] > 0.1) {\n      b[i] = \"J\";\n    } else if (a[i] > 0.0) {\n      b[i] = \"K\";\n    } else {\n      b[i] = \"L\";\n    }\n  }\n  return b;\n}",
    "c_func_re_decompile": " char **func0(float *a, int n) {\n  char **b = (char **)malloc(n * sizeof(char *));\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= 1.0) {\n      b[i] = \"A\";\n    } else if (a[i] > 0.9) {\n      b[i] = \"B\";\n    } else if (a[i] > 0.8) {\n      b[i] = \"C\";\n    } else if (a[i] > 0.7) {\n      b[i] = \"D\";\n    } else if (a[i] > 0.6) {\n      b[i] = \"E\";\n    } else if (a[i] > 0.5) {\n      b[i] = \"F\";\n    } else if (a[i] > 0.4) {\n      b[i] = \"G\";\n    } else if (a[i] > 0.3) {\n      b[i] = \"H\";\n    } else if (a[i] > 0.2) {\n      b[i] = \"I\";\n    } else if (a[i] > 0.1) {\n      b[i] = \"J\";\n    } else if (a[i] > 0.0) {\n      b[i] = \"K\";\n    } else if (a[i] > -0.1) {\n      b[i] = \"L\";\n    } else if (a[i] > -0.2) {\n      b[i] = \"M\";\n    } else if (a[i] > -0.3) {\n      b[i] = \"N\";\n    } else if (a[i] > -0.4) {\n      b[i] = \"O\";\n    } else if (a[i] > -0.5) {\n      b[i] = \"P\";\n    } else if (a[i] > -0.6) {\n      b[i] = \"Q\";\n    } else if (a[i] > -0.7) {\n      b[i] = \"R\";\n    } else if (a[i] > -0.8) {\n      b[i] = \"S\";\n    } else if (a[i] > -0.9) {\n      b[i] = \"T\";\n    } else {\n      b[i] = \"U\";\n    }\n  }\n  return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(float a, float b, float c) {\n  if (roundf(a) != a) return 0;\n  if (roundf(b) != b) return 0;\n  if (roundf(c) != c) return 0;\n  if (a + b == c) return 1;\n  if (a + c == b) return 1;\n  if (b + c == a) return 1;\n  return 0;\n}",
    "c_func_re_decompile": " int func0(float a, float b, float c) {\n  if (roundf(a) != a) return 0;\n  if (roundf(b) != b) return 0;\n  if (roundf(c) != c) return 0;\n  if (a + b == c) return 1;\n  if (a + c == b) return 1;\n  if (b + c == a) return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
    "c_func_decompile": " char *func0(char *s)\n{\n  int i, j, k, l, m, n;\n  char *p, *q, *r, c;\n  p = s;\n  n = strlen(p);\n  r = (char *)malloc((unsigned)(n + 2));\n  q = r;\n  i = 0;\n  k = 0;\n  while (i <= n) {\n    if (*p == ' ' || *p == '\\0') {\n      l = k;\n      k = 0;\n      for (j = 0; j < l - 1; j++) {\n        for (m = j + 1; m < l; m++) {\n          if (q[j] > q[m]) {\n            c = q[j];\n            q[j] = q[m];\n            q[m] = c;\n          }\n        }\n      }\n      if (k != 0) {\n        q[i] = ' ';\n        i++;\n      }\n      if (l != 0) {\n        memcpy(q + i, q + i - l, (unsigned)l);\n        i += l;\n      }\n    }\n    else {\n      q[i] = *p;\n      i++;\n      k++;\n    }\n    p++;\n  }\n  q[i] = '\\0';\n  return (r);\n}",
    "c_func_re_decompile": " char *func0(char *s)\n{\n  int i, j, k, l, m, n;\n  char *p, *q, *r, c;\n  char t[32];\n  p = s;\n  n = strlen(p);\n  r = (char *)malloc((unsigned)(n + 2));\n  q = r;\n  i = 0;\n  k = 0;\n  while (i <= n) {\n    if (*p == ' ' || *p == '\\0') {\n      l = k;\n      k = 0;\n      for (j = 0; j < l - 1; j++) {\n        for (m = j + 1; m < l; m++) {\n          if (t[j] > t[m]) {\n            c = t[j];\n            t[j] = t[m];\n            t[m] = c;\n          }\n        }\n      }\n      if (k != 0) {\n        q[i] = ' ';\n        i++;\n      }\n      if (l != 0) {\n        memcpy(q + i, t, (unsigned)l);\n        i += l;\n      }\n    }\n    else {\n      t[k] = *p;\n      k++;\n    }\n    p++;\n  }\n  q[i] = '\\0';\n  return (r);\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
    "c_func_decompile": " int func0(float a, float b, float c) {\n  if (roundf(a) != a)\n    return 0;\n  if (roundf(b) != b)\n    return 0;\n  if (roundf(c) != c)\n    return 0;\n  if (a + b == c)\n    return 1;\n  if (a + c == b)\n    return 1;\n  if (b + c == a)\n    return 1;\n  return 0;\n}",
    "c_func_re_decompile": " int func0(float a, float b, float c) {\n  if (roundf(a) != a)\n    return 0;\n  if (roundf(b) != b)\n    return 0;\n  if (roundf(c) != c)\n    return 0;\n  if (a + b == c)\n    return 1;\n  if (a + c == b)\n    return 1;\n  if (b + c == a)\n    return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
    "c_func_decompile": " char *func0(char *s)\n{\n  int i, j, k, l, m, n;\n  char *p, *q, *r, c;\n  p = s;\n  n = strlen(p);\n  r = (char *)malloc((size_t)(n + 2));\n  q = r;\n  i = 0;\n  k = 0;\n  while (i <= n) {\n    if (*p == ' ' || *p == '\\0') {\n      l = k;\n      k = 0;\n      for (j = 0; j < l - 1; j++) {\n        for (m = j + 1; m < l; m++) {\n          if (q[j] > q[m]) {\n            c = q[j];\n            q[j] = q[m];\n            q[m] = c;\n          }\n        }\n      }\n      if (k != 0) {\n        q[i] = ' ';\n        i++;\n      }\n      if (l != 0) {\n        memcpy(q + i, q + i - l, (size_t)l);\n        i += l;\n      }\n    }\n    else {\n      q[i] = *p;\n      i++;\n      k++;\n    }\n    p++;\n  }\n  q[i] = '\\0';\n  return r;\n}",
    "c_func_re_decompile": " char *func0(char *s)\n{\n  int i, j, k, l, m, n;\n  char *p, *q, *r, c;\n  char t[32];\n  p = s;\n  n = strlen(p);\n  r = (char *)malloc((size_t)(n + 2));\n  q = r;\n  i = 0;\n  k = 0;\n  while (i <= n) {\n    if (*p == ' ' || *p == '\\0') {\n      l = k;\n      k = 0;\n      for (j = 0; j < l - 1; j++) {\n        for (m = j + 1; m < l; m++) {\n          if (t[j] > t[m]) {\n            c = t[j];\n            t[j] = t[m];\n            t[m] = c;\n          }\n        }\n      }\n      if (k != 0) {\n        q[i] = ' ';\n        i++;\n      }\n      if (l != 0) {\n        memcpy(q + i, t, (size_t)l);\n        i += l;\n      }\n    }\n    else {\n      t[k] = *p;\n      k++;\n    }\n    p++;\n  }\n  q[i] = '\\0';\n  return r;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
    "c_func_decompile": " int func0(float a, float b, float c) {\n  if (roundf(a) != a)\n    return 0;\n  if (roundf(b) != b)\n    return 0;\n  if (roundf(c) != c)\n    return 0;\n  if (a + b == c)\n    return 1;\n  if (a + c == b)\n    return 1;\n  if (b + c == a)\n    return 1;\n  return 0;\n}",
    "c_func_re_decompile": " int func0(float a, float b, float c) {\n  if (roundf(a) != a)\n    return 0;\n  if (roundf(b) != b)\n    return 0;\n  if (roundf(c) != c)\n    return 0;\n  if (a + b == c)\n    return 1;\n  if (a + c == b)\n    return 1;\n  if (b + c == a)\n    return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    if (n < 2) return -1;\n    int max = (1 << 31) - 1;\n    int second_max = (1 << 31) - 1;\n    for (int i = 0; i < n; i++) {\n        if (a[i] > max) {\n            second_max = max;\n            max = a[i];\n        } else if (a[i] > second_max && a[i] != max) {\n            second_max = a[i];\n        }\n    }\n    if (second_max == (1 << 31) - 1) return -1;\n    return second_max;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    if (n < 2) return -1;\n    int max = (1 << 31) - 1;\n    int second_max = (1 << 31) - 1;\n    for (int i = 0; i < n; i++) {\n        if (a[i] > max) {\n            second_max = max;\n            max = a[i];\n        } else if (a[i] > second_max && a[i] != max) {\n            second_max = a[i];\n        }\n    }\n    if (second_max == (1 << 31) - 1) return -1;\n    return second_max;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int **b, int *m) {\n    *m = n;\n    if (n == 0) {\n        *b = NULL;\n        return;\n    }\n    *b = (int *)malloc(n * sizeof(int));\n    if (*b == NULL) {\n        exit(1);\n    }\n    for (int i = 0; i < n; i++) {\n        (*b)[i] = a[i];\n    }\n    int is_odd = (a[0] + a[n - 1]) % 2 == 1;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (is_odd) {\n                if ((*b)[i] > (*b)[j]) {\n                    int tmp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = tmp;\n                }\n            } else {\n                if ((*b)[i] < (*b)[j]) {\n                    int tmp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = tmp;\n                }\n            }\n        }\n    }\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int **b, int *m) {\n    *m = n;\n    if (n == 0) {\n        *b = NULL;\n        return;\n    }\n    *b = (int *)malloc(n * sizeof(int));\n    if (*b == NULL) {\n        exit(1);\n    }\n    for (int i = 0; i < n; i++) {\n        (*b)[i] = a[i];\n    }\n    int is_odd = (a[0] + a[n - 1]) % 2 == 1;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (is_odd) {\n                if ((*b)[i] > (*b)[j]) {\n                    int tmp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = tmp;\n                }\n            } else {\n                if ((*b)[i] < (*b)[j]) {\n                    int tmp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = tmp;\n                }\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int i, j, k, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        k = a[i];\n        if (k > 1) {\n            int flag = 1;\n            for (j = 2; j * j <= k; j++) {\n                if (k % j == 0) {\n                    flag = 0;\n                    break;\n                }\n            }\n            if (flag) {\n                max = max > k ? max : k;\n            }\n        }\n    }\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, j, k, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        k = a[i];\n        if (k > 1) {\n            int flag = 1;\n            for (j = 2; j * j <= k; j++) {\n                if (k % j == 0) {\n                    flag = 0;\n                    break;\n                }\n            }\n            if (flag) {\n                max = max > k ? max : k;\n            }\n        }\n    }\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 2) continue;\n        for (j = 2; j * j <= a[i]; j++) {\n            if (a[i] % j == 0) break;\n        }\n        if (j * j > a[i]) {\n            if (a[i] > max) max = a[i];\n        }\n    }\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 2) continue;\n        for (j = 2; j * j <= a[i]; j++) {\n            if (a[i] % j == 0) break;\n        }\n        if (j * j > a[i]) {\n            if (a[i] > max) max = a[i];\n        }\n    }\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int i, j, k, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 1) {\n            for (j = 2; j * j <= a[i]; j++) {\n                if (a[i] % j == 0) {\n                    break;\n                }\n            }\n            if (j * j > a[i]) {\n                k = a[i];\n                while (k > 0) {\n                    sum += k % 10;\n                    k /= 10;\n                }\n                if (sum > max) {\n                    max = sum;\n                }\n                sum = 0;\n            }\n        }\n    }\n    return max;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, j, k, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 1) {\n            for (j = 2; j * j <= a[i]; j++) {\n                if (a[i] % j == 0) {\n                    break;\n                }\n            }\n            if (j * j > a[i]) {\n                k = a[i];\n                while (k > 0) {\n                    sum += k % 10;\n                    k /= 10;\n                }\n                if (sum > max) {\n                    max = sum;\n                }\n                sum = 0;\n            }\n        }\n    }\n    return max;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] <= 1)\n            continue;\n        if (a[i] <= 3) {\n            max = a[i];\n            continue;\n        }\n        for (j = 2; j * j <= a[i]; j++) {\n            if (a[i] % j == 0)\n                break;\n        }\n        if (j * j > a[i])\n            max = a[i];\n    }\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] <= 1)\n            continue;\n        if (a[i] <= 3) {\n            max = a[i];\n            continue;\n        }\n        for (j = 2; j * j <= a[i]; j++) {\n            if (a[i] % j == 0)\n                break;\n        }\n        if (j * j > a[i]) {\n            if (a[i] > max)\n                max = a[i];\n        }\n    }\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *m = n;\n    if (n == 0)\n    {\n        *b = NULL;\n        return;\n    }\n    *b = (int *)malloc(n * sizeof(int));\n    if (*b == NULL)\n        exit(1);\n    for (i = 0; i < n; i++)\n        (*b)[i] = a[i];\n    if ((a[0] + a[n - 1]) % 2 == 1)\n    {\n        for (i = 0; i < n - 1; i++)\n            for (j = i + 1; j < n; j++)\n                if (((a[i] + a[j]) % 2 == 1) && ((*b)[i] > (*b)[j]))\n                {\n                    t = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = t;\n                }\n    }\n    else\n    {\n        for (i = 0; i < n - 1; i++)\n            for (j = i + 1; j < n; j++)\n                if (((a[i] + a[j]) % 2 == 0) && ((*b)[i] < (*b)[j]))\n                {\n                    t = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = t;\n                }\n    }\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *m = n;\n    if (n == 0)\n    {\n        *b = NULL;\n        return;\n    }\n    *b = (int *)malloc(n * sizeof(int));\n    if (*b == NULL)\n        exit(1);\n    for (i = 0; i < n; i++)\n        (*b)[i] = a[i];\n    if ((a[0] + a[n - 1]) % 2 == 1)\n    {\n        for (i = 0; i < n - 1; i++)\n            for (j = i + 1; j < n; j++)\n                if (((a[i] + a[j]) % 2 == 1) && ((*b)[i] > (*b)[j]))\n                {\n                    t = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = t;\n                }\n    }\n    else\n    {\n        for (i = 0; i < n - 1; i++)\n            for (j = i + 1; j < n; j++)\n                if (((a[i] + a[j]) % 2 == 0) && ((*b)[i] < (*b)[j]))\n                {\n                    t = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = t;\n                }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *len) {\n    int i, j;\n    int *a = (int *)malloc(n * sizeof(int));\n    *len = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *len; j++) {\n            if (a[j] * a[j] > i)\n                break;\n            if (i % a[j] == 0)\n                break;\n        }\n        if (j == *len)\n            a[(*len)++] = i;\n    }\n    return a;\n}",
    "c_func_re_decompile": " int *func0(int n, int *len) {\n    int i, j;\n    int *a = (int *)malloc(n * sizeof(int));\n    *len = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *len; j++) {\n            if (a[j] * a[j] > i)\n                break;\n            if (i % a[j] == 0)\n                break;\n        }\n        if (j == *len)\n            a[(*len)++] = i;\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *m) {\n    int i, j, flag, *a;\n    a = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        flag = 1;\n        for (j = 0; j < *m; j++) {\n            int k = a[j];\n            if (k * k > i)\n                break;\n            if (i % k == 0) {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag) {\n            a[*m] = i;\n            (*m)++;\n        }\n    }\n    return a;\n}",
    "c_func_re_decompile": " int *func0(int n, int *m) {\n    int i, j, flag, *a;\n    a = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        flag = 1;\n        for (j = 0; j < *m; j++) {\n            int k = a[j];\n            if (k * k > i)\n                break;\n            if (i % k == 0) {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag) {\n            a[*m] = i;\n            (*m)++;\n        }\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *m) {\n    int i, j, k;\n    int *p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            if (i < p[j] * p[j] || i % p[j] == 0)\n                break;\n        }\n        if (j == *m) {\n            p[*m] = i;\n            (*m)++;\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": " int *func0(int n, int *m) {\n    int i, j, k;\n    int *p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            if (i < p[j] * p[j] || i % p[j] == 0)\n                break;\n        }\n        if (j == *m) {\n            p[*m] = i;\n            (*m)++;\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *argv[], int argc) {\n  int i, j, k, l, m, n, o;\n  if (argc == 0) return 0;\n  for (i = 0; i < argc; i++) {\n    char *p = argv[i];\n    while (*p) {\n      unsigned short int c = __ctype_b_loc()[*p];\n      if (c & 0x0400) {\n        if (c & 0x0100) {\n          if (c & 0x0200) break;\n          else j = 1;\n        } else {\n          if (c & 0x0200) j = 1;\n          else j = 0;\n        }\n        if (k + j == 2) break;\n        k = j;\n      }\n      p++;\n    }\n    if (k + j != 2) return 0;\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(char *argv[], int argc) {\n  int i, j, k, l, m, n, o;\n  if (argc == 0) return 0;\n  for (i = 0; i < argc; i++) {\n    char *p = argv[i];\n    while (*p) {\n      unsigned short int c = __ctype_b_loc()[0][*p];\n      if (c & 0x0400) {\n        if (c & 0x0100) {\n          if (c & 0x0200) break;\n          else j = 1;\n        } else {\n          if (c & 0x0200) j = 1;\n          else j = 0;\n        }\n        if (k + j == 2) break;\n        k = j;\n      }\n      p++;\n    }\n    if (k + j != 2) return 0;\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *a[], int n) {\n  int i, j, k, l, m, o;\n  char *p;\n  unsigned short *map;\n  if (n == 0) return 0;\n  for (i = 0; i < n; i++) {\n    p = a[i];\n    map = __ctype_b_loc()[0];\n    j = k = l = m = 0;\n    while (*p) {\n      if (map[(unsigned char)*p] & 0x0400) {\n        if (map[(unsigned char)*p] & 0x0100) {\n          if (map[(unsigned char)*p] & 0x0200) {\n            return 0;\n          }\n          j = k = l = 0;\n        } else if (map[(unsigned char)*p] & 0x0200) {\n          j = k = 0;\n        }\n        m = 1;\n      } else {\n        if (map[(unsigned char)*p] & 0x0200) {\n          if (j + k + l == 2) return 0;\n          j = k = 0;\n        }\n        l = m;\n        m = 0;\n      }\n      p++;\n    }\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(char *a[], int n) {\n  int i, j, k, l, m, o;\n  char *p;\n  unsigned short *map;\n  if (n == 0) return 0;\n  for (i = 0; i < n; i++) {\n    p = a[i];\n    map = __ctype_b_loc()[0];\n    j = k = l = m = 0;\n    while (*p) {\n      if (map[(unsigned char)*p] & 0x0400) {\n        if (map[(unsigned char)*p] & 0x0100) {\n          if (map[(unsigned char)*p] & 0x0200) {\n            return 0;\n          }\n          j = k = l = 0;\n        } else if (map[(unsigned char)*p] & 0x0200) {\n          j = k = 0;\n        }\n        m = 1;\n      } else {\n        if (map[(unsigned char)*p] & 0x0200) {\n          if (j + k + l == 2) return 0;\n          j = k = 0;\n        }\n        l = m;\n        m = 0;\n      }\n      p++;\n    }\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, char ***p, int *m)\n{\n    int i, j, k;\n    char *s[10] = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1])\n            {\n                k = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = k;\n            }\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*m)++;\n    if (*m == 0)\n    {\n        *p = NULL;\n        return;\n    }\n    *p = (char **)malloc(sizeof(char *) * (*m));\n    for (i = n - 1, j = 0; i >= 0 && j < *m; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*p)[j++] = s[a[i]];\n    *p = (char **)realloc(sizeof(char *) * (*m));\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *m) {\n    int i, j, k;\n    int *p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            if (i % p[j] == 0)\n                break;\n        }\n        if (j == *m) {\n            p[*m] = i;\n            (*m)++;\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": " int *func0(int n, int *m) {\n    int i, j, k;\n    int *p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            if (i % p[j] == 0)\n                break;\n            if (p[j] * p[j] > i)\n                break;\n        }\n        if (j == *m) {\n            p[*m] = i;\n            (*m)++;\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  return (((a) < 0 ? -(a) : (a)) % 10) * (((b) < 0 ? -(b) : (b)) % 10);\n}",
    "c_func_re_decompile": " int func0(int a, int b) {\n  return (((a) < 0 ? -(a) : (a)) % 10) * (((b) < 0 ? -(b) : (b)) % 10);\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  return (((a) < 0 ? -(a) : (a)) % 10) * (((b) < 0 ? -(b) : (b)) % 10);\n}",
    "c_func_re_decompile": "ull func0(ull a, ull b) {\n  return (((a) < 0 ? -(a) : (a)) % 10) * (((b) < 0 ? -(b) : (b)) % 10);\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  return (((a) < 0 ? -(a) : (a)) % 10) * (((b) < 0 ? -(b) : (b)) % 10);\n}",
    "c_func_re_decompile": "ull func0(ull a, ull b) {\n  return (((a) < 0 ? -(a) : (a)) % 10) * (((b) < 0 ? -(b) : (b)) % 10);\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  return (((a) < 0 ? -(a) : (a)) % 10) * (((b) < 0 ? -(b) : (b)) % 10);\n}",
    "c_func_re_decompile": "ull func0(int a, int b) {\n  return (((a) < 0 ? -(a) : (a)) % 10) * (((b) < 0 ? -(b) : (b)) % 10);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
    "c_func_decompile": " char **func0(char *str, int n, int *m)\n{\n  char **tab;\n  char *tmp;\n  int i, j, k, l, lg, nb;\n  const char *const locale = setlocale(LC_CTYPE, NULL);\n  const wctype_t *const wctype = __ctype_b_loc();\n\n  lg = strlen(str);\n  tmp = malloc(lg + 1);\n  i = j = k = l = nb = 0;\n  while (i < lg)\n    {\n      if (!(wctype[str[i]] & (0x0020)) && str[i] != '\\0')\n {\n   tmp[j++] = str[i];\n   if (strchr(\" \\t\\n\", str[i]) || !(wctype[str[i]] & (0x400)))\n     {\n       if (l == n)\n  {\n    tab[nb++] = NULL;\n    tab = realloc(tab, (nb + 1) * sizeof(*tab));\n    tmp = malloc(strlen(tmp) + 1);\n    j = 0;\n  }\n       l = 0;\n     }\n   else\n     ++l;\n }\n      ++i;\n    }\n  free(tmp);\n  *m = nb;\n  return (tab);\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int n, int *m)\n{\n    char *delim = \" \\t\\n\";\n    char **ret = NULL;\n    int i, j, k, len, count = 0, num = 0, start = 0;\n    len = strlen(str);\n    char *tmp = (char *)malloc(len + 1);\n    for (i = 0; i <= len; i++) {\n        if (!(((*(const unsigned short *)&(*(const _CTYPE_T *)__ctype_b_loc()) + (int)str[i]) & (0x0200)) || str[i] == '\\0')) {\n            if (count == n) {\n                tmp[i - start] = '\\0';\n                ret = (char **)realloc(ret, (num + 1) * sizeof(char *));\n                ret[num] = (char *)malloc(strlen(tmp) + 1);\n                strcpy(ret[num], tmp);\n                num++;\n                start = i + 1;\n                count = 0;\n            }\n        } else {\n            tmp[i - start] = str[i];\n            if (strchr(delim, str[i]) == NULL && ((*(const unsigned short *)&(*(const _CTYPE_T *)__ctype_b_loc()) + (int)str[i]) & (0x0400)))\n                count++;\n        }\n    }\n    free(tmp);\n    *m = num;\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
    "c_func_decompile": " char ** func0(char * str, int n, int * m)\n{\n  char ** ret = NULL;\n  int i, j, k, len, count;\n  char * tmp;\n  const char * const ctype = __ctype_b_loc();\n  const short * const map = ctype->__map;\n  len = strlen(str);\n  tmp = malloc(len + 1);\n  i = j = k = count = 0;\n  while (i < len) {\n    if (((map[(int)str[i]] & (0x0020)) != 0) || str[i] == '\\0') {\n      if (count == n) {\n        ret = realloc(ret, ++k * sizeof(char *));\n        ret[k - 1] = malloc(strlen(tmp) + 1);\n        memcpy(ret[k - 1], tmp, strlen(tmp) + 1);\n        count = 0;\n      }\n      j = i + 1;\n    } else {\n      tmp[i - j] = str[i];\n      if (strchr(\"aeiou\", str[i]) == NULL && (map[(int)str[i]] & (0x400)) != 0)\n        count++;\n    }\n    i++;\n  }\n  free(tmp);\n  *m = k;\n  return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
    "c_func_decompile": " char **func0(char *str, int n, int *m)\n{\n  size_t len = strlen(str);\n  char *tmp = malloc(len + 1);\n  int i, j = 0, k = 0, l = 0, nb_word = 0;\n  char **tab = NULL;\n  const struct _ctype_t *ct = __ctype_b_loc();\n\n  for (i = 0; i < len; i++)\n    {\n      if (!(ct->_mbbtype[str[i]] & 0x20) && str[i] != '\\0')\n {\n   tmp[i - j] = str[i];\n   if (strchr(\" \\t\\n\", str[i]) == NULL)\n     {\n       if (ct->_mbbtype[str[i]] & 0x400)\n  l++;\n       else\n  l = 0;\n     }\n }\n      else if (l == n)\n {\n   tmp[i - j] = '\\0';\n   tab = realloc(tab, ++nb_word * sizeof(char *));\n   tab[nb_word - 1] = malloc(strlen(tmp) + 1);\n   strcpy(tab[nb_word - 1], tmp);\n   j = i + 1;\n   k = 0;\n }\n    }\n  free(tmp);\n  *m = nb_word;\n  return (tab);\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    char *vowels = \"aeiou\";\n    int count = 0;\n    int i;\n    for (i = 0; str[i] && i * 2 < strlen(str); i++)\n        if (strchr(vowels, str[i * 2]))\n            count++;\n    return count;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    char *vowels = \"aeiou\";\n    int count = 0;\n    int i;\n    for (i = 0; str[i] && i * 2 < strlen(str); i++)\n        if (strchr(vowels, str[i * 2]))\n            count++;\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  double x = atof(s);\n  return x < 0 ? (int)ceil(x - 0.5) : (int)floor(x + 0.5);\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  double x = atof(s);\n  return x < 0 ? (int)ceil(x - 0.5) : (int)floor(x + 0.5);\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  double x = strtod(s, NULL);\n  if (x < 0)\n    return (int)(x - 0.5);\n  else\n    return (int)(x + 0.5);\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  double x = strtod(s, NULL);\n  if (x < 0)\n    return (int)(x - 0.5);\n  else\n    return (int)(x + 0.5);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiou\", str[i]) != NULL)\n            count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n    for (i = 0; str[i] != '\\0' && i < len / 2; i++) {\n        if (strchr(\"aeiou\", str[i * 2]) != NULL)\n            count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
    "c_func_decompile": " int func0(char *s) {\n    int i, n, m;\n    n = 0;\n    m = strlen(s);\n    for (i = 0; i < m; i++) {\n        if (strchr(\"aeiou\", s[i]) != NULL) {\n            n++;\n        }\n    }\n    return n;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n    int i, n, m;\n    n = 0;\n    i = 0;\n    m = strlen(s);\n    while (s[i] != '\\0') {\n        if (strchr(\"aeiou\", s[i]) != NULL) {\n            n++;\n        }\n        i++;\n        if (i == m / 2) {\n            break;\n        }\n    }\n    return n;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  double d = strtod(s, NULL);\n  if (d < 0) {\n    return (int)(d - floor(d));\n  } else {\n    return (int)(d + ceil(d));\n  }\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  double d = strtod(s, NULL);\n  if (d < 0) {\n    return (int)(d - floor(d));\n  } else {\n    return (int)(d + ceil(d));\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiou\", str[i]) != NULL)\n            count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n    for (i = 0; str[i] != '\\0' && i < len / 2; i++) {\n        if (strchr(\"aeiou\", str[i * 2]) != NULL)\n            count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  double d = strtod(s, NULL);\n  if (d < 0) {\n    return (int)(d - floor(d));\n  } else {\n    return (int)(d + ceil(d));\n  }\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  double d = strtod(s, NULL);\n  if (d < 0) {\n    return (int)(d - floor(d));\n  } else {\n    return (int)(d + ceil(d));\n  }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n) {\n  int *p = (int *)malloc(n * sizeof(int));\n  p[0] = n;\n  for (int i = 1; i < n; i++) {\n    p[i] = p[i - 1] + 2;\n  }\n  return p;\n}",
    "c_func_re_decompile": " int *func0(int n) {\n  int *p = (int *)malloc(n * sizeof(int));\n  p[0] = n;\n  for (int i = 1; i < n; i++) {\n    p[i] = p[i - 1] + 2;\n  }\n  return p;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n) {\n  int i;\n  int *p = (int *)malloc(n * sizeof(int));\n  p[0] = n;\n  for (i = 1; i < n; i++) {\n    p[i] = p[i - 1] + 2;\n  }\n  return p;\n}",
    "c_func_re_decompile": " int *func0(int n) {\n  int i;\n  int *p = (int *)malloc(n * sizeof(int));\n  p[0] = n;\n  for (i = 1; i < n; i++) {\n    p[i] = p[i - 1] + 2;\n  }\n  return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n) {\n  int i;\n  int *p = (int *)malloc(n * sizeof(int));\n  p[0] = n;\n  for (i = 1; i < n; i++) {\n    p[i] = 2 * i;\n  }\n  return p;\n}",
    "c_func_re_decompile": " int *func0(int n) {\n  int i;\n  int *p = (int *)malloc(n * sizeof(int));\n  p[0] = n;\n  for (i = 1; i < n; i++) {\n    p[i] = 2 * i;\n  }\n  return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int x, int y) {\n  if (y < x) {\n    return -1;\n  }\n  if (y % 2 == 0) {\n    return y;\n  }\n  if (y == x) {\n    return -1;\n  }\n  return y - 1;\n}",
    "c_func_re_decompile": " int func0(int x, int y) {\n  if (y < x) {\n    return -1;\n  }\n  if (y % 2 == 0) {\n    return y;\n  }\n  if (y == x) {\n    return -1;\n  }\n  return y - 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *size)\n{\n    int i, j = 0, count = 0, len = strlen(str);\n    int k = 0;\n    char **ret = NULL;\n    char tmp[50] = {0};\n    if (strchr(str, ' ') || strchr(str, ',')) {\n        ret = (char **)malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; i++) {\n            if (str[i] == ' ' || str[i] == ',' || str[i] == '\\0') {\n                if (j > 0) {\n                    tmp[j] = '\\0';\n                    ret[k] = strdup(tmp);\n                    k++;\n                }\n                j = 0;\n            } else {\n                tmp[j++] = str[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; i++) {\n            if (((__ctype_b_loc()[(int)str[i]] & (0x0200)) != 0) && ((str[i] - 'a') % 2 == 1)) {\n                count++;\n            }\n        }\n        ret = (char **)malloc(sizeof(char *));\n        ret[0] = (char *)malloc(sizeof(char) * 12);\n        sprintf(ret[0], \"%d\", count);\n        k = 1;\n    }\n    *size = k;\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n) {\n  int i;\n  int *p = (int *)malloc(n * sizeof(int));\n  p[0] = n;\n  for (i = 1; i < n; i++) {\n    p[i] = i * 2;\n  }\n  return p;\n}",
    "c_func_re_decompile": " int *func0(int n) {\n  int i;\n  int *p = (int *)malloc(n * sizeof(int));\n  p[0] = n;\n  for (i = 1; i < n; i++) {\n    p[i] = i * 2 + 2;\n  }\n  return p;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  if (b < a) {\n    return -1;\n  }\n  if (b == a && b % 2 == 1) {\n    return -1;\n  }\n  if (b % 2 == 1) {\n    return b - 1;\n  }\n  return b;\n}",
    "c_func_re_decompile": " int func0(int a, int b) {\n  if (b < a) {\n    return -1;\n  }\n  if (b == a && b % 2 == 1) {\n    return -1;\n  }\n  if (b % 2 == 1) {\n    return b - 1;\n  }\n  return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int x, int y) {\n  if (y < x) {\n    return -1;\n  }\n  if (y % 2 == 0) {\n    return y;\n  }\n  if (y == x) {\n    return -1;\n  }\n  return y - 1;\n}",
    "c_func_re_decompile": " int func0(int x, int y) {\n  if (y < x) {\n    return -1;\n  }\n  if (y % 2 == 0) {\n    return y;\n  }\n  if (y == x) {\n    return -1;\n  }\n  return y - 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  if (b < a) {\n    return -1;\n  }\n  if (b == a) {\n    if (b % 2 == 1) {\n      return -1;\n    }\n    return b;\n  }\n  if (b % 2 == 1) {\n    return b - 1;\n  }\n  return b;\n}",
    "c_func_re_decompile": " int func0(int a, int b) {\n  if (b < a) {\n    return -1;\n  }\n  if (b == a) {\n    if (b % 2 == 1) {\n      return -1;\n    }\n    return b;\n  }\n  if (b % 2 == 1) {\n    return b - 1;\n  }\n  return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
    "c_func_decompile": " char *func0(int a, int b) {\n    if (a > b)\n        return \"a > b\";\n    int c = (a + b) / 2;\n    char *s = malloc(33);\n    s[0] = '\\0';\n    int i = 32;\n    do {\n        s[i--] = '\\0';\n        s[i--] = '0' + c % 2;\n        c /= 2;\n    } while (c > 0);\n    return s + i + 1;\n}",
    "c_func_re_decompile": " char *func0(int a, int b) {\n    if (a > b)\n        return \"a > b\";\n    int c = (a + b) / 2;\n    char *s = malloc(33);\n    s[0] = '\\0';\n    int i = 32;\n    do {\n        s[i--] = '\\0';\n        s[i--] = '0' + c % 2;\n        c /= 2;\n    } while (c > 0);\n    return s + i + 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *s, int *n) {\n  char **a;\n  int i, j, k, l, m;\n  char *p;\n  char buf[80] = {0};\n  l = strlen(s);\n  if (strchr(s, ' ')) {\n    a = (char **)malloc((l + 1) * sizeof(char *));\n    for (i = 0, j = 0, k = 0; i <= l; i++) {\n      if (s[i] == ' ' || s[i] == '\\0') {\n        for (m = 0; m < i; m++) {\n          if (((__ctype_b_loc()->*((int*)1+(s[m]))&2) && (s[m] - 'a') % 2 == 1))\n            k++;\n        }\n        for (m = 0; m < i; m++) {\n          if (s[m] != ' ' && s[m] != ',') {\n            buf[k] = s[m];\n            k++;\n          } else {\n            buf[k] = '\\0';\n            a[j] = strdup(buf);\n            j++;\n            k = 0;\n          }\n        }\n      }\n    }\n  } else {\n    a = (char **)malloc(sizeof(char *));\n    a[0] = (char *)malloc(12 * sizeof(char));\n    __sprintf_chk(a[0], 1, 12, \"%d\", k);\n    j = 1;\n  }\n  *n = j;\n  return a;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n) {\n    int i, j, k, len, count;\n    char **ret, *p, *q, *r;\n    char buf[64] = {0};\n    len = strlen(str);\n    if (strchr(str, ' ') || strchr(str, ',')) {\n        ret = (char **)malloc(sizeof(char *) * (len + 1));\n        for (i = j = k = 0; i <= len; i++) {\n            if (str[i] == ' ' || str[i] == ',' || str[i] == '\\0') {\n                if (k) {\n                    buf[k] = '\\0';\n                    ret[j] = strdup(buf);\n                    j++;\n                    k = 0;\n                }\n            } else {\n                buf[k++] = str[i];\n            }\n        }\n        *n = j;\n        return ret;\n    }\n    for (i = count = 0; i < len; i++) {\n        if (((*(const _Ctype_toupper_locales + 1))[(int) (str[i])] & 2) && ((str[i] - 'a') % 2 == 1)) {\n            count++;\n        }\n    }\n    ret = (char **)malloc(sizeof(char *));\n    ret[0] = (char *)malloc(sizeof(char) * 12);\n    __sprintf_chk(ret[0], 1, 12, \"%d\", count);\n    *n = 1;\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
    "c_func_decompile": " char *func0(int a, int b) {\n    if (a > b) {\n        return \"a > b\";\n    }\n    int c = (a + b) / 2;\n    char *s = malloc(33);\n    s[32] = '\\0';\n    int i = 31;\n    while (c > 0) {\n        s[i] = c % 2 + '0';\n        c /= 2;\n        i--;\n    }\n    return s;\n}",
    "c_func_re_decompile": " char *func0(int a, int b) {\n    if (a > b) {\n        return \"a > b\";\n    }\n    int c = (a + b) / 2;\n    char *s = malloc(33);\n    s[0] = '\\0';\n    s[32] = '\\0';\n    int i = 31;\n    while (c > 0) {\n        s[i] = c % 2 + '0';\n        c /= 2;\n        i--;\n    }\n    return s;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n) {\n  int i, j, k, len, count;\n  char **ret, *p, *q, *r;\n  char buf[64] = {0};\n  len = strlen(str);\n  if (strchr(str, ' ') || strchr(str, ',')) {\n    ret = (char **)malloc(sizeof(char *) * (len + 1));\n    for (i = j = k = 0; i <= len; i++) {\n      if (str[i] == ' ' || str[i] == ',' || str[i] == '\\0') {\n        if (k) {\n          buf[k] = '\\0';\n          ret[j] = strdup(buf);\n          j++;\n          k = 0;\n        }\n      } else {\n        buf[k++] = str[i];\n      }\n    }\n  } else {\n    count = 0;\n    for (i = 0; i < len; i++) {\n      if (((*(const _Locale_ctype_t *)(__ctype_b_loc())).*((int *)1 + (str[i])) & 2) && (str[i] - 'a') % 2 == 1) {\n        count++;\n      }\n    }\n    ret = (char **)malloc(sizeof(char *));\n    ret[0] = (char *)malloc(sizeof(char) * 12);\n    __sprintf_chk(ret[0], 1, 12, \"%d\", count);\n    j = 1;\n  }\n  *n = j;\n  return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
    "c_func_decompile": " char *func0(int a, int b) {\n  char *result;\n  int c;\n  if (a > b) {\n    result = \"a > b\";\n  } else {\n    c = (a + b) / 2;\n    result = malloc(33);\n    result[32] = '\\0';\n    result[31] = '\\0';\n    while (c > 0) {\n      result[31] = '0' + c % 2;\n      c = c / 2;\n      result = result - 1;\n    }\n  }\n  return result;\n}",
    "c_func_re_decompile": " char *func0(int a, int b) {\n  char *result;\n  int c;\n  if (a > b) {\n    result = \"a > b\";\n  } else {\n    c = (a + b) / 2;\n    result = malloc(33);\n    result[32] = '\\0';\n    result[31] = '\\0';\n    while (c > 0) {\n      result[31] = '0' + c % 2;\n      c = c / 2;\n      result = result - 1;\n    }\n  }\n  return result;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n) {\n  char **ret = malloc(10 * sizeof(char *));\n  char *buf = malloc(strlen(str) + 1);\n  int i = 0, j = 0, k = 0;\n  int size = 10;\n  while (str[i] != '\\0') {\n    if (str[i] == ' ' || str[i] == ',') {\n      if (j > 0) {\n        buf[j] = '\\0';\n        ret[k++] = strdup(buf);\n        j = 0;\n        if (k >= size) {\n          size *= 2;\n          ret = realloc(ret, size * sizeof(char *));\n        }\n      }\n    } else {\n      buf[j++] = str[i];\n    }\n    i++;\n  }\n  if (j > 0) {\n    buf[j] = '\\0';\n    ret[k++] = strdup(buf);\n  }\n  free(buf);\n  *n = k;\n  return ret;\n}",
    "c_func_re_decompile": " char **func0(char *str, int *n) {\n  char **ret = malloc(10 * sizeof(char *));\n  char *buf = malloc(strlen(str) + 1);\n  int i = 0, j = 0, k = 0;\n  int size = 10;\n  while (str[i] != '\\0') {\n    if (str[i] == ' ' || str[i] == ',') {\n      if (j > 0) {\n        buf[j] = '\\0';\n        ret[k++] = strdup(buf);\n        j = 0;\n        if (k >= size) {\n          size *= 2;\n          ret = realloc(ret, size * sizeof(char *));\n        }\n      }\n    } else {\n      buf[j++] = str[i];\n    }\n    i++;\n  }\n  if (j > 0) {\n    buf[j] = '\\0';\n    ret[k++] = strdup(buf);\n  }\n  free(buf);\n  *n = k;\n  return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n)\n{\n  char **ret = malloc(10 * sizeof(char *));\n  char *tmp = malloc(strlen(str) + 1);\n  int i = 0, j = 0, k = 0, len = 10;\n  while (str[i])\n    {\n      if (str[i] == ' ' || str[i] == ',')\n {\n   if (j)\n     {\n       tmp[j] = 0;\n       ret[k++] = strdup(tmp);\n       j = 0;\n     }\n   if (k >= len)\n     {\n       len *= 2;\n       ret = realloc(ret, len * sizeof(char *));\n     }\n }\n      else\n tmp[j++] = str[i];\n      i++;\n    }\n  if (j)\n    {\n      tmp[j] = 0;\n      ret[k++] = strdup(tmp);\n    }\n  free(tmp);\n  *n = k;\n  return (ret);\n}",
    "c_func_re_decompile": " char **func0(char *str, int *n)\n{\n  char **ret = malloc(10 * sizeof(char *));\n  char *tmp = malloc(strlen(str) + 1);\n  int i = 0, j = 0, k = 0, len = 10;\n  while (str[i])\n    {\n      if (str[i] == ' ' || str[i] == ',')\n {\n   if (j)\n     {\n       tmp[j] = 0;\n       ret[k++] = strdup(tmp);\n       j = 0;\n     }\n   if (k >= len)\n     {\n       len *= 2;\n       ret = realloc(ret, len * sizeof(char *));\n     }\n }\n      else\n tmp[j++] = str[i];\n      i++;\n    }\n  if (j)\n    {\n      tmp[j] = 0;\n      ret[k++] = strdup(tmp);\n    }\n  free(tmp);\n  *n = k;\n  return (ret);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
    "c_func_decompile": " char *func0(int a, int b) {\n  char *result;\n  int c;\n  if (a > b) {\n    result = \"a > b\";\n  } else {\n    c = (a + b) / 2;\n    result = malloc(33);\n    result[32] = '\\0';\n    result[31] = '\\0';\n    while (c > 0) {\n      result[31] = '0' + c % 2;\n      c = c / 2;\n      result = result - 1;\n    }\n  }\n  return result;\n}",
    "c_func_re_decompile": " char *func0(int a, int b) {\n  char *result;\n  int c;\n  if (a > b) {\n    result = \"a > b\";\n  } else {\n    c = (a + b) / 2;\n    result = malloc(33);\n    result[32] = '\\0';\n    result[31] = '\\0';\n    while (c > 0) {\n      result[31] = '0' + c % 2;\n      c = c / 2;\n      result = result - 1;\n    }\n  }\n  return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n) {\n  int i, j, k, len;\n  char **ret;\n  len = 10;\n  ret = (char **)malloc(len * sizeof(char *));\n  char *tmp = (char *)malloc(strlen(str) + 1);\n  k = 0;\n  j = 0;\n  for (i = 0; str[i]; i++) {\n    if (str[i] == ' ' || str[i] == ',') {\n      if (j > 0) {\n        tmp[j] = 0;\n        ret[k++] = strdup(tmp);\n        j = 0;\n        if (k >= len) {\n          len *= 2;\n          ret = (char **)realloc(ret, len * sizeof(char *));\n        }\n      }\n      continue;\n    }\n    tmp[j++] = str[i];\n  }\n  if (j > 0) {\n    tmp[j] = 0;\n    ret[k++] = strdup(tmp);\n  }\n  free(tmp);\n  *n = k;\n  return ret;\n}",
    "c_func_re_decompile": " char **func0(char *str, int *n) {\n  int i, j, k, len;\n  char **ret;\n  len = 10;\n  ret = (char **)malloc(len * sizeof(char *));\n  char *tmp = (char *)malloc(strlen(str) + 1);\n  k = 0;\n  j = 0;\n  for (i = 0; str[i]; i++) {\n    if (str[i] == ' ' || str[i] == ',') {\n      if (j > 0) {\n        tmp[j] = 0;\n        ret[k++] = strdup(tmp);\n        j = 0;\n        if (k >= len) {\n          len *= 2;\n          ret = (char **)realloc(ret, len * sizeof(char *));\n        }\n      }\n      continue;\n    }\n    tmp[j++] = str[i];\n  }\n  if (j > 0) {\n    tmp[j] = 0;\n    ret[k++] = strdup(tmp);\n  }\n  free(tmp);\n  *n = k;\n  return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n) {\n    char **ret = malloc(10 * sizeof(char *));\n    int ret_size = 10;\n    int ret_n = 0;\n    char *buf = malloc(strlen(str) + 1);\n    int buf_n = 0;\n    while (*str) {\n        if (*str == ' ' || *str == ',') {\n            if (buf_n) {\n                buf[buf_n] = '\\0';\n                ret[ret_n++] = strdup(buf);\n                if (ret_n >= ret_size) {\n                    ret_size *= 2;\n                    ret = realloc(ret, ret_size * sizeof(char *));\n                }\n                buf_n = 0;\n            }\n        } else {\n            buf[buf_n++] = *str;\n        }\n        str++;\n    }\n    if (buf_n) {\n        buf[buf_n] = '\\0';\n        ret[ret_n++] = strdup(buf);\n    }\n    free(buf);\n    *n = ret_n;\n    return ret;\n}",
    "c_func_re_decompile": " char **func0(char *str, int *n) {\n    char **ret = malloc(10 * sizeof(char *));\n    int ret_size = 10;\n    int ret_n = 0;\n    char *buf = malloc(strlen(str) + 1);\n    int buf_n = 0;\n    while (*str) {\n        if (*str == ' ' || *str == ',') {\n            if (buf_n) {\n                buf[buf_n] = '\\0';\n                ret[ret_n++] = strdup(buf);\n                if (ret_n >= ret_size) {\n                    ret_size *= 2;\n                    ret = realloc(ret, ret_size * sizeof(char *));\n                }\n                buf_n = 0;\n            }\n        } else {\n            buf[buf_n++] = *str;\n        }\n        str++;\n    }\n    if (buf_n) {\n        buf[buf_n] = '\\0';\n        ret[ret_n++] = strdup(buf);\n    }\n    free(buf);\n    *n = ret_n;\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n) {\n    int i, j, k;\n    int *p = (int *)malloc(n * sizeof(int));\n    for (i = 0, j = 1, k = 0; i < n; i++) {\n        k += j;\n        if (j % 2)\n            j *= 2;\n        else\n            j = 1;\n        p[i] = k;\n    }\n    return p;\n}",
    "c_func_re_decompile": " int *func0(int n) {\n    int i, j, k;\n    int *p = (int *)malloc(n * sizeof(int));\n    for (i = 0, j = 1, k = 0; i < n; i++) {\n        k += j;\n        if (j % 2)\n            j *= 2;\n        else\n            j = 1;\n        p[i] = k;\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": " void func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            k = a[i];\n            while (k > 0 && k % 10 % 2 != 0)\n                k /= 10;\n            if (k > 0) {\n                (*b)[*m] = a[i];\n                (*m)++;\n            }\n        }\n    }\n    for (i = 0; i < *m - 1; i++)\n        for (j = 0; j < *m - i - 1; j++)\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            k = a[i];\n            while (k > 0 && k % 10 % 2 != 0)\n                k /= 10;\n            if (k > 0) {\n                (*b)[*m] = a[i];\n                (*m)++;\n            }\n        }\n    }\n    for (i = 0; i < *m - 1; i++)\n        for (j = 0; j < *m - i - 1; j++)\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n) {\n  int i, j, k;\n  int *a = (int *)malloc(n * sizeof(int));\n  j = 0;\n  k = 1;\n  for (i = 1; i <= n; i++) {\n    j = j + k;\n    k = k * i;\n    if (i % 2 == 0) {\n      a[i - 1] = k;\n    } else {\n      a[i - 1] = j;\n    }\n  }\n  return a;\n}",
    "c_func_re_decompile": " int *func0(int n) {\n  int i, j, k;\n  int *a = (int *)malloc(n * sizeof(int));\n  j = 0;\n  k = 1;\n  for (i = 1; i <= n; i++) {\n    j = j + k;\n    k = k * i;\n    if (i % 2 == 0) {\n      a[i - 1] = k;\n    } else {\n      a[i - 1] = j;\n    }\n  }\n  return a;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n) {\n  int i, j, k;\n  int *p = (int *)malloc(n * sizeof(int));\n  for (i = 0, j = 1, k = 0; i < n; i++) {\n    if (j % 2) {\n      p[i] = k;\n      k++;\n    } else {\n      p[i] = j;\n    }\n    j++;\n  }\n  return p;\n}",
    "c_func_re_decompile": " int *func0(int n) {\n  int i, j, k;\n  int *p = (int *)malloc(n * sizeof(int));\n  for (i = 0, j = 1, k = 0; i < n; i++) {\n    j *= i;\n    if (i % 2) {\n      p[i] = k;\n      k++;\n    } else {\n      p[i] = j;\n    }\n  }\n  return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n) {\n  int i, j, k;\n  int *a = (int *)malloc(n * sizeof(int));\n  for (i = 1, j = 0, k = 1; i <= n; i++) {\n    if (i % 2) {\n      j += i;\n      a[i - 1] = j;\n    } else {\n      k *= i;\n      a[i - 1] = k;\n    }\n  }\n  return a;\n}",
    "c_func_re_decompile": " int *func0(int n) {\n  int i, j, k;\n  int *a = (int *)malloc(n * sizeof(int));\n  for (i = 1, j = 0, k = 1; i <= n; i++) {\n    if (i % 2) {\n      j += i;\n      a[i - 1] = j;\n    } else {\n      k *= i;\n      a[i - 1] = k;\n    }\n  }\n  return a;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  if (b == 0) {\n    return 1;\n  }\n  else {\n    return func0(a, b - 1);\n  }\n}",
    "c_func_re_decompile": " int func0(int a, int b) {\n  if (b == 0) {\n    return 1;\n  }\n  else {\n    return func0(a, b - 1);\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int **b, int *m) {\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (int i = 0; i < n; i++) {\n        int x = a[i];\n        bool flag = false;\n        if (x == 0) {\n            flag = true;\n        } else {\n            while (x > 0 && !flag) {\n                if (x % 2 == 0) {\n                    flag = true;\n                }\n                x /= 10;\n            }\n        }\n        if (!flag) {\n            (*b)[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (int i = 0; i < *m - 1; i++) {\n        for (int j = 0; j < *m - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                int t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int **b, int *m) {\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (int i = 0; i < n; i++) {\n        int x = a[i];\n        bool flag = false;\n        if (x == 0) {\n            flag = true;\n        } else {\n            while (x > 0 && !flag) {\n                if (x % 2 == 0) {\n                    flag = true;\n                }\n                x /= 10;\n            }\n        }\n        if (!flag) {\n            (*b)[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (int i = 0; i < *m - 1; i++) {\n        for (int j = 0; j < *m - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                int t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int **b, int *m) {\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] != 0) {\n            t = a[i];\n            for (j = 0; t != 0; j++) {\n                if (t % 2 == 0) {\n                    t /= 10;\n                } else {\n                    break;\n                }\n            }\n            if (j == 0) {\n                (*b)[(*m)++] = a[i];\n            }\n        }\n    }\n    for (i = (*m) - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int **b, int *m) {\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] != 0) {\n            t = a[i];\n            for (j = 0; t != 0; j++) {\n                if (t % 10 == 0) {\n                    t /= 10;\n                } else {\n                    break;\n                }\n            }\n            if (j == 0) {\n                (*b)[(*m)++] = a[i];\n            }\n        }\n    }\n    for (i = (*m) - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int **b, int *m) {\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] == 0)\n            continue;\n        for (k = a[i], j = 0; k; j++) {\n            t = k % 10;\n            k /= 10;\n            if (t != 4 && t != 9)\n                break;\n        }\n        if (j == a[i])\n            (*b)[(*m)++] = a[i];\n    }\n    for (i = 0; i < *m; i++)\n        for (j = 0; j < *m - i - 1; j++)\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int **b, int *m) {\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] == 0)\n            continue;\n        for (k = a[i], j = 0; k; j++) {\n            t = k % 10;\n            k /= 10;\n            if (t != 0 && t != 5)\n                break;\n        }\n        if (j == a[i])\n            (*b)[(*m)++] = a[i];\n    }\n    for (i = 0; i < *m; i++)\n        for (j = 0; j < *m - i - 1; j++)\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
    "c_func_decompile": " int* func0(int n) {\n    int i, j, k, t;\n    int* result = (int*)malloc(2 * sizeof(int));\n    result[0] = 0;\n    result[1] = 0;\n    for (i = 1; i <= n; i++) {\n        t = 0;\n        j = i;\n        k = i;\n        while (k) {\n            t = t * 10 + k % 10;\n            k /= 10;\n        }\n        if (j == t) {\n            if (j % 2 == 0)\n                result[0]++;\n            else\n                result[1]++;\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": " int* func0(int n) {\n    int i, j, k, t;\n    int* result = (int*)malloc(2 * sizeof(int));\n    result[0] = 0;\n    result[1] = 0;\n    for (i = 1; i <= n; i++) {\n        t = 0;\n        j = i;\n        k = i;\n        while (k) {\n            t = t * 10 + k % 10;\n            k /= 10;\n        }\n        if (j == t) {\n            if (j % 2 == 0)\n                result[0]++;\n            else\n                result[1]++;\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
    "c_func_decompile": "\nint* func0(int n) {\n    int* result = (int*)malloc(2 * sizeof(int));\n    result[0] = 0;\n    result[1] = 0;\n    for (int i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2) {\n                result[1]++;\n            } else {\n                result[0]++;\n            }\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": " int* func0(int n) {\n    int* result = (int*)malloc(2 * sizeof(int));\n    result[0] = 0;\n    result[1] = 0;\n    for (int i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2) {\n                result[1]++;\n            } else {\n                result[0]++;\n            }\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
    "c_func_decompile": "\nbool func0(int *arr, int len) {\n    if (len == 0) {\n        return true;\n    }\n    int count = 0;\n    for (int i = 1; i < len; i++) {\n        if (arr[i] < arr[i - 1]) {\n            count++;\n        }\n    }\n    if (arr[0] < arr[len - 1]) {\n        count++;\n    }\n    return count <= 1;\n}",
    "c_func_re_decompile": " bool func0(int *arr, int len) {\n    if (len == 0) {\n        return true;\n    }\n    int count = 0;\n    for (int i = 1; i < len; i++) {\n        if (arr[i] < arr[i - 1]) {\n            count++;\n        }\n    }\n    if (arr[0] > arr[len - 1]) {\n        count++;\n    }\n    return count <= 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
    "c_func_decompile": "\nint* func0(int n) {\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (int i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": " int* func0(int n) {\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (int i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
    "c_func_decompile": "\nint* func0(int n) {\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (int i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": " int* func0(int n) {\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (int i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int i, j, k, sum, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n        } else {\n            sum = 0;\n            for (j = (a[i] > 0 ? a[i] : -a[i]); j >= 10; j /= 10) {\n                sum += j % 10;\n            }\n            sum -= j;\n            if (sum > 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, j, k, sum, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n        } else {\n            sum = 0;\n            for (j = (a[i] > 0 ? a[i] : -a[i]); j >= 10; j /= 10) {\n                sum += j % 10;\n            }\n            sum -= j;\n            if (sum > 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
    "c_func_decompile": " void func0(int *a, int n, char ***p, int *m)\n{\n    int i, j, t;\n    char *s[10] = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    *m = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*m)++;\n    *p = (char **)malloc((*m) * sizeof(char *));\n    for (i = n - 1, j = 0; i >= 0 && j < *m; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*p)[j++] = s[a[i]];\n}",
    "c_func_re_decompile": " void func0(int *a, int n, char ***p, int *m)\n{\n    int i, j, t;\n    char *s[10] = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    *m = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*m)++;\n    *p = (char **)malloc((*m) * sizeof(char *));\n    for (i = n - 1, j = 0; i >= 0 && j < *m; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*p)[j++] = s[a[i];\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n    int i, c = 0;\n    if (n == 0)\n        return 1;\n    for (i = 1; i < n; i++)\n        if (a[i] < a[i - 1])\n            c++;\n    if (a[n - 1] > a[0])\n        c++;\n    if (c <= 1)\n        return 1;\n    else\n        return 0;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, c = 0;\n    if (n == 0)\n        return 1;\n    for (i = 1; i < n; i++)\n        if (a[i] < a[i - 1])\n            c++;\n    if (a[n - 1] > a[0])\n        c++;\n    if (c <= 1)\n        return 1;\n    else\n        return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n    int i, sum, count;\n    for (i = 0, count = 0; i < n; i++) {\n        if (a[i] <= 0) {\n            sum = 0;\n            for (a[i] = -a[i]; a[i] > 0; a[i] /= 10)\n                sum += a[i] % 10;\n            if (sum > a[i])\n                count++;\n        } else\n            count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, sum, count;\n    for (i = 0, count = 0; i < n; i++) {\n        if (a[i] <= 0) {\n            sum = 0;\n            for (a[i] = -a[i]; a[i] > 0; a[i] /= 10)\n                sum += a[i] % 10;\n            if (sum > a[i])\n                count++;\n        } else\n            count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
    "c_func_decompile": "\nchar * func0(int *a, int na, int *b, int nb) {\n  int i, j, cnt = 0;\n  for (i = 0; i < na; i++)\n    if (a[i] % 2 == 0)\n      cnt++;\n  for (j = 0; j < nb; j++)\n    if (b[j] % 2 == 0)\n      cnt++;\n  if (cnt >= na)\n    return \"OK\";\n  else\n    return \"NO\";\n}",
    "c_func_re_decompile": " char * func0(int *a, int na, int *b, int nb) {\n  int i, j, cnt = 0;\n  for (i = 0; i < na; i++)\n    if (a[i] % 2 == 0)\n      cnt++;\n  for (j = 0; j < nb; j++)\n    if (b[j] % 2 == 0)\n      cnt++;\n  if (cnt >= na)\n    return \"OK\";\n  else\n    return \"NO\";\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, char ***b, int *c) {\n  int i, j;\n  char *s[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  for (i = 0; i < n - 1; i++) {\n    for (j = 0; j < n - i - 1; j++) {\n      if (a[j] > a[j + 1]) {\n        int t = a[j];\n        a[j] = a[j + 1];\n        a[j + 1] = t;\n      }\n    }\n  }\n  for (i = n - 1, *c = 0; i >= 0; i--) {\n    if (a[i] > 0 && a[i] < 10) {\n      (*c)++;\n    }\n  }\n  *b = (char **)malloc(sizeof(char *) * (*c));\n  for (i = n - 1, j = 0; i >= 0 && j < *c; i--) {\n    if (a[i] > 0 && a[i] < 10) {\n      (*b)[j++] = s[a[i]];\n    }\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n, char ***b, int *c) {\n  int i, j;\n  char *s[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  for (i = 0; i < n - 1; i++) {\n    for (j = 0; j < n - i - 1; j++) {\n      if (a[j] > a[j + 1]) {\n        int t = a[j];\n        a[j] = a[j + 1];\n        a[j + 1] = t;\n      }\n    }\n  }\n  for (i = n - 1, *c = 0; i >= 0; i--) {\n    if (a[i] > 0 && a[i] < 10) {\n      (*c)++;\n    }\n  }\n  *b = (char **)malloc(sizeof(char *) * (*c));\n  for (i = n - 1, j = 0; i >= 0 && j < *c; i--) {\n    if (a[i] > 0 && a[i] < 10) {\n      (*b)[j++] = s[a[i]];\n    }\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, j, cnt = 0;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] > a[j]) {\n        cnt++;\n      }\n    }\n  }\n  if (cnt <= 1) {\n    return 1;\n  } else {\n    return 0;\n  }\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, cnt = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > a[i + 1]) {\n      cnt++;\n    }\n  }\n  if (cnt <= 1) {\n    return 1;\n  } else {\n    return 0;\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n    int i, sum, count;\n    for (i = 0, count = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n        } else {\n            sum = 0;\n            a[i] = -a[i];\n            while (a[i] > 0) {\n                sum += a[i] % 10;\n                a[i] /= 10;\n            }\n            if (sum > a[i]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, sum, count;\n    for (i = 0, count = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n        } else {\n            sum = 0;\n            a[i] = -a[i];\n            while (a[i] > 0) {\n                sum += a[i] % 10;\n                a[i] /= 10;\n            }\n            if (sum > a[i]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
    "c_func_decompile": "\nchar *func0(int *a, int n, int *b, int m) {\n  int i, cnt = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 0)\n      cnt++;\n  for (i = 0; i < m; i++)\n    if (b[i] % 2 == 0)\n      cnt++;\n  if (cnt > n)\n    return \"YES\";\n  else\n    return \"NO\";\n}",
    "c_func_re_decompile": " char *func0(int *a, int n, int *b, int m) {\n  int i, cnt = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 0)\n      cnt++;\n  for (i = 0; i < m; i++)\n    if (b[i] % 2 == 0)\n      cnt++;\n  if (cnt > n)\n    return \"YES\";\n  else\n    return \"NO\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n    int i, j, k, sum, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n            continue;\n        }\n        k = a[i];\n        if (k < 0)\n            k = -k;\n        sum = 0;\n        while (k >= 10) {\n            j = k % 10;\n            sum += j;\n            k /= 10;\n        }\n        if (k < 10)\n            sum += k;\n        if (sum > a[i])\n            count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, j, k, sum, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n            continue;\n        }\n        k = a[i];\n        if (k < 0)\n            k = -k;\n        sum = 0;\n        while (k >= 10) {\n            j = k % 10;\n            sum += j;\n            k /= 10;\n        }\n        if (k < 10)\n            sum += k;\n        if (sum > k)\n            count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
    "c_func_decompile": "\nchar * func0(int *a, int n, int *b, int m) {\n  int i, j, cnt = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 0)\n      cnt++;\n  for (j = 0; j < m; j++)\n    if (b[j] % 2 == 0)\n      cnt++;\n  if (cnt > n)\n    return \"YES\";\n  else\n    return \"NO\";\n}",
    "c_func_re_decompile": " char * func0(int *a, int n, int *b, int m) {\n  int i, j, cnt = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 0)\n      cnt++;\n  for (j = 0; j < m; j++)\n    if (b[j] % 2 == 0)\n      cnt++;\n  if (cnt > n)\n    return \"YES\";\n  else\n    return \"NO\";\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
    "c_func_decompile": "\nchar *func0(int *a, int n, int *b, int m) {\n  int i, cnt = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 0)\n      cnt++;\n  for (i = 0; i < m; i++)\n    if (b[i] % 2 == 0)\n      cnt++;\n  if (cnt > n)\n    return \"YES\";\n  else\n    return \"NO\";\n}",
    "c_func_re_decompile": " char *func0(int *a, int n, int *b, int m) {\n  int i, cnt = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 0)\n      cnt++;\n  for (i = 0; i < m; i++)\n    if (b[i] % 2 == 0)\n      cnt++;\n  if (cnt > n)\n    return \"YES\";\n  else\n    return \"NO\";\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, char ***p, int *m) {\n    int i, j;\n    char *b[10] = {\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"};\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (a[j] > a[j + 1]) {\n                int t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n        }\n    }\n    *m = 0;\n    for (i = n - 1; i >= 0; i--) {\n        if (a[i] > 0 && a[i] < 10) {\n            (*m)++;\n        } else {\n            break;\n        }\n    }\n    *p = (char **) malloc(sizeof(char *) * (*m));\n    j = 0;\n    for (i = n - 1; i >= 0 && j < *m; i--) {\n        if (a[i] > 0 && a[i] < 10) {\n            (*p)[j++] = b[a[i]];\n        }\n    }\n}",
    "c_func_re_decompile": " void func0(int *a, int n, char ***p, int *m) {\n    int i, j;\n    char *b[10] = {\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"};\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (a[j] > a[j + 1]) {\n                int t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n        }\n    }\n    *m = 0;\n    for (i = n - 1; i >= 0; i--) {\n        if (a[i] > 0 && a[i] < 10) {\n            (*m)++;\n        } else {\n            break;\n        }\n    }\n    *p = (char **) malloc(sizeof(char *) * (*m));\n    j = 0;\n    for (i = n - 1; i >= 0 && j < *m; i--) {\n        if (a[i] > 0 && a[i] < 10) {\n            (*p)[j++] = b[a[i]];\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
    "c_func_decompile": "\nlong func0(long *a, int n) {\n  int i;\n  long max, sum;\n  sum = a[0];\n  max = a[0];\n  for (i = 1; i < n; i++) {\n    sum = (sum < 0) ? sum + a[i] : a[i];\n    if (sum < max)\n      max = sum;\n  }\n  return max;\n}",
    "c_func_re_decompile": " long func0(long *a, int n) {\n  int i;\n  long max, sum;\n  sum = a[0];\n  max = a[0];\n  for (i = 1; i < n; i++) {\n    sum = (sum < 0) ? sum + a[i] : a[i];\n    if (sum < max)\n      max = sum;\n  }\n  return max;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
    "c_func_decompile": "\nlong func0(long *a, int n) {\n  long sum = a[0];\n  long min = a[0];\n  int i;\n  for (i = 1; i < n; i++) {\n    sum += a[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n}",
    "c_func_re_decompile": " long func0(long *a, int n) {\n  long sum = a[0];\n  long min = a[0];\n  int i;\n  for (i = 1; i < n; i++) {\n    if (sum < 0) {\n      sum = sum + a[i];\n    } else {\n      sum = a[i];\n    }\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
    "c_func_decompile": "\nlong func0(long *a, int n) {\n  long min = a[0];\n  int i;\n  for (i = 1; i < n; i++) {\n    if (min < 0) {\n      min = min + a[i];\n    } else {\n      if (a[i] < min) {\n        min = a[i];\n      }\n    }\n  }\n  return min;\n}",
    "c_func_re_decompile": " long func0(long *a, int n) {\n  long min = a[0];\n  int i;\n  for (i = 1; i < n; i++) {\n    if (min < 0) {\n      min = min + a[i];\n    } else {\n      if (a[i] < min) {\n        min = a[i];\n      }\n    }\n  }\n  return min;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, int *a, int *b, char *c) {\n    int i, j, k, m[26] = {0}, n = 0;\n    char *p = s;\n    for (i = 0; *p; p++)\n        if (*p != ' ') {\n            j = *p - 'a';\n            if (++m[j] > n)\n                n = m[j];\n        }\n    for (k = 0; k < 26; k++) {\n        a[k] = m[k];\n        if (m[k] == n)\n            c[i++] = k + 'a';\n    }\n    *b = n;\n    c[i] = 0;\n}",
    "c_func_re_decompile": " void func0(char *s, int *a, int *b, char *c) {\n    int i, j, k, m[26] = {0}, n = 0;\n    char *p = s;\n    for (i = 0; *p; p++)\n        if (*p != ' ') {\n            j = *p - 'a';\n            if (++m[j] > n)\n                n = m[j];\n        }\n    for (k = 0; k < 26; k++) {\n        a[k] = m[k];\n        if (m[k] == n)\n            c[i++] = k + 'a';\n    }\n    *b = n;\n    c[i] = 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
    "c_func_decompile": "\nlong func0(long *a, int n) {\n  long sum = a[0];\n  long min = sum;\n  int i;\n  for (i = 1; i < n; i++) {\n    if (sum < 0) {\n      sum = a[i];\n    } else {\n      sum += a[i];\n    }\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n}",
    "c_func_re_decompile": " long func0(long *a, int n) {\n  long sum = a[0];\n  long min = sum;\n  int i;\n  for (i = 1; i < n; i++) {\n    if (sum < 0) {\n      sum = a[i];\n    } else {\n      sum += a[i];\n    }\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int **a, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += a[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(int **a, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += a[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, int *arr, int *max, char *ch)\n{\n    int i, j, k, max_count = 0, count[26] = {0};\n    for (i = 0; str[i]; i++)\n        if (str[i] != ' ')\n            if (++count[str[i] - 'a'] > max_count)\n                max_count = count[str[i] - 'a'];\n    for (i = j = 0; i < 26; i++)\n        if (count[i] == max_count)\n            ch[j++] = i + 'a';\n    ch[j] = '\\0';\n    for (i = 0; i < 26; i++)\n        arr[i] = count[i];\n    *max = max_count;\n}",
    "c_func_re_decompile": " void func0(char *str, int *arr, int *max, char *ch)\n{\n    int i, j, k, max_count = 0, count[26] = {0};\n    for (i = 0; str[i]; i++)\n        if (str[i] != ' ')\n            if (++count[str[i] - 'a'] > max_count)\n                max_count = count[str[i] - 'a'];\n    for (i = j = 0; i < 26; i++)\n        if (count[i] == max_count)\n            ch[j++] = i + 'a';\n    ch[j] = '\\0';\n    for (i = 0; i < 26; i++)\n        arr[i] = count[i];\n    *max = max_count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, int *arr, int *max, char *ch)\n{\n    int i, j, k, max_count = 0;\n    int count[26] = {0};\n    while (*str != '\\0') {\n        if (*str != ' ') {\n            j = *str - 'a';\n            count[j]++;\n            if (count[j] > max_count)\n                max_count = count[j];\n        }\n        str++;\n    }\n    for (i = 0; i < 26; i++) {\n        arr[i] = count[i];\n        if (count[i] == max_count) {\n            ch[k++] = i + 'a';\n        }\n    }\n    *max = max_count;\n    ch[k] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *str, int *arr, int *max, char *ch)\n{\n    int i, j, k, max_count = 0;\n    int count[26] = {0};\n    while (*str != '\\0') {\n        if (*str != ' ') {\n            j = *str - 'a';\n            count[j]++;\n            if (count[j] > max_count)\n                max_count = count[j];\n        }\n        str++;\n    }\n    for (i = 0; i < 26; i++) {\n        arr[i] = count[i];\n        if (count[i] == max_count) {\n            ch[k++] = i + 'a';\n        }\n    }\n    *max = max_count;\n    ch[k] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
    "c_func_decompile": " char ** func0(char ** argv, int argc) {\n    char ** ret = malloc(argc * sizeof(char *));\n    for (int i = 0; i < argc; i++) {\n        int count = 0;\n        for (int j = 0; argv[i][j] != '\\0'; j++) {\n            if (argv[i][j] >= '0' && argv[i][j] <= '9' && (argv[i][j] - '0') % 2 == 1) {\n                count++;\n            }\n        }\n        ret[i] = malloc(100);\n        sprintf(ret[i], \"%d %d %d\", count, count, count);\n    }\n    return ret;\n}",
    "c_func_re_decompile": " char ** func0(char ** argv, int argc) {\n    char ** ret = malloc(argc * sizeof(char *));\n    for (int i = 0; i < argc; i++) {\n        int count = 0;\n        for (int j = 0; argv[i][j] != '\\0'; j++) {\n            if (argv[i][j] >= '0' && argv[i][j] <= '9' && (argv[i][j] - '0') % 2 == 1) {\n                count++;\n            }\n        }\n        ret[i] = malloc(100);\n        sprintf(ret[i], \"%d %d %d\", count, count, count);\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
    "c_func_decompile": " char ** func0(char ** argv, int argc) {\n  char ** ret = malloc(argc * sizeof(char *));\n  int i, j, k;\n  for (i = 0; i < argc; i++) {\n    char * p = argv[i];\n    int count = 0;\n    while (*p) {\n      if (*p >= '0' && *p <= '9') {\n        if (*p % 2 == 0) {\n          count++;\n        }\n      }\n      p++;\n    }\n    ret[i] = malloc(100);\n    __sprintf_chk(ret[i], 1, 100, \"%d\", count, count, count);\n  }\n  return ret;\n}",
    "c_func_re_decompile": " char ** func0(char ** argv, int argc) {\n  char ** ret = malloc(argc * sizeof(char *));\n  int i, j, k;\n  for (i = 0; i < argc; i++) {\n    char * p = argv[i];\n    int count = 0;\n    while (*p) {\n      if (*p >= '0' && *p <= '9') {\n        if (*p % 2 == 0) {\n          count++;\n        }\n      }\n      p++;\n    }\n    ret[i] = malloc(100);\n    __sprintf_chk(ret[i], 1, 100, \"%d\", count, count, count);\n  }\n  return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int **a, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += a[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(int **a, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += a[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int **a, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += a[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(int **a, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += a[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, int *count, int *max, char *max_char)\n{\n    int i, j, max_i = 0;\n    int count_char[26] = {0};\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == ' ')\n            continue;\n        count_char[str[i] - 'a']++;\n        if (count_char[str[i] - 'a'] > max_i)\n            max_i = count_char[str[i] - 'a'];\n    }\n    *max = max_i;\n    j = 0;\n    for (i = 0; i < 26; i++) {\n        count[i] = count_char[i];\n        if (count_char[i] == max_i)\n            max_char[j++] = i + 'a';\n    }\n    max_char[j] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *str, int *count, int *max, char *max_char)\n{\n    int i, j, max_i = 0;\n    int count_char[26] = {0};\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == ' ')\n            continue;\n        count_char[str[i] - 'a']++;\n        if (count_char[str[i] - 'a'] > max_i)\n            max_i = count_char[str[i] - 'a'];\n    }\n    *max = max_i;\n    j = 0;\n    for (i = 0; i < 26; i++) {\n        count[i] = count_char[i];\n        if (count_char[i] == max_i)\n            max_char[j++] = i + 'a';\n    }\n    max_char[j] = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int **a, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += a[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": " int func0(int **a, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += a[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
    "c_func_decompile": " char ** func0(char ** argv, int argc) {\n  char ** ret = malloc(argc * sizeof(char *));\n  int i, j, k;\n  for (i = 0; i < argc; i++) {\n    char * p = argv[i];\n    int count = 0;\n    while (*p) {\n      if (*p >= '0' && *p <= '9') {\n        if (*p % 2 == 0) {\n          count++;\n        }\n      }\n      p++;\n    }\n    ret[i] = malloc(100);\n    __sprintf_chk(ret[i], 1, 100, \"%d\", count, count, count);\n  }\n  return ret;\n}",
    "c_func_re_decompile": " char ** func0(char ** argv, int argc) {\n  char ** ret = malloc(argc * sizeof(char *));\n  int i, j, k;\n  for (i = 0; i < argc; i++) {\n    char * p = argv[i];\n    int count = 0;\n    while (*p) {\n      if (*p >= '0' && *p <= '9') {\n        if (*p % 2 == 0) {\n          count++;\n        }\n      }\n      p++;\n    }\n    ret[i] = malloc(100);\n    __sprintf_chk(ret[i], 1, 100, \"%d\", count, count, count);\n  }\n  return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char **str, int n)\n{\n    char **res = (char **)malloc(n * sizeof(char *));\n    int i, j, count;\n    for (i = 0; i < n; i++) {\n        count = 0;\n        for (j = 0; str[i][j] != '\\0'; j++) {\n            if (str[i][j] >= '0' && str[i][j] <= '9') {\n                if ((str[i][j] - '0') % 2 == 1)\n                    count++;\n            }\n        }\n        res[i] = (char *)malloc(100 * sizeof(char));\n        __sprintf_chk(res[i], 1, 100, \"%d\", count, count, count, count);\n    }\n    return res;\n}",
    "c_func_re_decompile": " char **func0(char **str, int n)\n{\n    char **res = (char **)malloc(n * sizeof(char *));\n    int i, j, count;\n    for (i = 0; i < n; i++) {\n        count = 0;\n        for (j = 0; str[i][j] != '\\0'; j++) {\n            if (str[i][j] >= '0' && str[i][j] <= '9') {\n                if ((str[i][j] - '0') % 2 == 1)\n                    count++;\n            }\n        }\n        res[i] = (char *)malloc(100 * sizeof(char));\n        __sprintf_chk(res[i], 1, 100, \"%d\", count, count, count, count);\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
    "c_func_decompile": " char *func0(char *s)\n{\n  static char buf[10000];\n  char *p = \"aeiou\";\n  size_t len = strlen(s);\n  int i;\n  for (i = len - 2; i > 0; i--)\n    if (strchr(p, s[i]) && !strchr(p, s[i+1]) && !strchr(p, s[i-1]))\n      {\n buf[0] = s[i];\n return buf;\n      }\n  buf[0] = '\\0';\n  return buf;\n}",
    "c_func_re_decompile": " char *func0(char *s)\n{\n  static char buf[10000];\n  char *p = \"aeiou\";\n  size_t len = strlen(s);\n  int i;\n  for (i = len - 2; i > 0; i--)\n    if (strchr(p, s[i]) && !strchr(p, s[i+1]) && !strchr(p, s[i-1]))\n      {\n buf[0] = s[i];\n return buf;\n      }\n  buf[0] = '\\0';\n  return buf;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": " void func0(int *a, int n) {\n  int i, j, t;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      int c1 = 0, c2 = 0;\n      int x = a[i], y = a[j];\n      while (x > 0) {\n        c1 += x & 1;\n        x >>= 1;\n      }\n      x = c1;\n      c1 = 0;\n      while (y > 0) {\n        c1 += y & 1;\n        y >>= 1;\n      }\n      y = c1;\n      if (y < x || (y == x && a[j] < a[i])) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n) {\n  int i, j, t;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      int c1 = 0, c2 = 0;\n      int x = a[i], y = a[j];\n      while (x > 0) {\n        c1 += x & 1;\n        x >>= 1;\n      }\n      x = c1;\n      c1 = 0;\n      while (y > 0) {\n        c1 += y & 1;\n        y >>= 1;\n      }\n      y = c1;\n      if (y < x || (y == x && a[j] < a[i])) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n) {\n  int i, j, t;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      int c1 = 0, c2 = 0;\n      t = a[i];\n      while (t > 0) {\n        c1 += t & 1;\n        t >>= 1;\n      }\n      t = a[j];\n      while (t > 0) {\n        c2 += t & 1;\n        t >>= 1;\n      }\n      if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n) {\n  int i, j, t;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      int c1 = 0, c2 = 0;\n      t = a[i];\n      while (t > 0) {\n        c1 += t & 1;\n        t >>= 1;\n      }\n      t = a[j];\n      while (t > 0) {\n        c2 += t & 1;\n        t >>= 1;\n      }\n      if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
    "c_func_decompile": " void func0(char *s1, char *s2, char *s3, char *s4)\n{\n    char *s5;\n    int i, j, k;\n    s5 = (char *)malloc(strlen(s1) + 1);\n    i = 0;\n    while (*s1 != '\\0') {\n        j = 0;\n        while (*s2 != '\\0') {\n            if (*s1 == *s2) {\n                s5[i] = *s1;\n                i++;\n                break;\n            }\n            s2++;\n        }\n        s1++;\n    }\n    s5[i] = '\\0';\n    k = strlen(s5) / 2;\n    for (i = 0; i < k; i++) {\n        if (s5[i] != s5[strlen(s5) - 1 - i]) {\n            strcpy(s3, s5);\n            strcpy(s4, \"NO\");\n            break;\n        }\n    }\n    if (i == k) {\n        strcpy(s3, s5);\n        strcpy(s4, \"YES\");\n    }\n    free(s5);\n}",
    "c_func_re_decompile": " void func0(char *s1, char *s2, char *s3, char *s4)\n{\n    char *s5;\n    int i, j, k;\n    s5 = (char *)malloc(strlen(s1) + 1);\n    i = 0;\n    while (*s1 != '\\0') {\n        j = 0;\n        while (*s2 != '\\0') {\n            if (*s1 == *s2) {\n                s5[i] = *s1;\n                i++;\n                break;\n            }\n            s2++;\n        }\n        s1++;\n    }\n    s5[i] = '\\0';\n    k = strlen(s5) / 2;\n    for (i = 0; i < k; i++) {\n        if (s5[i] != s5[strlen(s5) - 1 - i]) {\n            strcpy(s3, s5);\n            strcpy(s4, \"NO\");\n            break;\n        }\n    }\n    if (i == k) {\n        strcpy(s3, s5);\n        strcpy(s4, \"YES\");\n    }\n    free(s5);\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": " void func0(int *a, int n) {\n  int i, j, t, c1, c2;\n  for (i = 0; i < n - 1; i++) {\n    for (j = i + 1; j < n; j++) {\n      c1 = 0;\n      t = a[i];\n      while (t > 0) {\n        c1 += t & 1;\n        t >>= 1;\n      }\n      c2 = 0;\n      t = a[j];\n      while (t > 0) {\n        c2 += t & 1;\n        t >>= 1;\n      }\n      if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n) {\n  int i, j, t, c1, c2;\n  for (i = 0; i < n - 1; i++) {\n    for (j = i + 1; j < n; j++) {\n      c1 = 0;\n      t = a[i];\n      while (t > 0) {\n        c1 += t & 1;\n        t >>= 1;\n      }\n      c2 = 0;\n      t = a[j];\n      while (t > 0) {\n        c2 += t & 1;\n        t >>= 1;\n      }\n      if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
    "c_func_decompile": " void func0(char *str, char *substr, char *str1, char *str2)\n{\n    int len = strlen(str);\n    char *str3 = (char *)malloc(len + 1);\n    int i, j, k = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        char *p = substr;\n        char flag = 0;\n        while (*p != '\\0') {\n            if (str[i] == *p) {\n                flag = 1;\n                break;\n            }\n            p++;\n        }\n        if (!flag) {\n            str3[k++] = str[i];\n        }\n    }\n    str3[k] = '\\0';\n    int len1 = strlen(str3);\n    char flag1 = 1;\n    for (j = 0; j < len1 / 2; j++) {\n        if (str3[j] != str3[len1 - 1 - j]) {\n            flag1 = 0;\n            break;\n        }\n    }\n    strcpy(str1, str3);\n    strcpy(str2, flag1 ? \"YES\" : \"NO\");\n    free(str3);\n}",
    "c_func_re_decompile": " void func0(char *str, char *substr, char *str1, char *str2)\n{\n    int len = strlen(str);\n    char *str3 = (char *)malloc(len + 1);\n    int i, j, k = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        char *p = substr;\n        char flag = 0;\n        while (*p != '\\0') {\n            if (str[i] == *p) {\n                flag = 1;\n                break;\n            }\n            p++;\n        }\n        if (!flag) {\n            str3[k++] = str[i];\n        }\n    }\n    str3[k] = '\\0';\n    int len1 = strlen(str3);\n    char flag1 = 1;\n    for (j = 0; j < len1 / 2; j++) {\n        if (str3[j] != str3[len1 - 1 - j]) {\n            flag1 = 0;\n            break;\n        }\n    }\n    strcpy(str1, str3);\n    strcpy(str2, flag1 ? \"YES\" : \"NO\");\n    free(str3);\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n) {\n  int i, j, k, x, y, xc, yc;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      xc = 0;\n      yc = 0;\n      x = a[i];\n      y = a[j];\n      while (x > 0) {\n        xc += x & 1;\n        x >>= 1;\n      }\n      while (y > 0) {\n        yc += y & 1;\n        y >>= 1;\n      }\n      if (xc < yc || (xc == yc && a[i] > a[j])) {\n        k = a[i];\n        a[i] = a[j];\n        a[j] = k;\n      }\n    }\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n) {\n  int i, j, k, x, y, xc, yc;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      xc = 0;\n      yc = 0;\n      x = a[i];\n      y = a[j];\n      while (x > 0) {\n        xc += x & 1;\n        x >>= 1;\n      }\n      while (y > 0) {\n        yc += y & 1;\n        y >>= 1;\n      }\n      if (xc < yc || (xc == yc && a[i] > a[j])) {\n        k = a[i];\n        a[i] = a[j];\n        a[j] = k;\n      }\n    }\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
    "c_func_decompile": "\nvoid func0(char *s1, char *s2, char *s3, char *s4)\n{\n    int i, j, k, len;\n    char *s;\n    s = (char *)malloc(strlen(s1) + 1);\n    k = 0;\n    for (i = 0; s1[i] != '\\0'; i++) {\n        for (j = 0; s2[j] != '\\0'; j++) {\n            if (s1[i] == s2[j]) {\n                s[k++] = s1[i];\n                break;\n            }\n        }\n    }\n    s[k] = '\\0';\n    len = strlen(s);\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (s[i] != s[j]) {\n            memcpy(s3, s, k + 1);\n            strcpy(s4, \"NO\");\n            break;\n        }\n    }\n    if (i >= len / 2) {\n        memcpy(s3, s, k + 1);\n        strcpy(s4, \"YES\");\n    }\n    free(s);\n}",
    "c_func_re_decompile": " void func0(char *s1, char *s2, char *s3, char *s4)\n{\n    int i, j, k, len;\n    char *s;\n    s = (char *)malloc(strlen(s1) + 1);\n    k = 0;\n    for (i = 0; s1[i] != '\\0'; i++) {\n        for (j = 0; s2[j] != '\\0'; j++) {\n            if (s1[i] == s2[j]) {\n                s[k++] = s1[i];\n                break;\n            }\n        }\n    }\n    s[k] = '\\0';\n    len = strlen(s);\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (s[i] != s[j]) {\n            memcpy(s3, s, k + 1);\n            strcpy(s4, \"NO\");\n            break;\n        }\n    }\n    if (i >= len / 2) {\n        memcpy(s3, s, k + 1);\n        strcpy(s4, \"YES\");\n    }\n    free(s);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
    "c_func_decompile": "\nvoid func0(char *s1, char *s2, char *s3, char *s4)\n{\n    int i, j, k, len;\n    char *s;\n    s = (char *)malloc(strlen(s1) + 1);\n    k = 0;\n    for (i = 0; s1[i] != '\\0'; i++) {\n        for (j = 0; s2[j] != '\\0'; j++) {\n            if (s1[i] == s2[j]) {\n                s[k++] = s1[i];\n                break;\n            }\n        }\n    }\n    s[k] = '\\0';\n    len = strlen(s);\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (s[i] != s[j]) {\n            memcpy(s3, s, k + 1);\n            strcpy(s4, \"NO\");\n            break;\n        }\n    }\n    if (i >= len / 2) {\n        memcpy(s3, s, k + 1);\n        strcpy(s4, \"YES\");\n    }\n    free(s);\n}",
    "c_func_re_decompile": " void func0(char *s1, char *s2, char *s3, char *s4)\n{\n    int i, j, k, len;\n    char *s;\n    s = (char *)malloc(strlen(s1) + 1);\n    k = 0;\n    for (i = 0; s1[i] != '\\0'; i++) {\n        for (j = 0; s2[j] != '\\0'; j++) {\n            if (s1[i] == s2[j]) {\n                s[k++] = s1[i];\n                break;\n            }\n        }\n    }\n    s[k] = '\\0';\n    len = strlen(s);\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (s[i] != s[j]) {\n            memcpy(s3, s, k + 1);\n            strcpy(s4, \"NO\");\n            break;\n        }\n    }\n    if (i >= len / 2) {\n        memcpy(s3, s, k + 1);\n        strcpy(s4, \"YES\");\n    }\n    free(s);\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
    "c_func_decompile": " char *func0(char *s) {\n    int i;\n    char *p;\n    static char buf[1000];\n    for (i = strlen(s) - 2; i > 0; i--) {\n        if (strchr(\"aeiou\", s[i]) && !strchr(\"aeiou\", s[i + 1]) && !strchr(\"aeiou\", s[i - 1])) {\n            buf[0] = s[i];\n            return buf;\n        }\n    }\n    buf[0] = 0;\n    return buf;\n}",
    "c_func_re_decompile": " char *func0(char *s) {\n    int i;\n    char *p;\n    static char buf[1000];\n    for (i = strlen(s) - 2; i > 0; i--) {\n        if (strchr(\"aeiou\", s[i]) && !strchr(\"aeiou\", s[i + 1]) && !strchr(\"aeiou\", s[i - 1])) {\n            buf[0] = s[i];\n            return buf;\n        }\n    }\n    buf[0] = 0;\n    return buf;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; 2*i < n; i++) {\n    if (a[2*i] % 2 == 1) {\n      sum += a[2*i];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; 2*i < n; i++) {\n    if (a[2*i] % 2 == 1) {\n      sum += a[2*i];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            sum += a[i];\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "ull func0(ull *a, int n) {\n    ull i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            sum += a[i];\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
    "c_func_decompile": " char *func0(char *s)\n{\n  int i;\n  char *p;\n  static char buf[100];\n  for (i = strlen(s) - 2; i > 0; i--)\n    if (strchr(\"aeiou\", s[i]) && !strchr(\"aeiou\", s[i+1]) && !strchr(\"aeiou\", s[i-1]))\n      break;\n  if (i > 0)\n    buf[0] = s[i];\n  else\n    buf[0] = 0;\n  return buf;\n}",
    "c_func_re_decompile": " char *func0(char *s)\n{\n  int i;\n  char *p;\n  static char buf[100];\n  for (i = strlen(s) - 2; i > 0; i--)\n    if (strchr(\"aeiou\", s[i]) && !strchr(\"aeiou\", s[i+1]) && !strchr(\"aeiou\", s[i-1]))\n      break;\n  if (i > 0)\n    buf[0] = s[i];\n  else\n    buf[0] = 0;\n  return buf;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
    "c_func_decompile": " char *func0(char *s)\n{\n  int i;\n  char *p;\n  static char buf[100];\n  for (i = strlen(s) - 2; i > 0; i--)\n    if (strchr(\"aeiou\", s[i]) && !strchr(\"aeiou\", s[i+1]) && !strchr(\"aeiou\", s[i-1]))\n      break;\n  if (i > 0)\n    buf[0] = s[i];\n  else\n    buf[0] = 0;\n  return buf;\n}",
    "c_func_re_decompile": " char *func0(char *s)\n{\n  int i;\n  char *p;\n  static char buf[100];\n  for (i = strlen(s) - 2; i > 0; i--)\n    if (strchr(\"aeiou\", s[i]) && !strchr(\"aeiou\", s[i+1]) && !strchr(\"aeiou\", s[i-1]))\n      break;\n  if (i > 0)\n    buf[0] = s[i];\n  else\n    buf[0] = 0;\n  return buf;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
    "c_func_decompile": " void func0(int *arr, int n, int k, int *res) {\n    int i, j, tmp;\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    for (i = 0; i < k; i++) {\n        res[i] = arr[n - k + i];\n    }\n}",
    "c_func_re_decompile": " void func0(int *arr, int n, int k, int *res) {\n    int i, j, tmp;\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    for (i = 0; i < k; i++) {\n        res[i] = arr[n - k + i];\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] % 2 == 1)\n      sum += a[i];\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] % 2 == 1)\n      sum += a[i];\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
    "c_func_decompile": " void func0(int *a, int n, int m, int *b) {\n  int i, j, t;\n  for (i = 0; i < n-1; i++)\n    for (j = 0; j < n-i-1; j++)\n      if (a[j] > a[j+1]) {\n        t = a[j];\n        a[j] = a[j+1];\n        a[j+1] = t;\n      }\n  for (i = 0; i < m; i++)\n    b[i] = a[n-m+i];\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int m, int *b) {\n  int i, j, t;\n  for (i = 0; i < n-1; i++)\n    for (j = 0; j < n-i-1; j++)\n      if (a[j] > a[j+1]) {\n        t = a[j];\n        a[j] = a[j+1];\n        a[j+1] = t;\n      }\n  for (i = 0; i < m; i++)\n    b[i] = a[n-m+i];\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i;\n  int sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] % 2 == 1) {\n      sum += a[i];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": "ull func0(ull *a, int n) {\n  int i;\n  ull sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] % 2 == 1) {\n      sum += a[i];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > -100 && a[i] < 100) {\n      sum += a[i];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] > -100 && a[i] < 100) {\n      sum += a[i];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] + 99 < 192)\n      sum += a[i];\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] + 99 < 192)\n      sum += a[i];\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
    "c_func_decompile": " void func0(int *a, int n, int m, int *b) {\n  int i, j, t;\n  for (i = n-1; i > 0; i--) {\n    for (j = 0; j < i; j++) {\n      if (a[j] > a[j+1]) {\n        t = a[j];\n        a[j] = a[j+1];\n        a[j+1] = t;\n      }\n    }\n  }\n  for (i = 0; i < m; i++) {\n    b[i] = a[n-m+i];\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int m, int *b) {\n  int i, j, t;\n  for (i = n-1; i > 0; i--) {\n    for (j = 0; j < i; j++) {\n      if (a[j] > a[j+1]) {\n        t = a[j];\n        a[j] = a[j+1];\n        a[j+1] = t;\n      }\n    }\n  }\n  for (i = 0; i < m; i++) {\n    b[i] = a[n-m+i];\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] + 99 < 192) {\n      sum += a[i];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": "uchar func0(uchar *a, int n) {\n  uchar i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] + 99 < 192) {\n      sum += a[i];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int m, int *b) {\n  int i, j;\n  for (i = n-1; i > 0; i--) {\n    for (j = 0; j < i; j++) {\n      if (a[j] > a[j+1]) {\n        int t = a[j];\n        a[j] = a[j+1];\n        a[j+1] = t;\n      }\n    }\n  }\n  for (i = 0; i < m; i++) {\n    b[i] = a[n-m+i];\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int m, int *b) {\n  int i, j;\n  for (i = n-1; i > 0; i--) {\n    for (j = 0; j < i; j++) {\n      if (a[j] > a[j+1]) {\n        int t = a[j];\n        a[j] = a[j+1];\n        a[j+1] = t;\n      }\n    }\n  }\n  for (i = 0; i < m; i++) {\n    b[i] = a[n-m+i];\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i;\n  int sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] + 99 < 192) {\n      sum += a[i];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i;\n  int sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] + 99 < 192) {\n      sum += a[i];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int n, int *a, int *len)\n{\n    int i, j, k, m = 10;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= m) {\n                m *= 2;\n                a = realloc(a, m * sizeof(int));\n            }\n            a[(*len)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        for (j = i - 1; j >= 0 && a[j] > k; j--)\n            a[j + 1] = a[j];\n        a[j + 1] = k;\n    }\n}",
    "c_func_re_decompile": " void func0(int n, int *a, int *len)\n{\n    int i, j, k, m = 10;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= m) {\n                m *= 2;\n                a = realloc(a, m * sizeof(int));\n            }\n            a[(*len)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        for (j = i - 1; j >= 0 && a[j] > k; j--)\n            a[j + 1] = a[j];\n        a[j + 1] = k;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
    "c_func_decompile": " void func0(int n, int *a, int *len)\n{\n  int i, j, k, m;\n  *len = 1;\n  a[0] = 1;\n  m = 10;\n  while (n != 1) {\n    if (n % 2 == 1) {\n      if (*len >= m) {\n        m *= 2;\n        a = (int *)realloc(a, m * sizeof(int));\n      }\n      a[(*len)++] = n;\n    }\n    n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n  }\n  for (i = 1; i < *len; i++) {\n    k = a[i];\n    for (j = i - 1; j >= 0 && a[j] > k; j--)\n      a[j + 1] = a[j];\n    a[j + 1] = k;\n  }\n}",
    "c_func_re_decompile": " void func0(int n, int *a, int *len)\n{\n  int i, j, k, m;\n  *len = 1;\n  a[0] = 1;\n  m = 10;\n  while (n != 1) {\n    if (n % 2 == 1) {\n      if (*len >= m) {\n        m *= 2;\n        a = (int *)realloc(a, m * sizeof(int));\n      }\n      a[(*len)++] = n;\n    }\n    n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n  }\n  for (i = 1; i < *len; i++) {\n    k = a[i];\n    for (j = i - 1; j >= 0 && a[j] > k; j--)\n      a[j + 1] = a[j];\n    a[j + 1] = k;\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
    "c_func_decompile": " char * func0(char *s1, char *s2) {\n    int i, j, k, l, m, n, o;\n    k = 0;\n    l = strlen(s1);\n    m = strlen(s2);\n    n = 1;\n    for (i = 0; i < l; i++) {\n        if (s1[i] == '(')\n            k++;\n        if (s1[i] == ')')\n            k--;\n        if (k < 0)\n            n = 0;\n    }\n    for (i = 0; i < m; i++) {\n        if (s2[i] == '(')\n            k++;\n        if (s2[i] == ')')\n            k--;\n        if (k < 0)\n            n = 0;\n    }\n    if (k == 0 && n)\n        return \"YES\";\n    k = 0;\n    n = 1;\n    for (i = 0; i < m; i++) {\n        if (s2[i] == '(')\n            k++;\n        if (s2[i] == ')')\n            k--;\n        if (k < 0)\n            n = 0;\n    }\n    for (i = 0; i < l; i++) {\n        if (s1[i] == '(')\n            k++;\n        if (s1[i] == ')')\n            k--;\n        if (k < 0)\n            n = 0;\n    }\n    if (k == 0 && n)\n        return \"YES\";\n    return \"NO\";\n}",
    "c_func_re_decompile": " char * func0(char *s1, char *s2) {\n    int i, j, k, l, m, n, o;\n    k = 0;\n    l = strlen(s1);\n    m = strlen(s2);\n    n = 1;\n    for (i = 0; i < l; i++) {\n        if (s1[i] == '(')\n            k++;\n        if (s1[i] == ')')\n            k--;\n        if (k < 0)\n            n = 0;\n    }\n    for (i = 0; i < m; i++) {\n        if (s2[i] == '(')\n            k++;\n        if (s2[i] == ')')\n            k--;\n        if (k < 0)\n            n = 0;\n    }\n    if (k == 0 && n)\n        return \"YES\";\n    k = 0;\n    n = 1;\n    for (i = 0; i < m; i++) {\n        if (s2[i] == '(')\n            k++;\n        if (s2[i] == ')')\n            k--;\n        if (k < 0)\n            n = 0;\n    }\n    for (i = 0; i < l; i++) {\n        if (s1[i] == '(')\n            k++;\n        if (s1[i] == ')')\n            k--;\n        if (k < 0)\n            n = 0;\n    }\n    if (k == 0 && n)\n        return \"YES\";\n    return \"NO\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n    int i, j, k, l;\n    i = j = k = 0;\n    l = strlen(s);\n    while (i < l) {\n        if (s[i] == '[') {\n            j++;\n            if (j > k)\n                k = j;\n        } else if (s[i] == ']')\n            j--;\n        i++;\n    }\n    return k;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
    "c_func_decompile": " char * func0(char *s1, char *s2)\n{\n  int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n  i = strlen(s1);\n  j = strlen(s2);\n  k = 0;\n  l = 0;\n  m = 0;\n  n = 0;\n  o = 0;\n  p = 0;\n  q = 0;\n  r = 0;\n  t = 0;\n  u = 0;\n  v = 0;\n  w = 0;\n  x = 0;\n  y = 0;\n  z = 0;\n  for (k = 0; k < i; k++)\n    {\n      if (s1[k] == '(')\n {\n   l++;\n }\n      else if (s1[k] == ')')\n {\n   l--;\n }\n      if (l < 0)\n {\n   return \"NO\";\n }\n    }\n  for (k = 0; k < j; k++)\n    {\n      if (s2[k] == '(')\n {\n   m++;\n }\n      else if (s2[k] == ')')\n {\n   m--;\n }\n      if (m < 0)\n {\n   return \"NO\";\n }\n    }\n  if (l == 0 && m == 0)\n    {\n      return \"YES\";\n    }\n  else if (l % 2 == 0 && m % 2 == 0)\n    {\n      return \"YES\";\n    }\n  else\n    {\n      return \"NO\";\n    }\n}",
    "c_func_re_decompile": " char * func0(char *s1, char *s2)\n{\n  int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n  i = strlen(s1);\n  j = strlen(s2);\n  k = 0;\n  l = 0;\n  m = 0;\n  n = 0;\n  o = 0;\n  p = 0;\n  q = 0;\n  r = 0;\n  t = 0;\n  u = 0;\n  v = 0;\n  w = 0;\n  x = 0;\n  y = 0;\n  z = 0;\n  for (k = 0; k < i; k++)\n    {\n      if (s1[k] == '(')\n {\n   l++;\n }\n      else if (s1[k] == ')')\n {\n   l--;\n }\n      if (l < 0)\n {\n   return \"NO\";\n }\n    }\n  for (k = 0; k < j; k++)\n    {\n      if (s2[k] == '(')\n {\n   m++;\n }\n      else if (s2[k] == ')')\n {\n   m--;\n }\n      if (m < 0)\n {\n   return \"NO\";\n }\n    }\n  if (l == 0 && m == 0)\n    {\n      return \"YES\";\n    }\n  else if (l % 2 == 0 && m % 2 == 0)\n    {\n      return \"YES\";\n    }\n  else\n    {\n      return \"NO\";\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, j = 0, k = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '[')\n            j++;\n        if (str[i] == ']')\n            j--;\n        if (j < 0)\n            j = 0;\n        if (j > k)\n            k = j;\n        if (j < k - 1)\n            return 1;\n    }\n    return 0;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
    "c_func_decompile": " char * func0(char *s1, char *s2)\n{\n  int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n  i = strlen(s1);\n  j = strlen(s2);\n  k = 0;\n  l = 0;\n  m = 0;\n  n = 0;\n  o = 0;\n  p = 0;\n  q = 0;\n  r = 0;\n  t = 0;\n  u = 0;\n  v = 0;\n  w = 0;\n  x = 0;\n  y = 0;\n  z = 0;\n  for (k = 0; k < i; k++)\n    {\n      if (s1[k] == '(')\n {\n   l++;\n }\n      else if (s1[k] == ')')\n {\n   l--;\n }\n      if (l < 0)\n {\n   return \"NO\";\n }\n    }\n  for (k = 0; k < j; k++)\n    {\n      if (s2[k] == '(')\n {\n   m++;\n }\n      else if (s2[k] == ')')\n {\n   m--;\n }\n      if (m < 0)\n {\n   return \"NO\";\n }\n    }\n  if (l == 0 && m == 0)\n    {\n      return \"YES\";\n    }\n  else if (l % 2 == 0 && m % 2 == 0)\n    {\n      return \"YES\";\n    }\n  else\n    {\n      return \"NO\";\n    }\n}",
    "c_func_re_decompile": " char * func0(char *s1, char *s2)\n{\n  int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n  i = strlen(s1);\n  j = strlen(s2);\n  k = 0;\n  l = 0;\n  m = 0;\n  n = 0;\n  o = 0;\n  p = 0;\n  q = 0;\n  r = 0;\n  t = 0;\n  u = 0;\n  v = 0;\n  w = 0;\n  x = 0;\n  y = 0;\n  z = 0;\n  for (k = 0; k < i; k++)\n    {\n      if (s1[k] == '(')\n {\n   l++;\n }\n      else if (s1[k] == ')')\n {\n   l--;\n }\n      if (l < 0)\n {\n   return \"NO\";\n }\n    }\n  for (k = 0; k < j; k++)\n    {\n      if (s2[k] == '(')\n {\n   m++;\n }\n      else if (s2[k] == ')')\n {\n   m--;\n }\n      if (m < 0)\n {\n   return \"NO\";\n }\n    }\n  if (l == 0 && m == 0)\n    {\n      return \"YES\";\n    }\n  else if (l % 2 == 0 && m % 2 == 0)\n    {\n      return \"YES\";\n    }\n  else\n    {\n      return \"NO\";\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i;\n  if (n == 0) return 1;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1]) return 0;\n    if (i > 1 && a[i] == a[i-1] && a[i] == a[i-2]) return 0;\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i;\n  if (n == 0) return 1;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1]) return 0;\n    if (i > 1 && a[i] == a[i-1] && a[i] == a[i-2]) return 0;\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, j, k, len;\n    len = strlen(str);\n    i = j = k = 0;\n    while (i < len) {\n        if (str[i] == '[') {\n            k++;\n            if (k > j)\n                j = k;\n            i++;\n        } else if (str[i] == ']') {\n            k--;\n            if (k < 0)\n                return 0;\n            i++;\n        } else\n            i++;\n        if (k < j - 1)\n            return 1;\n    }\n    if (k != 0)\n        return 0;\n    return 1;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, j, k, len;\n    len = strlen(str);\n    i = j = k = 0;\n    while (i < len) {\n        if (str[i] == '[') {\n            k++;\n            if (k > j)\n                j = k;\n            i++;\n        } else if (str[i] == ']') {\n            k--;\n            if (k < 0)\n                return 0;\n            i++;\n        } else\n            i++;\n        if (k < j - 1)\n            return 1;\n    }\n    if (k != 0)\n        return 0;\n    return 1;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(int a, int b) {\n  if (b == 0) {\n    return 1;\n  }\n  else {\n    return func0(a, b - 1);\n  }\n}",
    "c_func_re_decompile": " int func0(int a, int b) {\n  if (b == 0) {\n    return 1;\n  }\n  else {\n    return func0(a, b - 1);\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
    "c_func_decompile": "\nint *func0(int n, int *arr, int *len) {\n    int i, j, k, temp, size = 10;\n    *len = 1;\n    arr[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= size) {\n                size *= 2;\n                arr = realloc(arr, size * sizeof(int));\n            }\n            arr[(*len)++] = n;\n        }\n        n = n / 2;\n    }\n    for (i = 1; i < *len; i++) {\n        temp = arr[i];\n        for (j = i - 1; j >= 0 && arr[j] > temp; j--) {\n            arr[j + 1] = arr[j];\n        }\n        arr[j + 1] = temp;\n    }\n    return arr;\n}",
    "c_func_re_decompile": " int *func0(int n, int *arr, int *len) {\n    int i, j, k, temp, size = 10;\n    *len = 1;\n    arr[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= size) {\n                size *= 2;\n                arr = realloc(arr, size * sizeof(int));\n            }\n            arr[(*len)++] = n;\n        }\n        n = n * 3 + 1;\n    }\n    for (i = 1; i < *len; i++) {\n        temp = arr[i];\n        for (j = i - 1; j >= 0 && arr[j] > temp; j--) {\n            arr[j + 1] = arr[j];\n        }\n        arr[j + 1] = temp;\n    }\n    return arr;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1] || (a[i] == a[i-1] && i > 1 && a[i] == a[i-2]))\n      return 0;\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1] || (a[i] == a[i-1] && i > 1 && a[i] == a[i-2]))\n      return 0;\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  int len = strlen(s);\n  if (len == 0) return 0;\n  if (!((*(const unsigned short int *)&((*(const char *)__ctype_b_loc())[1 + (unsigned char)(s[len - 1])]) & (0x0400)))\n      return 0;\n  if (len == 1) return 0;\n  if (((*(const unsigned short int *)&((*(const char *)__ctype_b_loc())[1 + (unsigned char)(s[len - 2])]) & (0x0400)))\n      return 0;\n  return 1;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  int len = strlen(s);\n  if (len == 0) return 0;\n  char c = s[len-1];\n  if (!((*(const unsigned short *)&(*(const unsigned short *)__ctype_b_loc()+(unsigned char)(c)))&0x0400)) return 0;\n  if (len == 1) return 1;\n  char c2 = s[len-2];\n  if ((*(const unsigned short *)&(*(const unsigned short *)__ctype_b_loc()+(unsigned char)(c2)))&0x0400) return 0;\n  return 1;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1] || (i > 1 && a[i] == a[i-1] && a[i] == a[i-2]))\n      return 0;\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1] || (i > 1 && a[i] == a[i-1] && a[i] == a[i-2]))\n      return 0;\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  int len = strlen(s);\n  if (len == 0) return 0;\n  if (!((*(const unsigned short int *)&((*(const char *)__ctype_b_loc())[1 + (unsigned char)s[len - 1]]) & 0x0400))\n      return 0;\n  if (len == 1) return 0;\n  if (!((*(const unsigned short int *)&((*(const char *)__ctype_b_loc())[1 + (unsigned char)s[len - 2]]) & 0x0400)))\n    return 0;\n  return 1;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
    "c_func_decompile": "\nchar *func0(int a, int b, int c, int d) {\n  int x = (a > c) ? a : c;\n  int y = (b < d) ? b : d;\n  int z = y - x;\n  if (z < 2)\n    return \"No\";\n  for (int i = 2; i * i <= z; i++)\n    if (z % i == 0)\n      return \"No\";\n  return \"Yes\";\n}",
    "c_func_re_decompile": " char *func0(int a, int b, int c, int d) {\n  int x = (a > c) ? a : c;\n  int y = (b < d) ? b : d;\n  int z = y - x;\n  if (z < 2)\n    return \"No\";\n  for (int i = 2; i * i <= z; i++)\n    if (z % i == 0)\n      return \"No\";\n  return \"Yes\";\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
    "c_func_decompile": "\nint *func0(int n, int *arr, int *len) {\n    int i, j, k, temp, size = 10;\n    *len = 1;\n    arr[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= size) {\n                size *= 2;\n                arr = realloc(arr, size * sizeof(int));\n            }\n            arr[(*len)++] = n;\n        }\n        n = n / 2;\n    }\n    for (i = 1; i < *len; i++) {\n        temp = arr[i];\n        j = i - 1;\n        while (j >= 0 && arr[j] > temp) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = temp;\n    }\n    return arr;\n}",
    "c_func_re_decompile": " int *func0(int n, int *arr, int *len) {\n    int i, j, k, temp, size = 10;\n    *len = 1;\n    arr[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= size) {\n                size *= 2;\n                arr = realloc(arr, size * sizeof(int));\n            }\n            arr[(*len)++] = n;\n        }\n        n = n * 3 + 1;\n    }\n    for (i = 1; i < *len; i++) {\n        temp = arr[i];\n        j = i - 1;\n        while (j >= 0 && arr[j] > temp) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = temp;\n    }\n    return arr;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  int i, m, d;\n  char mstr[3], dstr[3];\n  if (strlen(s) != 10) return 0;\n  for (i = 0; i < 10; i++) {\n    if (i == 2 || i == 5) {\n      if (s[i] != '-') return 0;\n    } else {\n      if (s[i] < '0' || s[i] > '9') return 0;\n    }\n  }\n  mstr[0] = s[0]; mstr[1] = s[1]; mstr[2] = 0;\n  dstr[0] = s[3]; dstr[1] = s[4]; dstr[2] = 0;\n  m = strtol(mstr, 0, 10);\n  d = strtol(dstr, 0, 10);\n  if (m < 1 || m > 12 || d < 1 || d > 31) return 0;\n  if (m == 2 || m == 4 || m == 6 || m == 9 || m == 11) {\n    if (d == 31) return 0;\n  }\n  if (m == 2) {\n    if (d > 29) return 0;\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  int i, m, d, y;\n  char mstr[3], dstr[3], ystr[5];\n  if (strlen(s) != 10) return 0;\n  for (i = 0; i < 10; i++) {\n    if (i == 2 || i == 5) {\n      if (s[i] != '-') return 0;\n    } else {\n      if (s[i] < '0' || s[i] > '9') return 0;\n    }\n  }\n  mstr[0] = s[0]; mstr[1] = s[1]; mstr[2] = 0;\n  dstr[0] = s[3]; dstr[1] = s[4]; dstr[2] = 0;\n  ystr[0] = s[6]; ystr[1] = s[7]; ystr[2] = s[8]; ystr[3] = s[9]; ystr[4] = 0;\n  m = strtol(mstr, 0, 10);\n  d = strtol(dstr, 0, 10);\n  y = strtol(ystr, 0, 10);\n  if (m < 1 || m > 12 || d < 1 || d > 31) return 0;\n  if (m == 2 || m == 4 || m == 6 || m == 9 || m == 11) {\n    if (d == 31) return 0;\n  }\n  if (m == 2) {\n    if (d > 29) return 0;\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
    "c_func_decompile": " char * func0(char * s1, char * s2) {\n    int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n    i = strlen(s1);\n    j = strlen(s2);\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    l = 0;\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    l = 0;\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    return \"YES\";\n}",
    "c_func_re_decompile": " char * func0(char * s1, char * s2) {\n    int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n    i = strlen(s1);\n    j = strlen(s2);\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    l = 0;\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    l = 0;\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    return \"YES\";\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
    "c_func_decompile": " int func0(char *s) {\n    int i, m, d, y;\n    char m1[3], d1[3], y1[5];\n\n    if (strlen(s) != 10)\n        return 0;\n    for (i = 0; i < 10; i++)\n        if ((i != 2 && i != 5) || s[i] != '-')\n            return 0;\n        else if (s[i] < '0' || s[i] > '9')\n            return 0;\n    m1[0] = s[0];\n    m1[1] = s[1];\n    m1[2] = '\\0';\n    d1[0] = s[3];\n    d1[1] = s[4];\n    d1[2] = '\\0';\n    y1[0] = s[6];\n    y1[1] = s[7];\n    y1[2] = s[8];\n    y1[3] = s[9];\n    y1[4] = '\\0';\n    m = atoi(m1);\n    d = atoi(d1);\n    y = atoi(y1);\n    if (m < 1 || m > 12)\n        return 0;\n    if (d < 1 || d > 31)\n        return 0;\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d == 31)\n        return 0;\n    if (m == 2 && d > 29)\n        return 0;\n    return 1;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n    int i, m, d, y;\n    char m1[3], d1[3], y1[5];\n\n    if (strlen(s) != 10)\n        return 0;\n    for (i = 0; i < 10; i++)\n        if ((i != 2 && i != 5) || s[i] != '-')\n            return 0;\n        else if (s[i] < '0' || s[i] > '9')\n            return 0;\n    m1[0] = s[0];\n    m1[1] = s[1];\n    m1[2] = '\\0';\n    d1[0] = s[3];\n    d1[1] = s[4];\n    d1[2] = '\\0';\n    y1[0] = s[6];\n    y1[1] = s[7];\n    y1[2] = s[8];\n    y1[3] = s[9];\n    y1[4] = '\\0';\n    m = atoi(m1);\n    d = atoi(d1);\n    y = atoi(y1);\n    if (m < 1 || m > 12)\n        return 0;\n    if (d < 1 || d > 31)\n        return 0;\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d == 31)\n        return 0;\n    if (m == 2 && d > 29)\n        return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, s, p;\n  if (n == 0) return -32768;\n  s = 0;\n  p = 1;\n  for (i = 0; i < n; i++) {\n    s += (a[i] >= 0 ? a[i] : -a[i]);\n    if (a[i] == 0) p = 0;\n    if (a[i] < 0) p = -p;\n  }\n  return s * p;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, s, p;\n  if (n == 0) return -32768;\n  s = 0;\n  p = 1;\n  for (i = 0; i < n; i++) {\n    s += (a[i] >= 0 ? a[i] : -a[i]);\n    if (a[i] == 0) p = 0;\n    if (a[i] < 0) p = -p;\n  }\n  return s * p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
    "c_func_decompile": "\nchar *func0(int a, int b, int c, int d)\n{\n    int i, j;\n    if (a > c)\n        a = c;\n    if (b < d)\n        b = d;\n    d = b - a;\n    if (d < 2)\n        return \"NO\";\n    if (d < 4)\n        return \"YES\";\n    if (d % 2 == 0)\n        return \"YES\";\n    for (i = 2; i * i <= d; i++)\n        if (d % i == 0)\n            return \"NO\";\n    return \"YES\";\n}",
    "c_func_re_decompile": " char *func0(int a, int b, int c, int d)\n{\n    int i, j;\n    if (a > c)\n        a = c;\n    if (b < d)\n        b = d;\n    d = b - a;\n    if (d < 2)\n        return \"NO\";\n    if (d < 4)\n        return \"YES\";\n    if (d % 2 == 0)\n        return \"YES\";\n    for (i = 2; i * i <= d; i++)\n        if (d % i == 0)\n            return \"NO\";\n    return \"YES\";\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  int i;\n  if (strlen(s) != 10)\n    return 0;\n  for (i = 0; i < 10; i++) {\n    if (i == 0 && s[i] == '-')\n      continue;\n    if (s[i] < '0' || s[i] > '9')\n      return 0;\n  }\n  char m[3];\n  m[0] = s[0];\n  m[1] = s[1];\n  m[2] = '\\0';\n  char d[3];\n  d[0] = s[3];\n  d[1] = s[4];\n  d[2] = '\\0';\n  char y[5];\n  y[0] = s[6];\n  y[1] = s[7];\n  y[2] = s[8];\n  y[3] = s[9];\n  y[4] = '\\0';\n  int month = strtol(m, NULL, 10);\n  int day = strtol(d, NULL, 10);\n  int year = strtol(y, NULL, 10);\n  if (month < 1 || month > 12 || day < 1 || day > 31)\n    return 0;\n  if (month == 2 && day > 29)\n    return 0;\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day == 31)\n      return 0;\n  }\n  if (month == 2 && day == 29 && year % 4 != 0)\n    return 0;\n  return 1;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  int i;\n  if (strlen(s) != 10)\n    return 0;\n  for (i = 0; i < 10; i++) {\n    if (i == 0 && s[i] == '-')\n      continue;\n    if (s[i] < '0' || s[i] > '9')\n      return 0;\n  }\n  char m[3];\n  m[0] = s[0];\n  m[1] = s[1];\n  m[2] = '\\0';\n  char d[3];\n  d[0] = s[3];\n  d[1] = s[4];\n  d[2] = '\\0';\n  char y[5];\n  y[0] = s[6];\n  y[1] = s[7];\n  y[2] = s[8];\n  y[3] = s[9];\n  y[4] = '\\0';\n  int month = strtol(m, NULL, 10);\n  int day = strtol(d, NULL, 10);\n  int year = strtol(y, NULL, 10);\n  if (month < 1 || month > 12 || day < 1 || day > 31)\n    return 0;\n  if (month == 2 && day > 29)\n    return 0;\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day == 31)\n      return 0;\n  }\n  if (month == 2 && day == 29 && year % 4 != 0)\n    return 0;\n  return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, s = 0, p = 1;\n  if (n == 0) return -2048;\n  for (i = 0; i < n; i++) {\n    s += (a[i] > 0 ? a[i] : -a[i]);\n    if (a[i] != 0) p *= (a[i] > 0 ? a[i] : -p);\n  }\n  return s * p;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, s = 0, p = 1;\n  if (n == 0) return -2048;\n  for (i = 0; i < n; i++) {\n    s += (a[i] > 0 ? a[i] : -a[i]);\n    if (a[i] != 0) p *= (a[i] > 0 ? a[i] : -p);\n  }\n  return s * p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
    "c_func_decompile": "\nchar *func0(int a, int b, int c, int d) {\n    int i, j;\n    if (a > c)\n        i = a;\n    else\n        i = c;\n    if (b < d)\n        j = b;\n    else\n        j = d;\n    if (j - i <= 1)\n        return \"NO\";\n    if (j - i <= 3)\n        return \"YES\";\n    for (i = 2; i * i <= j - i; i++)\n        if ((j - i) % i == 0)\n            return \"NO\";\n    return \"YES\";\n}",
    "c_func_re_decompile": " char *func0(int a, int b, int c, int d) {\n    int i, j;\n    if (a > c)\n        i = a;\n    else\n        i = c;\n    if (b < d)\n        j = b;\n    else\n        j = d;\n    if (j - i <= 1)\n        return \"NO\";\n    if (j - i <= 3)\n        return \"YES\";\n    for (i = 2; i * i <= j - i; i++)\n        if ((j - i) % i == 0)\n            return \"NO\";\n    return \"YES\";\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
    "c_func_decompile": "\nchar *func0(int a, int b, int c, int d) {\n    int i, j;\n    if (a > c)\n        i = a;\n    else\n        i = c;\n    if (b < d)\n        j = b;\n    else\n        j = d;\n    if (j - i <= 1)\n        return \"NO\";\n    if (j - i <= 3)\n        return \"YES\";\n    for (i = 2; i * i <= j - i; i++)\n        if ((j - i) % i == 0)\n            return \"NO\";\n    return \"YES\";\n}",
    "c_func_re_decompile": " char *func0(int a, int b, int c, int d) {\n    int i, j;\n    if (a > c)\n        i = a;\n    else\n        i = c;\n    if (b < d)\n        j = b;\n    else\n        j = d;\n    if (j - i <= 1)\n        return \"NO\";\n    if (j - i <= 3)\n        return \"YES\";\n    for (i = 2; i * i <= j - i; i++)\n        if ((j - i) % i == 0)\n            return \"NO\";\n    return \"YES\";\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, s = 0, p = 1;\n  if (n == 0) return 0;\n  for (i = 0; i < n; i++) {\n    s += (a[i] > 0 ? a[i] : -a[i]);\n    if (a[i] == 0) p = 0;\n    else if (a[i] < 0) p = -p;\n  }\n  return s * p;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, s = 0, p = 1;\n  if (n == 0) return 0;\n  for (i = 0; i < n; i++) {\n    s += (a[i] > 0 ? a[i] : -a[i]);\n    if (a[i] == 0) p = 0;\n    else if (a[i] < 0) p = -p;\n  }\n  return s * p;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, s = 0, p = 1;\n  if (n == 0) return 0;\n  for (i = 0; i < n; i++) {\n    s += (a[i] > 0 ? a[i] : -a[i]);\n    if (a[i] == 0) p = 0;\n    else if (a[i] < 0) p = -p;\n  }\n  return s * p;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, s = 0, p = 1;\n  if (n == 0) return 0;\n  for (i = 0; i < n; i++) {\n    s += (a[i] > 0 ? a[i] : -a[i]);\n    if (a[i] == 0) p = 0;\n    else if (a[i] < 0) p = -p;\n  }\n  return s * p;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  if (strlen(s) != 10) return 0;\n  if (s[0] < '0' || s[0] > '9') return 0;\n  if (s[1] < '0' || s[1] > '9') return 0;\n  if (s[2] != '-') return 0;\n  if (s[3] < '0' || s[3] > '9') return 0;\n  if (s[4] < '0' || s[4] > '9') return 0;\n  if (s[5] != '-') return 0;\n  if (s[6] < '0' || s[6] > '9') return 0;\n  if (s[7] < '0' || s[7] > '9') return 0;\n  if (s[8] < '0' || s[8] > '9') return 0;\n  if (s[9] < '0' || s[9] > '9') return 0;\n  char y[2] = {s[0], s[1]};\n  char m[2] = {s[3], s[4]};\n  char d[2] = {s[6], s[7]};\n  y[1] = '\\0';\n  m[1] = '\\0';\n  d[1] = '\\0';\n  int yy = (int)strtol(y, NULL, 10);\n  int mm = (int)strtol(m, NULL, 10);\n  int dd = (int)strtol(d, NULL, 10);\n  if (yy < 1 || yy > 12) return 0;\n  if (mm < 1 || mm > 31) return 0;\n  if (yy == 1 || yy == 3 || yy == 5 || yy == 7 || yy == 8 || yy == 10 || yy == 12) {\n    if (mm == 31) return 0;\n  }\n  if (yy == 4 || yy == 6 || yy == 9 || yy == 11) {\n    if (mm == 31) return 0;\n  }\n  if (yy == 2) {\n    if (mm > 29) return 0;\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  if (strlen(s) != 10) return 0;\n  if (s[0] < '0' || s[0] > '9') return 0;\n  if (s[1] < '0' || s[1] > '9') return 0;\n  if (s[2] != '-') return 0;\n  if (s[3] < '0' || s[3] > '9') return 0;\n  if (s[4] < '0' || s[4] > '9') return 0;\n  if (s[5] != '-') return 0;\n  if (s[6] < '0' || s[6] > '9') return 0;\n  if (s[7] < '0' || s[7] > '9') return 0;\n  if (s[8] < '0' || s[8] > '9') return 0;\n  if (s[9] < '0' || s[9] > '9') return 0;\n  char y[2] = {s[0], s[1]};\n  char m[2] = {s[3], s[4]};\n  char d[2] = {s[6], s[7]};\n  y[1] = '\\0';\n  m[1] = '\\0';\n  d[1] = '\\0';\n  int yy = (int)strtol(y, NULL, 10);\n  int mm = (int)strtol(m, NULL, 10);\n  int dd = (int)strtol(d, NULL, 10);\n  if (yy < 1 || yy > 12) return 0;\n  if (mm < 1 || mm > 31) return 0;\n  if (yy == 1 || yy == 3 || yy == 5 || yy == 7 || yy == 8 || yy == 10 || yy == 12) {\n    if (mm == 31) return 0;\n  }\n  if (yy == 4 || yy == 6 || yy == 9 || yy == 11) {\n    if (mm == 31) return 0;\n  }\n  if (yy == 2) {\n    if (mm > 29) return 0;\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
    "c_func_decompile": " int *func0(int **arr, int n, int m, int *len) {\n    int i, j, min, x, y;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (arr[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    min = n * n;\n    if (x > 0 && arr[x - 1][y] < min) {\n        min = arr[x - 1][y];\n    }\n    if (x < n - 1 && arr[x + 1][y] < min) {\n        min = arr[x + 1][y];\n    }\n    if (y > 0 && arr[x][y - 1] < min) {\n        min = arr[x][y - 1];\n    }\n    if (y < n - 1 && arr[x][y + 1] < min) {\n        min = arr[x][y + 1];\n    }\n    *len = m;\n    int *res = (int *)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            res[i] = 1;\n        } else {\n            res[i] = min;\n        }\n    }\n    return res;\n}",
    "c_func_re_decompile": " int *func0(int **arr, int n, int m, int *len) {\n    int i, j, min, x, y;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (arr[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    min = n * n;\n    if (x > 0 && arr[x - 1][y] < min) {\n        min = arr[x - 1][y];\n    }\n    if (x < n - 1 && arr[x + 1][y] < min) {\n        min = arr[x + 1][y];\n    }\n    if (y > 0 && arr[x][y - 1] < min) {\n        min = arr[x][y - 1];\n    }\n    if (y < n - 1 && arr[x][y + 1] < min) {\n        min = arr[x][y + 1];\n    }\n    *len = m;\n    int *res = (int *)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            res[i] = 1;\n        } else {\n            res[i] = min;\n        }\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int** a, int n, int m, int* retSize) {\n    int i, j, min, x = 0, y = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    min = n * n;\n    if (x > 0) {\n        if (a[x - 1][y] < min) {\n            min = a[x - 1][y];\n        }\n    }\n    if (x < n - 1) {\n        if (a[x + 1][y] < min) {\n            min = a[x + 1][y];\n        }\n    }\n    if (y > 0) {\n        if (a[x][y - 1] < min) {\n            min = a[x][y - 1];\n        }\n    }\n    if (y < n - 1) {\n        if (a[x][y + 1] < min) {\n            min = a[x][y + 1];\n        }\n    }\n    *retSize = m;\n    int* ret = (int*)malloc(sizeof(int) * m);\n    for (i = 0; i < m; i++) {\n        ret[i] = i % 2 == 0 ? 1 : min;\n    }\n    return ret;\n}",
    "c_func_re_decompile": " int* func0(int** a, int n, int m, int* retSize) {\n    int i, j, min, x = 0, y = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    min = n * n;\n    if (x > 0) {\n        if (a[x - 1][y] < min) {\n            min = a[x - 1][y];\n        }\n    }\n    if (x < n - 1) {\n        if (a[x + 1][y] < min) {\n            min = a[x + 1][y];\n        }\n    }\n    if (y > 0) {\n        if (a[x][y - 1] < min) {\n            min = a[x][y - 1];\n        }\n    }\n    if (y < n - 1) {\n        if (a[x][y + 1] < min) {\n            min = a[x][y + 1];\n        }\n    }\n    *retSize = m;\n    int* ret = (int*)malloc(sizeof(int) * m);\n    for (i = 0; i < m; i++) {\n        ret[i] = i % 2 == 0 ? 1 : min;\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int r = 1;\n    int f = 0;\n    while (n > 0) {\n        int d = n % 10;\n        if (d % 2 == 1) {\n            f = 1;\n            r *= d;\n        }\n        n /= 10;\n    }\n    if (f) {\n        return r;\n    } else {\n        return 0;\n    }\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int r = 1;\n    int f = 0;\n    while (n > 0) {\n        int d = n % 10;\n        if (d % 2 == 1) {\n            f = 1;\n            r *= d;\n        }\n        n /= 10;\n    }\n    if (f) {\n        return r;\n    } else {\n        return 0;\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n) {\n  int i;\n  int *p = (int *)malloc((n+1)*sizeof(int));\n  p[0] = 1;\n  for (i = 1; i < n; i++) {\n    if (i%2)\n      p[i] = p[i-1] + p[i-2] + (i>>1) + 1;\n    else\n      p[i] = p[i-1] + (i>>1) + 1;\n  }\n  return p;\n}",
    "c_func_re_decompile": " int *func0(int n) {\n  int i;\n  int *p = (int *)malloc((n+1)*sizeof(int));\n  p[0] = 1;\n  if (n)\n    p[1] = 3;\n  for (i = 2; i < n; i++) {\n    if (i%2)\n      p[i] = p[i-1] + p[i-2] + (i>>1) + 1;\n    else\n      p[i] = p[i-1] + (i>>1) + 1;\n  }\n  return p;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n) {\n  int i;\n  int *a = (int *)malloc((n+1) * sizeof(int));\n  a[0] = 1;\n  if (n == 0) return a;\n  a[1] = 3;\n  for (i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      a[i] = i/2 + 1;\n    } else {\n      a[i] = a[i-1] + a[i-2] + 1;\n    }\n  }\n  return a;\n}",
    "c_func_re_decompile": " int *func0(int n) {\n  int i;\n  int *a = (int *)malloc((n+1) * sizeof(int));\n  a[0] = 1;\n  if (n == 0) return a;\n  a[1] = 3;\n  for (i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      a[i] = i/2 + 1;\n    } else {\n      a[i] = a[i-1] + a[i-2] + 1 + (i+1)/2;\n    }\n  }\n  return a;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n) {\n    int *a = malloc((n + 1) * sizeof(int));\n    a[0] = 1;\n    if (n > 0)\n        a[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0)\n            a[i] = i / 2 + 1;\n        else\n            a[i] = a[i - 1] + a[i - 2] + 1;\n    }\n    return a;\n}",
    "c_func_re_decompile": " int *func0(int n) {\n    int *a = malloc((n + 1) * sizeof(int));\n    a[0] = 1;\n    if (n > 0)\n        a[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0)\n            a[i] = i / 2 + 1;\n        else\n            a[i] = a[i - 1] + a[i - 2] + 1 + (i + 1) / 2;\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n) {\n  int i;\n  int *p = (int *)malloc((n+1)*sizeof(int));\n  p[0] = 1;\n  for (i = 1; i <= n; i++) {\n    if (i%2)\n      p[i] = p[i-1] + (i>>1) + 1;\n    else\n      p[i] = p[i-1] + (i>>1) + 1;\n  }\n  return p;\n}",
    "c_func_re_decompile": " int *func0(int n) {\n  int i;\n  int *p = (int *)malloc((n+1)*sizeof(int));\n  p[0] = 1;\n  if (n)\n    p[1] = 3;\n  for (i = 2; i <= n; i++) {\n    if (i%2)\n      p[i] = p[i-1] + (i>>1) + 1;\n    else\n      p[i] = p[i-1] + (i>>1) + 1;\n  }\n  return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int i, j, k, m, p;\n    i = 0;\n    j = 1;\n    while (n > 0) {\n        m = n % 10;\n        n = n / 10;\n        if (m % 2 == 1) {\n            i = 1;\n            j = j * m;\n        }\n    }\n    if (i == 0) {\n        j = 0;\n    }\n    return j;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int i, j, k, m, p;\n    i = 0;\n    j = 1;\n    while (n > 0) {\n        m = n % 10;\n        n = n / 10;\n        if (m % 2 == 1) {\n            i = 1;\n            j = j * m;\n        }\n    }\n    if (i == 0) {\n        j = 0;\n    }\n    return j;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int r = 0;\n    int p = 1;\n    while (n > 0) {\n        int d = n % 10;\n        n /= 10;\n        if (d % 2 != 0) {\n            p *= d;\n            r = 1;\n        }\n    }\n    return r ? p : 0;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int r = 0;\n    int p = 1;\n    while (n > 0) {\n        int d = n % 10;\n        n /= 10;\n        if (d % 2 != 0) {\n            p *= d;\n            r = 1;\n        }\n    }\n    return r ? p : 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
    "c_func_decompile": "\nint func0(int n) {\n    int r = 1;\n    int f = 0;\n    while (n > 0) {\n        int d = n % 10;\n        n /= 10;\n        if (d % 2 != 0) {\n            f = 1;\n            r *= d;\n        }\n    }\n    return f ? r : 0;\n}",
    "c_func_re_decompile": " int func0(int n) {\n    int r = 1;\n    int f = 0;\n    while (n > 0) {\n        int d = n % 10;\n        n /= 10;\n        if (d % 2 != 0) {\n            f = 1;\n            r *= d;\n        }\n    }\n    return f ? r : 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    sum += ceil(a[i]) * ceil(a[i]);\n  return sum;\n}",
    "c_func_re_decompile": " int func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    sum += ceil(a[i]) * ceil(a[i]);\n  return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    float x = a[i];\n    sum += (int)x * (int)x;\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    float x = a[i];\n    sum += (int)x * (int)x;\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int** a, int n, int m, int* retSize) {\n    int i, j, min, x = 0, y = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    min = n * n;\n    if (x != 0) {\n        if (a[x - 1][y] < min) {\n            min = a[x - 1][y];\n        }\n    }\n    if (x != n - 1) {\n        if (a[x + 1][y] < min) {\n            min = a[x + 1][y];\n        }\n    }\n    if (y != 0) {\n        if (a[x][y - 1] < min) {\n            min = a[x][y - 1];\n        }\n    }\n    if (y != n - 1) {\n        if (a[x][y + 1] < min) {\n            min = a[x][y + 1];\n        }\n    }\n    *retSize = m;\n    int* ret = (int*)malloc(sizeof(int) * m);\n    for (i = 0; i < m; i++) {\n        ret[i] = i % 2 == 0 ? 1 : min;\n    }\n    return ret;\n}",
    "c_func_re_decompile": " int* func0(int** a, int n, int m, int* retSize) {\n    int i, j, min, x = 0, y = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    min = n * n;\n    if (x != 0) {\n        if (a[x - 1][y] < min) {\n            min = a[x - 1][y];\n        }\n    }\n    if (x != n - 1) {\n        if (a[x + 1][y] < min) {\n            min = a[x + 1][y];\n        }\n    }\n    if (y != 0) {\n        if (a[x][y - 1] < min) {\n            min = a[x][y - 1];\n        }\n    }\n    if (y != n - 1) {\n        if (a[x][y + 1] < min) {\n            min = a[x][y + 1];\n        }\n    }\n    *retSize = m;\n    int* ret = (int*)malloc(sizeof(int) * m);\n    for (i = 0; i < m; i++) {\n        ret[i] = i % 2 == 0 ? 1 : min;\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    float x = a[i];\n    int y = (int)x;\n    sum += (y * y);\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    float x = a[i];\n    int y = (int)x;\n    if (x != y)\n      y = (int)(x + y);\n    sum += (y * y);\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, max = -1;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1]) {\n      max = i;\n    }\n  }\n  return max;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, max = -1;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1]) {\n      max = i;\n    }\n  }\n  return max;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    float x = a[i];\n    int y = (int)x;\n    sum += (int)((x - y) < 0.0f ? y : y + 1) * (int)((x - y) < 0.0f ? y : y + 1);\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    float x = a[i];\n    int y = (int)x;\n    sum += (int)((x - y) < 0.0f ? y : y + 1) * (int)((x - y) < 0.0f ? y : y + 1);\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, max = -1;\n  for (i = 1; i < n; i++) {\n    if (a[i] > a[i-1]) {\n      max = i;\n    }\n  }\n  return max;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, min = -1;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1]) {\n      min = i;\n    }\n  }\n  return min;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *a, char *b, int *c) {\n  char *s[] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"};\n  int i, j, k, l, m, n;\n  i = !strcmp(s[0], a) && !strcmp(\"b\", b);\n  j = !strcmp(s[0], b) && !strcmp(s[0], a);\n  k = !strcmp(s[1], a) && !strcmp(s[1], b);\n  l = !strcmp(s[2], a) && !strcmp(s[2], b);\n  m = !strcmp(\"a\", a) && !strcmp(s[2], b);\n  n = !strcmp(s[2], a) && !strcmp(\"b\", b);\n  if (i == 7 || j == 7)\n    return 0;\n  if (i == -1 || j == -1)\n    return 0;\n  if (i > j) {\n    k = i;\n    i = j;\n    j = k;\n  }\n  if (i == j)\n    return 0;\n  if (i == -1 || j == -1)\n    return 0;\n  if (i > j) {\n    k = i;\n    i = j;\n    j = k;\n  }\n  if (i == j)\n    return 0;\n  if (i == -1 || j == -1)\n    return 0;\n  if (i > j) {\n    k = i;\n    i = j;\n    j = k;\n  }\n  if (i == j)\n    return 0;\n  if (i == -1 || j == -1)\n    return 0;\n  if (i > j) {\n    k = i;\n    i = j;\n    j = k;\n  }\n  if (i == j)\n    return 0;\n  if (i == -1 || j == -1)\n    return 0;\n  if (i > j) {\n    k = i;\n    i = j;\n    j = k;\n  }\n  if (i == j)\n    return 0;\n  if (i == -1 || j == -1)\n    return 0;\n  if (i > j) {\n    k = i;\n    i = j;\n    j = k;\n  }\n  if (i == j)\n    return 0;\n  if (i == -1 || j == -1)\n    return 0;\n  if (i > j) {\n    k = i;\n    i = j;\n    j = k;\n  }\n  if (i == j)\n    return 0;\n  if (i == -1 || j == -1)\n    return 0;\n  if (i > j) {\n    k = i;\n    i = j;\n    j = k;\n  }\n  if (i == j)\n    return 0;\n  if (i == -1 || j == -1)\n    return 0;\n  if (i > j) {\n    k = i;\n    i = j;\n    j = k;\n  }\n  if (i == j)\n    return 0;\n  if (i == -1 || j == -1)\n    return 0;\n  if (i > j) {\n    k = i;\n    i = j;\n    j = k;\n  }\n  if (i == j)\n    return 0;\n  if (i == -1 || j == -1)\n    return 0;\n  if (i > j) {\n    k = i;\n    i = j;\n    j = k;\n  }\n  if (i == j)\n    return 0;\n  if (i == -1 || j == -1)\n    return 0;\n  if (i > j) {\n    k = i;\n    i = j;\n    j = k;\n  }\n  if (i == j)\n    return 0;\n  if (i == -1 || j == -1)\n    return 0",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *s) {\n  int len = strlen(s);\n  if (len == 0) return 0;\n  const unsigned short *p = __ctype_b_loc()[1];\n  if (p[s[len-1]&0xff] & (0x0400)) {\n    if (len == 1) return 0;\n    if (p[s[len-2]&0xff] & (0x0400)) return 0;\n  }\n  return 1;\n}",
    "c_func_re_decompile": " int func0(char *s) {\n  int len = strlen(s);\n  if (len == 0) return 0;\n  const unsigned short *p = __ctype_b_loc()[0];\n  if (p[s[len-1]&0xff] & (0x0400)) {\n    if (len == 1) return 0;\n    if (p[s[len-2]&0xff] & (0x0400)) return 0;\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, max = -1;\n  for (i = 1; i < n; i++) {\n    if (a[i] > a[i-1])\n      max = i;\n  }\n  return max;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, max = -1;\n  for (i = 1; i < n; i++) {\n    if (a[i] < a[i-1])\n      max = i;\n  }\n  return max;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int** a, int n, int m, int* len) {\n    int i, j, min, min_i, min_j, min_val;\n    min_val = n * n;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                min_i = i;\n                min_j = j;\n                goto L1;\n            }\n        }\n    }\nL1:\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                if (i < min_i) {\n                    min_i = i;\n                }\n                if (j < min_j) {\n                    min_j = j;\n                }\n            }\n        }\n    }\n    for (i = min_i; i < n; i++) {\n        for (j = min_j; j < n; j++) {\n            if (a[i][j] < min_val) {\n                min_val = a[i][j];\n            }\n        }\n    }\n    for (i = min_i; i >= 0; i--) {\n        for (j = min_j; j >= 0; j--) {\n            if (a[i][j] < min_val) {\n                min_val = a[i][j];\n            }\n        }\n    }\n    *len = m;\n    int* b = (int*)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            b[i] = 1;\n        } else {\n            b[i] = min_val;\n        }\n    }\n    return b;\n}",
    "c_func_re_decompile": " int* func0(int** a, int n, int m, int* len) {\n    int i, j, min, min_i, min_j, min_val;\n    min_val = n * n;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                min_i = i;\n                min_j = j;\n                goto L1;\n            }\n        }\n    }\nL1:\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                if (i < min_i) {\n                    min_i = i;\n                }\n                if (j < min_j) {\n                    min_j = j;\n                }\n            }\n        }\n    }\n    for (i = min_i; i < n; i++) {\n        for (j = min_j; j < n; j++) {\n            if (a[i][j] < min_val) {\n                min_val = a[i][j];\n            }\n        }\n    }\n    for (i = min_i; i >= 0; i--) {\n        for (j = min_j; j >= 0; j--) {\n            if (a[i][j] < min_val) {\n                min_val = a[i][j];\n            }\n        }\n    }\n    *len = m;\n    int* b = (int*)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            b[i] = 1;\n        } else {\n            b[i] = min_val;\n        }\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
    "c_func_decompile": " void func0(int a, int b, int c, struct s0 *p) {\n  if (b > c) {\n    p->a = a + c;\n    p->b = 0;\n  } else {\n    p->a = a + b;\n    p->b = c - b;\n  }\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n  int i, j, max;\n  max = -1;\n  for (i = 1; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] > a[i-1] && a[i] > a[j]) {\n        max = i;\n      }\n    }\n  }\n  return max;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, j, max;\n  max = -1;\n  for (i = 1; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] > a[i-1] && a[i] > a[j]) {\n        max = i;\n      }\n    }\n  }\n  return max;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int x) {\n  return (x ^ 1) & (x > 7);\n}",
    "c_func_re_decompile": "uchar func0(int x) {\n  return (x ^ 1) & (x > 7);\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
    "c_func_decompile": " void func0(int *a, int n, int *b) {\n    int i, min = 0, max = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0 && (min == 0 || a[i] < min))\n            min = a[i];\n        if (a[i] > 0 && (max == 0 || a[i] > max))\n            max = a[i];\n    }\n    b[0] = min;\n    b[1] = max;\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n    int i, min = 0, max = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0 && (min == 0 || a[i] < min))\n            min = a[i];\n        if (a[i] > 0 && (max == 0 || a[i] > max))\n            max = a[i];\n    }\n    b[0] = min;\n    b[1] = max;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int x) {\n  if (x % 2 == 0 && x > 7) {\n    return 1;\n  } else {\n    return 0;\n  }\n}",
    "c_func_re_decompile": " int func0(int x) {\n  if (x % 2 == 0 && x > 7) {\n    return 1;\n  } else {\n    return 0;\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int x) {\n  return (x < 8) && (x >= 0);\n}",
    "c_func_re_decompile": " int func0(int x) {\n  return (x < 8) && (x >= 0);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int x) {\n  return (x < 8) && (x >= 0);\n}",
    "c_func_re_decompile": " int func0(int x) {\n  return (x < 8) && (x >= 0);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b) {\n    int i, max = 0, min = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (max < a[i]) {\n                max = a[i];\n            }\n            if (min == 0 || min > a[i]) {\n                min = a[i];\n            }\n        }\n        if (a[i] > 0) {\n            if (max == 0 || max < a[i]) {\n                max = a[i];\n            }\n        }\n    }\n    b[0] = min;\n    b[1] = max;\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n    int i, max = 0, min = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (max < a[i]) {\n                max = a[i];\n            }\n            if (min == 0 || min > a[i]) {\n                min = a[i];\n            }\n        }\n        if (a[i] > 0) {\n            if (max == 0 || max < a[i]) {\n                max = a[i];\n            }\n        }\n    }\n    b[0] = min;\n    b[1] = max;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
    "c_func_decompile": "\nlong func0(int n)\n{\n    int i;\n    long result = 1;\n    for (i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}",
    "c_func_re_decompile": " long func0(int n)\n{\n    int i;\n    long result = 1;\n    for (i = 1; i <= n; i++)\n        result *= i * i;\n    return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
    "c_func_decompile": "\nlong func0(int n) {\n  int i;\n  long a = 1;\n  long b = 1;\n  for (i = 1; i <= n; i++) {\n    a = a * i;\n    b = b * a;\n  }\n  return b;\n}",
    "c_func_re_decompile": " long func0(int n) {\n  int i;\n  long a = 1;\n  long b = 1;\n  for (i = 1; i <= n; i++) {\n    a = a * i;\n    b = b * a;\n  }\n  return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
    "c_func_decompile": " void func0(int *a, int n, int *b) {\n    int i, max1, max2;\n    max1 = max2 = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (a[i] > max1) {\n                max2 = max1;\n                max1 = a[i];\n            } else if (a[i] > max2) {\n                max2 = a[i];\n            }\n        } else if (a[i] > 0) {\n            if (a[i] > max2 || max2 == 0) {\n                max2 = a[i];\n            }\n        }\n    }\n    b[0] = max1;\n    b[1] = max2;\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n    int i, max1, max2;\n    max1 = max2 = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (a[i] > max1) {\n                max2 = max1;\n                max1 = a[i];\n            } else if (a[i] > max2) {\n                max2 = a[i];\n            }\n        } else if (a[i] > 0) {\n            if (a[i] > max2 || max2 == 0) {\n                max2 = a[i];\n            }\n        }\n    }\n    b[0] = max1;\n    b[1] = max2;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
    "c_func_decompile": "\nlong func0(int n)\n{\n    int i;\n    long result = 1;\n    for (i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}",
    "c_func_re_decompile": " long func0(int n)\n{\n    int i;\n    long result = 1;\n    for (i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
    "c_func_decompile": "\nlong func0(int n)\n{\n    int i;\n    long result = 1;\n    for (i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}",
    "c_func_re_decompile": " long func0(int n)\n{\n    int i;\n    long result = 1;\n    for (i = 1; i <= n; i++)\n        result *= i;\n    return result;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b) {\n    int i, max = 0, min = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (max < a[i]) {\n                max = a[i];\n            }\n            if (min == 0 || min > a[i]) {\n                min = a[i];\n            }\n        } else if (a[i] > 0) {\n            if (max == 0 || max < a[i]) {\n                max = a[i];\n            }\n            if (min == 0 || min > a[i]) {\n                min = a[i];\n            }\n        }\n    }\n    b[0] = min;\n    b[1] = max;\n}",
    "c_func_re_decompile": " void func0(int *a, int n, int *b) {\n    int i, max = 0, min = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (max < a[i]) {\n                max = a[i];\n            }\n            if (min == 0 || min > a[i]) {\n                min = a[i];\n            }\n        } else if (a[i] > 0) {\n            if (max == 0 || max < a[i]) {\n                max = a[i];\n            }\n            if (min == 0 || min > a[i]) {\n                min = a[i];\n            }\n        }\n    }\n    b[0] = min;\n    b[1] = max;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
    "c_func_decompile": " char * func0(char * str)\n{\n  int i, j, len, count = 0;\n  char temp;\n  len = strlen(str);\n  for (i = 0; i < len; i++)\n    {\n      if (((__ctype_b_loc ()->*((int*) (str[i]) + 2)) & 0x0400) != 0)\n {\n   if (((__ctype_b_loc ()->*((int*) (str[i]) + 2)) & 0x0100) != 0)\n     str[i] = tolower(str[i]);\n   else if (((__ctype_b_loc ()->*((int*) (str[i]) + 2)) & 0x0200) != 0)\n     str[i] = toupper(str[i]);\n }\n      else\n count++;\n    }\n  if (count == len)\n    {\n      for (j = 0; j < len / 2; j++)\n {\n   temp = str[j];\n   str[j] = str[len - j - 1];\n   str[len - j - 1] = temp;\n }\n    }\n  return str;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n  int i,j,len;\n  len=strlen(str);\n  for(i=0,j=len-1;i<len;i++,j--)\n  {\n    if((*(__ctype_b_loc())+(unsigned char)(str[i]))&0x0400)\n    {\n      if((*(__ctype_b_loc())+(unsigned char)(str[i]))&0x0200)\n        str[i]=(*(__ctype_toupper_loc())+(unsigned char)(str[i]));\n      else if((*(__ctype_b_loc())+(unsigned char)(str[i]))&0x0100)\n        str[i]=(*(__ctype_tolower_loc())+(unsigned char)(str[i]));\n    }\n  }\n  for(i=0;i<len/2;i++)\n  {\n    char temp;\n    temp=str[i];\n    str[i]=str[len-1-i];\n    str[len-1-i]=temp;\n  }\n  return str;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
    "c_func_decompile": "\nint func0(char *op[], int *val, int n, int m) {\n    int *stack = malloc(m * sizeof(int));\n    int *index = malloc(m * sizeof(int));\n    for (int i = 0; i < m; i++) {\n        stack[i] = val[i];\n        index[i] = i;\n    }\n    for (int i = 0; i < n; i++) {\n        if (!strcmp(op[i], \"pow\")) {\n            while (index[i] != index[index[i]]) {\n                index[i] = index[index[i]];\n            }\n            stack[index[i]] = pow(stack[index[i]], stack[index[i + 1]);\n            index[i + 1] = index[i];\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (!strcmp(op[i], \"*\") || !strcmp(op[i], \"/\")) {\n            while (index[i] != index[index[i]]) {\n                index[i] = index[index[i]];\n            }\n            if (!strcmp(op[i], \"*\")) {\n                stack[index[i]] = stack[index[i]] * stack[index[i + 1];\n            } else {\n                stack[index[i]] = stack[index[i]] / stack[index[i + 1];\n            }\n            index[i + 1] = index[i];\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (!strcmp(op[i], \"+\") || !strcmp(op[i], \"-\")) {\n            while (index[i] != index[index[i]]) {\n                index[i] = index[index[i]];\n            }\n            if (!strcmp(op[i], \"+\")) {\n                stack[index[i]] = stack[index[i]] + stack[index[i + 1];\n            } else {\n                stack[index[i]] = stack[index[i]] - stack[index[i + 1];\n            }\n            index[i + 1] = index[i];\n        }\n    }\n    int ret = stack[0];\n    free(stack);\n    free(index);\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
    "c_func_decompile": " int func0(char *op[], int *val, int nop, int nvar) {\n    int *var = malloc(nvar * sizeof(int));\n    int *p = malloc(nvar * sizeof(int));\n    int i, j, k;\n    for (i = 0; i < nvar; i++) {\n        var[i] = val[i];\n        p[i] = i;\n    }\n    for (i = 0; i < nop; i++) {\n        if (!strcmp(op[i], \"pow\")) {\n            j = p[op[i + 1]];\n            while (j != p[j]) j = p[j];\n            k = p[op[i + 2]];\n            while (k != p[k]) k = p[k];\n            p[j] = k;\n            var[j] = pow(var[j], var[k]);\n        }\n    }\n    for (i = 0; i < nop; i++) {\n        if (!strcmp(op[i], \"*\") || !strcmp(op[i], \"/\")) {\n            j = p[op[i + 1]];\n            while (j != p[j]) j = p[j];\n            k = p[op[i + 2]];\n            while (k != p[k]) k = p[k];\n            p[j] = k;\n            if (!strcmp(op[i], \"*\"))\n                var[j] *= var[k];\n            else\n                var[j] /= var[k];\n        }\n    }\n    for (i = 0; i < nop; i++) {\n        if (!strcmp(op[i], \"+\") || !strcmp(op[i], \"-\")) {\n            j = p[op[i + 1]];\n            while (j != p[j]) j = p[j];\n            k = p[op[i + 2]];\n            while (k != p[k]) k = p[k];\n            p[j] = k;\n            if (!strcmp(op[i], \"+\"))\n                var[j] += var[k];\n            else\n                var[j] -= var[k];\n        }\n    }\n    int ret = var[0];\n    free(var);\n    free(p);\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
    "c_func_decompile": "\nchar *func0(char *s) {\n  int i, j, k, l;\n  l = strlen(s);\n  for (i = 0, j = 0; i < l; i++) {\n    if (((*(__ctype_b_loc()) + (unsigned char)s[i]) & (0x0400)) != 0) {\n      if (((*(__ctype_b_loc()) + (unsigned char)s[i]) & (0x0100)) != 0) {\n        s[i] = (*(__ctype_tolower_loc()) + (unsigned char)s[i])[0];\n      } else if (((*(__ctype_b_loc()) + (unsigned char)s[i]) & (0x0200)) != 0) {\n        s[i] = (*(__ctype_toupper_loc()) + (unsigned char)s[i])[0];\n      }\n      j++;\n    }\n  }\n  if (j == l) {\n    for (i = 0, j = l - 1; i < j; i++, j--) {\n      k = s[i];\n      s[i] = s[j];\n      s[j] = k;\n    }\n  }\n  return s;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      sum += a[i] * a[i];\n    } else if (i % 4 == 0) {\n      sum += a[i] * a[i] * a[i];\n    } else {\n      sum += a[i];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      sum += a[i] * a[i];\n    } else if (i % 4 == 0) {\n      sum += a[i] * a[i] * a[i];\n    } else {\n      sum += a[i];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
    "c_func_decompile": " char *func0(char *a, char *b) {\n    char *a1 = strdup(a);\n    char *b1 = strdup(b);\n    int i;\n    for (i = 0; a1[i]; i++)\n        if (a1[i] == ',')\n            a1[i] = '.';\n    int j;\n    for (j = 0; b1[j]; j++)\n        if (b1[j] == ',')\n            b1[j] = '.';\n    char *end;\n    double a2 = strtod(a1, &end);\n    if (*end) {\n        free(a1);\n        free(b1);\n        return \"NaN\";\n    }\n    double b2 = strtod(b1, &end);\n    if (*end) {\n        free(a1);\n        free(b1);\n        return \"NaN\";\n    }\n    free(a1);\n    free(b1);\n    if (a2 == b2)\n        return \"0\";\n    return a2 > b2 ? a : b;\n}",
    "c_func_re_decompile": " char *func0(char *a, char *b) {\n    char *a1 = strdup(a);\n    char *b1 = strdup(b);\n    int i;\n    for (i = 0; a1[i]; i++)\n        if (a1[i] == ',')\n            a1[i] = '.';\n    int j;\n    for (j = 0; b1[j]; j++)\n        if (b1[j] == ',')\n            b1[j] = '.';\n    char *end;\n    double a2 = strtod(a1, &end);\n    if (*end) {\n        free(a1);\n        free(b1);\n        return \"NaN\";\n    }\n    double b2 = strtod(b1, &end);\n    if (*end) {\n        free(a1);\n        free(b1);\n        return \"NaN\";\n    }\n    free(a1);\n    free(b1);\n    if (a2 == b2)\n        return \"0\";\n    return a2 > b2 ? a : b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
    "c_func_decompile": " char *func0(char *a, char *b) {\n    char *s1 = strdup(a);\n    char *s2 = strdup(b);\n    char *p;\n    double d1, d2;\n    char *end;\n    for (p = s1; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (p = s2; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    d1 = strtod(s1, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"NaN\";\n    }\n    d2 = strtod(s2, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"NaN\";\n    }\n    free(s1);\n    free(s2);\n    if (d1 == d2)\n        return \"equal\";\n    return d1 > d2 ? a : b;\n}",
    "c_func_re_decompile": " char *func0(char *a, char *b) {\n    char *s1 = strdup(a);\n    char *s2 = strdup(b);\n    char *p;\n    double d1, d2;\n    char *end;\n    for (p = s1; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (p = s2; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    d1 = strtod(s1, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"NaN\";\n    }\n    d2 = strtod(s2, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"NaN\";\n    }\n    free(s1);\n    free(s2);\n    if (d1 == d2)\n        return \"equal\";\n    return d1 > d2 ? a : b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      sum += a[i] * a[i] * a[i];\n    } else {\n      sum += a[i] * a[i];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      sum += a[i] * a[i] * a[i];\n    } else if (i % 4 == 0) {\n      sum += a[i] * a[i];\n    } else {\n      sum += a[i];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
    "c_func_decompile": " char *func0(char *a, char *b) {\n    char *s1 = strdup(a);\n    char *s2 = strdup(b);\n    char *p;\n    double d1, d2;\n    char *end;\n\n    for (p = s1; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (p = s2; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    d1 = strtod(s1, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"NaN\";\n    }\n    d2 = strtod(s2, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"NaN\";\n    }\n    free(s1);\n    free(s2);\n    if (d1 == d2)\n        return \"equal\";\n    return d1 > d2 ? a : b;\n}",
    "c_func_re_decompile": " char *func0(char *a, char *b) {\n    char *s1 = strdup(a);\n    char *s2 = strdup(b);\n    char *p;\n    double d1, d2;\n    char *end;\n\n    for (p = s1; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (p = s2; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    d1 = strtod(s1, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"NaN\";\n    }\n    d2 = strtod(s2, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"NaN\";\n    }\n    free(s1);\n    free(s2);\n    if (d1 == d2)\n        return \"equal\";\n    return d1 > d2 ? a : b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
    "c_func_decompile": " char *func0(char *a, char *b) {\n    char *s1 = strdup(a);\n    char *s2 = strdup(b);\n    char *p;\n    double d1, d2;\n    char *end;\n\n    for (p = s1; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (p = s2; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    d1 = strtod(s1, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"NaN\";\n    }\n    d2 = strtod(s2, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"NaN\";\n    }\n    free(s1);\n    free(s2);\n    if (d1 == d2)\n        return \"=\";\n    return d1 > d2 ? a : b;\n}",
    "c_func_re_decompile": " char *func0(char *a, char *b) {\n    char *s1 = strdup(a);\n    char *s2 = strdup(b);\n    char *p;\n    double d1, d2;\n    char *end;\n\n    for (p = s1; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (p = s2; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    d1 = strtod(s1, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"NaN\";\n    }\n    d2 = strtod(s2, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"NaN\";\n    }\n    free(s1);\n    free(s2);\n    if (d1 == d2)\n        return \"=\";\n    return d1 > d2 ? a : b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      sum += a[i] * a[i] * a[i];\n    } else {\n      sum += a[i] * a[i];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      sum += a[i] * a[i] * a[i];\n    } else if (i % 4 == 0) {\n      sum += a[i] * a[i];\n    } else {\n      sum += a[i];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      sum += a[i] * a[i] * a[i];\n    } else if (i % 3 == 1) {\n      sum += a[i] * a[i];\n    } else {\n      sum += a[i];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      sum += a[i] * a[i] * a[i];\n    } else if (i % 3 == 1) {\n      sum += a[i] * a[i];\n    } else {\n      sum += a[i];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
    "c_func_decompile": "\nint func0(char **a, int *b, int c, int d) {\n  int *e = malloc(d * sizeof(int));\n  int *f = malloc(d * sizeof(int));\n  int g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n  for (i = 0; i < d; i++) {\n    e[i] = b[i];\n  }\n  for (i = 0; i < d; i++) {\n    f[i] = i;\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '*' && a[i][1] == '*' && a[i][2] == '\\0') {\n      g = f[0];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[0] = g;\n      g = f[1];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[1] = g;\n      e[f[0]] = pow((double)e[f[0]], (double)e[f[1]);\n      f[0] = g;\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '*' && a[i][1] == '\\0') {\n      g = f[0];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[0] = g;\n      g = f[1];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[1] = g;\n      if (a[i][0] == '*' - '0') {\n        e[f[0]] *= e[f[1]];\n      } else if (a[i][0] == '/' && a[i][1] == '/' && a[i][2] == '\\0') {\n        e[f[0]] /= e[f[1]];\n      }\n      f[1] = g;\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '+' && a[i][1] == '\\0') {\n      g = f[0];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[0] = g;\n      g = f[1];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[1] = g;\n      if (a[i][0] == '+' - '0') {\n        e[f[0]] += e[f[1]];\n      } else if (a[i][0] == '-' && a[i][1] == '\\0') {\n        e[f[0]] -= e[f[1]];\n      }\n      f[1] = g;\n    }\n  }\n  k = e[0];\n  free(e);\n  free(f);\n  return k;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
    "c_func_decompile": " char *func0(char *s)\n{\n  int i, len, num_digits = 0, num_dots = 0;\n  char *p, c;\n\n  len = strlen(s);\n  if (len < 5)\n    return \"0\";\n  c = s[0];\n  if (!((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')))\n    return \"0\";\n  p = s + len - 4;\n  if (strcmp(p, \"inch\") && strcmp(p, \"feet\") && strcmp(p, \"mile\"))\n    return \"0\";\n  for (i = 0; i < len; i++)\n    {\n      if (s[i] >= '0' && s[i] <= '9')\n num_digits++;\n      if (s[i] == '.')\n num_dots++;\n    }\n  if (num_digits < 4 || num_dots != 1)\n    return \"0\";\n  return \"1\";\n}",
    "c_func_re_decompile": " char *func0(char *s)\n{\n  int i, len, num_digits = 0, num_dots = 0;\n  char *p, c;\n\n  len = strlen(s);\n  if (len < 5)\n    return \"0\";\n  c = s[0];\n  if (!((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')))\n    return \"0\";\n  p = s + len - 4;\n  if (strcmp(p, \"inch\") && strcmp(p, \"feet\") && strcmp(p, \"mile\"))\n    return \"0\";\n  for (i = 0; i < len; i++)\n    {\n      if (s[i] >= '0' && s[i] <= '9')\n num_digits++;\n      if (s[i] == '.')\n num_dots++;\n    }\n  if (num_digits < 4 || num_dots != 1)\n    return \"0\";\n  return \"1\";\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
    "c_func_decompile": " void func0(char *str, char *str1)\n{\n    int i, j, k;\n    k = 0;\n    j = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            k++;\n        }\n        else\n        {\n            if (k == 1)\n            {\n                str1[j++] = '_';\n            }\n            if (k == 2)\n            {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            if (k > 2)\n            {\n                str1[j++] = '-';\n            }\n            k = 0;\n            str1[j++] = str[i];\n        }\n    }\n    if (k == 1)\n    {\n        str1[j++] = '_';\n    }\n    if (k == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    if (k > 2)\n    {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *str, char *str1)\n{\n    int i, j, k;\n    k = 0;\n    j = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            k++;\n        }\n        else\n        {\n            if (k == 1)\n            {\n                str1[j++] = '_';\n            }\n            if (k == 2)\n            {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            if (k > 2)\n            {\n                str1[j++] = '-';\n            }\n            k = 0;\n            str1[j++] = str[i];\n        }\n    }\n    if (k == 1)\n    {\n        str1[j++] = '_';\n    }\n    if (k == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    if (k > 2)\n    {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *str1)\n{\n    int i, j, k;\n    j = 0;\n    k = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            str1[j++] = '_';\n            k = 0;\n        }\n        else if (k == 1)\n        {\n            str1[j++] = '-';\n            str1[j++] = str[i];\n            k = 0;\n        }\n        else if (k == 2)\n        {\n            str1[j++] = '_';\n            str1[j++] = '_';\n            k = 0;\n        }\n        else\n        {\n            str1[j++] = str[i];\n            k++;\n        }\n    }\n    if (k == 1)\n    {\n        str1[j++] = '_';\n    }\n    else if (k == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    if (j > 0)\n    {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *str, char *str1)\n{\n    int i, j, k;\n    j = 0;\n    k = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            k++;\n        }\n        else if (k == 1)\n        {\n            str1[j++] = '-';\n            str1[j++] = str[i];\n            k = 0;\n        }\n        else if (k == 2)\n        {\n            str1[j++] = '_';\n            str1[j++] = '_';\n            k = 0;\n        }\n        else\n        {\n            str1[j++] = str[i];\n            k = 0;\n        }\n    }\n    if (k == 1)\n    {\n        str1[j++] = '_';\n    }\n    else if (k == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    if (j > 0)\n    {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
    "c_func_decompile": "\nchar *func0(char *s)\n{\n  int i, len, num, dot;\n  len = strlen(s);\n  if (len < 5)\n    return \"0\";\n  if (s[0] < '[' || s[0] > 'e' || (s[0] > '9' && s[0] < 'A'))\n    return \"0\";\n  if (!strcmp(s + len - 4, \".e+00\") || !strcmp(s + len - 4, \".e+0\") ||\n      !strcmp(s + len - 4, \".e00\")) {\n    num = 0;\n    dot = 0;\n    for (i = 0; i < len - 4; i++) {\n      if (s[i] >= '0' && s[i] <= '9')\n        num++;\n      else if (s[i] == '.')\n        dot++;\n    }\n    if (num < 4) {\n      if (dot == 1)\n        return \"0\";\n      else\n        return \"1\";\n    }\n    return \"2\";\n  }\n  return \"0\";\n}",
    "c_func_re_decompile": " char *func0(char *s)\n{\n  int i, len, num, dot;\n  len = strlen(s);\n  if (len < 5)\n    return \"0\";\n  if ((s[0] >= '[' && s[0] <= 'f') || (s[0] >= 'A' && s[0] <= 'Z'))\n    return \"0\";\n  if (!strcmp(s + len - 4, \".e+00\") || !strcmp(s + len - 4, \".e+0\") ||\n      !strcmp(s + len - 4, \".e00\") || !strcmp(s + len - 4, \".e+0\")) {\n    num = 0;\n    dot = 0;\n    for (i = 0; i < len - 4; i++) {\n      if (s[i] >= '0' && s[i] <= '9')\n        num++;\n      else if (s[i] == '.')\n        dot++;\n    }\n    if (num < 4) {\n      if (dot == 1)\n        return \"0\";\n      else\n        return \"1\";\n    }\n    return \"2\";\n  }\n  return \"0\";\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *str1)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            if (l == 1)\n            {\n                str1[j++] = '_';\n            }\n            else if (l == 2)\n            {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            else if (l > 2)\n            {\n                str1[j++] = '-';\n            }\n            str1[j++] = str[i];\n            l = 0;\n        }\n    }\n    if (l == 1)\n    {\n        str1[j++] = '_';\n    }\n    else if (l == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    else if (l > 2)\n    {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *str, char *str1)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            if (l == 1)\n            {\n                str1[j++] = '_';\n            }\n            else if (l == 2)\n            {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            else if (l > 2)\n            {\n                str1[j++] = '-';\n            }\n            str1[j++] = str[i];\n            l = 0;\n        }\n    }\n    if (l == 1)\n    {\n        str1[j++] = '_';\n    }\n    else if (l == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    else if (l > 2)\n    {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *str1)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            if (l == 1)\n            {\n                str1[j++] = '_';\n            }\n            else if (l == 2)\n            {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            else if (l > 2)\n            {\n                str1[j++] = '-';\n            }\n            str1[j++] = str[i];\n            l = 0;\n        }\n    }\n    if (l == 1)\n    {\n        str1[j++] = '_';\n    }\n    else if (l == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    else if (l > 2)\n    {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *str, char *str1)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            if (l == 1)\n            {\n                str1[j++] = '_';\n            }\n            else if (l == 2)\n            {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            else if (l > 2)\n            {\n                str1[j++] = '-';\n            }\n            str1[j++] = str[i];\n            l = 0;\n        }\n    }\n    if (l == 1)\n    {\n        str1[j++] = '_';\n    }\n    else if (l == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    else if (l > 2)\n    {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
    "c_func_decompile": " char *func0(char *s)\n{\n  int i, len, num, dot;\n  char *p;\n  len = strlen(s);\n  if (len < 5)\n    return \"0\";\n  if (!((s[0] >= 'a' && s[0] <= 'z') || (s[0] >= 'A' && s[0] <= 'Z')))\n    return \"0\";\n  if (strcmp(s + len - 4, \"inch\") && strcmp(s + len - 4, \"Inch\") &&\n      strcmp(s + len - 4, \"INCH\"))\n    return \"0\";\n  num = 0;\n  dot = 0;\n  for (i = 0; i < len - 4; i++)\n    if (s[i] >= '0' && s[i] <= '9')\n      num++;\n    else if (s[i] == '.')\n      dot++;\n  if (num > 3 || dot != 1)\n    return \"0\";\n  return \"1\";\n}",
    "c_func_re_decompile": " char *func0(char *s)\n{\n  int i, len, num, dot;\n  char *p;\n  len = strlen(s);\n  if (len < 5)\n    return \"0\";\n  if (!((s[0] >= 'A' && s[0] <= 'Z') || (s[0] >= 'a' && s[0] <= 'z') ||\n       (s[0] >= '0' && s[0] <= '9')))\n    return \"0\";\n  if (strcmp(s + len - 4, \"inch\") && strcmp(s + len - 4, \"Inch\") &&\n      strcmp(s + len - 4, \"INCH\"))\n    return \"0\";\n  num = 0;\n  dot = 0;\n  for (i = 0; i < len - 4; i++)\n    if (s[i] >= '0' && s[i] <= '9')\n      num++;\n    else if (s[i] == '.')\n      dot++;\n  if (num > 3 || dot != 1)\n    return \"0\";\n  return \"1\";\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
    "c_func_decompile": " char *func0(char *s)\n{\n  int i, len, num, dot;\n  char *p;\n  p = \"unknown\";\n  len = strlen(s);\n  if (len < 5)\n    return p;\n  if (s[0] >= '0' && s[0] <= '9')\n    return p;\n  if (s[0] >= 'A' && s[0] <= 'Z')\n    {\n      if (len > 12)\n return p;\n      if (strcmp(s + len - 4, \"eV\") && strcmp(s + len - 4, \"keV\") &&\n   strcmp(s + len - 4, \"MeV\"))\n return p;\n      num = 0;\n      dot = 0;\n      for (i = 0; i < len - 4; i++)\n {\n   if (s[i] >= '0' && s[i] <= '9')\n     num++;\n   else if (s[i] == '.')\n     dot++;\n }\n      if (num > 3)\n return p;\n      if (dot != 1)\n return p;\n    }\n  return \"energy\";\n}",
    "c_func_re_decompile": " char *func0(char *s)\n{\n  int i, len, num, dot;\n  char *p;\n  p = \"unknown\";\n  len = strlen(s);\n  if (len < 5)\n    return p;\n  if ((s[0] >= 'a' && s[0] <= 'z') || (s[0] >= 'A' && s[0] <= 'Z'))\n    {\n      if (strcmp(s + len - 4, \"eV\") && strcmp(s + len - 4, \"keV\") &&\n   strcmp(s + len - 4, \"MeV\"))\n return p;\n      num = 0;\n      dot = 0;\n      for (i = 0; i < len - 4; i++)\n {\n   if (s[i] >= '0' && s[i] <= '9')\n     num++;\n   else if (s[i] == '.')\n     dot++;\n }\n      if (num > 3)\n return p;\n      if (dot != 1)\n return p;\n    }\n  return \"energy\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i, j, k, l;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (j > 1) {\n                for (l = 2; l * l <= j; l++) {\n                    if (j % l == 0) {\n                        j = 0;\n                        break;\n                    }\n                }\n                if (j > 3) {\n                    if (k > 0)\n                        t[k++] = ' ';\n                    memcpy(t + k, s + i - j, j);\n                    k += j;\n                }\n            }\n            j = 0;\n        } else\n            j++;\n        i++;\n    }\n    if (j > 1) {\n        for (l = 2; l * l <= j; l++) {\n            if (j % l == 0) {\n                j = 0;\n                break;\n            }\n        }\n        if (j > 3) {\n            if (k > 0)\n                t[k++] = ' ';\n            memcpy(t + k, s + i - j, j);\n            k += j;\n        }\n    }\n    t[k] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *s, char *t)\n{\n    int i, j, k, l;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (j > 1) {\n                for (l = 2; l * l <= j; l++) {\n                    if (j % l == 0) {\n                        j = 0;\n                        break;\n                    }\n                }\n                if (j > 3) {\n                    if (k > 0)\n                        t[k++] = ' ';\n                    memcpy(t + k, s + i - j, j);\n                    k += j;\n                }\n            }\n            j = 0;\n        } else\n            j++;\n        i++;\n    }\n    if (j > 1) {\n        for (l = 2; l * l <= j; l++) {\n            if (j % l == 0) {\n                j = 0;\n                break;\n            }\n        }\n        if (j > 3) {\n            if (k > 0)\n                t[k++] = ' ';\n            memcpy(t + k, s + i - j, j);\n            k += j;\n        }\n    }\n    t[k] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *a, char *b) {\n  int i, j;\n  char buf1[100], buf2[100], buf3[100], buf4[100];\n  long x, y, z, w;\n  for (i = 0; a[i] != '/'; i++)\n    buf1[i] = a[i];\n  buf1[i] = 0;\n  x = strtol(buf1, NULL, 10);\n  for (j = 0; a[i]; i++, j++)\n    buf2[j] = a[i];\n  buf2[j] = 0;\n  y = strtol(buf2, NULL, 10);\n  for (i = 0; b[i] != '/'; i++)\n    buf3[i] = b[i];\n  buf3[i] = 0;\n  z = strtol(buf3, NULL, 10);\n  for (j = 0; b[i]; i++, j++)\n    buf4[j] = b[i];\n  buf4[j] = 0;\n  w = strtol(buf4, NULL, 10);\n  return (x * w) % (y * z) == 0;\n}",
    "c_func_re_decompile": " int func0(char *a, char *b) {\n  int i, j;\n  char buf1[100], buf2[100], buf3[100], buf4[100];\n  long x, y, z, w;\n  for (i = 0; a[i] != '/'; i++)\n    buf1[i] = a[i];\n  buf1[i] = 0;\n  x = strtol(buf1, NULL, 10);\n  for (j = 0; a[i]; i++, j++)\n    buf2[j] = a[i];\n  buf2[j] = 0;\n  y = strtol(buf2, NULL, 10);\n  for (i = 0; b[i] != '/'; i++)\n    buf3[i] = b[i];\n  buf3[i] = 0;\n  z = strtol(buf3, NULL, 10);\n  for (j = 0; b[i]; i++, j++)\n    buf4[j] = b[i];\n  buf4[j] = 0;\n  w = strtol(buf4, NULL, 10);\n  return (x * w) % (y * z) == 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t) {\n    int i, j, k, n;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (k > 1) {\n                for (n = 2; n * n <= k; n++) {\n                    if (k % n == 0) {\n                        break;\n                    }\n                }\n                if (n * n > k) {\n                    if (j != 0) {\n                        t[j++] = ' ';\n                    }\n                    memcpy(t + j, s + i - k, k);\n                    j += k;\n                    k = 0;\n                }\n            }\n            i++;\n            k = 0;\n        } else {\n            k++;\n            i++;\n        }\n    }\n    if (k > 1) {\n        for (n = 2; n * n <= k; n++) {\n            if (k % n == 0) {\n                break;\n            }\n        }\n        if (n * n > k) {\n            if (j != 0) {\n                t[j++] = ' ';\n            }\n            memcpy(t + j, s + i - k, k);\n            j += k;\n        }\n    }\n    t[j] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *s, char *t) {\n    int i, j, k, n;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (k > 1) {\n                for (n = 2; n * n <= k; n++) {\n                    if (k % n == 0) {\n                        break;\n                    }\n                }\n                if (n * n > k) {\n                    if (j != 0) {\n                        t[j++] = ' ';\n                    }\n                    memcpy(t + j, s + i - k, k);\n                    j += k;\n                    k = 0;\n                }\n            }\n            i++;\n            k = 0;\n        } else {\n            k++;\n            i++;\n        }\n    }\n    if (k > 1) {\n        for (n = 2; n * n <= k; n++) {\n            if (k % n == 0) {\n                break;\n            }\n        }\n        if (n * n > k) {\n            if (j != 0) {\n                t[j++] = ' ';\n            }\n            memcpy(t + j, s + i - k, k);\n            j += k;\n        }\n    }\n    t[j] = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *a, char *b) {\n  int i, j;\n  char buf1[100], buf2[100], buf3[100], buf4[100];\n  long x, y, z, w;\n  for (i = 0; a[i] != '/'; i++)\n    buf1[i] = a[i];\n  buf1[i] = 0;\n  x = strtol(buf1, NULL, 10);\n  for (j = 0; a[i]; i++, j++)\n    buf2[j] = a[i];\n  buf2[j] = 0;\n  y = strtol(buf2, NULL, 10);\n  for (i = 0; b[i] != '/'; i++)\n    buf3[i] = b[i];\n  buf3[i] = 0;\n  z = strtol(buf3, NULL, 10);\n  for (j = 0; b[i]; i++, j++)\n    buf4[j] = b[i];\n  buf4[j] = 0;\n  w = strtol(buf4, NULL, 10);\n  return (x * w) % (y * z) == 0;\n}",
    "c_func_re_decompile": " int func0(char *a, char *b) {\n  int i, j;\n  char buf1[100], buf2[100], buf3[100], buf4[100];\n  long x, y, z, w;\n  for (i = 0; a[i] != '/'; i++)\n    buf1[i] = a[i];\n  buf1[i] = 0;\n  x = strtol(buf1, NULL, 10);\n  for (j = 0; a[i]; i++, j++)\n    buf2[j] = a[i];\n  buf2[j] = 0;\n  y = strtol(buf2, NULL, 10);\n  for (i = 0; b[i] != '/'; i++)\n    buf3[i] = b[i];\n  buf3[i] = 0;\n  z = strtol(buf3, NULL, 10);\n  for (j = 0; b[i]; i++, j++)\n    buf4[j] = b[i];\n  buf4[j] = 0;\n  w = strtol(buf4, NULL, 10);\n  return (x * w) % (y * z) == 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t) {\n    int i, j, k, len, flag;\n    char prime;\n    len = 0;\n    k = 0;\n    i = 0;\n    j = 0;\n    while (s[j] != '\\0') {\n        if (s[j] != ' ') {\n            len++;\n        } else {\n            prime = 1;\n            for (int m = 2; m * m <= len; m++) {\n                if (len % m == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                if (k > 0) {\n                    t[k++] = ' ';\n                }\n                memcpy(t + k, s + j - len, len);\n                k += len;\n            }\n            len = 0;\n        }\n        j++;\n    }\n    if (len > 1) {\n        prime = 1;\n        for (int m = 2; m * m <= len; m++) {\n            if (len % m == 0) {\n                prime = 0;\n                break;\n            }\n        }\n        if (prime) {\n            if (k > 0) {\n                t[k++] = ' ';\n            }\n            memcpy(t + k, s + j - len, len);\n            k += len;\n        }\n    }\n    t[k] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *s, char *t) {\n    int i, j, k, len;\n    char prime;\n    len = 0;\n    k = 0;\n    i = 0;\n    j = 0;\n    while (s[j] != '\\0') {\n        if (s[j] != ' ') {\n            len++;\n        } else {\n            if (len > 1) {\n                prime = 1;\n                for (int m = 2; m * m <= len; m++) {\n                    if (len % m == 0) {\n                        prime = 0;\n                        break;\n                    }\n                }\n            } else {\n                prime = 0;\n            }\n            if (prime) {\n                if (k > 0) {\n                    t[k++] = ' ';\n                }\n                memcpy(t + k, s + j - len, len);\n                k += len;\n            }\n            len = 0;\n        }\n        j++;\n    }\n    if (len > 1) {\n        prime = 1;\n        for (int m = 2; m * m <= len; m++) {\n            if (len % m == 0) {\n                prime = 0;\n                break;\n            }\n        }\n    } else {\n        prime = 0;\n    }\n    if (prime) {\n        if (k > 0) {\n            t[k++] = ' ';\n        }\n        memcpy(t + k, s + j - len, len);\n        k += len;\n    }\n    t[k] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n    int i, cnt = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10 && a[i] / 10 % 10 == 1 && a[i] % 10 % 2 == 1)\n            cnt++;\n    }\n    return cnt;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, cnt = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10 && (a[i] / 100 == 0 || a[i] / 100 % 2 == 1) && a[i] % 10 % 2 == 1)\n            cnt++;\n    }\n    return cnt;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t) {\n    int i, j, k, n;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (k > 1) {\n                for (n = 2; n * n <= k; n++) {\n                    if (k % n == 0) {\n                        break;\n                    }\n                }\n                if (n * n > k) {\n                    if (j != 0) {\n                        t[j++] = ' ';\n                    }\n                    memcpy(t + j, s + i - k, k);\n                    j += k;\n                    k = 0;\n                }\n            }\n            i++;\n            k = 0;\n        } else {\n            k++;\n            i++;\n        }\n    }\n    if (k > 1) {\n        for (n = 2; n * n <= k; n++) {\n            if (k % n == 0) {\n                break;\n            }\n        }\n        if (n * n > k) {\n            if (j != 0) {\n                t[j++] = ' ';\n            }\n            memcpy(t + j, s + i - k, k);\n            j += k;\n        }\n    }\n    t[j] = '\\0';\n}",
    "c_func_re_decompile": " void func0(char *s, char *t) {\n    int i, j, k, n;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (k > 1) {\n                for (n = 2; n * n <= k; n++) {\n                    if (k % n == 0) {\n                        break;\n                    }\n                }\n                if (n * n > k) {\n                    if (j != 0) {\n                        t[j++] = ' ';\n                    }\n                    memcpy(t + j, s + i - k, k);\n                    j += k;\n                    k = 0;\n                }\n            }\n            i++;\n            k = 0;\n        } else {\n            k++;\n            i++;\n        }\n    }\n    if (k > 1) {\n        for (n = 2; n * n <= k; n++) {\n            if (k % n == 0) {\n                break;\n            }\n        }\n        if (n * n > k) {\n            if (j != 0) {\n                t[j++] = ' ';\n            }\n            memcpy(t + j, s + i - k, k);\n            j += k;\n        }\n    }\n    t[j] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *a, char *b) {\n  int i, j;\n  char buf[100];\n  int x, y, u, v;\n  i = 0;\n  while (a[i] != '/') {\n    buf[i] = a[i];\n    i = i + 1;\n  }\n  buf[i] = '\\0';\n  x = atoi(buf);\n  j = 0;\n  i = i + 1;\n  while (a[i] != '\\0') {\n    buf[j] = a[i];\n    i = i + 1;\n    j = j + 1;\n  }\n  buf[j] = '\\0';\n  y = atoi(buf);\n  i = 0;\n  while (b[i] != '/') {\n    buf[i] = b[i];\n    i = i + 1;\n  }\n  buf[i] = '\\0';\n  u = atoi(buf);\n  j = 0;\n  i = i + 1;\n  while (b[i] != '\\0') {\n    buf[j] = b[i];\n    i = i + 1;\n    j = j + 1;\n  }\n  buf[j] = '\\0';\n  v = atoi(buf);\n  if (x * u % (y * v) == 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n}",
    "c_func_re_decompile": " int func0(char *a, char *b) {\n  int i, j;\n  char buf[100];\n  int x, y, u, v;\n  i = 0;\n  while (a[i] != '/') {\n    buf[i] = a[i];\n    i = i + 1;\n  }\n  buf[i] = '\\0';\n  x = atoi(buf);\n  j = 0;\n  i = i + 1;\n  while (a[i] != '\\0') {\n    buf[j] = a[i];\n    i = i + 1;\n    j = j + 1;\n  }\n  buf[j] = '\\0';\n  y = atoi(buf);\n  i = 0;\n  while (b[i] != '/') {\n    buf[i] = b[i];\n    i = i + 1;\n  }\n  buf[i] = '\\0';\n  u = atoi(buf);\n  j = 0;\n  i = i + 1;\n  while (b[i] != '\\0') {\n    buf[j] = b[i];\n    i = i + 1;\n    j = j + 1;\n  }\n  buf[j] = '\\0';\n  v = atoi(buf);\n  if (x * u % (y * v) == 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int i, c = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            while (a[i] >= 100) {\n                a[i] /= 10;\n            }\n            if (a[i] % 2) {\n                c++;\n            }\n        }\n    }\n    return c;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, c = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            while (a[i] >= 100) {\n                a[i] /= 10;\n            }\n            if (a[i] % 2) {\n                c++;\n            }\n        }\n    }\n    return c;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
    "c_func_decompile": " int func0(char *a, char *b) {\n    char buf1[100], buf2[100], buf3[100], buf4[100];\n    int i, j, k, l;\n    i = 0;\n    while (a[i] != '/') {\n        buf1[i] = a[i];\n        i++;\n    }\n    buf1[i] = '\\0';\n    j = strtol(buf1, NULL, 10);\n    k = 0;\n    while (a[i + 1] != '\\0') {\n        buf2[k] = a[i + 1];\n        i++;\n        k++;\n    }\n    buf2[k] = '\\0';\n    l = strtol(buf2, NULL, 10);\n    i = 0;\n    while (b[i] != '/') {\n        buf3[i] = b[i];\n        i++;\n    }\n    buf3[i] = '\\0';\n    k = strtol(buf3, NULL, 10);\n    j = 0;\n    while (b[i + 1] != '\\0') {\n        buf4[j] = b[i + 1];\n        i++;\n        j++;\n    }\n    buf4[j] = '\\0';\n    l = strtol(buf4, NULL, 10);\n    return (j * k) % (l * l) == 0;\n}",
    "c_func_re_decompile": " int func0(char *a, char *b) {\n    char buf1[100], buf2[100], buf3[100], buf4[100];\n    int i, j, k, l;\n    i = 0;\n    while (a[i] != '/') {\n        buf1[i] = a[i];\n        i++;\n    }\n    buf1[i] = '\\0';\n    j = strtol(buf1, NULL, 10);\n    k = 0;\n    while (a[i + 1] != '\\0') {\n        buf2[k] = a[i + 1];\n        i++;\n        k++;\n    }\n    buf2[k] = '\\0';\n    l = strtol(buf2, NULL, 10);\n    i = 0;\n    while (b[i] != '/') {\n        buf3[i] = b[i];\n        i++;\n    }\n    buf3[i] = '\\0';\n    k = strtol(buf3, NULL, 10);\n    j = 0;\n    while (b[i + 1] != '\\0') {\n        buf4[j] = b[i + 1];\n        i++;\n        j++;\n    }\n    buf4[j] = '\\0';\n    l = strtol(buf4, NULL, 10);\n    return (j * k) % (l * l) == 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n) {\n    int i, j, k, t, *b = malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        char buf[12];\n        __sprintf_chk(buf, 1, 12, \"%d\", a[i] < 0 ? -a[i] : a[i]);\n        for (j = 0, t = 0; j < strlen(buf); j++)\n            t = t * 10 + buf[j] - '0';\n        b[i] = a[i] < 0 ? -t : t;\n    }\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n - 1; j++)\n            if (b[j] < b[j + 1]) {\n                t = b[j];\n                b[j] = b[j + 1];\n                b[j + 1] = t;\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    free(b);\n    return a;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n) {\n    int i, j, k, t, *b = malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        char buf[12];\n        __sprintf_chk(buf, 1, 12, \"%d\", a[i] < 0 ? -a[i] : a[i]);\n        for (j = 0, t = 0; j < strlen(buf); j++)\n            t = t * 10 + buf[j] - '0';\n        b[i] = a[i] < 0 ? -t : t;\n    }\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n - 1; j++)\n            if (b[j] < b[j + 1]) {\n                t = b[j];\n                b[j] = b[j + 1];\n                b[j + 1] = t;\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    free(b);\n    return a;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "\nint func0(int *a, int n) {\n    int i, c = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            while (a[i] >= 100) {\n                a[i] /= 10;\n            }\n            if (a[i] % 2) {\n                c++;\n            }\n        }\n    }\n    return c;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, c = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            while (a[i] >= 100) {\n                a[i] /= 10;\n            }\n            if (a[i] % 2) {\n                c++;\n            }\n        }\n    }\n    return c;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n) {\n    int* b = (int*)malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) {\n        char buf[10];\n        sprintf(buf, \"%d\", a[i] > 0 ? a[i] : -a[i]);\n        int sum = 0;\n        int len = strlen(buf);\n        for (int j = 1; j < len; j++) {\n            sum += buf[j] - '0';\n        }\n        if (a[i] > 0) {\n            sum += buf[0] - '0';\n        } else {\n            sum -= buf[0] - '0';\n        }\n        b[i] = sum;\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            if (b[j - 1] > b[j]) {\n                int tmp = b[j];\n                b[j] = b[j - 1];\n                b[j - 1] = tmp;\n                tmp = a[j];\n                a[j] = a[j - 1];\n                a[j - 1] = tmp;\n            }\n        }\n    }\n    free(b);\n    return a;\n}",
    "c_func_re_decompile": " int* func0(int* a, int n) {\n    int* b = (int*)malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) {\n        char buf[10];\n        sprintf(buf, \"%d\", a[i] > 0 ? a[i] : -a[i]);\n        int sum = 0;\n        int len = strlen(buf);\n        for (int j = 1; j < len; j++) {\n            sum += buf[j] - '0';\n        }\n        if (a[i] > 0) {\n            sum += buf[0] - '0';\n        } else {\n            sum -= buf[0] - '0';\n        }\n        b[i] = sum;\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            if (b[j - 1] > b[j]) {\n                int tmp = b[j];\n                b[j] = b[j - 1];\n                b[j - 1] = tmp;\n                tmp = a[j];\n                a[j] = a[j - 1];\n                a[j - 1] = tmp;\n            }\n        }\n    }\n    free(b);\n    return a;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
    "c_func_decompile": " int func0(int *a, int n) {\n    int i, j, k, m, cnt = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            j = a[i] % 10;\n            k = a[i];\n            while (k >= 10) {\n                k /= 10;\n            }\n            m = k;\n            if (m % 2 == 1 && j % 2 == 1) {\n                cnt++;\n            }\n        }\n    }\n    return cnt;\n}",
    "c_func_re_decompile": " int func0(int *a, int n) {\n    int i, j, k, m, cnt = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            j = a[i] % 10;\n            k = a[i];\n            while (k >= 10) {\n                k /= 10;\n            }\n            m = k;\n            if (m % 2 == 1 && j % 2 == 1) {\n                cnt++;\n            }\n        }\n    }\n    return cnt;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n) {\n    int i, j, k, t, *b, l;\n    char s[12];\n    b = (int *)malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        t = abs(a[i]);\n        __sprintf_chk(s, 1, 12, \"%d\", t);\n        l = strlen(s);\n        for (j = 1, k = 0; j < l; j++)\n            k = k * 10 + s[j] - '0';\n        if (a[i] > 0)\n            b[i] = k + s[0] - '0';\n        else\n            b[i] = -(k + s[0] - '0');\n    }\n    for (i = 0; i < n; i++)\n        for (j = 1; j < n; j++)\n            if (b[j - 1] > b[j]) {\n                t = b[j - 1];\n                b[j - 1] = b[j];\n                b[j] = t;\n                t = a[j - 1];\n                a[j - 1] = a[j];\n                a[j] = t;\n            }\n    free(b);\n    return a;\n}",
    "c_func_re_decompile": " int *func0(int *a, int n) {\n    int i, j, k, t, *b, l;\n    char s[12];\n    b = (int *)malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) {\n        t = abs(a[i]);\n        __sprintf_chk(s, 1, 12, \"%d\", t);\n        l = strlen(s);\n        for (j = 1, k = 0; j < l; j++)\n            k = k * 10 + s[j] - '0';\n        if (a[i] > 0)\n            b[i] = k + s[0] - '0';\n        else\n            b[i] = -(k + s[0] - '0');\n    }\n    for (i = 0; i < n; i++)\n        for (j = 1; j < n; j++)\n            if (b[j - 1] > b[j]) {\n                t = b[j - 1];\n                b[j - 1] = b[j];\n                b[j] = t;\n                t = a[j - 1];\n                a[j - 1] = a[j];\n                a[j] = t;\n            }\n    free(b);\n    return a;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
    "c_func_decompile": "\nint* func0(int* nums, int numsSize) {\n    int* ret = (int*)malloc(sizeof(int) * numsSize);\n    for (int i = 0; i < numsSize; i++) {\n        char buf[12];\n        __sprintf_chk(buf, 1, 12, \"%d\", nums[i] > 0 ? nums[i] : -nums[i]);\n        int sum = 0;\n        for (int j = 0; j < strlen(buf) - 1; j++) {\n            sum += buf[j] - '0';\n        }\n        ret[i] = nums[i] > 0 ? sum + (buf[0] - '0') : sum - (buf[0] - '0');\n    }\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = 1; j < numsSize; j++) {\n            if (ret[j - 1] > ret[j]) {\n                int tmp = ret[j - 1];\n                ret[j - 1] = ret[j];\n                ret[j] = tmp;\n                tmp = nums[j - 1];\n                nums[j - 1] = nums[j];\n                nums[j] = tmp;\n            }\n        }\n    }\n    free(ret);\n    return nums;\n}",
    "c_func_re_decompile": " int* func0(int* nums, int numsSize) {\n    int* ret = (int*)malloc(sizeof(int) * numsSize);\n    for (int i = 0; i < numsSize; i++) {\n        char buf[12];\n        __sprintf_chk(buf, 1, 12, \"%d\", nums[i] > 0 ? nums[i] : -nums[i]);\n        int sum = 0;\n        for (int j = 0; j < strlen(buf) - 1; j++) {\n            sum += buf[j] - '0';\n        }\n        ret[i] = nums[i] > 0 ? sum + (buf[0] - '0') : sum - (buf[0] - '0');\n    }\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = 1; j < numsSize; j++) {\n            if (ret[j - 1] > ret[j]) {\n                int tmp = ret[j - 1];\n                ret[j - 1] = ret[j];\n                ret[j] = tmp;\n                tmp = nums[j - 1];\n                nums[j - 1] = nums[j];\n                nums[j] = tmp;\n            }\n        }\n    }\n    free(ret);\n    return nums;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar ** func0(char * a, char * b, int * c) {\n  char * strs[] = {\"at\", \"ball\", \"car\", \"dad\", \"eye\", \"good\", \"idea\", \"leet\", \"mad\"};\n  int i, j, k;\n  int ai = -1, bi = -1;\n  char ** ret;\n  for (i = 0; i < 8; i++) {\n    if (!strcmp(strs[i], a)) ai = i;\n    if (!strcmp(strs[i], b)) bi = i;\n  }\n  if (ai == -1 || bi == -1 || ai == bi) {\n    *c = 0;\n    return NULL;\n  }\n  if (ai > bi) {\n    k = ai;\n    ai = bi;\n    bi = k;\n  }\n  *c = bi - ai - 1;\n  if (*c <= 0) {\n    *c = 0;\n    return NULL;\n  }\n  ret = (char **)malloc(sizeof(char *) * (*c));\n  for (i = ai + 1; i < bi; i++) {\n    ret[i - ai - 1] = strs[i];\n  }\n  return ret;\n}",
    "c_func_re_decompile": " char ** func0(char * a, char * b, int * c) {\n  char * strs[] = {\"at\", \"ball\", \"car\", \"dad\", \"eye\", \"good\", \"idea\", \"leet\", \"mad\"};\n  int i, j, k;\n  int ai = -1, bi = -1;\n  char ** ret;\n  for (i = 0; i < 8; i++) {\n    if (!strcmp(strs[i], a)) ai = i;\n    if (!strcmp(strs[i], b)) bi = i;\n  }\n  if (ai == -1 || bi == -1 || ai == bi) {\n    *c = 0;\n    return NULL;\n  }\n  if (ai > bi) {\n    k = ai;\n    ai = bi;\n    bi = k;\n  }\n  *c = bi - ai - 1;\n  if (*c <= 0) {\n    *c = 0;\n    return NULL;\n  }\n  ret = (char **)malloc(sizeof(char *) * (*c));\n  for (i = ai + 1; i < bi; i++) {\n    ret[i - ai - 1] = strs[i];\n  }\n  return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *s1, char *s2, int *n)\n{\n    char *strs[] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"};\n    int i, j, k, m = -1, n1 = -1;\n    char **p;\n    for (i = 0; i < 8; i++)\n    {\n        if (!strcmp(strs[i], s1))\n            m = i;\n        if (!strcmp(strs[i], s2))\n            n1 = i;\n    }\n    if (m == -1 || n1 == -1 || m == n1)\n    {\n        *n = 0;\n        return NULL;\n    }\n    if (m > n1)\n    {\n        k = m;\n        m = n1;\n        n1 = k;\n    }\n    *n = n1 - m - 1;\n    if (*n <= 0)\n    {\n        *n = 0;\n        return NULL;\n    }\n    p = (char **)malloc(*n * sizeof(char *));\n    for (i = m + 1, j = 0; i < n1; i++, j++)\n        p[j] = strs[i];\n    return p;\n}",
    "c_func_re_decompile": " char **func0(char *s1, char *s2, int *n)\n{\n    char *strs[] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"};\n    int i, j, k, m = -1, n1 = -1;\n    char **p;\n    for (i = 0; i < 8; i++)\n    {\n        if (!strcmp(strs[i], s1))\n            m = i;\n        if (!strcmp(strs[i], s2))\n            n1 = i;\n    }\n    if (m == -1 || n1 == -1 || m == n1)\n    {\n        *n = 0;\n        return NULL;\n    }\n    if (m > n1)\n    {\n        k = m;\n        m = n1;\n        n1 = k;\n    }\n    *n = n1 - m - 1;\n    if (*n <= 0)\n    {\n        *n = 0;\n        return NULL;\n    }\n    p = (char **)malloc(*n * sizeof(char *));\n    for (i = m + 1, j = 0; i < n1; i++, j++)\n        p[j] = strs[i];\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *arg0, char *arg1, int *arg2) {\n  char *argv[] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"};\n  int i, first = -1, last = -1;\n  for (i = 0; i < 8; i++) {\n    if (!strcmp(argv[i], arg0))\n      first = i;\n    if (!strcmp(argv[i], arg1))\n      last = i;\n  }\n  if (first == -1 || last == -1 || first == last) {\n    *arg2 = 0;\n    return NULL;\n  }\n  if (first > last) {\n    int tmp = first;\n    first = last;\n    last = tmp;\n  }\n  *arg2 = last - first - 1;\n  if (*arg2 <= 0)\n    return NULL;\n  char **ret = (char **)malloc(sizeof(char *) * (*arg2));\n  for (i = first + 1; i < last; i++)\n    ret[i - first - 1] = argv[i];\n  return ret;\n}",
    "c_func_re_decompile": " char **func0(char *arg0, char *arg1, int *arg2) {\n  char *argv[] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"};\n  int i, first = -1, last = -1;\n  for (i = 0; i < 8; i++) {\n    if (!strcmp(argv[i], arg0))\n      first = i;\n    if (!strcmp(argv[i], arg1))\n      last = i;\n  }\n  if (first == -1 || last == -1 || first == last) {\n    *arg2 = 0;\n    return NULL;\n  }\n  if (first > last) {\n    int tmp = first;\n    first = last;\n    last = tmp;\n  }\n  *arg2 = last - first - 1;\n  if (*arg2 <= 0)\n    return NULL;\n  char **ret = (char **)malloc(sizeof(char *) * (*arg2));\n  for (i = first + 1; i < last; i++)\n    ret[i - first - 1] = argv[i];\n  return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c;\n  a = (int *)malloc(n * sizeof(int));\n  b = (int **)malloc((n + 1) * sizeof(int *));\n  c = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *)calloc(3, sizeof(int));\n    c[i] = (int *)calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (j = 1; j <= n; j++) {\n    a[j - 1] = (j * j - j + 1) % 3;\n    for (k = 0; k < 3; k++)\n      b[j][k] = b[j - 1][k];\n    b[j][a[j - 1]]++;\n  }\n  for (l = 1; l <= 2; l++) {\n    for (m = 1; m <= n; m++) {\n      for (o = 0; o < 3; o++)\n        c[m][o] = c[m - 1][o];\n      if (m > 0)\n        for (p = 0; p < 3; p++)\n          c[m][(a[m - 1] + p) % 3] += b[m][p];\n    }\n    for (q = 0; q <= n; q++)\n      for (r = 0; r < 3; r++) {\n        b[q][r] = c[q][r];\n        c[q][r] = 0;\n      }\n  }\n  z = b[n][0];\n  for (s = 0; s <= n; s++) {\n    free(b[s]);\n    free(c[s]);\n  }\n  free(b);\n  free(c);\n  free(a);\n  return z;\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c;\n  a = (int *)malloc(n * sizeof(int));\n  b = (int **)malloc((n + 1) * sizeof(int *));\n  c = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *)calloc(3, sizeof(int));\n    c[i] = (int *)calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (j = 1; j <= n; j++) {\n    a[j - 1] = (j * j - j + 1) % 3;\n    for (k = 0; k < 3; k++)\n      b[j][k] = b[j - 1][k];\n    b[j][a[j - 1]]++;\n  }\n  for (l = 1; l <= 2; l++) {\n    for (m = 1; m <= n; m++) {\n      for (o = 0; o < 3; o++)\n        c[m][o] = c[m - 1][o];\n      if (m > 0)\n        for (p = 0; p < 3; p++)\n          c[m][(a[m - 1] + p) % 3] += b[m][p];\n    }\n    for (q = 0; q <= n; q++)\n      for (r = 0; r < 3; r++) {\n        b[q][r] = c[q][r];\n        c[q][r] = 0;\n      }\n  }\n  z = b[n][0];\n  for (s = 0; s <= n; s++) {\n    free(b[s]);\n    free(c[s]);\n  }\n  free(b);\n  free(c);\n  free(a);\n  return z;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int n, int a, int b) {\n  int i, flag = 1;\n  if (n <= 1) flag = 0;\n  for (i = 2; i * i <= n; i++)\n    if (n % i == 0) flag = 0;\n  return flag ? a : b;\n}",
    "c_func_re_decompile": " int func0(int n, int a, int b) {\n  int i, flag = 1;\n  if (n <= 1) flag = 0;\n  for (i = 2; i * i <= n; i++)\n    if (n % i == 0) flag = 0;\n  return flag ? a : b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int n, int a, int b) {\n    int i, flag = 0;\n    if (n > 1)\n        flag = 1;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            flag = 0;\n    return flag ? a : b;\n}",
    "c_func_re_decompile": " int func0(int n, int a, int b) {\n    int i, flag = 0;\n    if (n > 1)\n        flag = 1;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            flag = 0;\n    return flag ? a : b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int n, int a, int b) {\n    int i, flag = 0;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            flag = 1;\n            break;\n        }\n    }\n    return flag ? a : b;\n}",
    "c_func_re_decompile": " int func0(int n, int a, int b) {\n    int i, flag = 0;\n    if (n <= 1)\n        flag = 1;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            flag = 1;\n        }\n    }\n    return flag ? a : b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int n, int a, int b) {\n    int i, flag = 0;\n    if (n < 2)\n        flag = 1;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            flag = 0;\n    }\n    if (flag)\n        return a;\n    else\n        return b;\n}",
    "c_func_re_decompile": " int func0(int n, int a, int b) {\n    int i, flag = 0;\n    if (n < 2)\n        flag = 1;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            flag = 0;\n    }\n    if (flag)\n        return a;\n    else\n        return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
    "c_func_decompile": " char** func0(char** a, int n, int* m) {\n    int i, j;\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (strlen(a[i]) % 2 == 0) {\n            a[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            size_t len1 = strlen(a[j]);\n            size_t len2 = strlen(a[j + 1]);\n            if (len1 > len2 || (len1 == len2 && strcmp(a[j], a[j + 1]) > 0)) {\n                char* tmp = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = tmp;\n            }\n        }\n    }\n    char** b = (char**)malloc(*m * sizeof(char*));\n    for (i = 0; i < *m; i++) {\n        b[i] = a[i];\n    }\n    return b;\n}",
    "c_func_re_decompile": " char** func0(char** a, int n, int* m) {\n    int i, j;\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (strlen(a[i]) % 2 == 0) {\n            a[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            size_t len1 = strlen(a[j]);\n            size_t len2 = strlen(a[j + 1]);\n            if (len1 > len2 || (len1 == len2 && strcmp(a[j], a[j + 1]) > 0)) {\n                char* tmp = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = tmp;\n            }\n        }\n    }\n    char** b = (char**)malloc(*m * sizeof(char*));\n    for (i = 0; i < *m; i++) {\n        b[i] = a[i];\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nchar ** func0(char ** arr, int n, int * len) {\n    *len = 0;\n    for (int i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*len] = arr[i];\n            (*len)++;\n        }\n    }\n    for (int i = 0; i < *len - 1; i++) {\n        for (int j = 0; j < *len - i - 1; j++) {\n            if (strlen(arr[j]) > strlen(arr[j + 1]) || (strlen(arr[j]) == strlen(arr[j + 1]) && strcmp(arr[j], arr[j + 1]) > 0)) {\n                char * tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    char ** ret = (char **)malloc(sizeof(char *) * (*len));\n    for (int i = 0; i < *len; i++) {\n        ret[i] = arr[i];\n    }\n    return ret;\n}",
    "c_func_re_decompile": " char ** func0(char ** arr, int n, int * len) {\n    *len = 0;\n    for (int i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*len] = arr[i];\n            (*len)++;\n        }\n    }\n    for (int i = 0; i < *len - 1; i++) {\n        for (int j = 0; j < *len - i - 1; j++) {\n            if (strlen(arr[j]) > strlen(arr[j + 1]) || (strlen(arr[j]) == strlen(arr[j + 1]) && strcmp(arr[j], arr[j + 1]) > 0)) {\n                char * tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    char ** ret = (char **)malloc(sizeof(char *) * (*len));\n    for (int i = 0; i < *len; i++) {\n        ret[i] = arr[i];\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
    "c_func_decompile": " void func0(int *a, int *b, int *c, int N) {\n  int i;\n  for (i = 0; i < N; i++) {\n    c[i] = abs(a[i] - b[i]);\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int *b, int *c, int N) {\n  int i;\n  for (i = 0; i < N; i++) {\n    c[i] = abs(a[i] - b[i]);\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
    "c_func_decompile": " char ** func0(char ** arr, int n, int *m)\n{\n    *m = 0;\n    int i, j;\n    for (i = 0; i < n; i++)\n    {\n        if (strlen(arr[i]) % 2 == 0)\n        {\n            arr[*m] = arr[i];\n            (*m)++;\n        }\n    }\n    for (i = *m - 1; i > 0; i--)\n    {\n        for (j = 0; j < i; j++)\n        {\n            if (strlen(arr[j]) > strlen(arr[j + 1]) || (strlen(arr[j]) == strlen(arr[j + 1]) && strcmp(arr[j], arr[j + 1]) > 0))\n            {\n                char *tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    char **res = malloc(sizeof(char *) * (*m));\n    for (i = 0; i < *m; i++)\n    {\n        res[i] = arr[i];\n    }\n    return res;\n}",
    "c_func_re_decompile": " char ** func0(char ** arr, int n, int *m)\n{\n    *m = 0;\n    int i, j;\n    for (i = 0; i < n; i++)\n    {\n        if (strlen(arr[i]) % 2 == 0)\n        {\n            arr[*m] = arr[i];\n            (*m)++;\n        }\n    }\n    for (i = *m - 1; i > 0; i--)\n    {\n        for (j = 0; j < i; j++)\n        {\n            if (strlen(arr[j]) > strlen(arr[j + 1]) || (strlen(arr[j]) == strlen(arr[j + 1]) && strcmp(arr[j], arr[j + 1]) > 0))\n            {\n                char *tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    char **res = malloc(sizeof(char *) * (*m));\n    for (i = 0; i < *m; i++)\n    {\n        res[i] = arr[i];\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int i, j, k, l, m, o;\n  int **a, **b;\n  int *c;\n  c = (int *)malloc(n * sizeof(int));\n  a = (int **)malloc((n + 1) * sizeof(int *));\n  b = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    a[i] = (int *)calloc(3, sizeof(int));\n    b[i] = (int *)calloc(3, sizeof(int));\n  }\n  a[0][0] = a[0][1] = a[0][2] = 0;\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  for (i = 1; i <= n; i++) {\n    c[i - 1] = (i * i - i + 1) % 3;\n    a[i][0] = a[i - 1][0];\n    a[i][1] = a[i - 1][1];\n    a[i][2] = a[i - 1][2];\n    a[i][c[i - 1]]++;\n  }\n  for (j = 1; j <= 2; j++) {\n    for (i = 1; i <= n; i++) {\n      b[i][0] = b[i - 1][0];\n      b[i][1] = b[i - 1][1];\n      b[i][2] = b[i - 1][2];\n      for (k = 0; k < 3; k++) {\n        b[i][(i * i - i + 1 + c[i - 1]) % 3] += a[i - 1][k];\n      }\n    }\n    for (i = 0; i <= n; i++) {\n      a[i][0] = b[i][0];\n      a[i][1] = b[i][1];\n      a[i][2] = b[i][2];\n      b[i][0] = b[i][1] = b[i][2] = 0;\n    }\n  }\n  o = a[n][0];\n  for (i = 0; i <= n; i++) {\n    free(a[i]);\n    free(b[i]);\n  }\n  free(a);\n  free(b);\n  free(c);\n  return o;\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int i, j, k, l, m, o;\n  int **a, **b;\n  int *c;\n  c = (int *)malloc(n * sizeof(int));\n  a = (int **)malloc((n + 1) * sizeof(int *));\n  b = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    a[i] = (int *)calloc(3, sizeof(int));\n    b[i] = (int *)calloc(3, sizeof(int));\n  }\n  a[0][0] = a[0][1] = a[0][2] = 0;\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  for (i = 1; i <= n; i++) {\n    c[i - 1] = (i * i - i + 1) % 3;\n    a[i][0] = a[i - 1][0];\n    a[i][1] = a[i - 1][1];\n    a[i][2] = a[i - 1][2];\n    a[i][c[i - 1]]++;\n  }\n  for (j = 1; j <= 2; j++) {\n    for (i = 1; i <= n; i++) {\n      b[i][0] = b[i - 1][0];\n      b[i][1] = b[i - 1][1];\n      b[i][2] = b[i - 1][2];\n      for (k = 0; k < 3; k++) {\n        b[i][(i * i - i + 1 + c[i - 1]) % 3] += a[i - 1][k];\n      }\n    }\n    for (i = 0; i <= n; i++) {\n      a[i][0] = b[i][0];\n      a[i][1] = b[i][1];\n      a[i][2] = b[i][2];\n      b[i][0] = b[i][1] = b[i][2] = 0;\n    }\n  }\n  o = a[n][0];\n  for (i = 0; i <= n; i++) {\n    free(a[i]);\n    free(b[i]);\n  }\n  free(a);\n  free(b);\n  free(c);\n  return o;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
    "c_func_decompile": " void func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i=0; i<n; i++) {\n    c[i] = abs(a[i]-b[i]);\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i=0; i<n; i++) {\n    c[i] = abs(a[i]-b[i]);\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nlong func0(float *a, int n) {\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.000001 && x > 0 && (int)y % 2 == 1) {\n            sum += y * y;\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": " long func0(float *a, int n) {\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.000001 && x > 0 && (int)y % 2 == 1) {\n            sum += (int)y * (int)y;\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i=0; i<n; i++) {\n    c[i] = abs(a[i]-b[i]);\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i=0; i<n; i++) {\n    c[i] = abs(a[i]-b[i]);\n  }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nlong func0(float *a, int n) {\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.000001 && x > 0 && (int)y % 2 == 1) {\n            sum += y * y;\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": " long func0(float *a, int n) {\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.000001 && x > 0 && (int)y % 2 == 1) {\n            sum += y * y;\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nlong func0(float *a, int n) {\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.000001 && x > 0 && (int)y % 2 == 1) {\n            sum += y * y;\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": " long func0(float *a, int n) {\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.000001 && x > 0 && (int)y % 2 == 1) {\n            sum += (int)y * (int)y;\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
    "c_func_decompile": " void func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i=0; i<n; i++) {\n    c[i] = (a[i]-b[i] >= 0 ? a[i]-b[i] : -(a[i]-b[i]));\n  }\n}",
    "c_func_re_decompile": " void func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i=0; i<n; i++) {\n    c[i] = (a[i]-b[i] >= 0 ? a[i]-b[i] : -(a[i]-b[i]));\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nlong func0(float *x, int n) {\n  long sum = 0;\n  int i;\n  for (i = 0; i < n; i++) {\n    if (fabs(x[i] - round(x[i])) < 0.0000001 && x[i] > 0 && (int)round(x[i]) % 2 == 1) {\n      sum += (int)round(x[i]) * (int)round(x[i]);\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": " long func0(float *x, int n) {\n  long sum = 0;\n  int i;\n  for (i = 0; i < n; i++) {\n    if (fabs(x[i] - round(x[i])) < 0.0000001 && x[i] > 0 && (int)round(x[i]) % 2 == 1) {\n      sum += (int)round(x[i]) * (int)round(x[i]);\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c;\n  a = (int *)malloc(n * sizeof(int));\n  b = (int **)malloc((n + 1) * sizeof(int *));\n  c = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *)calloc(3, sizeof(int));\n    c[i] = (int *)calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (i = 1; i <= n; i++) {\n    a[i - 1] = (i * (i - 1) + 1) % 3;\n    b[i][0] = b[i - 1][0];\n    b[i][1] = b[i - 1][1];\n    b[i][2] = b[i - 1][2];\n    b[i][a[i - 1]]++;\n  }\n  for (i = 1; i <= n; i++) {\n    for (j = 0; j < 3; j++) {\n      c[i][j] = b[i - 1][j];\n      c[i][(a[i - 1] + j) % 3] += b[i - 1][j];\n    }\n  }\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];\n    c[i][1] = c[i][2];\n    c[i][2] = t;\n  }\n  for (i = 0; i <= n; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free(b);\n  free(c);\n  free(a);\n  return t;\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c;\n  a = (int *)malloc(n * sizeof(int));\n  b = (int **)malloc((n + 1) * sizeof(int *));\n  c = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *)calloc(3, sizeof(int));\n    c[i] = (int *)calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (i = 1; i <= n; i++) {\n    a[i - 1] = (i * (i - 1) + 1) % 3;\n    b[i][0] = b[i - 1][0];\n    b[i][1] = b[i - 1][1];\n    b[i][2] = b[i - 1][2];\n    b[i][a[i - 1]]++;\n  }\n  for (i = 1; i <= n; i++) {\n    for (j = 0; j < 3; j++) {\n      c[i][j] = b[i - 1][j];\n      c[i][(a[i - 1] + j) % 3] += b[i - 1][j];\n    }\n  }\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];\n    c[i][1] = c[i][2];\n    c[i][2] = t;\n  }\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];\n    c[i][1] = c[i][2];\n    c[i][2] = t;\n  }\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];\n    c[i][1] = c[i][2];\n    c[i][2] = t;\n  }\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];\n    c[i][1] = c[i][2];\n    c[i][2] = t;\n  }\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];\n    c[i][1] = c[i][2];\n    c[i][2] = t;\n  }\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];\n    c[i][1] = c[i][2];\n    c[i][2] = t;\n  }\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];\n    c[i][1] = c[i][2];\n    c[i][2] = t;\n  }\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];\n    c[i][1] = c[i][2];\n    c[i][2] = t;\n  }\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nchar ** func0(char ** arr, int n, int *m) {\n    *m = 0;\n    int i, j;\n    for (i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*m] = arr[i];\n            (*m)++;\n        }\n    }\n    for (i = *m - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (strlen(arr[j]) > strlen(arr[j + 1]) ||\n                (strlen(arr[j]) == strlen(arr[j + 1]) &&\n                 strcmp(arr[j], arr[j + 1]) > 0)) {\n                char *tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    char **ret = (char **)malloc(sizeof(char *) * (*m));\n    for (i = 0; i < *m; i++) {\n        ret[i] = arr[i];\n    }\n    return ret;\n}",
    "c_func_re_decompile": " char ** func0(char ** arr, int n, int *m) {\n    *m = 0;\n    int i, j;\n    for (i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*m] = arr[i];\n            (*m)++;\n        }\n    }\n    for (i = *m - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (strlen(arr[j]) > strlen(arr[j + 1]) ||\n                (strlen(arr[j]) == strlen(arr[j + 1]) &&\n                 strcmp(arr[j], arr[j + 1]) > 0)) {\n                char *tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    char **ret = (char **)malloc(sizeof(char *) * (*m));\n    for (i = 0; i < *m; i++) {\n        ret[i] = arr[i];\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
    "c_func_decompile": "\nint func0(char *str1, char *str2)\n{\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    char *str = (char *)malloc(sizeof(char) * (len2 * 2 + 1));\n    int i;\n    for (i = 0; i < len2; i++) {\n        strncpy(str, str2 + i, len2 - i);\n        strncpy(str + len2 - i, str2, i);\n        str[len2] = '\\0';\n        if (strstr(str1, str)) {\n            free(str);\n            return 1;\n        }\n    }\n    free(str);\n    return 0;\n}",
    "c_func_re_decompile": " int func0(char *str1, char *str2)\n{\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    char *str = (char *)malloc(sizeof(char) * (len2 * 2 + 1));\n    int i;\n    for (i = 0; i < len2; i++) {\n        strncpy(str, str2 + i, len2 - i);\n        strncpy(str + len2 - i, str2, i);\n        str[len2] = '\\0';\n        if (strstr(str1, str)) {\n            free(str);\n            return 1;\n        }\n    }\n    free(str);\n    return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
    "c_func_decompile": "\nint func0(char *str, char *substr)\n{\n    int i, len, len_substr;\n    char *tmp;\n\n    len_substr = strlen(substr);\n    tmp = (char *)malloc(sizeof(char) * (len_substr * 2 + 1));\n    for (i = 0; i < len_substr; i++) {\n        len = len_substr - i;\n        strncpy(tmp, substr + i, len);\n        strncpy(tmp + len, substr, i);\n        tmp[len_substr] = '\\0';\n        if (strstr(str, tmp)) {\n            free(tmp);\n            return 1;\n        }\n    }\n    free(tmp);\n    return 0;\n}",
    "c_func_re_decompile": " int func0(char *str, char *substr)\n{\n    int i, len, len_substr;\n    char *tmp;\n\n    len_substr = strlen(substr);\n    tmp = (char *)malloc(sizeof(char) * (len_substr * 2 + 1));\n    for (i = 0; i < len_substr; i++) {\n        len = len_substr - i;\n        strncpy(tmp, substr + i, len);\n        strncpy(tmp + len, substr, i);\n        tmp[len_substr] = '\\0';\n        if (strstr(str, tmp)) {\n            free(tmp);\n            return 1;\n        }\n    }\n    free(tmp);\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
    "c_func_decompile": " int func0(char *s1, char *s2) {\n    int i, len;\n    char *s;\n    len = strlen(s2);\n    s = (char *)malloc(len * 2 + 1);\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len * 2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}",
    "c_func_re_decompile": " int func0(char *s1, char *s2) {\n    int i, len;\n    char *s;\n    len = strlen(s2);\n    s = (char *)malloc(len * 2 + 1);\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len * 2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
    "c_func_decompile": "\nvoid func0(char *s, char **a, int n, char *r) {\n    int i, j, k, max = -1000, c;\n    char *p, c1;\n    p = NULL;\n    for (i = 0; i < n; i++) {\n        c = 0;\n        for (j = 0; a[i][j]; j++) {\n            c1 = a[i][j];\n            if (c1 >= 'A' && c1 <= 'Z') c++;\n            if (c1 >= 'a' && c1 <= 'z') c--;\n        }\n        if (c > max) {\n            max = c;\n            p = a[i];\n        }\n    }\n    sprintf(r, \"%s: %s\", s, p);\n}",
    "c_func_re_decompile": " void func0(char *s, char **a, int n, char *r) {\n    int i, j, k, max = -1000, c;\n    char *p, c1;\n    p = NULL;\n    for (i = 0; i < n; i++) {\n        p = a[i];\n        c = 0;\n        for (j = 0; p[j]; j++) {\n            c1 = p[j];\n            if (c1 >= 'A' && c1 <= 'Z') c++;\n            if (c1 >= 'a' && c1 <= 'z') c--;\n        }\n        if (c > max) {\n            max = c;\n            p = a[i];\n        }\n    }\n    sprintf(r, \"%s: %s\", s, p);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
    "c_func_decompile": " int func0(char *s1, char *s2) {\n    int i, len;\n    char *s;\n    len = strlen(s2);\n    s = (char *)malloc(len * 2 + 1);\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len * 2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}",
    "c_func_re_decompile": " int func0(char *s1, char *s2) {\n    int i, len;\n    char *s;\n    len = strlen(s2);\n    s = (char *)malloc(len * 2 + 1);\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len * 2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
    "c_func_decompile": "\nchar *func0(char *s, char **a, int n, char *buf) {\n  int i, j, k, max = -1000, maxi = 0;\n  char *p;\n  for (i = 0; i < n; i++) {\n    p = a[i];\n    for (j = 0, k = 0; *p; p++)\n      if (*p >= 'A' && *p <= 'Z' || *p >= 'a' && *p <= 'z')\n        k++;\n    if (k > max) {\n      max = k;\n      maxi = i;\n    }\n  }\n  return __sprintf_chk(buf, 1, ~0, \"%s\", a[maxi]);\n}",
    "c_func_re_decompile": " char *func0(char *s, char **a, int n, char *buf) {\n  int i, j, k, max = -1000, maxi = 0;\n  char *p;\n  for (i = 0; i < n; i++) {\n    p = a[i];\n    for (j = 0, k = 0; *p; p++)\n      if (*p >= 'A' && *p <= 'Z' || *p >= 'a' && *p <= 'z')\n        k++;\n    if (k > max) {\n      max = k;\n      maxi = i;\n    }\n  }\n  return __sprintf_chk(buf, 1, ~0, \"%s\", a[maxi]);\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
    "c_func_decompile": " void func0(int x, int *p) {\n    int c0 = 0, c1 = 0;\n    if (x < 0)\n        x = -x;\n    while (x > 0) {\n        if (x % 10 % 2)\n            c1++;\n        else\n            c0++;\n        x /= 10;\n    }\n    p[0] = c0;\n    p[1] = c1;\n}",
    "c_func_re_decompile": " void func0(int x, int *p) {\n    int c0 = 0, c1 = 0;\n    if (x < 0)\n        x = -x;\n    while (x > 0) {\n        if (x % 10 % 2)\n            c1++;\n        else\n            c0++;\n        x /= 10;\n    }\n    p[0] = c0;\n    p[1] = c1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
    "c_func_decompile": "\nchar *func0(char *s, char **a, int n, char *buf)\n{\n  int i, j, k, l, m;\n  char *p, *q;\n  m = -1000;\n  q = NULL;\n  for (i = 0; i < n; i++) {\n    p = a[i];\n    k = 0;\n    while (*p) {\n      if (*p >= 'A' && *p <= 'Z')\n k++;\n      else if (*p >= 'a' && *p <= 'z')\n k++;\n      p++;\n    }\n    if (k > m) {\n      m = k;\n      q = a[i];\n    }\n  }\n  return __sprintf_chk(buf, 1, ~0, \"%s\", q);\n}",
    "c_func_re_decompile": " char *func0(char *s, char **a, int n, char *buf)\n{\n  int i, j, k, l, m;\n  char *p, *q;\n  m = -1000;\n  q = NULL;\n  for (i = 0; i < n; i++) {\n    p = a[i];\n    k = 0;\n    while (*p) {\n      if (*p >= 'A' && *p <= 'Z')\n k++;\n      else if (*p >= 'a' && *p <= 'z')\n k++;\n      p++;\n    }\n    if (k > m) {\n      m = k;\n      q = a[i];\n    }\n  }\n  return __sprintf_chk(buf, 1, ~0, \"%s\", q);\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
    "c_func_decompile": " void func0(int n, int *a) {\n    int even = 0, odd = 0;\n    n = (n >= 0) ? n : -n;\n    do {\n        int r = n % 10;\n        if (r % 2 == 0)\n            even++;\n        else\n            odd++;\n        n /= 10;\n    } while (n > 0);\n    a[0] = even;\n    a[1] = odd;\n}",
    "c_func_re_decompile": " void func0(int n, int *a) {\n    int even = 0, odd = 0;\n    n = (n >= 0) ? n : -n;\n    do {\n        int r = n % 10;\n        if (r % 2 == 0)\n            even++;\n        else\n            odd++;\n        n /= 10;\n    } while (n > 0);\n    a[0] = even;\n    a[1] = odd;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
    "c_func_decompile": "\nvoid func0(int n, int *a) {\n  int i, j;\n  unsigned int m;\n  if (n < 0)\n    n = -n;\n  i = 0;\n  j = 0;\n  m = n;\n  while (m > 9) {\n    if (m % 2) {\n      i++;\n      m = m / 10;\n    } else {\n      j++;\n      m = m / 5;\n    }\n  }\n  a[0] = j;\n  a[1] = i;\n}",
    "c_func_re_decompile": " void func0(int n, int *a) {\n  int i, j;\n  unsigned int m;\n  if (n < 0)\n    n = -n;\n  i = 0;\n  j = 0;\n  m = n;\n  while (m > 9) {\n    if (m % 2) {\n      i++;\n      m = m / 10;\n    } else {\n      j++;\n      m = m / 5;\n    }\n  }\n  a[0] = j;\n  a[1] = i;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
    "c_func_decompile": "\nint func0(char *s, char **a, int n, char *buf)\n{\n    int i, j, k, m = -1000;\n    char *p = NULL;\n    for (i = 0; i < n; i++) {\n        for (j = 0, k = 0; a[i][j]; j++) {\n            if (a[i][j] >= 'A' && a[i][j] <= 'Z')\n                k++;\n            else if (a[i][j] >= 'a' && a[i][j] <= 'z')\n                k--;\n        }\n        if (k > m) {\n            m = k;\n            p = a[i];\n        }\n    }\n    return __sprintf_chk(buf, 1, ~0, \"%s\", p);\n}",
    "c_func_re_decompile": " int func0(char *s, char **a, int n, char *buf)\n{\n    int i, j, k, m = -1000;\n    char *p = NULL;\n    for (i = 0; i < n; i++) {\n        for (j = 0, k = 0; a[i][j]; j++) {\n            if (a[i][j] >= 'A' && a[i][j] <= 'Z')\n                k++;\n            else if (a[i][j] >= 'a' && a[i][j] <= 'z')\n                k--;\n        }\n        if (k > m) {\n            m = k;\n            p = a[i];\n        }\n    }\n    return __sprintf_chk(buf, 1, ~0, \"%s\", p);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
    "c_func_decompile": "\nvoid func0(int n, int *a) {\n  int i, j;\n  unsigned int m;\n  if (n < 0)\n    n = -n;\n  i = 0;\n  j = 0;\n  m = n;\n  while (m > 9) {\n    if (m % 2) {\n      j++;\n      m = m / 10;\n    } else {\n      i++;\n      m = m / 10;\n    }\n  }\n  a[0] = i;\n  a[1] = j;\n}",
    "c_func_re_decompile": " void func0(int n, int *a) {\n  int i, j;\n  unsigned int m;\n  if (n < 0)\n    n = -n;\n  i = 0;\n  j = 0;\n  m = n;\n  while (m > 9) {\n    if (m % 2) {\n      j++;\n      m = m / 10;\n    } else {\n      i++;\n      m = m / 10;\n    }\n  }\n  a[0] = i;\n  a[1] = j;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(float x, float y, float z) {\n  return ((((x * x + y * y - z * z) < 0.0000001) || ((x * x - z * z + y * y) < 0.0000001) || ((y * y + z * z - x * x) < 0.0000001))) ? 1 : 0;\n}",
    "c_func_re_decompile": " int func0(float x, float y, float z) {\n  return ((((x * x + y * y - z * z) < 0.0000001) || ((x * x - z * z + y * y) < 0.0000001) || ((y * y + z * z - x * x) < 0.0000001))) ? 1 : 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int num, char *str)\n{\n    int i;\n    int val[] = {1000, 892, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *roman[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    *str = '\\0';\n    for (i = 0; num > 0; i++) {\n        while (num >= val[i]) {\n            strcat(str, roman[i]);\n            num -= val[i];\n        }\n    }\n}",
    "c_func_re_decompile": " void func0(int num, char *str)\n{\n    int i;\n    int val[] = {1000, 892, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *roman[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    *str = '\\0';\n    for (i = 0; num > 0; i++) {\n        while (num >= val[i]) {\n            strcat(str, roman[i]);\n            num -= val[i];\n        }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
    "c_func_decompile": " int func0(float x, float y, float z) {\n  float a, b, c;\n  a = x*x;\n  b = y*y;\n  c = z*z;\n  if (fabs(a+b-c) < 0.0000001) return 1;\n  if (fabs(a+c-b) < 0.0000001) return 1;\n  if (fabs(b+c-a) < 0.0000001) return 1;\n  return 0;\n}",
    "c_func_re_decompile": " int func0(float x, float y, float z) {\n  float a, b, c;\n  a = x*x;\n  b = y*y;\n  c = z*z;\n  if (fabs(a+b-c) < 0.0000001) return 1;\n  if (fabs(a+c-b) < 0.0000001) return 1;\n  if (fabs(b+c-a) < 0.0000001) return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
    "c_func_decompile": "\nint func0(int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c, **d;\n  a = (int *)malloc(n * sizeof(int));\n  b = (int **)malloc((n + 1) * sizeof(int *));\n  c = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *)calloc(3, sizeof(int));\n    c[i] = (int *)calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (i = 0; i < n; i++) {\n    j = (i * (i + 1)) % 3;\n    k = (i + 1) % 3;\n    l = i % 3;\n    a[i] = j;\n    b[i + 1][0] = b[i][0];\n    b[i + 1][1] = b[i][1];\n    b[i + 1][2] = b[i][2];\n    b[i + 1][j]++;\n  }\n  for (i = 0; i < n; i++) {\n    c[i + 1][0] = c[i][0];\n    c[i + 1][1] = c[i][1];\n    c[i + 1][2] = c[i][2];\n    c[i + 1][a[i] % 3] += b[i][0];\n    c[i + 1][(a[i] + 1) % 3] += b[i][1];\n    c[i + 1][(a[i] + 2) % 3] += b[i][2];\n  }\n  for (i = 0; i <= n; i++) {\n    d = b[i];\n    b[i] = c[i];\n    c[i] = d;\n    c[i][0] = c[i][1] = c[i][2] = 0;\n  }\n  for (i = 0; i <= n; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free(b);\n  free(c);\n  free(a);\n  return d[0];\n}",
    "c_func_re_decompile": " int func0(int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c, **d;\n  a = (int *)malloc(n * sizeof(int));\n  b = (int **)malloc((n + 1) * sizeof(int *));\n  c = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *)calloc(3, sizeof(int));\n    c[i] = (int *)calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (i = 0; i < n; i++) {\n    j = (i * (i + 1)) % 3;\n    k = (i + 1) % 3;\n    l = i % 3;\n    a[i] = j;\n    b[i + 1][0] = b[i][0];\n    b[i + 1][1] = b[i][1];\n    b[i + 1][2] = b[i][2];\n    b[i + 1][j]++;\n  }\n  for (i = 0; i < n; i++) {\n    c[i + 1][0] = c[i][0];\n    c[i + 1][1] = c[i][1];\n    c[i + 1][2] = c[i][2];\n    c[i + 1][a[i] % 3] += b[i][0];\n    c[i + 1][(a[i] + 1) % 3] += b[i][1];\n    c[i + 1][(a[i] + 2) % 3] += b[i][2];\n  }\n  for (i = 0; i <= n; i++) {\n    d = b[i];\n    b[i] = c[i];\n    c[i] = d;\n    c[i][0] = c[i][1] = c[i][2] = 0;\n  }\n  for (i = 0; i <= n; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free(b);\n  free(c);\n  free(a);\n  return d[0];\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
    "c_func_decompile": " int func0(float x, float y, float z) {\n  if (fabs(x*x + y*y - z*z) < 0.0000001) return 1;\n  if (fabs(x*x - y*y + z*z) < 0.0000001) return 1;\n  if (fabs(x*x + z*z - y*y) < 0.0000001) return 1;\n  return 0;\n}",
    "c_func_re_decompile": " int func0(float x, float y, float z) {\n  if (fabs(x*x + y*y - z*z) < 0.0000001) return 1;\n  if (fabs(x*x - y*y + z*z) < 0.0000001) return 1;\n  if (fabs(x*x + z*z - y*y) < 0.0000001) return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int n, char *s)\n{\n    char *num[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int val[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int i = 0;\n    *s = '\\0';\n    while (n > 0) {\n        while (n >= val[i]) {\n            strcat(s, num[i]);\n            n -= val[i];\n        }\n        if (n <= 0)\n            break;\n        i++;\n    }\n}",
    "c_func_re_decompile": " void func0(int n, char *s)\n{\n    char *num[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int val[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int i = 0;\n    *s = '\\0';\n    while (n > 0) {\n        while (n >= val[i]) {\n            strcat(s, num[i]);\n            n -= val[i];\n        }\n        if (n <= 0)\n            break;\n        i++;\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
    "c_func_decompile": " void func0(int a, int b, int c, int *d) {\n  if (b > c) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}",
    "c_func_re_decompile": " void func0(int a, int b, int c, int *d) {\n  if (b > c) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
    "c_func_decompile": " void func0(int a, int b, int c, int *d) {\n  if (b > c) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}",
    "c_func_re_decompile": " void func0(int a, int b, int c, int *d) {\n  if (b > c) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int a, int b, int c, int *d) {\n  if (b > c) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}",
    "c_func_re_decompile": " void func0(int a, int b, int c, int *d) {\n  if (b > c) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
    "c_func_decompile": " int func0(float x, float y, float z) {\n  if (fabs(x*x + y*y - z*z) < 0.0000001) return 1;\n  if (fabs(x*x - y*y + z*z) < 0.0000001) return 1;\n  if (fabs(x*x + z*z - y*y) < 0.0000001) return 1;\n  return 0;\n}",
    "c_func_re_decompile": " int func0(float x, float y, float z) {\n  if (fabs(x*x + y*y - z*z) < 0.0000001) return 1;\n  if (fabs(x*x - y*y + z*z) < 0.0000001) return 1;\n  if (fabs(x*x + z*z - y*y) < 0.0000001) return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int n, char *s) {\n    int i;\n    int nums[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *strs[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    s[0] = '\\0';\n    for (i = 0; n != 0; i++) {\n        while (n >= nums[i]) {\n            s = strcat(s, strs[i]);\n            n -= nums[i];\n        }\n    }\n}",
    "c_func_re_decompile": " void func0(int n, char *s) {\n    int i;\n    int nums[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *strs[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    s[0] = '\\0';\n    for (i = 0; n != 0; i++) {\n        while (n >= nums[i]) {\n            s = strcat(s, strs[i]);\n            n -= nums[i];\n        }\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int num, char *str)\n{\n    int i;\n    int radix[13] = {10000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *roman[13] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    *str = '\\0';\n    for (i = 0; num != 0; i++) {\n        while (num >= radix[i]) {\n            str = strcat(str, roman[i]);\n            num -= radix[i];\n        }\n    }\n}",
    "c_func_re_decompile": " void func0(int num, char *str)\n{\n    int i;\n    int radix[13] = {10000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *roman[13] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    *str = '\\0';\n    for (i = 0; num != 0; i++) {\n        while (num >= radix[i]) {\n            str = strcat(str, roman[i]);\n            num -= radix[i];\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
    "c_func_decompile": " char * func0(char **strs, int n) {\n    char *res = \"\";\n    int max = 0, i, j, len;\n    for (i = 0; i < n; i++) {\n        char tmp[128] = {0};\n        for (j = 0, len = 0; strs[i][j]; j++) {\n            if (strchr(tmp, strs[i][j]) == NULL) {\n                len = strlen(tmp);\n                tmp[len] = strs[i][j];\n                tmp[len + 1] = '\\0';\n                len++;\n            }\n        }\n        if (len > max || (len == max && strcmp(strs[i], res) < 0)) {\n            res = strs[i];\n            max = len;\n        }\n    }\n    return res;\n}",
    "c_func_re_decompile": " char * func0(char **strs, int n) {\n    char *res = \"\";\n    int max = 0, i, j, len;\n    for (i = 0; i < n; i++) {\n        char tmp[128] = {0};\n        for (j = 0, len = 0; strs[i][j]; j++) {\n            if (strchr(tmp, strs[i][j]) == NULL) {\n                len = strlen(tmp);\n                tmp[len] = strs[i][j];\n                tmp[len + 1] = '\\0';\n                len++;\n            }\n        }\n        if (len > max || (len == max && strcmp(strs[i], res) < 0)) {\n            res = strs[i];\n            max = len;\n        }\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
    "c_func_decompile": " char * func0(char **argv, int argc) {\n    char *result = \"\";\n    int i, j, k, len, max = 0;\n    char *p, *q;\n    char buf[200];\n    for (i = 0; i < argc; i++) {\n        buf[0] = '\\0';\n        for (p = argv[i], j = 0; *p != '\\0'; p++) {\n            if (strchr(buf, *p) == NULL) {\n                len = strlen(buf);\n                buf[len] = *p;\n                buf[len + 1] = '\\0';\n                j++;\n            }\n        }\n        if (j > max || (j == max && strcmp(argv[i], result) < 0)) {\n            max = j;\n            result = argv[i];\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": " char * func0(char **argv, int argc) {\n    char *result = \"\";\n    int i, j, k, len, max = 0;\n    char *p, *q;\n    char buf[200];\n    for (i = 0; i < argc; i++) {\n        buf[0] = '\\0';\n        for (p = argv[i], j = 0; *p != '\\0'; p++) {\n            if (strchr(buf, *p) == NULL) {\n                len = strlen(buf);\n                buf[len] = *p;\n                buf[len + 1] = '\\0';\n                j++;\n            }\n        }\n        if (j > max || (j == max && strcmp(argv[i], result) < 0)) {\n            max = j;\n            result = argv[i];\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
    "c_func_decompile": " char * func0(char ** strs, int strsSize) {\n    int i, j, k, len, max = 0;\n    char * res = \"\", * p, * q;\n    char tmp[128] = {0};\n    for (i = 0; i < strsSize; i++) {\n        p = strs[i];\n        len = 0;\n        for (j = 0; p[j]; j++) {\n            if (strchr(tmp, p[j]) == NULL) {\n                tmp[strlen(tmp) + 1] = p[j];\n                tmp[strlen(tmp) + 1] = '\\0';\n                len++;\n            }\n        }\n        if (len > max) {\n            max = len;\n            res = p;\n        } else if (len == max) {\n            if (strcmp(p, res) < 0) {\n                res = p;\n            }\n        }\n    }\n    return res;\n}",
    "c_func_re_decompile": " char * func0(char ** strs, int strsSize) {\n    int i, j, k, len, max = 0;\n    char * res = \"\", * p, * q;\n    char tmp[128] = {0};\n    for (i = 0; i < strsSize; i++) {\n        p = strs[i];\n        len = 0;\n        for (j = 0; p[j]; j++) {\n            if (strchr(tmp, p[j]) == NULL) {\n                tmp[strlen(tmp) + 1] = p[j];\n                tmp[strlen(tmp) + 1] = '\\0';\n                len++;\n            }\n        }\n        if (len > max) {\n            max = len;\n            res = p;\n        } else if (len == max) {\n            if (strcmp(p, res) < 0) {\n                res = p;\n            }\n        }\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
    "c_func_decompile": " char * func0(char ** argv, int argc) {\n    int i, j, k, max = 0;\n    char * result = \"\";\n    for (i = 0; i < argc; i++) {\n        char * p = argv[i];\n        char * q = \"\";\n        char chars[256] = {0};\n        for (j = 0; p[j] != '\\0'; j++) {\n            if (strchr(chars, p[j]) == NULL) {\n                k = strlen(chars);\n                chars[k] = p[j];\n                chars[k + 1] = '\\0';\n                q = p;\n            }\n        }\n        if (j > max) {\n            max = j;\n            result = q;\n        } else if (j == max) {\n            if (strcmp(q, result) < 0) {\n                result = q;\n            }\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": " char * func0(char ** argv, int argc) {\n    int i, j, k, max = 0;\n    char * result = \"\";\n    for (i = 0; i < argc; i++) {\n        char * p = argv[i];\n        char * q = \"\";\n        char chars[256] = {0};\n        for (j = 0; p[j] != '\\0'; j++) {\n            if (strchr(chars, p[j]) == NULL) {\n                k = strlen(chars);\n                chars[k] = p[j];\n                chars[k + 1] = '\\0';\n                q = p;\n            }\n        }\n        if (j > max) {\n            max = j;\n            result = q;\n        } else if (j == max) {\n            if (strcmp(q, result) < 0) {\n                result = q;\n            }\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *s) {\n  unsigned int i, j, c;\n  char *p;\n  if (!*s)\n    return strdup(\"\");\n  c = 0xFFFFFFFF;\n  for (i = 0; s[i]; i++) {\n    unsigned char ch = s[i];\n    c = c ^ ch;\n    for (j = 0; j < 8; j++) {\n      if (c & 1)\n        c = (c >> 1) ^ 0xEDB88320;\n      else\n        c = c >> 1;\n    }\n  }\n  c = ~c;\n  p = (char *)malloc(9);\n  if (p)\n    sprintf(p, \"%08X\", c);\n  return p;\n}",
    "c_func_re_decompile": " char *func0(char *s) {\n  unsigned int i, j, c;\n  char *p;\n  if (!*s)\n    return strdup(\"\");\n  c = 0xFFFFFFFF;\n  for (i = 0; s[i]; i++) {\n    unsigned char ch = s[i];\n    c = c ^ ch;\n    for (j = 0; j < 8; j++) {\n      if (c & 1)\n        c = (c >> 1) ^ 0xEDB88320;\n      else\n        c = c >> 1;\n    }\n  }\n  c = ~c;\n  p = (char *)malloc(9);\n  if (p)\n    sprintf(p, \"%08X\", c);\n  return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int a, int b, int *c, int *d) {\n    *d = 0;\n    while (a < b) {\n        if (a < 10 && a % 2 == 0) {\n            c[*d] = a;\n            (*d)++;\n        }\n        a++;\n    }\n}",
    "c_func_re_decompile": " void func0(int a, int b, int *c, int *d) {\n    *d = 0;\n    while (a < b) {\n        if (a < 10 && a % 2 == 0) {\n            c[(*d)++] = a;\n        }\n        a++;\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int a, int b, int *c, int *d) {\n    int i, t;\n    *d = 0;\n    if (b < a) {\n        t = a;\n        a = b;\n        b = t;\n    }\n    for (i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            c[(*d)++] = i;\n        }\n    }\n}",
    "c_func_re_decompile": " void func0(int a, int b, int *c, int *d) {\n    int i, t;\n    *d = 0;\n    if (b < a) {\n        t = a;\n        a = b;\n        b = t;\n    }\n    for (i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            c[(*d)++] = i;\n        }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
    "c_func_decompile": " void func0(int a, int b, int *c, int *d) {\n    *d = 0;\n    if (a > b) {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            c[*d] = i;\n            (*d)++;\n        }\n    }\n}",
    "c_func_re_decompile": " void func0(int a, int b, int *c, int *d) {\n    *d = 0;\n    if (a > b) {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            c[(*d)++] = i;\n        }\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int a, int b, int *c, int *d) {\n    *d = 0;\n    if (a > b) {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    if (b > 9) {\n        b = 9;\n    }\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0) {\n            c[*d] = i;\n            (*d)++;\n        }\n    }\n}",
    "c_func_re_decompile": " void func0(int a, int b, int *c, int *d) {\n    *d = 0;\n    if (a > b) {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    if (b > 9) {\n        b = 9;\n    }\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0) {\n            c[*d] = i;\n            (*d)++;\n        }\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
    "c_func_decompile": " char *func0(char *s) {\n  int i, j, k, l;\n  char c;\n  l = strlen(s);\n  for (i = 0, j = 0; i < l; i++) {\n    c = s[i];\n    if (((*(*(__ctype_b_loc()) + 256 + (unsigned char)(c)) & 2048) != 0)) {\n      if ((*(*(__ctype_b_loc()) + 256 + (unsigned char)(c)) & 512) != 0) {\n        s[i] = (*(__ctype_tolower_loc()) + 256 + (unsigned char)(c))[0];\n      } else if ((*(*(__ctype_b_loc()) + 256 + (unsigned char)(c)) & 256) != 0) {\n        s[i] = (*(__ctype_toupper_loc()) + 256 + (unsigned char)(c))[0];\n      }\n      j++;\n    }\n  }\n  if (j == l) {\n    for (i = 0, j = l - 1; i < j; i++, j--) {\n      c = s[i];\n      s[i] = s[j];\n      s[j] = c;\n    }\n  }\n  return s;\n}",
    "c_func_re_decompile": " char *func0(char *s) {\n  int i, j, k, l;\n  char c;\n  l = strlen(s);\n  for (i = 0, j = 0; i < l; i++) {\n    c = s[i];\n    if (((*(*(__ctype_b_loc()) + 256 + (unsigned char)(c)) & 1024) != 0)) {\n      if ((*(*(__ctype_b_loc()) + 256 + (unsigned char)(c)) & 512) != 0) {\n        s[i] = (*(__ctype_tolower_loc()) + 256 + (unsigned char)(c))[0];\n      } else if ((*(*(__ctype_b_loc()) + 256 + (unsigned char)(c)) & 256) != 0) {\n        s[i] = (*(__ctype_toupper_loc()) + 256 + (unsigned char)(c))[0];\n      }\n      j++;\n    }\n  }\n  if (j == l) {\n    for (i = 0, j = l - 1; i < j; i++, j--) {\n      c = s[i];\n      s[i] = s[j];\n      s[j] = c;\n    }\n  }\n  return s;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n  unsigned int c = 0;\n  unsigned int i = 0;\n  char *ret;\n  while (str[i])\n    {\n      c ^= str[i];\n      for (int j = 0; j < 8; j++)\n {\n   c = (c & 1) ? (c >> 1) ^ 0xEDB88320 : c >> 1;\n }\n      i++;\n    }\n  ret = malloc(9);\n  if (ret == NULL)\n    return (strdup(\"000000000\"));\n  __sprintf_chk(ret, 1, 9, \"%08X\", ~c);\n  return (ret);\n}",
    "c_func_re_decompile": " char *func0(char *str)\n{\n  unsigned int c = 0;\n  unsigned int i = 0;\n  char *ret;\n  while (str[i])\n    {\n      c ^= str[i];\n      for (int j = 0; j < 8; j++)\n {\n   c = (c & 1) ? (c >> 1) ^ 0xEDB88320 : c >> 1;\n }\n      i++;\n    }\n  ret = malloc(9);\n  if (ret == NULL)\n    return (strdup(\"000000000\"));\n  __sprintf_chk(ret, 1, 9, \"%08X\", ~c);\n  return (ret);\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *s) {\n  unsigned int i, c;\n  char *p;\n  if (!*s)\n    return strdup(\"\");\n  c = 0xFFFFFFFF;\n  for (i = 0; s[i]; i++)\n    c = (c ^ s[i]) & 0xFF ? c >> 1 : (c ^ 0xEDB88320) >> 1;\n  c = ~c;\n  p = malloc(9);\n  if (p)\n    __sprintf_chk(p, 1, 9, \"%08X\", c);\n  return p;\n}",
    "c_func_re_decompile": " char *func0(char *s) {\n  unsigned int i, c;\n  char *p;\n  if (!*s)\n    return strdup(\"\");\n  c = 0xFFFFFFFF;\n  for (i = 0; s[i]; i++) {\n    c ^= s[i];\n    for (i = 8; i; i--)\n      c = c & 1 ? (c >> 1) ^ 0xEDB88320 : c >> 1;\n  }\n  c = ~c;\n  p = malloc(9);\n  if (p)\n    __sprintf_chk(p, 1, 9, \"%08X\", c);\n  return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *s) {\n  unsigned int i, c;\n  char *p;\n  for (c = ~0, i = 0; s[i]; i++)\n    for (c ^= s[i]; c; c >>= 1)\n      c = c & 1 ? c ^ 0xedb88320 : c;\n  p = malloc(9);\n  if (!p)\n    p = strdup(\"(null)\");\n  else\n    __sprintf_chk(p, 1, 9, \"%x\", ~c);\n  return p;\n}",
    "c_func_re_decompile": " char *func0(char *s) {\n  unsigned int i, c;\n  char *p;\n  for (c = ~0, i = 0; s[i]; i++)\n    for (c ^= s[i]; c; c >>= 1)\n      c = c & 1 ? c ^ 0xedb88320 : c;\n  p = malloc(9);\n  if (!p)\n    p = strdup(\"(null)\");\n  else\n    __sprintf_chk(p, 1, 9, \"%x\", ~c);\n  return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
    "c_func_decompile": " int func0(char **a, int *b, int c, int d) {\n    int *e = malloc(d * sizeof(int));\n    int *f = malloc(d * sizeof(int));\n    int g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    for (i = 0; i < d; i++)\n        f[i] = i;\n    for (i = 0; i < c; i++) {\n        if (a[i][0] == '*' && a[i][1] == '*' && a[i][2] == '\\0') {\n            g = f[1];\n            h = f[g];\n            while (g != h) {\n                f[1] = h;\n                h = f[h];\n            }\n            j = f[1];\n            k = f[j];\n            while (j != k) {\n                f[j] = k;\n                j = k;\n                k = f[j];\n            }\n            e[j] = (int)pow((double)e[j], (double)e[k]);\n            f[1] = j;\n        }\n    }\n    for (i = 0; i < c; i++) {\n        if (a[i][0] == '*' && a[i][1] == '\\0') {\n            g = f[1];\n            h = f[g];\n            while (g != h) {\n                f[1] = h;\n                h = f[h];\n            }\n            j = f[1];\n            k = f[j];\n            while (j != k) {\n                f[j] = k;\n                j = k;\n                k = f[j];\n            }\n            if (a[i][0] == '*' - 42)\n                e[j] *= e[k];\n            else if (a[i][0] == '/' && a[i][1] == '/' && a[i][2] == '\\0')\n                e[j] /= e[k];\n            f[1] = j;\n        }\n    }\n    for (i = 0; i < c; i++) {\n        if (a[i][0] == '+' && a[i][1] == '\\0') {\n            g = f[1];\n            h = f[g];\n            while (g != h) {\n                f[1] = h;\n                h = f[h];\n            }\n            j = f[1];\n            k = f[j];\n            while (j != k) {\n                f[j] = k;\n                j = k;\n                k = f[j];\n            }\n            if (a[i][0] == '+' - 42)\n                e[j] += e[k];\n            else\n                e[j] -= e[k];\n            f[1] = j;\n        }\n    }\n    g = e[1];\n    free(e);\n    free(f);\n    return g;\n}",
    "c_func_re_decompile": " int func0(char **a, int *b, int c, int d) {\n    int *e = malloc(d * sizeof(int));\n    int *f = malloc(d * sizeof(int));\n    int g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    for (i = 0; i < d; i++)\n        f[i] = i;\n    for (i = 0; i < d; i++)\n        e[i] = b[i];\n    for (i = 0; i < c; i++) {\n        if (a[i][0] == '*' && a[i][1] == '*' && a[i][2] == '\\0') {\n            g = f[1];\n            h = f[g];\n            while (g != h) {\n                f[1] = h;\n                h = f[h];\n            }\n            j = f[1];\n            k = f[j];\n            while (j != k) {\n                f[j] = k;\n                j = k;\n                k = f[j];\n            }\n            e[j] = (int)pow((double)e[j], (double)e[k]);\n            f[1] = j;\n        }\n    }\n    for (i = 0; i < c; i++) {\n        if (a[i][0] == '*' && a[i][1] == '\\0') {\n            g = f[1];\n            h = f[g];\n            while (g != h) {\n                f[1] = h;\n                h = f[h];\n            }\n            j = f[1];\n            k = f[j];\n            while (j != k) {\n                f[j] = k;\n                j = k;\n                k = f[j];\n            }\n            if (a[i][0] == '*' - 42)\n                e[j] *= e[k];\n            else if (a[i][0] == '/' && a[i][1] == '/' && a[i][2] == '\\0')\n                e[j] /= e[k];\n            f[1] = j;\n        }\n    }\n    for (i = 0; i < c; i++) {\n        if (a[i][0] == '+' && a[i][1] == '\\0') {\n            g = f[1];\n            h = f[g];\n            while (g != h) {\n                f[1] = h;\n                h = f[h];\n            }\n            j = f[1];\n            k = f[j];\n            while (j != k) {\n                f[j] = k;\n                j = k;\n                k = f[j];\n            }\n            if (a[i][0] == '+' - 42)\n                e[j] += e[k];\n            else\n                e[j] -= e[k];\n            f[1] = j;\n        }\n    }\n    g = e[1];\n    free(e);\n    free(f);\n    return g;\n}"
  }
]