[
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, count = 0;\n    bool flag[256] = {false};\n\n    for (i = 0; str[i] != '\\0'; i++) {\n        char c = tolower(str[i]);\n        if (!flag[c] && (__ctype_b_loc()[(unsigned char)c] & (0x0400))) {\n            flag[c] = true;\n            count++;\n        }\n    }\n\n    return count;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(char *s, int *n)\n{\n    static int a[100];\n    int i = 0;\n    char *p, *q;\n    while (*s)\n    {\n        if (((__ctype_b_loc ()->_Bits[((unsigned char)(*s))] & (0200)) != 0) || *s == '-')\n        {\n            long t = strtol(s, &p, 10);\n            if (p == s)\n                break;\n            if (*p == ',' || *p == '\\0')\n                a[i++] = t;\n            else\n                p++;\n            while (*p && *p != ',')\n                p++;\n            s = p;\n        }\n        else\n            s++;\n    }\n    *n = i;\n    return a;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(char *s, int *n)\n{\n    static int a[100];\n    int i = 0;\n    char *p, *q;\n    while (*s)\n    {\n        if (((__ctype_b_loc ()->_Bits[((unsigned char)(*s))] & (0200)) != 0) || *s == '-')\n        {\n            long t = strtol(s, &p, 10);\n            if (p == s)\n                break;\n            if (*p == ',' || *p == '\\0')\n                a[i++] = t;\n            else\n                p++;\n            while (*p && *p != ',')\n                p++;\n            s = p;\n        }\n        else\n            s++;\n    }\n    *n = i;\n    return a;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(char *s, int *n)\n{\n  static int a[100];\n  int i = 0;\n  char *p, *q;\n  int x;\n\n  p = s;\n  while (*p) {\n    while (!((*p) && (((*(const unsigned short *)&((*(const mbstate_t *)(__ctype_b_loc))+1)[(unsigned char)(*p)]) & 0x0800) || (*p) == '-' ))\n\n\n\n\n\n\n\n    )\n      p++;\n    if (!*p)\n      break;\n    x = strtol(p, &q, 10);\n    if (q != p) {\n      if (*q == ',' || !*q)\n a[i++] = x;\n      else\n while (*q && *q != ',')\n   q++;\n    }\n    p = q;\n  }\n  *n = i;\n  return a;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(char *s, int *n)\n{\n    static int a[100];\n    int i = 0;\n    char *p, *q;\n    int x;\n    while (*s) {\n        if (!((__ctype_b_loc ()->*((int *) (((int *) (& __ctype_b_loc ()->_B))[1] + 1)))[(unsigned char) *s] & (0200))) {\n            if (*s == '-') {\n                s++;\n                if (!*s)\n                    break;\n            }\n        }\n        p = s;\n        x = strtol(s, &q, 10);\n        if (p == q) {\n            while (*q && *q != ',')\n                q++;\n        }\n        if (*q == ',')\n            q++;\n        if (*q)\n            s = q;\n        else\n            s = q;\n        a[i++] = x;\n    }\n    *n = i;\n    return a;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
    "c_func_decompile": "\nfloat func0(float x)\n{\n return x - (int)x;\n}",
    "c_func_re_decompile": "float func0(float x)\n{\n return x - (int)x;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
    "c_func_decompile": "\nfloat func0(float x)\n{\n    int i = (int)x;\n    return x - i;\n}",
    "c_func_re_decompile": "float func0(float x)\n{\n    int i = (int)x;\n    return x - i;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
    "c_func_decompile": "\nfloat func0(float x)\n{\n    int i = (int)x;\n    return x - i;\n}",
    "c_func_re_decompile": "float func0(float x)\n{\n    int i = (int)x;\n    return x - i;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
    "c_func_decompile": "\nfloat func0(float x)\n{\n    int i = (int)x;\n    return x - i;\n}",
    "c_func_re_decompile": "float func0(float x)\n{\n    int i = (int)x;\n    return x - i;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n  int i, sum;\n\n  sum = 0;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    if (sum < 0)\n      return 1;\n  }\n  return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n  int i, sum;\n\n  sum = 0;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    if (sum < 0)\n      return 1;\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum;\n\n    sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0)\n            return 1;\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum;\n\n    sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0)\n            return 1;\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum;\n\n    sum = a[0];\n    for (i = 0; i < n; i++) {\n        if (sum < 0)\n            return 1;\n        sum += a[i];\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum;\n\n    sum = a[0];\n    for (i = 0; i < n; i++) {\n        if (sum < 0)\n            return 1;\n        sum += a[i];\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum;\n\n    sum = a[0];\n    for (i = 0; i < n; i++) {\n        if (sum < 0)\n            return 1;\n        sum += a[i];\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum;\n\n    sum = a[0];\n    for (i = 0; i < n; i++) {\n        if (sum < 0)\n            return 1;\n        sum += a[i];\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
    "c_func_decompile": "\nint func0(float *x, int n, float eps)\n{\n int i, j;\n for (i = 0; i < n; i++)\n  for (j = i + 1; j < n; j++)\n   if (fabs(x[i] - x[j]) < eps)\n    return 1;\n return 0;\n}",
    "c_func_re_decompile": "int func0(float *x, int n, float eps)\n{\n int i, j;\n for (i = 0; i < n; i++)\n  for (j = i + 1; j < n; j++)\n   if (fabs(x[i] - x[j]) < eps)\n    return 1;\n return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
    "c_func_decompile": "\nint func0(float *x, int n, float eps)\n{\n int i, j;\n for (i = 0; i < n; i++)\n  for (j = i + 1; j < n; j++)\n   if (fabs(x[i] - x[j]) < eps)\n    return 1;\n return 0;\n}",
    "c_func_re_decompile": "int func0(float *x, int n, float eps)\n{\n int i, j;\n for (i = 0; i < n; i++)\n  for (j = i + 1; j < n; j++)\n   if (fabs(x[i] - x[j]) < eps)\n    return 1;\n return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
    "c_func_decompile": "\nint func0(float *x, int n, float eps)\n{\n int i, j;\n float diff;\n\n for (i = 0; i < n; i++) {\n  for (j = i + 1; j < n; j++) {\n   diff = x[i] - x[j];\n   if (diff < 0)\n    diff = -diff;\n   if (diff < eps)\n    return 1;\n  }\n }\n return 0;\n}",
    "c_func_re_decompile": "int func0(float *x, int n, float eps)\n{\n int i, j;\n float diff;\n\n for (i = 0; i < n; i++) {\n  for (j = i + 1; j < n; j++) {\n   diff = x[i] - x[j];\n   if (diff < 0)\n    diff = -diff;\n   if (diff < eps)\n    return 1;\n  }\n }\n return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
    "c_func_decompile": "\nfloat func0(float *x, int n)\n{\n    int i;\n    float sum = 0.0;\n    float mean;\n\n    for (i = 0; i < n; i++)\n        sum += x[i];\n    mean = sum / n;\n\n    sum = 0.0;\n    for (i = 0; i < n; i++)\n        sum += fabs(x[i] - mean);\n    sum /= n;\n\n    return sum;\n}",
    "c_func_re_decompile": "float func0(float *x, int n)\n{\n    int i;\n    float sum = 0.0;\n    float mean;\n\n    for (i = 0; i < n; i++)\n        sum += x[i];\n    mean = sum / n;\n\n    sum = 0.0;\n    for (i = 0; i < n; i++)\n        sum += fabs(x[i] - mean);\n    sum /= n;\n\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
    "c_func_decompile": "\nfloat func0(float *x, int n)\n{\n    int i = 0;\n    float sum = 0.0;\n    float mean, sum2;\n\n    for (i = 0; i < n; i++)\n        sum += x[i];\n    mean = sum / (float)n;\n\n    sum2 = 0.0;\n    for (i = 0; i < n; i++)\n        sum2 += fabs(x[i] - mean);\n\n    return sum2 / (float)n;\n}",
    "c_func_re_decompile": "float func0(float *x, int n)\n{\n    int i = 0;\n    float sum = 0.0;\n    float mean, sum2;\n\n    for (i = 0; i < n; i++)\n        sum += x[i];\n    mean = sum / (float)n;\n\n    sum2 = 0.0;\n    for (i = 0; i < n; i++)\n        sum2 += fabs(x[i] - mean);\n\n    return sum2 / (float)n;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    char *str1, *str2, *str3, *str4, *str5, *str6, *str7, *str8, *str9, *str10, *str11, *str12, *str13, *str14, *str15, *str16, *str17, *str18, *str19, *str20, *str21, *str22, *str23, *str24, *str25, *str26, *str27, *str28, *str29, *str30, *str31, *str32, *str33, *str34, *str35, *str36, *str37, *str38, *str39, *str40, *str41, *str42, *str43, *str44, *str45, *str46, *str47, *str48, *str49, *str50, *str51, *str52, *str53, *str54, *str55, *str56, *str57, *str58, *str59, *str60, *str61, *str62, *str63, *str64, *str65, *str66, *str67, *str68, *str69, *str70, *str71, *str72, *str73, *str74, *str75, *str76, *str77, *str78, *str79, *str80, *str81, *str82, *str83, *str84, *str85, *str86, *str87, *str88, *str89, *str90, *str91, *str92, *str93, *str94, *str95, *str96, *str97, *str98, *str99, *str100, *str101, *str102, *str103, *str104, *str105, *str106, *str107, *str108, *str109, *str110, *str111, *str112, *str113, *str114, *str115, *str116, *str117, *str118, *str119, *str120, *str121, *str122, *str123, *str124, *str125, *str126, *str127, *str128, *str129, *str130, *str131, *str132, *str133, *str134, *str135, *str136, *str137, *str138, *str139, *str140, *str141, *str142, *str143, *str144, *str145, *str146, *str147, *str148, *str149, *str150, *str151, *str152, *str153, *str154, *str155, *str156, *str157, *str158, *str159, *str160, *str161, *str162, *str163, *str164, *str165, *str166, *str167, *str168, *str169, *str170, *str171, *str172, *str173, *str174, *str175, *str176, *str177, *str178, *str179, *str18",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
    "c_func_decompile": " float func0(float *x, int n)\n{\n    int i;\n    float sum = 0.0;\n    float mean = 0.0;\n    float result = 0.0;\n\n    for (i = 0; i < n; i++)\n    {\n        sum += x[i];\n    }\n    mean = sum / n;\n\n    for (i = 0; i < n; i++)\n    {\n        result += fabs(x[i] - mean);\n    }\n    result = result / n;\n\n    return result;\n}",
    "c_func_re_decompile": "float func0(float *x, int n)\n{\n    int i;\n    float sum = 0.0;\n    float mean = 0.0;\n    float result = 0.0;\n\n    for (i = 0; i < n; i++)\n    {\n        sum += x[i];\n    }\n    mean = sum / n;\n\n    for (i = 0; i < n; i++)\n    {\n        result += fabs(x[i] - mean);\n    }\n    result = result / n;\n\n    return result;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
    "c_func_decompile": " float func0(float *x, int n)\n{\n    int i;\n    float sum = 0.0;\n    float mean = 0.0;\n    float sum_diff = 0.0;\n    float diff = 0.0;\n\n    for (i = 0; i < n; i++)\n        mean += x[i];\n    mean /= n;\n\n    for (i = 0; i < n; i++) {\n        diff = x[i] - mean;\n        sum_diff += fabs(diff);\n    }\n    sum_diff /= n;\n\n    return sum_diff;\n}",
    "c_func_re_decompile": "float func0(float *x, int n)\n{\n    int i;\n    float sum = 0.0;\n    float mean = 0.0;\n    float sum_diff = 0.0;\n    float diff = 0.0;\n\n    for (i = 0; i < n; i++)\n        mean += x[i];\n    mean /= n;\n\n    for (i = 0; i < n; i++) {\n        diff = x[i] - mean;\n        sum_diff += diff * diff;\n    }\n    sum_diff /= n;\n\n    return sum_diff;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n    int i, sum, product;\n\n    sum = 0;\n    product = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        product *= a[i];\n    }\n    b[0] = sum;\n    b[1] = product;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n    int i, sum, product;\n\n    sum = 0;\n    product = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        product *= a[i];\n    }\n    b[0] = sum;\n    b[1] = product;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int x, int *m)\n{\n    int i, j;\n    *m = n > 0 ? 2 * n - 1 : 0;\n    int *b = (int *)malloc(*m * sizeof(int));\n    if (n > 0)\n    {\n        b[0] = a[0];\n        for (i = 1, j = 1; i < n; i++)\n        {\n            b[j++] = x;\n            b[j++] = a[i];\n        }\n    }\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n, int x, int *m)\n{\n    int i, j;\n    *m = n > 0 ? 2 * n - 1 : 0;\n    int *b = (int *)malloc(*m * sizeof(int));\n    if (n > 0)\n    {\n        b[0] = a[0];\n        for (i = 1, j = 1; i < n; i++)\n        {\n            b[j++] = x;\n            b[j++] = a[i];\n        }\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n    int i;\n    b[0] = 0;\n    b[1] = 1;\n    for (i = 0; i < n; i++) {\n        b[0] += a[i];\n        b[1] *= a[i];\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n    int i;\n    b[0] = 0;\n    b[1] = 1;\n    for (i = 0; i < n; i++) {\n        b[0] += a[i];\n        b[1] *= a[i];\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int x, int *m)\n{\n    int i;\n    int *b;\n\n    if (n <= 0) {\n        *m = 0;\n        b = (int *)malloc(0);\n    } else {\n        *m = n * 2 - 1;\n        b = (int *)malloc(sizeof(int) * *m);\n        b[0] = a[0];\n        for (i = 1; i < n; i++) {\n            b[i * 2 - 1] = x;\n            b[i * 2] = a[i];\n        }\n    }\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n, int x, int *m)\n{\n    int i;\n    int *b;\n\n    if (n <= 0) {\n        *m = 0;\n        b = (int *)malloc(0);\n    } else {\n        *m = n * 2 - 1;\n        b = (int *)malloc(sizeof(int) * *m);\n        b[0] = a[0];\n        for (i = 1; i < n; i++) {\n            b[i * 2 - 1] = x;\n            b[i * 2] = a[i];\n        }\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, float f, int* m)\n{\n    int i;\n    int* b;\n\n    *m = n * 2 - 1;\n    b = (int*)malloc(*m * sizeof(int));\n    b[0] = a[0];\n    for (i = 1; i < n; i++) {\n        b[i * 2] = a[i];\n        b[i * 2 + 1] = f;\n    }\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int b, int* m)\n{\n    int i;\n    int* c;\n\n    *m = n * 2 - 1;\n    c = (int*)malloc(*m * sizeof(int));\n    c[0] = a[0];\n    for (i = 1; i < n; i++) {\n        c[i * 2] = a[i];\n        c[i * 2 + 1] = b;\n    }\n    return c;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n  int i, sum, prod;\n\n  sum = 0;\n  prod = 1;\n  for (i=0; i<n; i++) {\n    sum = sum + a[i];\n    prod = prod * a[i];\n  }\n  b[0] = sum;\n  b[1] = prod;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n  int i, sum, prod;\n\n  sum = 0;\n  prod = 1;\n  for (i=0; i<n; i++) {\n    sum = sum + a[i];\n    prod = prod * a[i];\n  }\n  b[0] = sum;\n  b[1] = prod;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
    "c_func_decompile": "\nint **func0(int *a, int n, int b, int *m)\n{\n    int i;\n    int **p;\n\n    if (n <= 0)\n    {\n        *m = 0;\n        p = NULL;\n    }\n    else\n    {\n        *m = n * 2 - 1;\n        p = (int **)malloc(*m * sizeof(int *));\n        p[0] = a;\n        for (i = 1; i < n; i++)\n        {\n            p[i] = a + i;\n            *(p[i] - 1) = b;\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": "int **func0(int *a, int n, int b, int *m)\n{\n    int i;\n    int **p;\n\n    if (n <= 0)\n    {\n        *m = 0;\n        p = NULL;\n    }\n    else\n    {\n        *m = n * 2 - 1;\n        p = (int **)malloc(*m * sizeof(int *));\n        p[0] = a;\n        for (i = 1; i < n; i++)\n        {\n            p[i] = a + i;\n            *(p[i] - 1) = b;\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **\nfunc0(char **argv, int argc, char *str, int *n)\n{\n  char **ret;\n  int i, j;\n\n  ret = NULL;\n  for (i = 0, j = 0; j < argc; j++)\n    if (strstr(argv[j], str))\n      {\n ret = realloc(ret, (i + 1) * sizeof(char *));\n ret[i] = argv[j];\n i++;\n      }\n  *n = i;\n  return ret;\n}",
    "c_func_re_decompile": "char **\nfunc0(char **argv, int argc, char *str, int *n)\n{\n  char **ret;\n  int i, j;\n\n  ret = NULL;\n  for (i = 0, j = 0; j < argc; j++)\n    if (strstr(argv[j], str))\n      {\n ret = realloc(ret, (i + 1) * sizeof(char *));\n ret[i] = argv[j];\n i++;\n      }\n  *n = i;\n  return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *r)\n{\n    int i;\n    int sum = 0;\n    int product = 1;\n\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        product *= a[i];\n    }\n\n    r[0] = sum;\n    r[1] = product;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *r)\n{\n    int i;\n    int sum = 0;\n    int product = 1;\n\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        product *= a[i];\n    }\n\n    r[0] = sum;\n    r[1] = product;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char **argv, int argc, char *str, int *count)\n{\n    int i, j;\n    char **ret = NULL;\n    j = 0;\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], str) != NULL) {\n            ret = realloc(ret, sizeof(char *) * (j + 1));\n            ret[j++] = argv[i];\n        }\n    }\n    *count = j;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char **argv, int argc, char *str, int *count)\n{\n    int i, j;\n    char **ret = NULL;\n    j = 0;\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], str) != NULL) {\n            ret = realloc(ret, sizeof(char *) * (j + 1));\n            ret[j++] = argv[i];\n        }\n    }\n    *count = j;\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char **argv, int argc, char *str, int *n)\n{\n  int i;\n  int j;\n  char **tab;\n\n  i = 0;\n  j = 0;\n  tab = NULL;\n  while (i < argc)\n    {\n      if (strstr(argv[i], str) != NULL)\n {\n   j++;\n   tab = realloc(tab, j * sizeof(char *));\n   tab[j - 1] = argv[i];\n }\n      i++;\n    }\n  *n = j;\n  return (tab);\n}",
    "c_func_re_decompile": "char **func0(char **argv, int argc, char *str, int *n)\n{\n  int i;\n  int j;\n  char **tab;\n\n  i = 0;\n  j = 0;\n  tab = NULL;\n  while (i < argc)\n    {\n      if (strstr(argv[i], str) != NULL)\n {\n   j++;\n   tab = realloc(tab, j * sizeof(char *));\n   tab[j - 1] = argv[i];\n }\n      i++;\n    }\n  *n = j;\n  return (tab);\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n)\n{\n    int i;\n    int *b;\n\n    if (n <= 0)\n        return NULL;\n\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n\n    b[0] = a[0];\n    for (i = 1; i < n; i++)\n        b[i] = (a[i] > b[i - 1]) ? a[i] : b[i - 1];\n\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n)\n{\n    int i;\n    int *b;\n\n    if (n <= 0)\n        return NULL;\n\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n\n    b[0] = a[0];\n    for (i = 1; i < n; i++)\n        b[i] = (a[i] > b[i - 1]) ? a[i] : b[i - 1];\n\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char **argv, int argc, char *str, int *count)\n{\n  int i;\n  int j;\n  char **tab;\n\n  i = 0;\n  j = 0;\n  tab = NULL;\n  while (i < argc)\n    {\n      if (strstr(argv[i], str) != NULL)\n {\n   tab = realloc(tab, (j + 1) * sizeof(char *));\n   tab[j] = argv[i];\n   j++;\n }\n      i++;\n    }\n  *count = j;\n  return (tab);\n}",
    "c_func_re_decompile": "char **func0(char **argv, int argc, char *str, int *count)\n{\n  int i;\n  int j;\n  char **tab;\n\n  i = 0;\n  j = 0;\n  tab = NULL;\n  while (i < argc)\n    {\n      if (strstr(argv[i], str) != NULL)\n {\n   tab = realloc(tab, (j + 1) * sizeof(char *));\n   tab[j] = argv[i];\n   j++;\n }\n      i++;\n    }\n  *count = j;\n  return (tab);\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
    "c_func_decompile": "\nint* func0(char* s, int* returnSize)\n{\n    int* ret = NULL;\n    int ret_size = 0;\n    int max_depth = 0;\n    int depth = 0;\n    int i = 0;\n    while (s[i])\n    {\n        if (s[i] == '(')\n        {\n            depth++;\n            if (depth > max_depth)\n                max_depth = depth;\n        }\n        else if (s[i] == ')')\n        {\n            depth--;\n            if (depth == 0)\n            {\n                ret_size++;\n                ret = realloc(ret, ret_size * sizeof(int));\n                ret[ret_size - 1] = max_depth;\n                max_depth = 0;\n            }\n        }\n        i++;\n    }\n    *returnSize = ret_size;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(char* s, int* returnSize)\n{\n    int* ret = NULL;\n    int ret_size = 0;\n    int max_depth = 0;\n    int depth = 0;\n    int i = 0;\n    while (s[i])\n    {\n        if (s[i] == '(')\n        {\n            depth++;\n            if (depth > max_depth)\n                max_depth = depth;\n        }\n        else if (s[i] == ')')\n        {\n            depth--;\n            if (depth == 0)\n            {\n                ret_size++;\n                ret = realloc(ret, ret_size * sizeof(int));\n                ret[ret_size - 1] = max_depth;\n                max_depth = 0;\n            }\n        }\n        i++;\n    }\n    *returnSize = ret_size;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
    "c_func_decompile": "\nint* func0(char* s, int* returnSize)\n{\n    int* ret = NULL;\n    int i, j, k, l;\n    char c;\n\n    for (i = 0, j = 0, k = 0, l = 0; s[k] != '\\0'; k++) {\n        c = s[k];\n        if (c == '(') {\n            i++;\n            if (i > j) {\n                j = i;\n            }\n        } else if (c == ')') {\n            i--;\n            if (i == 0) {\n                ret = (int*)realloc(ret, sizeof(int) * (l + 1));\n                ret[l++] = j;\n                j = 0;\n            }\n        }\n    }\n\n    *returnSize = l;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(char* s, int* returnSize)\n{\n    int* ret = NULL;\n    int i, j, k, l;\n    char c;\n\n    for (i = 0, j = 0, k = 0, l = 0; s[k] != '\\0'; k++) {\n        c = s[k];\n        if (c == '(') {\n            i++;\n            if (i > j) {\n                j = i;\n            }\n        } else if (c == ')') {\n            i--;\n            if (i == 0) {\n                ret = (int*)realloc(ret, sizeof(int) * (l + 1));\n                ret[l++] = j;\n                j = 0;\n            }\n        }\n    }\n\n    *returnSize = l;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n)\n{\n int i, j, k, len, count;\n char **ret, *tmp;\n\n len = strlen(str);\n count = 0;\n k = 10;\n ret = (char **)malloc(k * sizeof(char *));\n tmp = (char *)malloc((len + 1) * sizeof(char));\n j = 0;\n *n = 0;\n for (i = 0; i < len; i++) {\n  char c = str[i];\n  if (c == '(') {\n   count++;\n   tmp[j++] = c;\n  } else if (c == ')') {\n   count--;\n   tmp[j++] = c;\n   if (count == 0) {\n    tmp[j] = '\\0';\n    ret[*n] = strdup(tmp);\n    (*n)++;\n    if (*n >= k) {\n     k *= 2;\n     ret = (char **)realloc(ret, k * sizeof(char *));\n    }\n    j = 0;\n   }\n  }\n }\n free(tmp);\n return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *n)\n{\n int i, j, k, len, count;\n char **ret, *tmp;\n\n len = strlen(str);\n count = 0;\n k = 10;\n ret = (char **)malloc(k * sizeof(char *));\n tmp = (char *)malloc((len + 1) * sizeof(char));\n j = 0;\n *n = 0;\n for (i = 0; i < len; i++) {\n  char c = str[i];\n  if (c == '(') {\n   count++;\n   tmp[j++] = c;\n  } else if (c == ')') {\n   count--;\n   tmp[j++] = c;\n   if (count == 0) {\n    tmp[j] = '\\0';\n    ret[*n] = strdup(tmp);\n    (*n)++;\n    if (*n >= k) {\n     k *= 2;\n     ret = (char **)realloc(ret, k * sizeof(char *));\n    }\n    j = 0;\n   }\n  }\n }\n free(tmp);\n return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
    "c_func_decompile": "\nint* func0(char* s, int* returnSize)\n{\n    int* ret = NULL;\n    int ret_size = 0;\n    int max_depth = 0;\n    int depth = 0;\n    int i = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == '(') {\n            depth++;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        } else if (s[i] == ')') {\n            depth--;\n            if (depth == 0) {\n                ret_size++;\n                ret = realloc(ret, ret_size * sizeof(int));\n                ret[ret_size - 1] = max_depth;\n                max_depth = 0;\n            }\n        }\n        i++;\n    }\n    *returnSize = ret_size;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(char* s, int* returnSize)\n{\n    int* ret = NULL;\n    int ret_size = 0;\n    int max_depth = 0;\n    int depth = 0;\n    int i = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == '(') {\n            depth++;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        } else if (s[i] == ')') {\n            depth--;\n            if (depth == 0) {\n                ret_size++;\n                ret = realloc(ret, ret_size * sizeof(int));\n                ret[ret_size - 1] = max_depth;\n                max_depth = 0;\n            }\n        }\n        i++;\n    }\n    *returnSize = ret_size;\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n)\n{\n    int i, j, k, len, size;\n    char **ret;\n    char *tmp;\n\n    len = strlen(str);\n    ret = malloc(10 * sizeof(char *));\n    tmp = malloc((len + 1) * sizeof(char));\n    *n = 0;\n    j = 0;\n    size = 10;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            j++;\n            tmp[k++] = '(';\n        } else if (str[i] == ')') {\n            j--;\n            tmp[k++] = ')';\n            if (j == 0) {\n                tmp[k] = '\\0';\n                if (*n >= size) {\n                    size *= 2;\n                    ret = realloc(ret, size * sizeof(char *));\n                }\n                ret[*n] = strdup(tmp);\n                (*n)++;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *n)\n{\n    int i, j, k, len, size;\n    char **ret;\n    char *tmp;\n\n    len = strlen(str);\n    ret = malloc(10 * sizeof(char *));\n    tmp = malloc((len + 1) * sizeof(char));\n    *n = 0;\n    j = 0;\n    size = 10;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            j++;\n            tmp[k++] = '(';\n        } else if (str[i] == ')') {\n            j--;\n            tmp[k++] = ')';\n            if (j == 0) {\n                tmp[k] = '\\0';\n                if (*n >= size) {\n                    size *= 2;\n                    ret = realloc(ret, size * sizeof(char *));\n                }\n                ret[*n] = strdup(tmp);\n                (*n)++;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n)\n{\n    int i;\n    int *b;\n\n    if (n <= 0)\n        return NULL;\n\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n\n    for (i = 0; i < n; i++)\n        b[i] = (a[i] > a[0]) ? a[i] : a[0];\n\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n)\n{\n    int i;\n    int *b;\n\n    if (n <= 0)\n        return NULL;\n\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n\n    for (i = 0; i < n; i++)\n        b[i] = (a[i] > a[0]) ? a[i] : a[0];\n\n    return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
    "c_func_decompile": "\nint* func0(char* s, int* returnSize)\n{\n    int* ret = NULL;\n    int ret_size = 0;\n    int max_depth = 0;\n    int depth = 0;\n    int i = 0;\n    while (s[i] != '\\0')\n    {\n        if (s[i] == '(')\n        {\n            depth++;\n            if (depth > max_depth)\n            {\n                max_depth = depth;\n            }\n        }\n        else if (s[i] == ')')\n        {\n            depth--;\n            if (depth == 0)\n            {\n                ret_size++;\n                ret = realloc(ret, ret_size * sizeof(int));\n                ret[ret_size - 1] = max_depth;\n                max_depth = 0;\n            }\n        }\n        i++;\n    }\n    *returnSize = ret_size;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(char* s, int* returnSize)\n{\n    int* ret = NULL;\n    int ret_size = 0;\n    int max_depth = 0;\n    int depth = 0;\n    int i = 0;\n    while (s[i] != '\\0')\n    {\n        if (s[i] == '(')\n        {\n            depth++;\n            if (depth > max_depth)\n            {\n                max_depth = depth;\n            }\n        }\n        else if (s[i] == ')')\n        {\n            depth--;\n            if (depth == 0)\n            {\n                ret_size++;\n                ret = realloc(ret, ret_size * sizeof(int));\n                ret[ret_size - 1] = max_depth;\n                max_depth = 0;\n            }\n        }\n        i++;\n    }\n    *returnSize = ret_size;\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n)\n{\n    int i, j, k, len, count;\n    char **ret;\n    char *tmp;\n\n    len = strlen(str);\n    ret = (char **)malloc(10 * sizeof(char *));\n    tmp = (char *)malloc((len + 1) * sizeof(char));\n    *n = 0;\n    j = 0;\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            tmp[j++] = '(';\n            count++;\n        } else if (str[i] == ')') {\n            tmp[j++] = ')';\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                ret[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= 10) {\n                    ret = (char **)realloc(ret, 2 * 10 * sizeof(char *));\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *n)\n{\n    int i, j, k, len, count;\n    char **ret;\n    char *tmp;\n\n    len = strlen(str);\n    ret = (char **)malloc(10 * sizeof(char *));\n    tmp = (char *)malloc((len + 1) * sizeof(char));\n    *n = 0;\n    j = 0;\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            tmp[j++] = '(';\n            count++;\n        } else if (str[i] == ')') {\n            tmp[j++] = ')';\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                ret[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= 10) {\n                    ret = (char **)realloc(ret, 2 * 10 * sizeof(char *));\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n)\n{\n    int i, j, k, len, count;\n    char **ret;\n    char *tmp;\n\n    len = strlen(str);\n    ret = (char **)malloc(10 * sizeof(char *));\n    tmp = (char *)malloc((len + 1) * sizeof(char));\n    *n = 0;\n    j = 0;\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            tmp[j++] = '(';\n            count++;\n        } else if (str[i] == ')') {\n            tmp[j++] = ')';\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                ret[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= 10) {\n                    ret = (char **)realloc(ret, 2 * 10 * sizeof(char *));\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *n)\n{\n    int i, j, k, len, count;\n    char **ret;\n    char *tmp;\n\n    len = strlen(str);\n    ret = (char **)malloc(10 * sizeof(char *));\n    tmp = (char *)malloc((len + 1) * sizeof(char));\n    *n = 0;\n    j = 0;\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            tmp[j++] = '(';\n            count++;\n        } else if (str[i] == ')') {\n            tmp[j++] = ')';\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                ret[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= 10) {\n                    ret = (char **)realloc(ret, 2 * 10 * sizeof(char *));\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
    "c_func_decompile": "\nint func0(int a, int b)\n{\n    int c;\n    while (b) {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}",
    "c_func_re_decompile": "int func0(int a, int b)\n{\n    int c;\n    while (b) {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
    "c_func_decompile": "\nint func0(int a, int b)\n{\n    int c;\n    while (b != 0) {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}",
    "c_func_re_decompile": "int func0(int a, int b)\n{\n    int c;\n    while (b != 0) {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n)\n{\n    int i;\n    int *b;\n\n    if (n <= 0)\n        return NULL;\n\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n\n    for (i = 0; i < n; i++)\n        b[i] = (a[i] > a[0]) ? a[i] : a[0];\n\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n)\n{\n    int i;\n    int *b;\n\n    if (n <= 0)\n        return NULL;\n\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n\n    for (i = 0; i < n; i++)\n        b[i] = (a[i] > a[0]) ? a[i] : a[0];\n\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
    "c_func_decompile": "\nint func0(int a, int b)\n{\n    int c;\n    c = a;\n    while (b != 0) {\n        c = b;\n        b = a % b;\n        a = c;\n    }\n    return c;\n}",
    "c_func_re_decompile": "int func0(int a, int b)\n{\n    int c;\n    c = a;\n    while (b != 0) {\n        c = b;\n        b = a % b;\n        a = c;\n    }\n    return c;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
    "c_func_decompile": "\nint func0(int a, int b)\n{\n    int c;\n    c = a;\n    while (b != 0) {\n        c = b;\n        b = a % b;\n        a = c;\n    }\n    return c;\n}",
    "c_func_re_decompile": "int func0(int a, int b)\n{\n    int c;\n    c = a;\n    while (b != 0) {\n        c = b;\n        b = a % b;\n        a = c;\n    }\n    return c;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n)\n{\n    int i, max;\n    int *b;\n\n    if (n <= 0)\n        return NULL;\n\n    b = (int *) malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n\n    max = a[0];\n    for (i = 0; i < n; i++) {\n        if (a[i] > max) {\n            max = a[i];\n            b[i] = max;\n        }\n    }\n\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n)\n{\n    int i, max;\n    int *b;\n\n    if (n <= 0)\n        return NULL;\n\n    b = (int *) malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n\n    max = a[0];\n    for (i = 0; i < n; i++) {\n        if (a[i] > max) {\n            max = a[i];\n            b[i] = max;\n        }\n    }\n\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *str[], int n)\n{\n    char *p = \"\";\n    int i, max = 0, len;\n    for (i = 0; i < n; i++) {\n        len = strlen(str[i]);\n        if (len > max) {\n            p = str[i];\n            max = len;\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": "char *func0(char *str[], int n)\n{\n    char *p = \"\";\n    int i, max = 0, len;\n    for (i = 0; i < n; i++) {\n        len = strlen(str[i]);\n        if (len > max) {\n            p = str[i];\n            max = len;\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *argv[], int argc)\n{\n    int i, max = 0;\n    char *p = \"\";\n\n    for (i = 0; i < argc; i++) {\n        if (strlen(argv[i]) > max) {\n            max = strlen(argv[i]);\n            p = argv[i];\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": "char *func0(char *argv[], int argc)\n{\n    int i, max = 0;\n    char *p = \"\";\n\n    for (i = 0; i < argc; i++) {\n        if (strlen(argv[i]) > max) {\n            max = strlen(argv[i]);\n            p = argv[i];\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *argv[], int argc)\n{\n    int i, max = 0;\n    char *p = \"\";\n\n    for (i = 0; i < argc; i++) {\n        if (strlen(argv[i]) > max) {\n            max = strlen(argv[i]);\n            p = argv[i];\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": "char *func0(char *argv[], int argc)\n{\n    int i, max = 0;\n    char *p = \"\";\n\n    for (i = 0; i < argc; i++) {\n        if (strlen(argv[i]) > max) {\n            max = strlen(argv[i]);\n            p = argv[i];\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *argv[], int argc)\n{\n    int i, max = 0;\n    char *p = \"\";\n\n    for (i = 0; i < argc; i++) {\n        if (strlen(argv[i]) > max) {\n            max = strlen(argv[i]);\n            p = argv[i];\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": "char *func0(char *argv[], int argc)\n{\n    int i, max = 0;\n    char *p = \"\";\n\n    for (i = 0; i < argc; i++) {\n        if (strlen(argv[i]) > max) {\n            max = strlen(argv[i]);\n            p = argv[i];\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
    "c_func_decompile": "\nchar *func0(char *s1, char *s2)\n{\n    int i, len;\n    char *s;\n\n    len = strlen(s1) < strlen(s2) ? strlen(s1) : strlen(s2);\n    s = malloc(len + 1);\n    if (s == NULL)\n        return NULL;\n\n    for (i = 0; i < len; i++)\n        s[i] = s1[i] == s2[i] ? '1' : '0';\n    s[len] = '\\0';\n\n    return s;\n}",
    "c_func_re_decompile": "char *func0(char *s1, char *s2)\n{\n    int i, len;\n    char *s;\n\n    len = strlen(s1) < strlen(s2) ? strlen(s1) : strlen(s2);\n    s = malloc(len + 1);\n    if (s == NULL)\n        return NULL;\n\n    for (i = 0; i < len; i++)\n        s[i] = s1[i] == s2[i] ? '0' : '1';\n    s[len] = '\\0';\n\n    return s;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
    "c_func_decompile": "\nchar *func0(char *a, char *b)\n{\n  int i, len;\n  char *c;\n\n  len = (strlen(a) < strlen(b)) ? strlen(a) : strlen(b);\n  c = malloc(len + 1);\n  if (c == NULL)\n    return NULL;\n\n  for (i = 0; i < len; i++)\n    c[i] = (a[i] == b[i]) ? '0' : '1';\n  c[i] = '\\0';\n\n  return c;\n}",
    "c_func_re_decompile": "char *func0(char *a, char *b)\n{\n  int i, len;\n  char *c;\n\n  len = (strlen(a) < strlen(b)) ? strlen(a) : strlen(b);\n  c = malloc(len + 1);\n  if (c == NULL)\n    return NULL;\n\n  for (i = 0; i < len; i++)\n    c[i] = (a[i] == b[i]) ? '0' : '1';\n  c[i] = '\\0';\n\n  return c;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
    "c_func_decompile": "\nchar *func0(char *a, char *b)\n{\n  int i, len;\n  char *c;\n\n  len = (strlen(a) < strlen(b)) ? strlen(a) : strlen(b);\n  c = (char *)malloc(len + 1);\n  if (c == NULL)\n    return NULL;\n\n  for (i = 0; i < len; i++)\n    c[i] = (a[i] == b[i]) ? '0' : '1';\n  c[len] = '\\0';\n\n  return c;\n}",
    "c_func_re_decompile": "char *func0(char *a, char *b)\n{\n  int i, len;\n  char *c;\n\n  len = (strlen(a) < strlen(b)) ? strlen(a) : strlen(b);\n  c = (char *)malloc(len + 1);\n  if (c == NULL)\n    return NULL;\n\n  for (i = 0; i < len; i++)\n    c[i] = (a[i] == b[i]) ? '0' : '1';\n  c[len] = '\\0';\n\n  return c;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
    "c_func_decompile": "\nchar *func0(char *a, char *b)\n{\n  int i, len_a, len_b, len_c;\n  char *c;\n\n  len_a = strlen(a);\n  len_b = strlen(b);\n  len_c = (len_a < len_b) ? len_a : len_b;\n\n  c = (char *)malloc(len_c + 1);\n  if (c == NULL)\n    return NULL;\n\n  for (i = 0; i < len_c; i++)\n    c[i] = (a[i] == b[i]) ? '0' : '1';\n  c[len_c] = '\\0';\n\n  return c;\n}",
    "c_func_re_decompile": "char *func0(char *a, char *b)\n{\n  int i, len_a, len_b, len_c;\n  char *c;\n\n  len_a = strlen(a);\n  len_b = strlen(b);\n  len_c = (len_a < len_b) ? len_a : len_b;\n\n  c = (char *)malloc(len_c + 1);\n  if (c == NULL)\n    return NULL;\n\n  for (i = 0; i < len_c; i++)\n    c[i] = (a[i] == b[i]) ? '0' : '1';\n  c[len_c] = '\\0';\n\n  return c;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *len)\n{\n    int i, n = strlen(str);\n    char **ret = malloc(n * sizeof(char *));\n    char *tmp = malloc(n + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < n; i++) {\n        size_t len = strlen(tmp);\n        tmp = realloc(tmp, len + 2);\n        tmp[len] = str[i];\n        tmp[len + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        strcpy(ret[i], tmp);\n    }\n    free(tmp);\n    *len = n;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *len)\n{\n    int i, n = strlen(str);\n    char **ret = malloc(n * sizeof(char *));\n    char *tmp = malloc(n + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < n; i++) {\n        size_t len = strlen(tmp);\n        tmp = realloc(tmp, len + 2);\n        tmp[len] = str[i];\n        tmp[len + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        strcpy(ret[i], tmp);\n    }\n    free(tmp);\n    *len = n;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar *\nfunc0 (int n)\n{\n  int i, j;\n  char *p, *q;\n  int len = 2;\n\n  for (i = 1; i <= n; i++)\n    len += snprintf (NULL, 0, \"%d\", i);\n\n  p = malloc (len);\n  if (p == NULL)\n    return NULL;\n\n  q = p;\n  q += sprintf (q, \"0\");\n  for (j = 1; j <= n; j++)\n    q += sprintf (q, \"%d\", j);\n\n  return p;\n}",
    "c_func_re_decompile": "char *\nfunc0 (int n)\n{\n  int i, j;\n  char *p, *q;\n  int len = 2;\n\n  for (i = 1; i <= n; i++)\n    len += snprintf (NULL, 0, \"%d\", i);\n\n  p = malloc (len);\n  if (p == NULL)\n    return NULL;\n\n  q = p;\n  q += sprintf (q, \"0\");\n  for (j = 1; j <= n; j++)\n    q += sprintf (q, \"%d\", j);\n\n  return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int len = strlen(str);\n    int i, j, k;\n    char *ret = malloc(len * 2 + 1);\n    if (ret == NULL)\n        return NULL;\n    for (i = 0; i < len; i++) {\n        for (j = 0, k = len - i - 1; j < len - i; j++, k--) {\n            if (str[j] != str[k])\n                break;\n        }\n        if (j == len - i) {\n            ret = strncpy(ret, str, len);\n            for (j = i; j > 0; j--)\n                ret[len + j] = str[j - 1];\n            ret[len * 2] = '\\0';\n            return ret;\n        }\n    }\n    ret = strncpy(ret, str, len);\n    for (i = len - 1, j = len; i >= 0; i--, j++)\n        ret[j] = str[i];\n    ret[len * 2] = '\\0';\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    int len = strlen(str);\n    int i, j, k;\n    char *ret = malloc(len * 2 + 1);\n    if (ret == NULL)\n        return NULL;\n    for (i = 0; i < len; i++) {\n        for (j = 0, k = len - i - 1; j < len - i; j++, k--) {\n            if (str[j] != str[k])\n                break;\n        }\n        if (j == len - i) {\n            ret = strncpy(ret, str, len);\n            for (j = i; j > 0; j--)\n                ret[len + j] = str[j - 1];\n            ret[len * 2] = '\\0';\n            return ret;\n        }\n    }\n    ret = strncpy(ret, str, len);\n    for (i = len - 1, j = len; i >= 0; i--, j++)\n        ret[j] = str[i];\n    ret[len * 2] = '\\0';\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(int n)\n{\n    int i;\n    int len = 2;\n    char *p;\n    char *q;\n\n    for (i = 1; i <= n; i++)\n        len += __snprintf_chk(0, 0, 1, -1, \"%d\", i);\n\n    p = malloc(len);\n    if (p == NULL)\n        return NULL;\n\n    q = p;\n    *q++ = '0';\n    for (i = 1; i <= n; i++)\n        q += __sprintf_chk(q, 1, -1, \"%d\", i);\n\n    return p;\n}",
    "c_func_re_decompile": "char *func0(int n)\n{\n    int i;\n    int len = 2;\n    char *p;\n    char *q;\n\n    for (i = 1; i <= n; i++)\n        len += __snprintf_chk(0, 0, 1, -1, \"%d\", i);\n\n    p = malloc(len);\n    if (p == NULL)\n        return NULL;\n\n    q = p;\n    *q++ = '0';\n    for (i = 1; i <= n; i++)\n        q += __sprintf_chk(q, 1, -1, \"%d\", i);\n\n    return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n  int i, c, n = 0;\n  int a[256] = {0};\n  for (i = 0; s[i]; i++) {\n    c = (*__ctype_tolower_loc()[(unsigned char)s[i]]);\n    if (a[c] == 0 && ((*__ctype_b_loc()[(unsigned char)c]) & 0x04)) {\n      a[c] = 1;\n      n++;\n    }\n  }\n  return n;\n}",
    "c_func_re_decompile": "int func0(char *s)\n{\n  int i, c, n = 0;\n  int a[256] = {0};\n  for (i = 0; s[i]; i++) {\n    c = (*__ctype_tolower_loc()[0])(s[i]);\n    if (a[c] == 0 && ((*__ctype_b_loc()[0])(c) & 0x0400)) {\n      a[c] = 1;\n      n++;\n    }\n  }\n  return n;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int i, j, len, flag;\n    char *ret;\n\n    len = strlen(str);\n    ret = (char *)malloc(sizeof(char) * (len * 2 + 1));\n    if (ret == NULL)\n        return NULL;\n\n    for (i = 0; i < len; i++) {\n        flag = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag) {\n            strncpy(ret, str, len);\n            for (j = 0; j < i; j++)\n                ret[len + j] = str[i - 1 - j];\n            ret[len + i] = '\\0';\n            return ret;\n        }\n    }\n\n    strncpy(ret, str, len);\n    for (j = 0; j < len; j++)\n        ret[len + j] = str[len - 1 - j];\n    ret[len * 2] = '\\0';\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    int i, j, len, flag;\n    char *ret;\n\n    len = strlen(str);\n    ret = (char *)malloc(sizeof(char) * (len * 2 + 1));\n    if (ret == NULL)\n        return NULL;\n\n    for (i = 0; i < len; i++) {\n        flag = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag) {\n            strncpy(ret, str, len);\n            for (j = 0; j < i; j++)\n                ret[len + j] = str[i - 1 - j];\n            ret[len + i] = '\\0';\n            return ret;\n        }\n    }\n\n    strncpy(ret, str, len);\n    for (j = 0; j < len; j++)\n        ret[len + j] = str[len - 1 - j];\n    ret[len * 2] = '\\0';\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int len = strlen(str);\n    int i, j, k;\n    char *ret = malloc(len * 2 + 1);\n    if (ret == NULL)\n        return NULL;\n    for (i = 0; i < len; i++) {\n        for (j = 0, k = len - i - 1; j < len - i; j++, k--) {\n            if (str[j] != str[k])\n                break;\n        }\n        if (j == len - i) {\n            ret = strncpy(ret, str, len);\n            for (j = 0; j < i; j++)\n                ret[len + j] = str[len - j - 1];\n            ret[len * 2] = '\\0';\n            return ret;\n        }\n    }\n    ret = strncpy(ret, str, len);\n    for (j = 0; j < len; j++)\n        ret[len + j] = str[len - j - 1];\n    ret[len * 2] = '\\0';\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    int len = strlen(str);\n    int i, j, k;\n    char *ret = malloc(len * 2 + 1);\n    if (ret == NULL)\n        return NULL;\n    for (i = 0; i < len; i++) {\n        for (j = 0, k = len - i - 1; j < len - i; j++, k--) {\n            if (str[j] != str[k])\n                break;\n        }\n        if (j == len - i) {\n            ret = strncpy(ret, str, len);\n            for (j = 0; j < i; j++)\n                ret[len + j] = str[len - j - 1];\n            ret[len * 2] = '\\0';\n            return ret;\n        }\n    }\n    ret = strncpy(ret, str, len);\n    for (j = 0; j < len; j++)\n        ret[len + j] = str[len - j - 1];\n    ret[len * 2] = '\\0';\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar *\nfunc0 (int n)\n{\n  int i;\n  char *p;\n  char *q;\n  int len = 2;\n\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk (0, 0, 1, -1, \"%d\", i);\n\n  p = malloc (len);\n  if (p == NULL)\n    return NULL;\n\n  q = p;\n  *q++ = '0';\n  *q++ = '\\0';\n\n  for (i = 1; i <= n; i++)\n    q += __sprintf_chk (q, 1, -1, \"%d\", i);\n\n  return p;\n}",
    "c_func_re_decompile": "char *\nfunc0 (int n)\n{\n  int i;\n  char *p;\n  char *q;\n  int len = 2;\n\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk (0, 0, 1, -1, \"%d\", i);\n\n  p = malloc (len);\n  if (p == NULL)\n    return NULL;\n\n  q = p;\n  *q++ = '0';\n  *q++ = '\\0';\n\n  for (i = 1; i <= n; i++)\n    q += __sprintf_chk (q, 1, -1, \"%d\", i);\n\n  return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *len)\n{\n    int i, j, k;\n    int slen = strlen(str);\n    char **ret = (char **)malloc(slen * sizeof(char *));\n    char *tmp = (char *)malloc((slen + 1) * sizeof(char));\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        j = strlen(tmp);\n        tmp = (char *)realloc(tmp, (j + 2) * sizeof(char));\n        tmp[j] = str[i];\n        tmp[j + 1] = '\\0';\n        ret[i] = (char *)malloc((strlen(tmp) + 1) * sizeof(char));\n        strcpy(ret[i], tmp);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *len)\n{\n    int i, j, k;\n    int slen = strlen(str);\n    char **ret = (char **)malloc(slen * sizeof(char *));\n    char *tmp = (char *)malloc((slen + 1) * sizeof(char));\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        j = strlen(tmp);\n        tmp = (char *)realloc(tmp, (j + 2) * sizeof(char));\n        tmp[j] = str[i];\n        tmp[j + 1] = '\\0';\n        ret[i] = (char *)malloc((strlen(tmp) + 1) * sizeof(char));\n        strcpy(ret[i], tmp);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int i, j, k, len, flag;\n    char *p;\n\n    len = strlen(str);\n    p = (char *)malloc(len * 2 + 1);\n    if (p == NULL)\n        return NULL;\n\n    for (i = 0; i < len; i++)\n    {\n        flag = 1;\n        for (j = len - 1, k = 0; j > (len - 1 - i) / 2; j--, k++)\n        {\n            if (str[i + k] != str[j])\n            {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag)\n        {\n            strncpy(p, str, i);\n            for (j = 0; j < i; j++)\n                p[i + j] = str[i - 1 - j];\n            p[i + j] = '\\0';\n            return p;\n        }\n    }\n\n    strncpy(p, str, len);\n    for (j = 0; j < i; j++)\n        p[len + j] = str[i - 1 - j];\n    p[len + j] = '\\0';\n    return p;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    int i, j, k, len, flag;\n    char *p;\n\n    len = strlen(str);\n    p = (char *)malloc(len * 2 + 1);\n    if (p == NULL)\n        return NULL;\n\n    for (i = 0; i < len; i++)\n    {\n        flag = 1;\n        for (j = len - 1, k = 0; j > (len - 1 - i) / 2; j--, k++)\n        {\n            if (str[i + k] != str[j])\n            {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag)\n        {\n            strncpy(p, str, i);\n            for (j = 0; j < i; j++)\n                p[i + j] = str[i - 1 - j];\n            p[i + j] = '\\0';\n            return p;\n        }\n    }\n\n    strncpy(p, str, len);\n    for (j = 0; j < i; j++)\n        p[len + j] = str[i - 1 - j];\n    p[len + j] = '\\0';\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n  int i, c, n;\n  int a[256];\n\n  for (i = 0; i < 256; i++)\n    a[i] = 0;\n\n  n = 0;\n  while (*s) {\n    c = (*__ctype_tolower_loc()[(unsigned char)(*s)]);\n    if (a[c] == 0 && ((*__ctype_b_loc()[(unsigned char)(c)] & 0x04) != 0)) {\n      a[c] = 1;\n      n++;\n    }\n    s++;\n  }\n  return n;\n}",
    "c_func_re_decompile": "int func0(char *s)\n{\n  int i, c, n;\n  int a[256];\n\n  for (i = 0; i < 256; i++)\n    a[i] = 0;\n\n  n = 0;\n  while (*s) {\n    c = (*__ctype_tolower_loc()[0][(unsigned char)(*s)]);\n    if (a[c] == 0 && ((*__ctype_b_loc()[0][(unsigned char)(c)] & 0x04) != 0)) {\n      a[c] = 1;\n      n++;\n    }\n    s++;\n  }\n  return n;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar *\nfunc0 (int n)\n{\n  int i;\n  char *p;\n  char *q;\n  int len = 2;\n\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk (0, 0, 1, -1, \"%d\", i);\n\n  p = malloc (len);\n  if (p == NULL)\n    return NULL;\n\n  q = p;\n  *q++ = '0';\n  *q++ = '\\0';\n\n  for (i = 1; i <= n; i++)\n    q += __sprintf_chk (q, 1, -1, \"%d\", i);\n\n  return p;\n}",
    "c_func_re_decompile": "char *\nfunc0 (int n)\n{\n  int i;\n  char *p;\n  char *q;\n  int len = 2;\n\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk (0, 0, 1, -1, \"%d\", i);\n\n  p = malloc (len);\n  if (p == NULL)\n    return NULL;\n\n  q = p;\n  *q++ = '0';\n  *q++ = '\\0';\n\n  for (i = 1; i <= n; i++)\n    q += __sprintf_chk (q, 1, -1, \"%d\", i);\n\n  return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *str, char *substr)\n{\n    int i, j, k, count = 0;\n    int len1 = strlen(str);\n    int len2 = strlen(substr);\n\n    for (i = 0; i <= len1 - len2; i++) {\n        for (j = i, k = 0; k < len2; j++, k++) {\n            if (str[j] != substr[k])\n                break;\n        }\n        if (k == len2)\n            count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str, char *substr)\n{\n    int i, count = 0;\n    int len1 = strlen(str);\n    int len2 = strlen(substr);\n\n    for (i = 0; i <= len1 - len2; i++) {\n        if (strncmp(str + i, substr, len2) == 0)\n            count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *str, char *substr)\n{\n    int count = 0;\n    int len = strlen(str);\n    int sublen = strlen(substr);\n    int i;\n\n    if (len == 0)\n        return 0;\n\n    for (i = 0; i < len - sublen + 1; i++)\n        if (strncmp(str + i, substr, (size_t)sublen) == 0)\n            count++;\n\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str, char *substr)\n{\n    int count = 0;\n    int len = strlen(str);\n    int sublen = strlen(substr);\n    int i;\n\n    if (len == 0)\n        return 0;\n\n    for (i = 0; i < len - sublen + 1; i++)\n        if (strncmp(str + i, substr, (size_t)sublen) == 0)\n            count++;\n\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *str, char *substr)\n{\n    int i, j, k, count = 0;\n    int len1 = strlen(str);\n    int len2 = strlen(substr);\n\n    for (i = 0; i <= len1 - len2; i++) {\n        for (j = i, k = 0; k < len2; j++, k++) {\n            if (str[j] != substr[k])\n                break;\n        }\n        if (k == len2)\n            count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str, char *substr)\n{\n    int i, count = 0;\n    int len1 = strlen(str);\n    int len2 = strlen(substr);\n\n    for (i = 0; i <= len1 - len2; i++) {\n        if (strncmp(str + i, substr, len2) == 0)\n            count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n  int i, c, n;\n  int a[256];\n\n  for (i = 0; i < 256; i++)\n    a[i] = 0;\n\n  n = 0;\n  while (*s) {\n    c = (*__ctype_tolower_loc()[(unsigned char)(*s)]);\n    if (a[c] == 0 && ((*__ctype_b_loc()[(unsigned char)(c)] & 0x04) != 0)) {\n      a[c] = 1;\n      n++;\n    }\n    s++;\n  }\n  return n;\n}",
    "c_func_re_decompile": "int func0(char *s)\n{\n  int i, c, n;\n  int a[256];\n\n  for (i = 0; i < 256; i++)\n    a[i] = 0;\n\n  n = 0;\n  while (*s) {\n    c = (*__ctype_tolower_loc()[0][(unsigned char)(*s)]);\n    if (a[c] == 0 && ((*__ctype_b_loc()[0][(unsigned char)(c)] & 0x04) != 0)) {\n      a[c] = 1;\n      n++;\n    }\n    s++;\n  }\n  return n;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
    "c_func_decompile": " int func0(char *s, char *t)\n{\n  int i, j, k, n, m, count;\n\n  n = strlen(s);\n  m = strlen(t);\n  count = 0;\n  for (i = 0; i <= n - m; i++) {\n    for (j = i, k = 0; k < m; j++, k++) {\n      if (strncmp(s + j, t, (size_t) m) == 0) {\n        count++;\n        break;\n      }\n    }\n  }\n  return count;\n}",
    "c_func_re_decompile": "int func0(char *s, char *t)\n{\n  int i, j, k, n, m, count;\n\n  n = strlen(s);\n  m = strlen(t);\n  count = 0;\n  for (i = 0; i <= n - m; i++) {\n    for (j = i, k = 0; k < m; j++, k++) {\n      if (strncmp(s + j, t, (size_t) m) == 0) {\n        count++;\n        break;\n      }\n    }\n  }\n  return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *len)\n{\n    int i, j, k;\n    char *tmp;\n    char **ret;\n\n    j = strlen(str);\n    ret = (char **)malloc(j * sizeof(char *));\n    tmp = (char *)malloc((j + 1) * sizeof(char));\n    tmp[0] = '\\0';\n    for (i = 0; i < j; i++) {\n        k = strlen(tmp);\n        tmp = (char *)realloc(tmp, (k + 2) * sizeof(char));\n        tmp[k] = str[i];\n        tmp[k + 1] = '\\0';\n        ret[i] = (char *)malloc((k + 1) * sizeof(char));\n        memcpy(ret[i], tmp, k + 1);\n    }\n    free(tmp);\n    *len = j;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *len)\n{\n    int i, j, k;\n    char *tmp;\n    char **ret;\n\n    j = strlen(str);\n    ret = (char **)malloc(j * sizeof(char *));\n    tmp = (char *)malloc((j + 1) * sizeof(char));\n    tmp[0] = '\\0';\n    for (i = 0; i < j; i++) {\n        k = strlen(tmp);\n        tmp = (char *)realloc(tmp, (k + 2) * sizeof(char));\n        tmp[k] = str[i];\n        tmp[k + 1] = '\\0';\n        ret[i] = (char *)malloc((strlen(tmp) + 1) * sizeof(char));\n        memcpy(ret[i], tmp, strlen(tmp) + 1);\n    }\n    free(tmp);\n    *len = j;\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *len)\n{\n    int i, j, k;\n    char *tmp;\n    char **ret;\n\n    j = strlen(str);\n    ret = (char **)malloc(j * sizeof(char *));\n    tmp = (char *)malloc((j + 1) * sizeof(char));\n    tmp[0] = '\\0';\n    for (i = 0; i < j; i++) {\n        k = strlen(tmp);\n        tmp = (char *)realloc(tmp, (k + 2) * sizeof(char));\n        tmp[k] = str[i];\n        tmp[k + 1] = '\\0';\n        ret[i] = (char *)malloc((k + 1) * sizeof(char));\n        memcpy(ret[i], tmp, k + 1);\n    }\n    free(tmp);\n    *len = j;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *len)\n{\n    int i, j, k;\n    char *tmp;\n    char **ret;\n\n    j = strlen(str);\n    ret = (char **)malloc(j * sizeof(char *));\n    tmp = (char *)malloc((j + 1) * sizeof(char));\n    tmp[0] = '\\0';\n    for (i = 0; i < j; i++) {\n        k = strlen(tmp);\n        tmp = (char *)realloc(tmp, (k + 2) * sizeof(char));\n        tmp[k] = str[i];\n        tmp[k + 1] = '\\0';\n        ret[i] = (char *)malloc((strlen(tmp) + 1) * sizeof(char));\n        memcpy(ret[i], tmp, strlen(tmp) + 1);\n    }\n    free(tmp);\n    *len = j;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
    "c_func_decompile": "\nvoid func0(float *x, int n, float *y)\n{\n  int i, j;\n  float min, tmp;\n  min = 1.0e+30;\n  y[0] = x[0];\n  y[1] = x[1];\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++) {\n      tmp = fabs(x[i] - x[j]);\n      if (tmp < min) {\n min = tmp;\n y[0] = x[i];\n y[1] = x[j];\n      }\n    }\n  if (y[0] > y[1]) {\n    tmp = y[0];\n    y[0] = y[1];\n    y[1] = tmp;\n  }\n}",
    "c_func_re_decompile": "void func0(float *x, int n, float *y)\n{\n  int i, j;\n  float min, tmp;\n  min = 1.0e+30;\n  y[0] = x[0];\n  y[1] = x[1];\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++) {\n      tmp = fabs(x[i] - x[j]);\n      if (tmp < min) {\n min = tmp;\n y[0] = x[i];\n y[1] = x[j];\n      }\n    }\n  if (y[0] > y[1]) {\n    tmp = y[0];\n    y[0] = y[1];\n    y[1] = tmp;\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
    "c_func_decompile": "\nvoid func0(float *x, int n)\n{\n  int i, j;\n  float min, max;\n\n  min = x[0];\n  max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n\n  for (j = 0; j < n; j++) {\n    x[j] = (x[j] - min) / (max - min);\n  }\n}",
    "c_func_re_decompile": "void func0(float *x, int n)\n{\n  int i, j;\n  float min, max;\n\n  min = x[0];\n  max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n\n  for (j = 0; j < n; j++) {\n    x[j] = (x[j] - min) / (max - min);\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
    "c_func_decompile": "\nvoid func0(float *x, int n, float *y)\n{\n    int i, j;\n    float d, dmin;\n\n    y[0] = x[0];\n    y[1] = x[1];\n    dmin = fabsf(y[0] - y[1]);\n    for (i = 1; i < n; i++) {\n        for (j = 1; j < n; j++) {\n            d = fabsf(x[i] - x[j]);\n            if (d < dmin) {\n                y[0] = x[i];\n                y[1] = x[j];\n                dmin = d;\n            }\n        }\n    }\n    if (y[0] > y[1]) {\n        d = y[0];\n        y[0] = y[1];\n        y[1] = d;\n    }\n}",
    "c_func_re_decompile": "void func0(float *x, int n, float *y)\n{\n    int i, j;\n    float d, dmin;\n\n    y[0] = x[0];\n    y[1] = x[1];\n    dmin = fabsf(y[0] - y[1]);\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            d = fabsf(x[i] - x[j]);\n            if (d < dmin) {\n                y[0] = x[i];\n                y[1] = x[j];\n                dmin = d;\n            }\n        }\n    }\n    if (y[0] > y[1]) {\n        d = y[0];\n        y[0] = y[1];\n        y[1] = d;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
    "c_func_decompile": "\nvoid func0(float *x, int n, float *y)\n{\n    int i, j;\n    float d, dmin;\n\n    y[0] = x[0];\n    y[1] = x[1];\n    dmin = fabsf(y[0] - y[1]);\n    for (i = 1; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            d = fabsf(x[i] - x[j]);\n            if (d < dmin) {\n                y[0] = x[i];\n                y[1] = x[j];\n                dmin = d;\n            }\n        }\n    }\n    if (y[0] > y[1]) {\n        d = y[0];\n        y[0] = y[1];\n        y[1] = d;\n    }\n}",
    "c_func_re_decompile": "void func0(float *x, int n, float *y)\n{\n    int i, j, k;\n    float d, dmin;\n\n    y[0] = x[0];\n    y[1] = x[1];\n    dmin = fabsf(y[0] - y[1]);\n    for (i = 1; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            for (k = i; k < n; k++) {\n                d = fabsf(x[i] - x[j]);\n                if (d < dmin) {\n                    y[0] = x[i];\n                    y[1] = x[j];\n                    dmin = d;\n                }\n            }\n        }\n    }\n    if (y[0] > y[1]) {\n        d = y[0];\n        y[0] = y[1];\n        y[1] = d;\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
    "c_func_decompile": "\nvoid func0(float *x, int n, float *y)\n{\n    int i, j;\n    float d, dmin;\n\n    y[0] = x[0];\n    y[1] = x[1];\n    dmin = fabs(y[0] - y[1]);\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            d = fabs(x[i] - x[j]);\n            if (d < dmin) {\n                y[0] = x[i];\n                y[1] = x[j];\n                dmin = d;\n            }\n        }\n    }\n    if (y[0] > y[1]) {\n        d = y[0];\n        y[0] = y[1];\n        y[1] = d;\n    }\n}",
    "c_func_re_decompile": "void func0(float *x, int n, float *y)\n{\n    int i, j;\n    float d, dmin;\n\n    y[0] = x[0];\n    y[1] = x[1];\n    dmin = fabs(y[0] - y[1]);\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            d = fabs(x[i] - x[j]);\n            if (d < dmin) {\n                y[0] = x[i];\n                y[1] = x[j];\n                dmin = d;\n            }\n        }\n    }\n    if (y[0] > y[1]) {\n        d = y[0];\n        y[0] = y[1];\n        y[1] = d;\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n  static char result[1000];\n  int i, j, k, l;\n  int count[10] = {0};\n  char *word[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  char tmp[10];\n\n  l = 0;\n  while (*str != '\\0') {\n    for (i = 0; str[i] != ' ' && str[i] != '\\0'; i++)\n      tmp[i] = str[i];\n    tmp[i] = '\\0';\n    for (j = 0; j < 10; j++)\n      if (!strcmp(tmp, word[j])) {\n        count[j]++;\n        break;\n      }\n    str += i + 1;\n  }\n\n  for (i = 0; i < 10; i++)\n    for (j = 0; j < count[i]; j++) {\n      for (k = 0; word[i][k] != '\\0'; k++)\n        result[l++] = word[i][k];\n      result[l++] = ' ';\n    }\n  if (l > 0)\n    result[l - 1] = '\\0';\n  else\n    result[0] = '\\0';\n\n  return result;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n  static char result[1000];\n  int i, j, k, l;\n  int count[10] = {0};\n  char *word[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  char tmp[10];\n\n  l = 0;\n  while (*str != '\\0') {\n    for (i = 0; str[i] != ' ' && str[i] != '\\0'; i++)\n      tmp[i] = str[i];\n    tmp[i] = '\\0';\n    for (j = 0; j < 10; j++)\n      if (!strcmp(tmp, word[j])) {\n        count[j]++;\n        break;\n      }\n    str += i + 1;\n  }\n\n  for (i = 0; i < 10; i++)\n    for (j = 0; j < count[i]; j++) {\n      for (k = 0; word[i][k] != '\\0'; k++)\n        result[l++] = word[i][k];\n      result[l++] = ' ';\n    }\n  if (l > 0)\n    result[l - 1] = '\\0';\n  else\n    result[0] = '\\0';\n\n  return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i = 0;\n    while (str[i] != '\\0')\n        i++;\n    return i;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i = 0;\n    while (str[i] != '\\0')\n        i++;\n    return i;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i = 0;\n    while (str[i] != '\\0')\n    {\n        i++;\n    }\n    return i;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i = 0;\n    while (str[i] != '\\0')\n    {\n        i++;\n    }\n    return i;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i = 0;\n    while (str[i] != '\\0')\n    {\n        i++;\n    }\n    return i;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i = 0;\n    while (str[i] != '\\0')\n    {\n        i++;\n    }\n    return i;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i = 0;\n    while (str[i] != '\\0')\n    {\n        i++;\n    }\n    return i;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i = 0;\n    while (str[i] != '\\0')\n    {\n        i++;\n    }\n    return i;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return n / i;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return n / i;\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
    "c_func_decompile": "\nvoid func0(float *x, int n)\n{\n  int i;\n  float min, max;\n\n  min = max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  for (i = 0; i < n; i++)\n    x[i] = (x[i] - min) / (max - min);\n}",
    "c_func_re_decompile": "void func0(float *x, int n)\n{\n  int i;\n  float min, max;\n\n  min = max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  for (i = 0; i < n; i++)\n    x[i] = (x[i] - min) / (max - min);\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
    "c_func_decompile": "\nvoid func0(float *x, int n)\n{\n    int i;\n    float min, max;\n\n    min = max = x[0];\n    for (i = 1; i < n; i++) {\n        if (x[i] < min)\n            min = x[i];\n        if (x[i] > max)\n            max = x[i];\n    }\n    for (i = 0; i < n; i++)\n        x[i] = (x[i] - min) / (max - min);\n}",
    "c_func_re_decompile": "void func0(float *x, int n)\n{\n    int i;\n    float min, max;\n\n    min = max = x[0];\n    for (i = 1; i < n; i++) {\n        if (x[i] < min)\n            min = x[i];\n        if (x[i] > max)\n            max = x[i];\n    }\n    for (i = 0; i < n; i++)\n        x[i] = (x[i] - min) / (max - min);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(char *s, int *len)\n{\n  int i, j, k, l;\n  char *t;\n  char buf[3] = {0};\n  int *a;\n\n  l = strlen(s);\n  t = malloc(l + 2);\n  memcpy(t, s, l);\n  t[l] = ' ';\n  t[l + 1] = 0;\n\n  a = NULL;\n  k = 0;\n  for (i = 0; i < l + 1; i++) {\n    if (t[i] != ' ') {\n      buf[strlen(buf)] = t[i];\n      buf[strlen(buf) + 1] = 0;\n    } else {\n      if (buf[0] == 'o' && buf[1] == 0) {\n        if (k == l) {\n          l = 4;\n          a = realloc(a, l * sizeof(int));\n        }\n        a[k++] = 4;\n      }\n      if (buf[0] == 'o' && buf[1] == '|' && buf[2] == 0) {\n        if (k == l) {\n          l = 2;\n          a = realloc(a, l * sizeof(int));\n        }\n        a[k++] = 2;\n      }\n      if (buf[0] == '.' && buf[1] == '|' && buf[2] == 0) {\n        if (k == l) {\n          l = 1;\n          a = realloc(a, l * sizeof(int));\n        }\n        a[k++] = 1;\n      }\n      buf[0] = 0;\n    }\n  }\n  free(t);\n  *len = k;\n  return a;\n}",
    "c_func_re_decompile": "int *func0(char *s, int *len)\n{\n  int i, j, k, l;\n  char *t;\n  char buf[3] = {0};\n  int *a;\n\n  l = strlen(s);\n  t = malloc(l + 2);\n  memcpy(t, s, l);\n  t[l] = ' ';\n  t[l + 1] = 0;\n\n  a = NULL;\n  k = 0;\n  for (i = 0; i < l + 1; i++) {\n    if (t[i] != ' ') {\n      buf[strlen(buf)] = t[i];\n      buf[strlen(buf) + 1] = 0;\n    } else {\n      if (buf[0] == 'o' && buf[1] == 0) {\n        if (k == l) {\n          l = 4;\n          a = realloc(a, l * sizeof(int));\n        }\n        a[k++] = 4;\n      }\n      if (buf[0] == 'o' && buf[1] == '|' && buf[2] == 0) {\n        if (k == l) {\n          l = 2;\n          a = realloc(a, l * sizeof(int));\n        }\n        a[k++] = 2;\n      }\n      if (buf[0] == '.' && buf[1] == '|' && buf[2] == 0) {\n        if (k == l) {\n          l = 1;\n          a = realloc(a, l * sizeof(int));\n        }\n        a[k++] = 1;\n      }\n      buf[0] = 0;\n    }\n  }\n  free(t);\n  *len = k;\n  return a;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
    "c_func_decompile": "\nvoid func0(float *x, int n)\n{\n    int i;\n    float min, max, range;\n\n    min = max = x[0];\n    for (i = 1; i < n; i++) {\n        if (x[i] < min)\n            min = x[i];\n        if (x[i] > max)\n            max = x[i];\n    }\n    range = max - min;\n    for (i = 0; i < n; i++)\n        x[i] = (x[i] - min) / range;\n}",
    "c_func_re_decompile": "void func0(float *x, int n)\n{\n    int i;\n    float min, max, range;\n\n    min = max = x[0];\n    for (i = 1; i < n; i++) {\n        if (x[i] < min)\n            min = x[i];\n        if (x[i] > max)\n            max = x[i];\n    }\n    range = max - min;\n    for (i = 0; i < n; i++)\n        x[i] = (x[i] - min) / range;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return n / i;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return n / i;\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return n / i;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return n / i;\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(char *str, int *len)\n{\n    int *ret = NULL;\n    int i, j, k, l;\n    char *tmp;\n    char buf[3] = {0};\n    size_t len_tmp;\n\n    l = strlen(str) + 1;\n    tmp = (char *)malloc(l + 1);\n    strcpy(tmp, str);\n    tmp[strlen(tmp)] = ' ';\n\n    for (i = 0, k = 0; i < l; i++) {\n        if (tmp[i] == ' ') {\n            if (!strcmp(buf, \"int\")) {\n                if (k == l) {\n                    l = l * 2 > 0 ? l * 2 : 4;\n                    ret = (int *)realloc(ret, l * sizeof(int));\n                }\n                ret[k++] = 4;\n            }\n            if (!strcmp(buf, \"char\")) {\n                if (k == l) {\n                    l = l * 2 > 0 ? l * 2 : 4;\n                    ret = (int *)realloc(ret, l * sizeof(int));\n                }\n                ret[k++] = 2;\n            }\n            if (!strcmp(buf, \"float\")) {\n                if (k == l) {\n                    l = l * 2 > 0 ? l * 2 : 4;\n                    ret = (int *)realloc(ret, l * sizeof(int));\n                }\n                ret[k++] = 1;\n            }\n            buf[0] = '\\0';\n        } else {\n            len_tmp = strlen(buf);\n            if (len_tmp < 2) {\n                buf[len_tmp] = tmp[i];\n                buf[len_tmp + 1] = '\\0';\n            }\n        }\n    }\n    free(tmp);\n    *len = k;\n    return ret;\n}",
    "c_func_re_decompile": "int *func0(char *str, int *len)\n{\n    int *ret = NULL;\n    int i, j, k, l;\n    char *tmp;\n    char buf[3] = {0};\n    size_t len_tmp;\n\n    l = strlen(str) + 1;\n    tmp = (char *)malloc(l + 1);\n    strcpy(tmp, str);\n    tmp[strlen(tmp)] = ' ';\n\n    for (i = 0, k = 0, j = 0; i < l; i++) {\n        if (tmp[i] == ' ') {\n            if (!strcmp(buf, \"int\")) {\n                if (k == j) {\n                    j = j * 2 > 0 ? j * 2 : 4;\n                    ret = (int *)realloc(ret, j * sizeof(int));\n                }\n                ret[k++] = 4;\n            }\n            if (!strcmp(buf, \"char\")) {\n                if (k == j) {\n                    j = j * 2 > 0 ? j * 2 : 4;\n                    ret = (int *)realloc(ret, j * sizeof(int));\n                }\n                ret[k++] = 2;\n            }\n            if (!strcmp(buf, \"float\")) {\n                if (k == j) {\n                    j = j * 2 > 0 ? j * 2 : 4;\n                    ret = (int *)realloc(ret, j * sizeof(int));\n                }\n                ret[k++] = 1;\n            }\n            buf[0] = '\\0';\n        } else {\n            len_tmp = strlen(buf);\n            if (len_tmp < 2) {\n                buf[len_tmp] = tmp[i];\n                buf[len_tmp + 1] = '\\0';\n            }\n        }\n    }\n    free(tmp);\n    *len = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nchar * func0(char * str)\n{\n    int i, j, k, l, m, n;\n    int count[10] = {0};\n    char * word[10] = {\"the\", \"of\", \"to\", \"and\", \"a\", \"in\", \"is\", \"it\", \"you\", \"that\"};\n    char * p = str;\n    char tmp[100];\n    char tmp2[100];\n    char * result = \" \";\n    while (*p != '\\0')\n    {\n        i = 0;\n        while (*p != ' ' && *p != '\\0')\n        {\n            tmp[i] = *p;\n            i++;\n            p++;\n        }\n        tmp[i] = '\\0';\n        for (j = 0; j < 10; j++)\n        {\n            if (strcmp(tmp, word[j]) == 0)\n            {\n                count[j]++;\n                break;\n            }\n        }\n        p++;\n    }\n    k = 0;\n    for (i = 0; i < 10; i++)\n    {\n        for (j = 0; j < count[i]; j++)\n        {\n            for (l = 0; word[i][l] != '\\0'; l++)\n            {\n                tmp2[k] = word[i][l];\n                k++;\n            }\n            tmp2[k] = ' ';\n            k++;\n        }\n    }\n    if (k > 0)\n    {\n        tmp2[k - 1] = '\\0';\n    }\n    else\n    {\n        tmp2[0] = '\\0';\n    }\n    return tmp2;\n}",
    "c_func_re_decompile": "char * func0(char * str)\n{\n    int i, j, k, l, m, n;\n    int count[10] = {0};\n    char * word[10] = {\"the\", \"of\", \"to\", \"and\", \"a\", \"in\", \"is\", \"it\", \"you\", \"that\"};\n    char * p = str;\n    char tmp[100];\n    char tmp2[100];\n    char * result = \" \";\n    while (*p != '\\0')\n    {\n        i = 0;\n        while (*p != ' ' && *p != '\\0')\n        {\n            tmp[i] = *p;\n            i++;\n            p++;\n        }\n        tmp[i] = '\\0';\n        for (j = 0; j < 10; j++)\n        {\n            if (strcmp(tmp, word[j]) == 0)\n            {\n                count[j]++;\n                break;\n            }\n        }\n        p++;\n    }\n    k = 0;\n    for (i = 0; i < 10; i++)\n    {\n        for (j = 0; j < count[i]; j++)\n        {\n            for (l = 0; word[i][l] != '\\0'; l++)\n            {\n                tmp2[k] = word[i][l];\n                k++;\n            }\n            tmp2[k] = ' ';\n            k++;\n        }\n    }\n    if (k > 0)\n    {\n        tmp2[k - 1] = '\\0';\n    }\n    else\n    {\n        tmp2[0] = '\\0';\n    }\n    return tmp2;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return n / i;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return n / i;\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *len)\n{\n int *a = malloc(sizeof(int) * 64);\n int i;\n\n *len = 0;\n for (i = 2; i * i <= n; i++) {\n  while (n % i == 0) {\n   n /= i;\n   a[(*len)++] = i;\n  }\n }\n if (n > 1)\n  a[(*len)++] = n;\n return a;\n}",
    "c_func_re_decompile": "int *func0(int n, int *len)\n{\n int *a = malloc(sizeof(int) * 64);\n int i;\n\n *len = 0;\n for (i = 2; i * i <= n; i++) {\n  while (n % i == 0) {\n   n /= i;\n   a[(*len)++] = i;\n  }\n }\n if (n > 1)\n  a[(*len)++] = n;\n return a;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(char *s, int *len)\n{\n    int i, j, k, l;\n    char *p, *q, *r;\n    char t[3] = {0};\n    int *a;\n\n    p = (char *)malloc(strlen(s) + 2);\n    q = p;\n    memcpy(p, s, strlen(s));\n    p += strlen(s);\n    *p++ = ' ';\n    *p = 0;\n\n    a = NULL;\n    k = 0;\n    l = 0;\n    for (i = 0; i < p - q; i++) {\n        r = q + i;\n        if (*r != ' ') {\n            t[strlen(t)] = *r;\n            t[strlen(t) + 1] = 0;\n        } else {\n            if (t[0] == 'o' && t[1] == 0) {\n                if (k == l) {\n                    l = l * 2;\n                    a = (int *)realloc(a, l * sizeof(int));\n                }\n                a[k++] = 4;\n            }\n            if (t[0] == 'o' && t[1] == '|' && t[2] == 0) {\n                if (k == l) {\n                    l = l * 2;\n                    a = (int *)realloc(a, l * sizeof(int));\n                }\n                a[k++] = 2;\n            }\n            if (t[0] == '.' && t[1] == '|' && t[2] == 0) {\n                if (k == l) {\n                    l = l * 2;\n                    a = (int *)realloc(a, l * sizeof(int));\n                }\n                a[k++] = 1;\n            }\n            t[0] = 0;\n        }\n    }\n    free(q);\n    *len = k;\n    return a;\n}",
    "c_func_re_decompile": "int *func0(char *s, int *len)\n{\n    int i, j, k, l;\n    char *p, *q, *r;\n    char t[3] = {0};\n    int *a;\n\n    p = (char *)malloc(strlen(s) + 2);\n    q = p;\n    memcpy(p, s, strlen(s));\n    p += strlen(s);\n    *p++ = ' ';\n    *p = 0;\n\n    a = NULL;\n    k = 0;\n    l = 0;\n    for (i = 0; i < p - q; i++) {\n        r = q + i;\n        if (*r != ' ') {\n            t[strlen(t)] = *r;\n            t[strlen(t) + 1] = 0;\n        } else {\n            if (t[0] == 'o' && t[1] == 0) {\n                if (k == l) {\n                    l = l * 2;\n                    a = (int *)realloc(a, l * sizeof(int));\n                }\n                a[k++] = 4;\n            }\n            if (t[0] == 'o' && t[1] == '|' && t[2] == 0) {\n                if (k == l) {\n                    l = l * 2;\n                    a = (int *)realloc(a, l * sizeof(int));\n                }\n                a[k++] = 2;\n            }\n            if (t[0] == '.' && t[1] == '|' && t[2] == 0) {\n                if (k == l) {\n                    l = l * 2;\n                    a = (int *)realloc(a, l * sizeof(int));\n                }\n                a[k++] = 1;\n            }\n            t[0] = 0;\n        }\n    }\n    free(q);\n    *len = k;\n    return a;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *len)\n{\n    int i, j;\n    int *p;\n\n    p = (int *)malloc(100 * sizeof(int));\n    *len = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            p[(*len)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1)\n        p[(*len)++] = n;\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n, int *len)\n{\n    int i, j;\n    int *p;\n\n    p = (int *)malloc(32 * sizeof(int));\n    *len = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            p[(*len)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1)\n        p[(*len)++] = n;\n    return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int n, int* len)\n{\n    int* ret = (int*)malloc(sizeof(int) * 64);\n    int i = 2;\n    *len = 0;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            ret[(*len)++] = i;\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        ret[(*len)++] = n;\n    }\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int n, int* len)\n{\n    int* ret = (int*)malloc(sizeof(int) * 64);\n    int i = 2;\n    *len = 0;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            ret[(*len)++] = i;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        ret[(*len)++] = n;\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *len)\n{\n    int i, j;\n    int *p;\n\n    p = (int *)malloc(100 * sizeof(int));\n    *len = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            p[(*len)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1)\n        p[(*len)++] = n;\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n, int *len)\n{\n    int i, j;\n    int *p;\n\n    p = (int *)malloc(32 * sizeof(int));\n    *len = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            p[(*len)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1)\n        p[(*len)++] = n;\n    return p;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
    "c_func_decompile": " void func0(char *str, char *str1)\n{\n    int i, len;\n    char c;\n\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        c = str[i];\n        if (c >= 'a' && c <= 'z')\n            c -= 32;\n        else if (c >= 'A' && c <= 'Z')\n            c += 32;\n        str1[i] = c;\n    }\n    str1[len] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1)\n{\n    int i, len;\n    char c;\n\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        c = str[i];\n        if (c >= 'a' && c <= 'z')\n            c -= 32;\n        else if (c >= 'A' && c <= 'Z')\n            c += 32;\n        str1[i] = c;\n    }\n    str1[len] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char **strs, int n)\n{\n    int i, len = 0;\n    char *ret;\n\n    for (i = 0; i < n; i++)\n        len += strlen(strs[i]);\n\n    ret = malloc(len + 1);\n    if (ret == NULL)\n        return NULL;\n\n    ret[0] = '\\0';\n    for (i = 0; i < n; i++)\n        strcat(ret, strs[i]);\n\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char **strs, int n)\n{\n    int i, len = 0;\n    char *ret;\n\n    for (i = 0; i < n; i++)\n        len += strlen(strs[i]);\n\n    ret = malloc(len + 1);\n    if (ret == NULL)\n        return NULL;\n\n    ret[0] = '\\0';\n    for (i = 0; i < n; i++)\n        strcat(ret, strs[i]);\n\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
    "c_func_decompile": " void func0(char *str, char *str1)\n{\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len; i++)\n    {\n        if (str[i] >= 'a' && str[i] <= 'z')\n            str1[i] = str[i] - 32;\n        else if (str[i] >= 'A' && str[i] <= 'Z')\n            str1[i] = str[i] + 32;\n        else\n            str1[i] = str[i];\n    }\n    str1[i] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1)\n{\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len; i++)\n    {\n        if (str[i] >= 'a' && str[i] <= 'z')\n            str1[i] = str[i] - 32;\n        else if (str[i] >= 'A' && str[i] <= 'Z')\n            str1[i] = str[i] + 32;\n        else\n            str1[i] = str[i];\n    }\n    str1[i] = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *s)\n{\n  int i, j, k, l, m, n;\n  int count[10];\n  char *p, *q, *r, *t;\n  char *word[10] = { \"the\", \"a\", \"an\", \"and\", \"of\", \"in\", \"on\", \"at\", \"to\", \"for\" };\n  char *result;\n\n  for (i = 0; i < 10; i++)\n    count[i] = 0;\n\n  p = s;\n  while (*p != '\\0') {\n    q = p;\n    for (i = 0; i < 6; i++) {\n      if (*q == '\\0')\n        break;\n      q++;\n    }\n    *q = '\\0';\n    for (i = 0; i < 10; i++) {\n      if (strcmp(p, word[i]) == 0) {\n        count[i]++;\n        break;\n      }\n    }\n    p = q + 1;\n  }\n\n  result = (char *)malloc(100);\n  k = 0;\n  for (i = 0; i < 10; i++) {\n    for (j = 0; j < count[i]; j++) {\n      q = word[i];\n      while (*q != '\\0') {\n        result[k++] = *q;\n        q++;\n      }\n      result[k++] = ' ';\n    }\n  }\n  if (k != 0)\n    result[k - 1] = '\\0';\n  return result;\n}",
    "c_func_re_decompile": "char *func0(char *s)\n{\n  int i, j, k, l, m, n;\n  int count[10];\n  char *p, *q, *r, *t;\n  char *word[10] = { \"the\", \"a\", \"an\", \"and\", \"of\", \"in\", \"on\", \"at\", \"to\", \"for\" };\n  char *result;\n\n  for (i = 0; i < 10; i++)\n    count[i] = 0;\n\n  p = s;\n  while (*p != '\\0') {\n    q = p;\n    for (i = 0; i < 6; i++) {\n      if (*q == '\\0' || *q == ' ')\n        break;\n      q++;\n    }\n    *q = '\\0';\n    for (i = 0; i < 10; i++) {\n      if (strcmp(p, word[i]) == 0) {\n        count[i]++;\n        break;\n      }\n    }\n    p = q + 1;\n  }\n\n  result = (char *)malloc(100);\n  k = 0;\n  for (i = 0; i < 10; i++) {\n    for (j = 0; j < count[i]; j++) {\n      q = word[i];\n      while (*q != '\\0') {\n        result[k++] = *q;\n        q++;\n      }\n      result[k++] = ' ';\n    }\n  }\n  if (k != 0)\n    result[k - 1] = '\\0';\n  return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *argv[], int argc)\n{\n    int i, j, len = 0;\n    char *ret;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    if ((ret = malloc(len + 1)) == NULL)\n        return NULL;\n\n    ret[0] = '\\0';\n\n    for (j = 0; j < argc; j++)\n        strcat(ret, argv[j]);\n\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char *argv[], int argc)\n{\n    int i, j, len = 0;\n    char *ret;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    if ((ret = malloc(len + 1)) == NULL)\n        return NULL;\n\n    ret[0] = '\\0';\n\n    for (j = 0; j < argc; j++)\n        strcat(ret, argv[j]);\n\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char **argv, int argc)\n{\n    int i, len = 0;\n    char *ret;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    ret = malloc(len + 1);\n    if (ret == NULL)\n        return NULL;\n\n    ret[0] = '\\0';\n    for (i = 0; i < argc; i++)\n        ret = strcat(ret, argv[i]);\n\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char **argv, int argc)\n{\n    int i, len = 0;\n    char *ret;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    ret = malloc(len + 1);\n    if (ret == NULL)\n        return NULL;\n\n    ret[0] = '\\0';\n    for (i = 0; i < argc; i++)\n        ret = strcat(ret, argv[i]);\n\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *str1)\n{\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len; i++)\n    {\n        if (str[i] >= 'a' && str[i] <= 'z')\n            str1[i] = str[i] - 32;\n        else if (str[i] >= 'A' && str[i] <= 'Z')\n            str1[i] = str[i] + 32;\n        else\n            str1[i] = str[i];\n    }\n    str1[len] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1)\n{\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len; i++)\n    {\n        if (str[i] >= 'a' && str[i] <= 'z')\n            str1[i] = str[i] - 32;\n        else if (str[i] >= 'A' && str[i] <= 'Z')\n            str1[i] = str[i] + 32;\n        else\n            str1[i] = str[i];\n    }\n    str1[len] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
    "c_func_decompile": "\nint func0(char *str[], int n, char *s, char ***p)\n{\n int i, j, len;\n\n len = strlen(s);\n *p = (char **)malloc(n * sizeof(char *));\n for (i = 0, j = 0; j < n; j++)\n  if (!strncmp(str[j], s, len))\n   (*p)[i++] = str[j];\n return i;\n}",
    "c_func_re_decompile": "int func0(char *str[], int n, char *s, char ***p)\n{\n int i, j, len;\n\n len = strlen(s);\n *p = (char **)malloc(n * sizeof(char *));\n for (i = 0, j = 0; j < n; j++)\n  if (!strncmp(str[j], s, len))\n   (*p)[i++] = str[j];\n return i;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char **argv, int argc)\n{\n    int i, len = 0;\n    char *ret;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    ret = malloc(len + 1);\n    if (ret == NULL)\n        return NULL;\n\n    ret[0] = '\\0';\n    for (i = 0; i < argc; i++)\n        ret = strcat(ret, argv[i]);\n\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char **argv, int argc)\n{\n    int i, len = 0;\n    char *ret;\n\n    for (i = 0; i < argc; i++)\n        len += strlen(argv[i]);\n\n    ret = malloc(len + 1);\n    if (ret == NULL)\n        return NULL;\n\n    ret[0] = '\\0';\n    for (i = 0; i < argc; i++)\n        ret = strcat(ret, argv[i]);\n\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
    "c_func_decompile": "\nint func0(char *str[], int n, char *s, char ***p)\n{\n int i, j, len;\n\n len = strlen(s);\n *p = (char **)malloc(n * sizeof(char *));\n for (i = 0, j = 0; i < n; i++)\n  if (!strncmp(str[i], s, (size_t)len))\n   (*p)[j++] = str[i];\n return j;\n}",
    "c_func_re_decompile": "int func0(char *str[], int n, char *s, char ***p)\n{\n int i, j, len;\n\n len = strlen(s);\n *p = (char **)malloc(n * sizeof(char *));\n for (i = 0, j = 0; i < n; i++)\n  if (!strncmp(str[i], s, (size_t)len))\n   (*p)[j++] = str[i];\n return j;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *str1)\n{\n    int i;\n    int len = strlen(str);\n\n    for (i = 0; i < len; i++) {\n        if (str[i] >= 'a' && str[i] <= 'z') {\n            str1[i] = str[i] - 32;\n        } else if (str[i] >= 'A' && str[i] <= 'Z') {\n            str1[i] = str[i] + 32;\n        } else {\n            str1[i] = str[i];\n        }\n    }\n    str1[len] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1)\n{\n    int i;\n    int len = strlen(str);\n\n    for (i = 0; i < len; i++) {\n        if (str[i] >= 'a' && str[i] <= 'z') {\n            str1[i] = str[i] - 32;\n        } else if (str[i] >= 'A' && str[i] <= 'Z') {\n            str1[i] = str[i] + 32;\n        } else {\n            str1[i] = str[i];\n        }\n    }\n    str1[len] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(char* str, int* len)\n{\n    int i, j, k, l;\n    char* str1;\n    char str2[3] = {0};\n    int* ret;\n    int ret_len;\n\n    l = strlen(str);\n    str1 = (char*)malloc(l + 2);\n    strcpy(str1, str);\n    str1[strlen(str1)] = ' ';\n\n    ret_len = 0;\n    ret = NULL;\n    for (i = 0; i < l + 1; i++) {\n        if (str1[i] == ' ') {\n            if (!strcmp(str2, \"int\")) {\n                if (ret_len != k) {\n                    ret[k] = 4;\n                    k++;\n                }\n                else {\n                    if (ret_len <= 0) {\n                        ret_len = 4;\n                    }\n                    else {\n                        ret_len *= 2;\n                    }\n                    ret = (int*)realloc(ret, ret_len * sizeof(int));\n                }\n            }\n            if (!strcmp(str2, \"char\")) {\n                if (ret_len != k) {\n                    ret[k] = 2;\n                    k++;\n                }\n                else {\n                    if (ret_len <= 0) {\n                        ret_len = 4;\n                    }\n                    else {\n                        ret_len *= 2;\n                    }\n                    ret = (int*)realloc(ret, ret_len * sizeof(int));\n                }\n            }\n            if (!strcmp(str2, \"float\")) {\n                if (ret_len != k) {\n                    ret[k] = 1;\n                    k++;\n                }\n                else {\n                    if (ret_len <= 0) {\n                        ret_len = 4;\n                    }\n                    else {\n                        ret_len *= 2;\n                    }\n                    ret = (int*)realloc(ret, ret_len * sizeof(int));\n                }\n            }\n            str2[0] = 0;\n        }\n        else {\n            for (j = 0; j < 2; j++) {\n                if (strlen(str2) < 2) {\n                    str2[j] = str1[i];\n                    str2[j + 1] = 0;\n                }\n            }\n        }\n    }\n    ret[0] = k;\n    free(str1);\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(char* str, int* len)\n{\n    int i, j, k, l;\n    char* str1;\n    char str2[3] = {0};\n    int* ret;\n    int ret_len;\n\n    l = strlen(str);\n    str1 = (char*)malloc(l + 2);\n    strcpy(str1, str);\n    str1[strlen(str1)] = ' ';\n\n    ret_len = 0;\n    ret = NULL;\n    for (i = 0; i < l + 1; i++) {\n        if (str1[i] == ' ') {\n            if (!strcmp(str2, \"int\")) {\n                if (ret_len != k) {\n                    ret[k] = 4;\n                    k++;\n                }\n                else {\n                    if (ret_len <= 0) {\n                        ret_len = 4;\n                    }\n                    else {\n                        ret_len *= 2;\n                    }\n                    ret = (int*)realloc(ret, ret_len * sizeof(int));\n                }\n            }\n            if (!strcmp(str2, \"char\")) {\n                if (ret_len != k) {\n                    ret[k] = 2;\n                    k++;\n                }\n                else {\n                    if (ret_len <= 0) {\n                        ret_len = 4;\n                    }\n                    else {\n                        ret_len *= 2;\n                    }\n                    ret = (int*)realloc(ret, ret_len * sizeof(int));\n                }\n            }\n            if (!strcmp(str2, \"float\")) {\n                if (ret_len != k) {\n                    ret[k] = 1;\n                    k++;\n                }\n                else {\n                    if (ret_len <= 0) {\n                        ret_len = 4;\n                    }\n                    else {\n                        ret_len *= 2;\n                    }\n                    ret = (int*)realloc(ret, ret_len * sizeof(int));\n                }\n            }\n            str2[0] = 0;\n        }\n        else {\n            for (j = 0; j < 2; j++) {\n                if (strlen(str2) < 2) {\n                    str2[j] = str1[i];\n                    str2[j + 1] = 0;\n                }\n            }\n        }\n    }\n    ret[0] = k;\n    free(str1);\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(long n)\n{\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(long n)\n{\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nfloat * func0(float * x, int n, int * m)\n{\n    int i;\n    float * y = (float *) malloc(n * sizeof(float));\n    *m = 0;\n    for (i = 0; i < n; i++)\n        if (x[i] > 0)\n            y[(*m)++] = x[i];\n    return y;\n}",
    "c_func_re_decompile": "float * func0(float * x, int n, int * m)\n{\n    int i;\n    float * y = (float *) malloc(n * sizeof(float));\n    *m = 0;\n    for (i = 0; i < n; i++)\n        if (x[i] > 0)\n            y[(*m)++] = x[i];\n    return y;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(long n)\n{\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(long n)\n{\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(long n)\n{\n    long i;\n\n    if (n <= 1)\n        return 0;\n\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n\n    return 1;\n}",
    "c_func_re_decompile": "int func0(long n)\n{\n    long i;\n\n    if (n <= 1)\n        return 0;\n\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nfloat * func0(float * a, int n, int * m)\n{\n    float * b = malloc(n * sizeof(float));\n    *m = 0;\n    for (int i = 0; i < n; i++)\n        if (a[i] > 0)\n            b[(*m)++] = a[i];\n    return b;\n}",
    "c_func_re_decompile": "float * func0(float * a, int n, int * m)\n{\n    float * b = malloc(n * sizeof(float));\n    *m = 0;\n    for (int i = 0; i < n; i++)\n        if (a[i] > 0)\n            b[(*m)++] = a[i];\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nfloat * func0(float * a, int n, int * m)\n{\n    int i;\n    float * b = malloc(n * sizeof(float));\n    *m = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] > 0)\n            b[(*m)++] = a[i];\n    return b;\n}",
    "c_func_re_decompile": "float * func0(float * a, int n, int * m)\n{\n    int i;\n    float * b = malloc(n * sizeof(float));\n    *m = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] > 0)\n            b[(*m)++] = a[i];\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
    "c_func_decompile": "\nint func0(float *x, int n, float eps)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (fabsf(x[i] - x[j]) < eps)\n        return 1;\n  return 0;\n}",
    "c_func_re_decompile": "int func0(float *x, int n, float eps)\n{\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (fabsf(x[i] - x[j]) < eps)\n        return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, int* m)\n{\n    int i, j, k, l, flag;\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    k = 0;\n    l = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == c[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            c[k] = a[i];\n            k++;\n        }\n        flag = 0;\n        for (j = 0; j < l; j++) {\n            if (a[i] == d[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            d[l] = a[i];\n            l++;\n        }\n    }\n    *m = l;\n    free(c);\n    free(d);\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* m)\n{\n    int i, j, k, l, flag;\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    k = 0;\n    l = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == c[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            c[k] = a[i];\n            k++;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < l; j++) {\n            if (a[i] == d[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            d[l] = a[i];\n            l++;\n        }\n    }\n    *m = l;\n    free(c);\n    free(d);\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
    "c_func_decompile": "\nint func0(char **argv, int argc, char *str, char ***ret)\n{\n    int i, j;\n    size_t len = strlen(str);\n    char **tmp = malloc(argc * sizeof(char *));\n    *ret = tmp;\n    for (i = 0, j = 0; i < argc; i++) {\n        if (!strncmp(argv[i], str, len)) {\n            tmp[j++] = argv[i];\n        }\n    }\n    return j;\n}",
    "c_func_re_decompile": "int func0(char **argv, int argc, char *str, char ***ret)\n{\n    int i, j;\n    size_t len = strlen(str);\n    char **tmp = malloc(argc * sizeof(char *));\n    *ret = tmp;\n    for (i = 0, j = 0; i < argc; i++) {\n        if (!strncmp(argv[i], str, len)) {\n            tmp[j++] = argv[i];\n        }\n    }\n    return j;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nfloat * func0(float * a, int n, int * m)\n{\n    int i;\n    float * b = malloc(n * sizeof(float));\n    *m = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] > 0)\n            b[(*m)++] = a[i];\n    return b;\n}",
    "c_func_re_decompile": "float * func0(float * a, int n, int * m)\n{\n    int i;\n    float * b = malloc(n * sizeof(float));\n    *m = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] > 0)\n            b[(*m)++] = a[i];\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, int* m)\n{\n    int i, j, k;\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (d[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            d[k] = a[i];\n            k++;\n        }\n        for (j = 0; j < k; j++) {\n            if (d[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            d[k] = a[i];\n            k++;\n        }\n        for (j = 0; j < k; j++) {\n            if (c[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            c[k] = a[i];\n            k++;\n        }\n    }\n    *m = k;\n    free(c);\n    free(d);\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* m)\n{\n    int i, j, k;\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (d[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            d[k] = a[i];\n            k++;\n        }\n        for (j = 0; j < k; j++) {\n            if (d[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            d[k] = a[i];\n            k++;\n        }\n        for (j = 0; j < k; j++) {\n            if (c[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == k) {\n            c[k] = a[i];\n            k++;\n        }\n    }\n    *m = k;\n    free(c);\n    free(d);\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, int* m)\n{\n    int i, j, k, l, flag;\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    k = 0;\n    l = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            b[k] = a[i];\n            k++;\n        }\n        flag = 0;\n        for (j = 0; j < l; j++) {\n            if (a[i] == c[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            c[l] = a[i];\n            l++;\n        }\n    }\n    *m = k;\n    free(c);\n    free(d);\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* m)\n{\n    int i, j, k, l, flag;\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    k = 0;\n    l = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            b[k] = a[i];\n            k++;\n        }\n        flag = 0;\n        for (j = 0; j < l; j++) {\n            if (a[i] == c[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            c[l] = a[i];\n            l++;\n        }\n    }\n    k = 0;\n    l = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            b[k] = a[i];\n            k++;\n        }\n        flag = 0;\n        for (j = 0; j < l; j++) {\n            if (a[i] == c[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            c[l] = a[i];\n            l++;\n        }\n    }\n    *m = k;\n    free(c);\n    free(d);\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(long n)\n{\n    long i;\n\n    if (n <= 1)\n        return 0;\n    if (n <= 3)\n        return 1;\n    if (n % 2 == 0)\n        return 0;\n\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n\n    return 1;\n}",
    "c_func_re_decompile": "int func0(long n)\n{\n    long i;\n\n    if (n <= 1)\n        return 0;\n    if (n <= 3)\n        return 1;\n    if (n % 2 == 0)\n        return 0;\n\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
    "c_func_decompile": "\nint func0(char **argv, int argc, char *str, char ***ret)\n{\n    int i, j;\n    size_t len = strlen(str);\n    char **tmp = malloc(argc * sizeof(char *));\n    *ret = tmp;\n    for (i = 0, j = 0; i < argc; i++) {\n        if (!strncmp(argv[i], str, len)) {\n            tmp[j++] = argv[i];\n        }\n    }\n    return j;\n}",
    "c_func_re_decompile": "int func0(char **argv, int argc, char *str, char ***ret)\n{\n    int i, j;\n    size_t len = strlen(str);\n    char **tmp = malloc(argc * sizeof(char *));\n    *ret = tmp;\n    for (i = 0, j = 0; i < argc; i++) {\n        if (!strncmp(argv[i], str, len)) {\n            tmp[j++] = argv[i];\n        }\n    }\n    return j;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
    "c_func_decompile": "\ndouble func0(double *x, int N)\n{\n  int i,j;\n  double f,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26,f27,f28,f29,f30,f31,f32,f33,f34,f35,f36,f37,f38,f39,f40,f41,f42,f43,f44,f45,f46,f47,f48,f49,f50,f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64,f65,f66,f67,f68,f69,f70,f71,f72,f73,f74,f75,f76,f77,f78,f79,f80,f81,f82,f83,f84,f85,f86,f87,f88,f89,f90,f91,f92,f93,f94,f95,f96,f97,f98,f99,f100,f101,f102,f103,f104,f105,f106,f107,f108,f109,f110,f111,f112,f113,f114,f115,f116,f117,f118,f119,f120,f121,f122,f123,f124,f125,f126,f127,f128,f129,f130,f131,f132,f133,f134,f135,f136,f137,f138,f139,f140,f141,f142,f143,f144,f145,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f177,f178,f179,f180,f181,f182,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f193,f194,f195,f196,f197,f198,f199,f200,f201,f202,f203,f204,f205,f206,f207,f208,f209,f210,f211,f212,f213,f214,f215,f216,f217,f218,f219,f220,f221,f",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
    "c_func_decompile": "\ndouble func0(double *x, int N)\n{\n  double f, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90, f91, f92, f93, f94, f95, f96, f97, f98, f99, f100, f101, f102, f103, f104, f105, f106, f107, f108, f109, f110, f111, f112, f113, f114, f115, f116, f117, f118, f119, f120, f121, f122, f123, f124, f125, f126, f127, f128, f129, f130, f131, f132, f133, f134, f135, f136, f137, f138, f139, f140, f141, f142, f143, f144, f145, f146, f147, f148, f149, f150, f151, f152, f153, f154, f155, f156, f157, f158, f159, f160, f161, f162, f163, f164, f165, f166, f167, f168, f169, f170, f171, f172, f173, f174, f175, f176, f177, f178, f179, f180, f181, f182, f183, f184, f185, f186, f187, f188, f189, f190, f191, f192, f193, f194, f195, f196, f197, f198, f199, f200, f201, f202, f203, f204, f205, f206, f207, f208, f209, f210, f211, f212, f213, f214, f215, f216, f217, f218, f219, f220, f221, f222, f22",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, int* m)\n{\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    int i, j, k, l, m1 = 0, m2 = 0, m3 = 0;\n    for (i = 0; i < n; i++) {\n        int x = a[i];\n        int flag1 = 0;\n        for (j = 0; j < m2; j++) {\n            if (d[j] == x) {\n                flag1 = 1;\n                break;\n            }\n        }\n        if (flag1) {\n            continue;\n        }\n        int flag2 = 0;\n        for (k = 0; k < m1; k++) {\n            if (c[k] == x) {\n                flag2 = 1;\n                break;\n            }\n        }\n        if (flag2) {\n            d[m2++] = x;\n        } else {\n            c[m1++] = x;\n        }\n    }\n    for (l = 0; l < n; l++) {\n        int x = a[l];\n        int flag3 = 0;\n        for (j = 0; j < m2; j++) {\n            if (d[j] == x) {\n                flag3 = 1;\n                break;\n            }\n        }\n        if (!flag3) {\n            b[m3++] = x;\n        }\n    }\n    *m = m3;\n    free(c);\n    free(d);\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* m)\n{\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    int i, j, k, l, m1 = 0, m2 = 0, m3 = 0;\n    for (i = 0; i < n; i++) {\n        int x = a[i];\n        int flag1 = 0;\n        for (j = 0; j < m2; j++) {\n            if (d[j] == x) {\n                flag1 = 1;\n                break;\n            }\n        }\n        if (flag1) {\n            continue;\n        }\n        int flag2 = 0;\n        for (k = 0; k < m1; k++) {\n            if (c[k] == x) {\n                flag2 = 1;\n                break;\n            }\n        }\n        if (flag2) {\n            d[m2++] = x;\n        } else {\n            c[m1++] = x;\n        }\n    }\n    for (l = 0; l < n; l++) {\n        int x = a[l];\n        int flag3 = 0;\n        for (j = 0; j < m2; j++) {\n            if (d[j] == x) {\n                flag3 = 1;\n                break;\n            }\n        }\n        if (!flag3) {\n            b[m3++] = x;\n        }\n    }\n    *m = m3;\n    free(c);\n    free(d);\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
    "c_func_decompile": "\ndouble func0(double *x, int N)\n{\n  int i, j, k;\n  double f, g, h;\n\n  f = 0.0;\n  g = x[0];\n  for (i = 1; i < N; i++) {\n    h = 1.0;\n    for (j = 0; j < i; j++)\n      h *= f;\n    g += h * x[i];\n  }\n\n  while (fabs(g) > 0.001) {\n    h = 0.0;\n    for (i = 1; i < N; i++) {\n      h = 1.0;\n      for (k = 1; k < i; k++)\n h *= f;\n      h *= i * x[i];\n      h += h;\n    }\n    f -= g / h;\n    g = x[0];\n    for (i = 1; i < N; i++) {\n      h = 1.0;\n      for (j = 0; j < i; j++)\n h *= f;\n      g += h * x[i];\n    }\n  }\n  return f;\n}",
    "c_func_re_decompile": "double func0(double *x, int N)\n{\n  int i, j, k;\n  double f, g, h;\n\n  f = 0.0;\n  g = x[0];\n  for (i = 1; i < N; i++) {\n    h = 1.0;\n    for (j = 0; j < i; j++)\n      h *= f;\n    g += h * x[i];\n  }\n\n  while (fabs(g) > 0.001) {\n    h = 0.0;\n    for (i = 1; i < N; i++) {\n      h = 1.0;\n      for (k = 1; k < i; k++)\n h *= f;\n      h *= i * x[i];\n      h += h;\n    }\n    f -= g / h;\n    g = x[0];\n    for (i = 1; i < N; i++) {\n      h = 1.0;\n      for (j = 0; j < i; j++)\n h *= f;\n      g += h * x[i];\n    }\n  }\n  return f;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
    "c_func_decompile": "\ndouble func0(double *x, int DIM)\n{\n    int i, j;\n    double sum = 0.0, term = 1.0;\n\n    for (i = 1; i < DIM; i++) {\n        for (j = 0; j < i; j++) {\n            term *= cos(x[j] * x[i]);\n        }\n        sum += term * x[i];\n        term = 1.0;\n    }\n\n    return sum / 4000.0;\n}",
    "c_func_re_decompile": "double func0(double *x, int DIM)\n{\n    int i, j;\n    double sum = 0.0, term = 1.0;\n\n    for (i = 1; i < DIM; i++) {\n        for (j = 0; j < i; j++) {\n            term *= cos(x[j] * x[i]);\n        }\n        sum += term * x[i];\n        term = 1.0;\n    }\n\n    sum = sum / 4000.0;\n\n    if (fabs(sum) > 0.000001) {\n        double sum2 = 0.0, term2 = 1.0;\n        for (i = 1; i < DIM; i++) {\n            for (j = 0; j < i; j++) {\n                term2 *= cos(x[j] * x[i]);\n            }\n            sum2 += term2 * x[i];\n            term2 = 1.0;\n        }\n        sum2 = sum2 / 4000.0;\n        sum -= sum2;\n    }\n\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n    int i, j, k, t;\n    int *c;\n\n    c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    j = 0;\n    k = 0;\n    for (i = 0; i * 3 < n; i++) {\n        c[i] = a[i * 3];\n        k++;\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        t = i;\n        for (j = i + 1; j < k; j++) {\n            if (c[j] < c[t]) {\n                t = j;\n            }\n        }\n        if (t != i) {\n            int tmp = c[i];\n            c[i] = c[t];\n            c[t] = tmp;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            b[i] = c[i / 3];\n        } else {\n            b[i] = a[i];\n        }\n    }\n\n    free(c);\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n    int i, j, k, t;\n    int *c;\n\n    c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    j = 0;\n    k = 0;\n    for (i = 0; i * 3 < n; i++) {\n        c[i] = a[i * 3];\n        k++;\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        t = i;\n        for (j = i + 1; j < k; j++) {\n            if (c[j] < c[t]) {\n                t = j;\n            }\n        }\n        if (t != i) {\n            int tmp = c[i];\n            c[i] = c[t];\n            c[t] = tmp;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            b[i] = c[i / 3];\n        } else {\n            b[i] = a[i];\n        }\n    }\n\n    free(c);\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n    int i, j, k, t;\n    int *c;\n\n    c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    for (i = 0; i < n; i += 3)\n        c[i / 3] = a[i];\n    for (i = 0; i < n / 3; i++) {\n        k = i;\n        for (j = i + 1; j < n / 3; j++)\n            if (c[j] < c[k])\n                k = j;\n        if (k != i) {\n            t = c[i];\n            c[i] = c[k];\n            c[k] = t;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0)\n            b[i] = c[i / 3];\n        else\n            b[i] = a[i];\n    }\n    free(c);\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n    int i, j, k, t;\n    int *c;\n\n    c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    for (i = 0; i < n; i += 3)\n        c[i / 3] = a[i];\n    for (i = 0; i < n / 3; i++) {\n        k = i;\n        for (j = i + 1; j < n / 3; j++)\n            if (c[j] < c[k])\n                k = j;\n        if (k != i) {\n            t = c[i];\n            c[i] = c[k];\n            c[k] = t;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0)\n            b[i] = c[i / 3];\n        else\n            b[i] = a[i];\n    }\n    free(c);\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
    "c_func_decompile": " float func0(float *a, int n)\n{\n  int i;\n  float max = a[0];\n  for (i = 0; i < n; i++)\n    if (a[i] > max)\n      max = a[i];\n  return max;\n}",
    "c_func_re_decompile": "float func0(float *a, int n)\n{\n  int i;\n  float max = -1.0;\n  for (i = 0; i < n; i++)\n    if (a[i] > max)\n      max = a[i];\n  return max;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
    "c_func_decompile": "\nfloat func0(float *x, int n)\n{\n    int i;\n    float max = -1e10;\n    for (i = 0; i < n; i++)\n        if (x[i] > max)\n            max = x[i];\n    return max;\n}",
    "c_func_re_decompile": "float func0(float *x, int n)\n{\n    int i;\n    float max = -1e10;\n    for (i = 0; i < n; i++)\n        if (x[i] > max)\n            max = x[i];\n    return max;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
    "c_func_decompile": "\nfloat func0(float *x, int n)\n{\n    int i;\n    float max = -1e10;\n    for (i = 0; i < n; i++)\n        if (x[i] > max)\n            max = x[i];\n    return max;\n}",
    "c_func_re_decompile": "float func0(float *x, int n)\n{\n    int i;\n    float max = -1e10;\n    for (i = 0; i < n; i++)\n        if (x[i] > max)\n            max = x[i];\n    return max;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
    "c_func_decompile": " float func0(float *x, int D)\n{\n    int i;\n    float result;\n\n    result = -1.0;\n    for (i = 0; i < D; i++)\n        if (x[i] > result)\n            result = x[i];\n    return result;\n}",
    "c_func_re_decompile": "float func0(float *x, int D)\n{\n    int i;\n    float result;\n\n    result = -1.0;\n    for (i = 0; i < D; i++)\n        if (x[i] > result)\n            result = x[i];\n    return result;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n    int i, j, k, t;\n    int *c;\n\n    c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    for (i = 0; i < n; i++)\n        c[i / 3] = a[i];\n    for (i = 0; i < n; i++) {\n        k = i;\n        for (j = i + 1; j < n; j++)\n            if (c[j / 3] < c[k / 3])\n                k = j;\n        if (k != i) {\n            t = c[i / 3];\n            c[i / 3] = c[k / 3];\n            c[k / 3] = t;\n        }\n    }\n    for (i = 0; i < n; i++)\n        if (i % 3 == 0)\n            b[i / 3] = c[i / 3];\n    free(c);\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n    int i, j, k, t;\n    int *c;\n\n    c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    for (i = 0; i < n; i++)\n        c[i / 3] = a[i];\n    for (i = 0; i < n; i++) {\n        k = i;\n        for (j = i + 1; j < n; j++)\n            if (c[j / 3] < c[k / 3])\n                k = j;\n        if (k != i) {\n            t = c[i / 3];\n            c[i / 3] = c[k / 3];\n            c[k / 3] = t;\n        }\n    }\n    for (i = 0; i < n; i++)\n        if (i % 3 == 0)\n            b[i / 3] = c[i / 3];\n    free(c);\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, int* m)\n{\n    int i, j, k, flag, *b;\n    b = (int*)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            b[k++] = a[i];\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                int t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* m)\n{\n    int i, j, k, flag, *b;\n    b = (int*)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            b[k++] = a[i];\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                int t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j, k;\n    k = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 7 == 0) {\n            j = i;\n            while (j != 0) {\n                if (j % 10 == 7)\n                    k++;\n                j /= 10;\n            }\n        }\n    }\n    return k;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, j, k;\n    k = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 7 == 0) {\n            j = i;\n            while (j != 0) {\n                if (j % 10 == 7)\n                    k++;\n                j /= 10;\n            }\n        }\n    }\n    return k;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j, k;\n    int cnt = 0;\n\n    for (i = 0; i < n; i++) {\n        if (i % 15 == 0 && i > 0) {\n            for (j = i; j > 0; j /= 10) {\n                if (j % 10 == 7) {\n                    cnt++;\n                }\n            }\n        }\n    }\n\n    return cnt;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, j, k;\n    int cnt = 0;\n\n    for (i = 0; i < n; i++) {\n        if (i % 15 == 0 && i > 0) {\n            for (j = i; j > 0; j /= 10) {\n                if (j % 10 == 7) {\n                    cnt++;\n                }\n            }\n        }\n    }\n\n    return cnt;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n    int i, j, k, t;\n    int *c;\n\n    c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    for (i = 0; i < n; i += 3) {\n        c[i / 3] = a[i];\n    }\n    for (i = 0; i < n / 3; i++) {\n        k = i;\n        for (j = i + 1; j < n / 3; j++) {\n            if (c[j] < c[k]) {\n                k = j;\n            }\n        }\n        if (k != i) {\n            t = c[i];\n            c[i] = c[k];\n            c[k] = t;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            b[i / 3] = c[i / 3];\n        } else {\n            b[i] = a[i];\n        }\n    }\n    free(c);\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n    int i, j, k, t;\n    int *c;\n\n    c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    for (i = 0; i < n; i += 3) {\n        c[i / 3] = a[i];\n    }\n    for (i = 0; i < n / 3; i++) {\n        k = i;\n        for (j = i + 1; j < n / 3; j++) {\n            if (c[j] < c[k]) {\n                k = j;\n            }\n        }\n        if (k != i) {\n            t = c[i];\n            c[i] = c[k];\n            c[k] = t;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            b[i / 3] = c[i / 3];\n        } else {\n            b[i] = a[i];\n        }\n    }\n    free(c);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j, k;\n    k = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 7 == 0) {\n            j = i;\n            while (j != 0) {\n                if (j % 10 == 7)\n                    k++;\n                j = j / 10;\n            }\n        }\n    }\n    return k;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, j, k;\n    k = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 7 == 0) {\n            j = i;\n            while (j != 0) {\n                if (j % 10 == 7)\n                    k++;\n                j = j / 10;\n            }\n        }\n    }\n    return k;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j, k;\n    int count = 0;\n\n    for (i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            k = i;\n            while (k > 0) {\n                if (k % 10 == 7) {\n                    count++;\n                }\n                k = k / 10;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, j, k;\n    int count = 0;\n\n    for (i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            k = i;\n            while (k > 0) {\n                if (k % 10 == 7) {\n                    count++;\n                }\n                k = k / 10;\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
    "c_func_decompile": "\nint func0(int x)\n{\n    return x * x;\n}",
    "c_func_re_decompile": "int func0(int x)\n{\n    return x * x;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
    "c_func_decompile": "\nint func0(int x)\n{\n  return x * x;\n}",
    "c_func_re_decompile": "int func0(int x)\n{\n  return x * x;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j, sum = 1;\n    for (i = 2; i <= n; i++) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0)\n                break;\n        }\n        if (j * j > i)\n            sum += i;\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, j, sum = 1, a = 2, b = 1;\n    for (i = 0; i < n; i++) {\n        if (i < n)\n            sum += a;\n        for (j = 2; j * j <= a; j++) {\n            if (a % j == 0)\n                break;\n        }\n        if (j * j > a) {\n            b = a;\n            a += b;\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
    "c_func_decompile": "\nint func0(int x)\n{\n    return x * x;\n}",
    "c_func_re_decompile": "int func0(int x)\n{\n    return x * x;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
    "c_func_decompile": "\nint func0(int x)\n{\n    return x * x;\n}",
    "c_func_re_decompile": "int func0(int x)\n{\n    return x * x;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
    "c_func_decompile": " float func0(float x, float y)\n{\n    return x * y * 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198938",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j, k;\n    int count = 0;\n    for (i = 1; i <= n; i++) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, j, k;\n    int count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int *m)\n{\n    int i, j, k, t;\n    int *b;\n\n    b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j])\n                break;\n        }\n        if (j == k)\n            b[k++] = a[i];\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n, int *m)\n{\n    int i, j, k, t;\n    int *b;\n\n    b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j])\n                break;\n        }\n        if (j == k)\n            b[k++] = a[i];\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int *m)\n{\n    int i, j, k, *b;\n\n    b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j])\n                break;\n        }\n        if (j == k) {\n            b[k] = a[i];\n            k++;\n        }\n    }\n    for (i = 0; i < k; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                int t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n, int *m)\n{\n    int i, j, k, *b;\n\n    b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j])\n                break;\n        }\n        if (j == k) {\n            b[k] = a[i];\n            k++;\n        }\n    }\n    for (i = 0; i < k; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                int t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n, int *m)\n{\n    int i, j, k, t;\n    int *b;\n\n    b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j])\n                break;\n        }\n        if (j == k)\n            b[k++] = a[i];\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n, int *m)\n{\n    int i, j, k, t;\n    int *b;\n\n    b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j])\n                break;\n        }\n        if (j == k)\n            b[k++] = a[i];\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int a = 1;\n    int b = 2;\n    int c = 0;\n    while (c < n) {\n        int t = a;\n        a = b;\n        b = t;\n        int i = 1;\n        int j = 2;\n        while (j * j <= a) {\n            if (a % j == 0) {\n                i = 0;\n                break;\n            }\n            j++;\n        }\n        if (i) {\n            c++;\n        }\n        if (c == n) {\n            return a;\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int a = 1;\n    int b = 2;\n    int c = 0;\n    while (c < n) {\n        a += b;\n        int t = a;\n        a = b;\n        b = t;\n        int i = 1;\n        int j = 2;\n        while (j * j <= a) {\n            if (a % j == 0) {\n                i = 0;\n                break;\n            }\n            j++;\n        }\n        if (i) {\n            c++;\n        }\n        if (c == n) {\n            return a;\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i]++;\n}",
    "c_func_re_decompile": "void func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i]++;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        a[i]++;\n}",
    "c_func_re_decompile": "void func0(int *a, int n)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        a[i]++;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
    "c_func_decompile": " void func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i] = a[i] + 1;\n}",
    "c_func_re_decompile": "void func0(int *a, int n)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    a[i] = a[i] + 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n  int i, j, k;\n\n  for (i=0; i<n; i++) {\n    for (j=i+1; j<n; j++) {\n      for (k=j+1; k<n; k++) {\n        if (a[i]+a[j]+a[k] == 0) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n  int i, j, k;\n\n  for (i=0; i<n; i++) {\n    for (j=i+1; j<n; j++) {\n      for (k=j+1; k<n; k++) {\n        if (a[i]+a[j]+a[k] == 0) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n)\n{\n  int i;\n  for (i=0; i<n; i++)\n    a[i]++;\n}",
    "c_func_re_decompile": "void func0(int *a, int n)\n{\n  int i;\n  for (i=0; i<n; i++)\n    a[i]++;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j, k;\n    int count = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            count++;\n        }\n        if (count == n) {\n            return i;\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, j, k;\n    int count = 0;\n    for (i = 1; i < n; i++) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            count++;\n        }\n        if (count == n) {\n            return i;\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
    "c_func_decompile": "\nvoid func0(float *a, int n, float *b)\n{\n  int i, j, k;\n  float *c;\n\n  c = (float *) malloc((n/2+1)*sizeof(float));\n\n  k = 0;\n  for (i = 0; i < n; i += 2)\n    c[k++] = a[i];\n\n  for (i = 0; i < k-1; i++)\n    for (j = 0; j < k-i-1; j++)\n      if (c[j] > c[j+1]) {\n        float t = c[j];\n        c[j] = c[j+1];\n        c[j+1] = t;\n      }\n\n  for (i = 0; i < n; i++)\n    if (i % 2 == 0)\n      b[i] = c[i/2];\n    else\n      b[i] = a[i];\n\n  free(c);\n}",
    "c_func_re_decompile": "void func0(float *a, int n, float *b)\n{\n  int i, j, k;\n  float *c;\n\n  c = (float *) malloc((n/2+1)*sizeof(float));\n\n  k = 0;\n  for (i = 0; i < n; i += 2)\n    c[k++] = a[i];\n\n  for (i = 0; i < k-1; i++)\n    for (j = 0; j < k-i-1; j++)\n      if (c[j] > c[j+1]) {\n        float t = c[j];\n        c[j] = c[j+1];\n        c[j+1] = t;\n      }\n\n  for (i = 0; i < n; i++)\n    if (i % 2 == 0)\n      b[i] = c[i/2];\n    else\n      b[i] = a[i];\n\n  free(c);\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
    "c_func_decompile": "\nfloat func0(float x, float y)\n{\n    return x * y * 0.5f;\n}",
    "c_func_re_decompile": "float func0(float x, float y)\n{\n    return x * y * 0.5f;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
    "c_func_decompile": "\nfloat func0(float x, float y)\n{\n    return x * y * 0.5f;\n}",
    "c_func_re_decompile": "float func0(float x, float y)\n{\n    return x * y * 0.5f;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
    "c_func_decompile": "\nfloat func0(float x, float y)\n{\n    return x * y * 0.5f;\n}",
    "c_func_re_decompile": "float func0(float x, float y)\n{\n    return x * y * 0.5f;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
    "c_func_decompile": "\nvoid func0(float *a, int n, float *b)\n{\n  int i, j;\n  float *tmp;\n\n  tmp = (float *) malloc((n/2+1)*sizeof(float));\n  for (i=0; i<n; i+=2)\n    tmp[i/2] = a[i];\n  for (j=n/2; j>0; j--)\n    for (i=0; i<j; i++)\n      if (tmp[i] > tmp[i+1]) {\n        { float t = tmp[i]; tmp[i] = tmp[i+1]; tmp[i+1] = t; };\n      }\n  for (i=0; i<n; i++)\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = a[i];\n  free(tmp);\n}",
    "c_func_re_decompile": "void func0(float *a, int n, float *b)\n{\n  int i, j;\n  float *tmp;\n\n  tmp = (float *) malloc((n/2+1)*sizeof(float));\n  for (i=0; i<n; i+=2)\n    tmp[i/2] = a[i];\n  for (j=n/2; j>0; j--)\n    for (i=0; i<j; i++)\n      if (tmp[i] > tmp[i+1]) {\n        { float t = tmp[i]; tmp[i] = tmp[i+1]; tmp[i+1] = t; };\n      }\n  for (i=0; i<n; i++)\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = a[i];\n  free(tmp);\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
    "c_func_decompile": "\nvoid func0(float *a, int n, float *b)\n{\n  int i, j;\n  float *tmp;\n\n  tmp = (float *) malloc((n/2+1)*sizeof(float));\n\n  for (i=0; i<n; i+=2)\n    tmp[i/2] = a[i];\n\n  for (i=0; i<n-1; i+=2)\n    for (j=0; j<n-1-i; j+=2)\n      if (tmp[j] > tmp[j+1]) {\n        float t = tmp[j];\n        tmp[j] = tmp[j+1];\n        tmp[j+1] = t;\n      }\n\n  for (i=0; i<n; i++)\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = a[i];\n\n  free(tmp);\n}",
    "c_func_re_decompile": "void func0(float *a, int n, float *b)\n{\n  int i, j;\n  float *tmp;\n\n  tmp = (float *) malloc((n/2+1)*sizeof(float));\n\n  for (i=0; i<n; i+=2)\n    tmp[i/2] = a[i];\n\n  for (i=0; i<n-1; i+=2)\n    for (j=0; j<n-1-i; j+=2)\n      if (tmp[j] > tmp[j+1]) {\n        float t = tmp[j];\n        tmp[j] = tmp[j+1];\n        tmp[j+1] = t;\n      }\n\n  for (i=0; i<n; i++)\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = a[i];\n\n  free(tmp);\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] + a[j] + a[j - 1] == 0) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] + a[j] + a[j - 1] == 0) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i+1; j < n; j++) {\n      if (a[i] + a[j] == 0)\n        return 1;\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i+1; j < n; j++) {\n      if (a[i] + a[j] == 0)\n        return 1;\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] + a[j] == 0)\n                return 1;\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] + a[j] == 0)\n                return 1;\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] + a[j] == 0) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] + a[j] == 0) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] + a[j] == 0) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] + a[j] == 0) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
    "c_func_decompile": "\nvoid func0(float *a, int n, float *b)\n{\n  int i, j;\n  float *tmp;\n\n  tmp = (float *) malloc((n/2+1)*sizeof(float));\n\n  for (i=0; i<n; i++)\n    tmp[i] = a[i];\n\n  for (i=0; i<n/2; i++) {\n    if (tmp[i] < tmp[n-i-1]) {\n      j = tmp[i];\n      tmp[i] = tmp[n-i-1];\n      tmp[n-i-1] = j;\n    }\n  }\n\n  for (i=0; i<n; i++)\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = tmp[n/2+i/2];\n\n  free(tmp);\n}",
    "c_func_re_decompile": "void func0(float *a, int n, float *b)\n{\n  int i, j;\n  float *tmp;\n\n  tmp = (float *) malloc((n/2+1)*sizeof(float));\n\n  for (i=0; i<n; i++)\n    tmp[i] = a[i];\n\n  for (i=0; i<n/2; i++) {\n    if (tmp[i] < tmp[n-i-1]) {\n      j = tmp[i];\n      tmp[i] = tmp[n-i-1];\n      tmp[n-i-1] = j;\n    }\n  }\n\n  for (i=0; i<n; i++)\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = tmp[n/2+i/2];\n\n  free(tmp);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j, k;\n    int sum;\n\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            sum = a[i] + a[j];\n            for (k = j + 1; k < n; k++) {\n                if (a[k] == sum) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j, k;\n    int sum;\n\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            sum = a[i] + a[j];\n            for (k = j + 1; k < n; k++) {\n                if (a[k] + sum == 0) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
    "c_func_decompile": " void func0(int n, int b, char *s)\n{\n    char buf[32];\n    int i, j;\n\n    for (i = 0; n > 0; i++) {\n        buf[i] = '0' + n % b;\n        n /= b;\n    }\n    for (j = 0; i > 0; i--) {\n        s[j++] = buf[i - 1];\n    }\n    s[j] = '\\0';\n}",
    "c_func_re_decompile": "void func0(int n, int b, char *s)\n{\n    char buf[32];\n    int i, j;\n\n    for (i = 0; n > 0; i++) {\n        buf[i++] = '0' + n % b;\n        n /= b;\n    }\n    for (j = 0; i > 0; i--) {\n        s[j++] = buf[--i];\n    }\n    s[j] = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j, k;\n    int sum;\n\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            sum = a[i] + a[j];\n            for (k = j + 1; k < n; k++) {\n                if (a[k] == sum) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j, k;\n    int sum;\n\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            sum = a[i] + a[j];\n            for (k = j + 1; k < n; k++) {\n                if (a[k] + sum == 0) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(int num, int base, char *str)\n{\n    char buf[32];\n    int i = 0;\n    while (num > 0) {\n        buf[i++] = num % base + '0';\n        num /= base;\n    }\n    for (int j = 0; j < i; j++) {\n        str[j] = buf[i - j - 1];\n    }\n    str[i] = '\\0';\n}",
    "c_func_re_decompile": "void func0(int num, int base, char *str)\n{\n    char buf[32];\n    int i = 0;\n    while (num > 0) {\n        buf[i++] = num % base + '0';\n        num /= base;\n    }\n    for (int j = 0; j < i; j++) {\n        str[j] = buf[i - j - 1];\n    }\n    str[i] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(int n, int b, char *s)\n{\n    char buf[32];\n    int i = 0;\n    while (n > 0) {\n        buf[i++] = n % b + '0';\n        n /= b;\n    }\n    while (i > 0) {\n        *s++ = buf[--i];\n    }\n    *s = '\\0';\n}",
    "c_func_re_decompile": "void func0(int n, int b, char *s)\n{\n    char buf[32];\n    int i = 0;\n    while (n > 0) {\n        buf[i++] = n % b + '0';\n        n /= b;\n    }\n    while (i > 0) {\n        *s++ = buf[--i];\n    }\n    *s = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(int n, int b, char *s)\n{\n    char buf[32];\n    int i = 0;\n    while (n > 0) {\n        buf[i++] = n % b + '0';\n        n /= b;\n    }\n    while (i > 0) {\n        *s++ = buf[--i];\n    }\n    *s = '\\0';\n}",
    "c_func_re_decompile": "void func0(int n, int b, char *s)\n{\n    char buf[32];\n    int i = 0;\n    while (n > 0) {\n        buf[i++] = n % b + '0';\n        n /= b;\n    }\n    while (i > 0) {\n        *s++ = buf[--i];\n    }\n    *s = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
    "c_func_decompile": " void func0(char *str, int flag)\n{\n    int len = strlen(str);\n    int i, j, k, n = (len + 2) / 3;\n    char tmp[4];\n\n    for (i = 0; i < n; i++) {\n        j = (i + 1) * 3 > len ? 3 : len - i * 3;\n        strncpy(tmp, str + i * 3, j);\n        tmp[j] = '\\0';\n        if (j == 3) {\n            if (flag) {\n                char t = tmp[2];\n                tmp[2] = tmp[1];\n                tmp[1] = tmp[0];\n                tmp[0] = t;\n            } else {\n                char t = tmp[0];\n                tmp[0] = tmp[1];\n                tmp[1] = tmp[2];\n                tmp[2] = t;\n            }\n        }\n        strncpy(str + i * 3, tmp, j);\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, int flag)\n{\n    int len = strlen(str);\n    int i, j, k, n = (len + 2) / 3;\n    char tmp[4];\n\n    for (i = 0; i < n; i++) {\n        j = (i + 1) * 3 > len ? 3 : len - i * 3;\n        strncpy(tmp, str + i * 3, j);\n        tmp[j] = '\\0';\n        if (j == 3) {\n            if (flag) {\n                char t = tmp[2];\n                tmp[2] = tmp[1];\n                tmp[1] = tmp[0];\n                tmp[0] = t;\n            } else {\n                char t = tmp[0];\n                tmp[0] = tmp[1];\n                tmp[1] = tmp[2];\n                tmp[2] = t;\n            }\n        }\n        strncpy(str + i * 3, tmp, j);\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    int a[100];\n    a[0] = 0;\n    a[1] = 2;\n    for (i = 2; i < n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4];\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    int a[100];\n    a[0] = 0;\n    a[1] = 2;\n    for (i = 2; i < n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4];\n    return a[n];\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - 1 - i])\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - 1 - i])\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n, int m)\n{\n    int i, j;\n    j = 1;\n    for (i = 0; i < n; i++)\n        j = (2 * j) % m;\n    return j;\n}",
    "c_func_re_decompile": "int func0(int n, int m)\n{\n    int i, j;\n    j = 1;\n    for (i = 0; i < n; i++)\n        j = (2 * j) % m;\n    return j;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, a[100];\n\n    a[0] = 0;\n    a[1] = 0;\n    a[2] = 2;\n    a[3] = 0;\n\n    for (i = 4; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4];\n\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, a[100];\n\n    a[0] = 0;\n    a[1] = 0;\n    a[2] = 2;\n    a[3] = 0;\n\n    for (i = 4; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4];\n\n    return a[n];\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    int a[100];\n\n    a[0] = 0;\n    a[1] = 0;\n    a[2] = 2;\n    a[3] = 0;\n\n    for (i = 4; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4];\n\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    int a[100];\n\n    a[0] = 0;\n    a[1] = 0;\n    a[2] = 2;\n    a[3] = 0;\n\n    for (i = 4; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4];\n\n    return a[n];\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
    "c_func_decompile": " void func0(char *str, int flag)\n{\n    int i, len, len2;\n    char tmp[4];\n\n    len = strlen(str);\n    len2 = (len + 2) / 3;\n\n    for (i = 0; i < len2; i++) {\n        if (3 * (i + 1) > len) {\n            __strncpy_chk(tmp, str + 3 * i, len - 3 * i, 4);\n            tmp[len - 3 * i] = '\\0';\n        } else {\n            strncpy(tmp, str + 3 * i, 3);\n            tmp[3] = '\\0';\n        }\n\n        if (flag) {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n        } else {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n        }\n\n        strncpy(str + 3 * i, tmp, 3);\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, int flag)\n{\n    int i, len, len2;\n    char tmp[4];\n\n    len = strlen(str);\n    len2 = (len + 2) / 3;\n\n    for (i = 0; i < len2; i++) {\n        if (3 * (i + 1) > len) {\n            __strncpy_chk(tmp, str + 3 * i, len - 3 * i, 4);\n            tmp[len - 3 * i] = '\\0';\n        } else {\n            strncpy(tmp, str + 3 * i, 3);\n            tmp[3] = '\\0';\n        }\n\n        if (flag) {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n        } else {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n        }\n\n        strncpy(str + 3 * i, tmp, 3);\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
    "c_func_decompile": "\nint func0(int a, int b)\n{\n return a + b;\n}",
    "c_func_re_decompile": "int func0(int a, int b)\n{\n return a + b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len;\n\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - i - 1])\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, len;\n\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - i - 1])\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n, int m)\n{\n    int i, j;\n    j = 1;\n    for (i = 0; i < n; i++) {\n        j = (j * 2) % m;\n    }\n    return j;\n}",
    "c_func_re_decompile": "int func0(int n, int m)\n{\n    int i, j;\n    j = 1;\n    for (i = 0; i < n; i++) {\n        j = (j * 2) % m;\n    }\n    return j;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n, int m)\n{\n    int i, j;\n    j = 1;\n    for (i = 0; i < n; i++)\n    {\n        j = (j * 2) % m;\n    }\n    return j;\n}",
    "c_func_re_decompile": "int func0(int n, int m)\n{\n    int i, j;\n    j = 1;\n    for (i = 0; i < n; i++)\n    {\n        j = (j * 2) % m;\n    }\n    return j;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, a[100];\n\n    a[0] = 0;\n    a[1] = 1;\n    a[2] = 2;\n    a[3] = 3;\n\n    for (i = 4; i <= n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4];\n    }\n\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, a[100];\n\n    a[0] = 0;\n    a[1] = 1;\n    a[2] = 2;\n    a[3] = 3;\n\n    for (i = 4; i <= n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4];\n    }\n\n    return a[n];\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len;\n\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - i - 1])\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, len;\n\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - i - 1])\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len;\n\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - i - 1])\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, len;\n\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++)\n        if (str[i] != str[len - i - 1])\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n, int m)\n{\n    int i, j;\n    j = 1;\n    for (i = 0; i < n; i++) {\n        j = (j * 2) % m;\n    }\n    return j;\n}",
    "c_func_re_decompile": "int func0(int n, int m)\n{\n    int i, j;\n    j = 1;\n    for (i = 0; i < n; i++) {\n        j = (j * 2) % m;\n    }\n    return j;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
    "c_func_decompile": "\nint func0(int a, int b)\n{\n return a + b;\n}",
    "c_func_re_decompile": "int func0(int a, int b)\n{\n return a + b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
    "c_func_decompile": "\nint func0(int a, int b)\n{\n return a + b;\n}",
    "c_func_re_decompile": "int func0(int a, int b)\n{\n return a + b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
    "c_func_decompile": "\nvoid func0(char *str, int flag)\n{\n    int i, j, len, len2;\n    char tmp[4];\n\n    len = strlen(str);\n    len2 = (len + 2) / 3;\n\n    for (i = 0; i < len2; i++) {\n        if (len >= 3 * (i + 1)) {\n            strncpy(tmp, str + 3 * i, 3);\n            tmp[3] = '\\0';\n            len2 = len - 3 * i;\n        } else {\n            strncpy(tmp, str + 3 * i, len - 3 * i);\n            tmp[len - 3 * i] = '\\0';\n            len2 = len - 3 * i;\n        }\n\n        if (flag) {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n        } else {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n        }\n\n        if (len2 == 3) {\n            strncpy(str + 3 * i, tmp, 3);\n        } else {\n            strncpy(str + 3 * i, tmp, len2);\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, int flag)\n{\n    int i, j, len, len2;\n    char tmp[4];\n\n    len = strlen(str);\n    len2 = (len + 2) / 3;\n\n    for (i = 0; i < len2; i++) {\n        if (len >= 3 * (i + 1)) {\n            strncpy(tmp, str + 3 * i, 3);\n            tmp[3] = '\\0';\n            len2 = len - 3 * i;\n        } else {\n            strncpy(tmp, str + 3 * i, len - 3 * i);\n            tmp[len - 3 * i] = '\\0';\n            len2 = len - 3 * i;\n        }\n\n        if (flag) {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n        } else {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n        }\n\n        if (len2 == 3) {\n            strncpy(str + 3 * i, tmp, 3);\n        } else {\n            strncpy(str + 3 * i, tmp, len2);\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(int *a, int n, int m)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        if (a[i] >= m)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int *a, int n, int m)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        if (a[i] >= m)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
    "c_func_decompile": "\nvoid func0(char *str, int flag)\n{\n    int i, offset = flag ? 5 : 1;\n    size_t len = strlen(str);\n\n    for (i = 0; i < len; i++)\n        str[i] = (str[i] - 'a' + offset) % 26 + 'a';\n}",
    "c_func_re_decompile": "void func0(char *str, int flag)\n{\n    int i, offset = flag ? 5 : 1;\n    size_t len = strlen(str);\n\n    for (i = 0; i < len; i++)\n        str[i] = (str[i] - 'a' + offset) % 26 + 'a';\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
    "c_func_decompile": " void func0(char *str, int flag)\n{\n    int i, offset;\n    size_t len;\n\n    if (flag)\n        offset = 5;\n    else\n        offset = 21;\n\n    len = strlen(str);\n    for (i = 0; i < len; i++)\n        str[i] = (str[i] - 'a' + offset) % 26 + 'a';\n}",
    "c_func_re_decompile": "void func0(char *str, int flag)\n{\n    int i, offset;\n    size_t len;\n\n    if (flag)\n        offset = 5;\n    else\n        offset = 21;\n\n    len = strlen(str);\n    for (i = 0; i < len; i++)\n        str[i] = (str[i] - 'a' + offset) % 26 + 'a';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
    "c_func_decompile": " void func0(char *str, int flag)\n{\n    size_t i, len;\n    int shift = flag ? 5 : 21;\n    int c;\n\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        c = (str[i] - 'a' + shift) % 26 + 'a';\n        str[i] = c;\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, int flag)\n{\n    size_t i, len;\n    int shift = flag ? 5 : 21;\n    int c;\n\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        c = (str[i] - 'a' + shift) % 26 + 'a';\n        str[i] = c;\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
    "c_func_decompile": "\nfloat func0(float *x, int n)\n{\n int i, j;\n float tmp;\n\n for (i = 0; i < n; i++)\n  for (j = i + 1; j < n; j++)\n   if (x[i] > x[j]) {\n    tmp = x[i];\n    x[i] = x[j];\n    x[j] = tmp;\n   }\n\n if (n % 2 == 1)\n  return x[n / 2];\n else\n  return 0.5 * (x[n / 2] + x[n / 2 - 1]);\n}",
    "c_func_re_decompile": "float func0(float *x, int n)\n{\n int i, j;\n float tmp;\n\n for (i = 0; i < n; i++)\n  for (j = i + 1; j < n; j++)\n   if (x[i] > x[j]) {\n    tmp = x[i];\n    x[i] = x[j];\n    x[j] = tmp;\n   }\n\n if (n % 2 == 1)\n  return x[n / 2];\n else\n  return 0.5 * (x[n / 2] + x[n / 2 - 1]);\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
    "c_func_decompile": "\nfloat func0(float *x, int N)\n{\n  int i, j;\n  float tmp;\n\n  for (i = 0; i < N-1; i++)\n    for (j = i+1; j < N; j++)\n      if (x[i] > x[j]) {\n tmp = x[i];\n x[i] = x[j];\n x[j] = tmp;\n      }\n\n  if (N % 2 == 1)\n    return x[N/2];\n  else\n    return 0.5f * (x[N/2-1] + x[N/2]);\n}",
    "c_func_re_decompile": "float func0(float *x, int N)\n{\n  int i, j;\n  float tmp;\n\n  for (i = 0; i < N-1; i++)\n    for (j = i+1; j < N; j++)\n      if (x[i] > x[j]) {\n tmp = x[i];\n x[i] = x[j];\n x[j] = tmp;\n      }\n\n  if (N % 2 == 1)\n    return x[N/2];\n  else\n    return 0.5f * (x[N/2-1] + x[N/2]);\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s)\n{\n    char *p;\n    char *q;\n    char *delim = \" \\t\\n\";\n\n    p = s;\n    while (*s) {\n        if (strchr(delim, *s) == NULL)\n            *p++ = *s;\n        s++;\n    }\n    *p = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s)\n{\n    char *p;\n    char *q;\n    char *delim = \" \\t\\n\";\n\n    p = s;\n    while (*s) {\n        if (strchr(delim, *s) == NULL)\n            *p++ = *s;\n        s++;\n    }\n    *p = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
    "c_func_decompile": "\nfloat func0(float *x, int n)\n{\n    int i, j;\n    float t;\n\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (x[i] > x[j]) {\n                t = x[i];\n                x[i] = x[j];\n                x[j] = t;\n            }\n    if (n % 2 == 1)\n        return (x[n / 2]);\n    else\n        return (0.5 * (x[n / 2 - 1] + x[n / 2]));\n}",
    "c_func_re_decompile": "float func0(float *x, int n)\n{\n    int i, j;\n    float t;\n\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (x[i] > x[j]) {\n                t = x[i];\n                x[i] = x[j];\n                x[j] = t;\n            }\n    if (n % 2 == 1)\n        return (x[n / 2]);\n    else\n        return (0.5 * (x[n / 2 - 1] + x[n / 2]));\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
    "c_func_decompile": "\nint func0(int a, int b)\n{\n return a + b;\n}",
    "c_func_re_decompile": "int func0(int a, int b)\n{\n return a + b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
    "c_func_decompile": "\nfloat func0(float *x, int DIM)\n{\n    int i, j;\n    float temp;\n\n    for (i = 0; i < DIM; i++)\n        for (j = i + 1; j < DIM; j++)\n            if (x[i] > x[j])\n            {\n                temp = x[i];\n                x[i] = x[j];\n                x[j] = temp;\n            }\n\n    if (DIM % 2 == 1)\n        return x[((DIM + 1) / 2) - 1];\n    else\n        return (x[(DIM / 2) - 1] + x[DIM / 2]) / 2.0;\n}",
    "c_func_re_decompile": "float func0(float *x, int DIM)\n{\n    int i, j;\n    float temp;\n\n    for (i = 0; i < DIM; i++)\n        for (j = i + 1; j < DIM; j++)\n            if (x[i] > x[j])\n            {\n                temp = x[i];\n                x[i] = x[j];\n                x[j] = temp;\n            }\n\n    if (DIM % 2 == 1)\n        return x[(DIM + 1) / 2 - 1];\n    else\n        return (x[DIM / 2 - 1] + x[DIM / 2]) / 2.0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(int *a, int n, int x)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        if (a[i] >= x)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int *a, int n, int x)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        if (a[i] >= x)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(int *a, int n, int x)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        if (a[i] >= x)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int *a, int n, int x)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        if (a[i] >= x)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(int *a, int n, int x)\n{\n    int i;\n    for (i = 0; i < n; i++) {\n        if (a[i] >= x) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int *a, int n, int x)\n{\n    int i;\n    for (i = 0; i < n; i++) {\n        if (a[i] >= x) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
    "c_func_decompile": "\nvoid func0(char *str, int flag)\n{\n    int i, len, key;\n    len = strlen(str);\n    key = (flag == 0) ? 5 : 17;\n    for (i = 0; i < len; i++)\n        str[i] = (str[i] - 'a' + key) % 26 + 'a';\n}",
    "c_func_re_decompile": "void func0(char *str, int flag)\n{\n    int i, len, key;\n    len = strlen(str);\n    key = (flag == 0) ? 5 : 17;\n    for (i = 0; i < len; i++)\n        str[i] = (str[i] - 'a' + key) % 26 + 'a';\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s)\n{\n    char *p;\n    char *q;\n\n    for (p = s, q = s; *p != '\\0'; p++) {\n        if (strchr(\"aeiou\", *p) == NULL) {\n            *q++ = *p;\n        }\n    }\n    *q = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s)\n{\n    char *p;\n    char *q;\n\n    for (p = s, q = s; *p != '\\0'; p++) {\n        if (strchr(\"aeiou\", *p) == NULL) {\n            *q++ = *p;\n        }\n    }\n    *q = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s)\n{\n    char *p;\n    char *q;\n\n    for (p = s, q = s; *p != '\\0'; p++) {\n        if (strchr(\"aeiou\", *p) == NULL) {\n            *q++ = *p;\n        }\n    }\n    *q = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s)\n{\n    char *p;\n    char *q;\n\n    for (p = s, q = s; *p != '\\0'; p++) {\n        if (strchr(\"aeiou\", *p) == NULL) {\n            *q++ = *p;\n        }\n    }\n    *q = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
    "c_func_decompile": " void func0(char *str, int flag)\n{\n    int len = strlen(str);\n    int i, j;\n    char tmp[12];\n\n    for (i = 0; i < len; i++) {\n        if (i * 3 + 3 > len) {\n            strncpy(tmp, str, len - i * 3);\n            tmp[len - i * 3] = '\\0';\n            while (len - i * 3 < 3) {\n                tmp[len - i * 3] = '0';\n                len++;\n            }\n        } else {\n            strncpy(tmp, str, 3);\n            tmp[3] = '\\0';\n        }\n        if (flag == 0) {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n            tmp[1] ^= tmp[3];\n            tmp[3] ^= tmp[1];\n            tmp[1] ^= tmp[3];\n        } else {\n            tmp[0] ^= tmp[1];\n            tmp[1] ^= tmp[0];\n            tmp[0] ^= tmp[1];\n            tmp[2] ^= tmp[3];\n            tmp[3] ^= tmp[2];\n            tmp[2] ^= tmp[3];\n        }\n        strncpy(str, tmp, 3);\n        str += 3;\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, int flag)\n{\n    int len = strlen(str);\n    int i, j;\n    char tmp[12];\n\n    for (i = 0; i < (len + 2) / 3; i++) {\n        if (i * 3 + 3 > len) {\n            strncpy(tmp, str, len - i * 3);\n            tmp[len - i * 3] = '\\0';\n            while (len - i * 3 < 3) {\n                tmp[len - i * 3] = '0';\n                len++;\n            }\n        } else {\n            strncpy(tmp, str, 3);\n            tmp[3] = '\\0';\n        }\n        if (flag == 0) {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n            tmp[1] ^= tmp[3];\n            tmp[3] ^= tmp[1];\n            tmp[1] ^= tmp[3];\n        } else {\n            tmp[0] ^= tmp[1];\n            tmp[1] ^= tmp[0];\n            tmp[0] ^= tmp[1];\n            tmp[2] ^= tmp[3];\n            tmp[3] ^= tmp[2];\n            tmp[2] ^= tmp[3];\n        }\n        strncpy(str, tmp, 3);\n        str += 3;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    int a[500] = {0};\n    a[1] = 1;\n    for (i = 2; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2];\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    int a[500] = {0};\n    a[1] = 1;\n    for (i = 2; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2];\n    return a[n];\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s)\n{\n    char *p = s;\n    char *q = s;\n    char c;\n\n    while ((c = *p) != '\\0') {\n        if (strchr(\" \\t\\n\", c) == NULL) {\n            *q++ = c;\n        }\n        p++;\n    }\n    *q = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s)\n{\n    char *p = s;\n    char *q = s;\n    char c;\n\n    while ((c = *p) != '\\0') {\n        if (strchr(\" \\t\\n\", c) == NULL) {\n            *q++ = c;\n        }\n        p++;\n    }\n    *q = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    int a[500] = {0};\n    a[1] = 1;\n    for (i = 2; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2];\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    int a[500] = {0};\n    a[1] = 1;\n    for (i = 2; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2];\n    return a[n];\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, a[500] = {0};\n    a[1] = 1;\n    for (i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, a[500] = {0};\n    a[1] = 1;\n    for (i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++)\n        while (n % i == 0)\n            n /= i;\n    return n;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i)\n            n /= i;\n    return n;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int a[1000] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    int i;\n    for (i = 2; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2];\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int a[1000] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    int i;\n    for (i = 2; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2];\n    return a[n];\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0 && i < n) {\n            int j = n / i;\n            if (j % i == 0 && j > i)\n                return j;\n        }\n    return n;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0 && i < n) {\n            int j = n / i;\n            if (j % i == 0 && j > i)\n                return j;\n        }\n    return n;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nbool func0(char *str)\n{\n    int count = 0;\n    while (*str != '\\0') {\n        if (*str == '<') {\n            count++;\n        } else if (*str == '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n        str++;\n    }\n    return count == 0;\n}",
    "c_func_re_decompile": "bool func0(char *str)\n{\n    int count = 0;\n    while (*str != '\\0') {\n        if (*str == '<') {\n            count++;\n        } else if (*str == '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n        str++;\n    }\n    return count == 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nbool func0(char *str)\n{\n    int i = 0;\n    while (*str != '\\0') {\n        if (*str == '<') {\n            i++;\n        } else if (*str == '>') {\n            i--;\n        }\n        if (i < 0) {\n            return false;\n        }\n        str++;\n    }\n    return i == 0;\n}",
    "c_func_re_decompile": "bool func0(char *str)\n{\n    int i = 0;\n    while (*str != '\\0') {\n        if (*str == '<') {\n            i++;\n        } else if (*str == '>') {\n            i--;\n        }\n        if (i < 0) {\n            return false;\n        }\n        str++;\n    }\n    return i == 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nbool func0(char *str)\n{\n    int count = 0;\n    while (*str != '\\0') {\n        if (*str == '<') {\n            count++;\n        } else if (*str == '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n        str++;\n    }\n    return count == 0;\n}",
    "c_func_re_decompile": "bool func0(char *str)\n{\n    int count = 0;\n    while (*str != '\\0') {\n        if (*str == '<') {\n            count++;\n        } else if (*str == '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n        str++;\n    }\n    return count == 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
    "c_func_decompile": "\nbool func0(float *arr, int len)\n{\n    int i, cnt1 = 0, cnt2 = 0;\n    for (i = 1; i < len; i++) {\n        if (arr[i] > arr[i - 1])\n            cnt1++;\n        if (arr[i] < arr[i - 1])\n            cnt2++;\n    }\n    return cnt1 + cnt2 == 2;\n}",
    "c_func_re_decompile": "bool func0(float *arr, int len)\n{\n    int i, cnt1 = 0, cnt2 = 0;\n    for (i = 1; i < len; i++) {\n        if (arr[i] > arr[i - 1])\n            cnt1++;\n        if (arr[i] < arr[i - 1])\n            cnt2++;\n    }\n    return cnt1 + cnt2 != 2;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
    "c_func_decompile": "\nbool func0(float *arr, int len)\n{\n    int i, cnt1 = 0, cnt2 = 0;\n    for (i = 1; i < len; i++) {\n        if (arr[i] > arr[i - 1])\n            cnt1++;\n        if (arr[i] < arr[i - 1])\n            cnt2++;\n    }\n    return cnt1 + cnt2 != 2;\n}",
    "c_func_re_decompile": "bool func0(float *arr, int len)\n{\n    int i, cnt1 = 0, cnt2 = 0;\n    for (i = 1; i < len; i++) {\n        if (arr[i] > arr[i - 1])\n            cnt1++;\n        if (arr[i] < arr[i - 1])\n            cnt2++;\n    }\n    return cnt1 + cnt2 != 2;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(float *arr, int n)\n{\n    int i, asc = 0, desc = 0;\n    for (i = 1; i < n; i++) {\n        if (arr[i] > arr[i - 1])\n            asc = 1;\n        if (arr[i] < arr[i - 1])\n            desc = 1;\n    }\n    if (asc + desc == 2)\n        return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(float *arr, int n)\n{\n    int i, asc = 0, desc = 0;\n    for (i = 1; i < n; i++) {\n        if (arr[i] > arr[i - 1])\n            asc = 1;\n        if (arr[i] < arr[i - 1])\n            desc = 1;\n    }\n    if (asc + desc == 2)\n        return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, cnt = 0;\n    for (i = 0; str[i]; i++) {\n        if (str[i] == '<')\n            cnt++;\n        if (str[i] == '>')\n            cnt--;\n        if (cnt < 0)\n            return 0;\n    }\n    if (cnt != 0)\n        return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, cnt = 0;\n    for (i = 0; str[i]; i++) {\n        if (str[i] == '<')\n            cnt++;\n        if (str[i] == '>')\n            cnt--;\n        if (cnt < 0)\n            return 0;\n    }\n    if (cnt != 0)\n        return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
    "c_func_decompile": "\nint func0(int x)\n{\n    return (x * (x + 1)) / 2;\n}",
    "c_func_re_decompile": "int func0(int x)\n{\n    return (x * (x + 1)) / 2;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
    "c_func_decompile": "\nint func0(int x)\n{\n    return (x * (x + 1)) / 2;\n}",
    "c_func_re_decompile": "int func0(int x)\n{\n    return (x * (x + 1)) / 2;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
    "c_func_decompile": "\nint func0(int x)\n{\n    return (x * (x + 1)) / 2;\n}",
    "c_func_re_decompile": "int func0(int x)\n{\n    return (x * (x + 1)) / 2;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
    "c_func_decompile": "\nint func0(int x)\n{\n    return (x * (x + 1)) / 2;\n}",
    "c_func_re_decompile": "int func0(int x)\n{\n    return (x * (x + 1)) / 2;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
    "c_func_decompile": "\nbool func0(float *a, int n)\n{\n  int i, j, c1, c2;\n\n  c1 = 0;\n  c2 = 0;\n  for (i=1;i<n;i++) {\n    for (j=0;j<i;j++) {\n      if (a[i] < a[j]) c1 = 1;\n      if (a[j] < a[i]) c2 = 1;\n    }\n  }\n  return (c1 + c2) != 2;\n}",
    "c_func_re_decompile": "bool func0(float *a, int n)\n{\n  int i, j, c1, c2;\n\n  c1 = 0;\n  c2 = 0;\n  for (i=1;i<n;i++) {\n    for (j=0;j<i;j++) {\n      if (a[i] < a[j]) c1 = 1;\n      if (a[j] < a[i]) c2 = 1;\n    }\n  }\n  return (c1 + c2) != 2;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str1, char *str2)\n{\n    int i, j, k, l;\n    int len1, len2;\n\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n\n    for (i = 0; i < len1; i++)\n    {\n        for (j = 0; j < len2; j++)\n        {\n            if (str1[i] == str2[j])\n            {\n                for (k = i + 1; k < len1; k++)\n                {\n                    for (l = j + 1; l < len2; l++)\n                    {\n                        if (str1[k] == str2[l])\n                        {\n                            return 1;\n                        }\n                    }\n                }\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str1, char *str2)\n{\n    int i, j, k, l;\n    int len1, len2;\n\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n\n    for (i = 0; i < len1; i++)\n    {\n        for (j = 0; j < len2; j++)\n        {\n            if (str1[i] == str2[j])\n            {\n                for (k = i + 1; k < len1; k++)\n                {\n                    for (l = j + 1; l < len2; l++)\n                    {\n                        if (str1[k] == str2[l])\n                        {\n                            return 1;\n                        }\n                    }\n                }\n                return 0;\n            }\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
    "c_func_decompile": "\nbool func0(char *str)\n{\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}",
    "c_func_re_decompile": "bool func0(char *str)\n{\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
    "c_func_decompile": "\nbool func0(char *str)\n{\n    int i = 0;\n    int len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            i++;\n        } else if (str[i] == ')') {\n            i--;\n        }\n    }\n    return i == 0;\n}",
    "c_func_re_decompile": "bool func0(char *str)\n{\n    int i = 0;\n    int len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            i++;\n        } else if (str[i] == ')') {\n            i--;\n        }\n    }\n    return i == 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nbool func0(char *str1, char *str2)\n{\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    for (int i = 0; i < len1; i++)\n    {\n        bool flag = false;\n        for (int j = 0; j < len2; j++)\n        {\n            if (str1[i] == str2[j])\n            {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag)\n        {\n            return false;\n        }\n    }\n    for (int i = 0; i < len2; i++)\n    {\n        bool flag = false;\n        for (int j = 0; j < len1; j++)\n        {\n            if (str2[i] == str1[j])\n            {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag)\n        {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_re_decompile": "bool func0(char *str1, char *str2)\n{\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    for (int i = 0; i < len1; i++)\n    {\n        bool flag = false;\n        for (int j = 0; j < len2; j++)\n        {\n            if (str1[i] == str2[j])\n            {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag)\n        {\n            return false;\n        }\n    }\n    for (int i = 0; i < len2; i++)\n    {\n        bool flag = false;\n        for (int j = 0; j < len1; j++)\n        {\n            if (str2[i] == str1[j])\n            {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag)\n        {\n            return false;\n        }\n    }\n    return true;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
    "c_func_decompile": " void func0(float *a, int n, float *b)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    b[i-1] = i * a[i];\n}",
    "c_func_re_decompile": "void func0(float *a, int n, float *b)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    b[i-1] = i * a[i];\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
    "c_func_decompile": "\nbool func0(char *str)\n{\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        else if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}",
    "c_func_re_decompile": "bool func0(char *str)\n{\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        else if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
    "c_func_decompile": "\nvoid func0(float *x, int n, float *y)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    y[i-1] = i * x[i];\n}",
    "c_func_re_decompile": "void func0(float *x, int n, float *y)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    y[i-1] = i * x[i];\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
    "c_func_decompile": "\nvoid func0(float *x, int n, float *y)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    y[i-1] = i * x[i];\n}",
    "c_func_re_decompile": "void func0(float *x, int n, float *y)\n{\n  int i;\n  for (i = 1; i < n; i++)\n    y[i-1] = i * x[i];\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str1, char *str2)\n{\n    int i, j, k, len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    for (i = 0; i < len1; i++)\n    {\n        for (j = 0; j < len2; j++)\n        {\n            if (str1[i] == str2[j])\n            {\n                break;\n            }\n        }\n        if (j >= len2)\n        {\n            return 0;\n        }\n    }\n    for (i = 0; i < len2; i++)\n    {\n        for (j = 0; j < len1; j++)\n        {\n            if (str2[i] == str1[j])\n            {\n                break;\n            }\n        }\n        if (j >= len1)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str1, char *str2)\n{\n    int i, j, k, len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    for (i = 0; i < len1; i++)\n    {\n        for (j = 0; j < len2; j++)\n        {\n            if (str1[i] == str2[j])\n            {\n                break;\n            }\n        }\n        if (j >= len2)\n        {\n            return 0;\n        }\n    }\n    for (i = 0; i < len2; i++)\n    {\n        for (j = 0; j < len1; j++)\n        {\n            if (str2[i] == str1[j])\n            {\n                break;\n            }\n        }\n        if (j >= len1)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str1, char *str2)\n{\n    int i, j, k, len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    for (i = 0; i < len1; i++)\n    {\n        for (j = 0; j < len2; j++)\n        {\n            if (str1[i] == str2[j])\n            {\n                break;\n            }\n        }\n        if (j >= len2)\n        {\n            return 0;\n        }\n    }\n    for (i = 0; i < len2; i++)\n    {\n        for (j = 0; j < len1; j++)\n        {\n            if (str2[i] == str1[j])\n            {\n                break;\n            }\n        }\n        if (j >= len1)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str1, char *str2)\n{\n    int i, j, k, len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    for (i = 0; i < len1; i++)\n    {\n        for (j = 0; j < len2; j++)\n        {\n            if (str1[i] == str2[j])\n            {\n                break;\n            }\n        }\n        if (j >= len2)\n        {\n            return 0;\n        }\n    }\n    for (i = 0; i < len2; i++)\n    {\n        for (j = 0; j < len1; j++)\n        {\n            if (str2[i] == str1[j])\n            {\n                break;\n            }\n        }\n        if (j >= len1)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
    "c_func_decompile": "\nvoid func0(float *x, int n, float *y)\n{\n  int i;\n\n  for (i = 1; i < n; i++)\n    y[i-1] = i * x[i];\n}",
    "c_func_re_decompile": "void func0(float *x, int n, float *y)\n{\n  int i;\n\n  for (i = 1; i < n; i++)\n    y[i-1] = i * x[i];\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
    "c_func_decompile": "\nbool func0(char *str)\n{\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        else if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}",
    "c_func_re_decompile": "bool func0(char *str)\n{\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        else if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int *a, int na, int *b, int nb, int *n)\n{\n    int i, j, k, *c;\n\n    c = (int *)malloc(na * sizeof(int));\n    k = 0;\n    for (i = 0; i < na; i++) {\n        for (j = 0; j < nb; j++) {\n            if (a[i] == b[j]) {\n                c[k] = a[i];\n                k++;\n                break;\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (c[i] > c[j]) {\n                int t = c[i];\n                c[i] = c[j];\n                c[j] = t;\n            }\n        }\n    }\n    *n = k;\n    return c;\n}",
    "c_func_re_decompile": "int *func0(int *a, int na, int *b, int nb, int *n)\n{\n    int i, j, k, *c;\n\n    c = (int *)malloc(na * sizeof(int));\n    k = 0;\n    for (i = 0; i < na; i++) {\n        for (j = 0; j < nb; j++) {\n            if (a[i] == b[j]) {\n                c[k] = a[i];\n                k++;\n                break;\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (c[i] > c[j]) {\n                int t = c[i];\n                c[i] = c[j];\n                c[j] = t;\n            }\n        }\n    }\n    *n = k;\n    return c;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int a[100] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    int i;\n    for (i = 3; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int a[100] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    int i;\n    for (i = 3; i <= n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    return a[n];\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    int a[100] = {0};\n    a[1] = 1;\n    for (i = 2; i < n; i++)\n        a[i] = a[i-1] + a[i-2] + a[i-3];\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    int a[100] = {0};\n    a[2] = 1;\n    for (i = 3; i < n; i++)\n        a[i] = a[i-1] + a[i-2] + a[i-3];\n    return a[n];\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    int a[100] = {0};\n    a[1] = 1;\n    for (i = 2; i < n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    int a[100] = {0};\n    a[2] = 1;\n    for (i = 3; i < n; i++)\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    return a[n];\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int* a, int a_len, int* b, int b_len, int* len)\n{\n    int i, j, k, flag;\n    int* c = (int*)malloc(a_len * sizeof(int));\n    k = 0;\n    for (i = 0; i < a_len; i++) {\n        flag = 0;\n        for (j = 0; j < b_len; j++) {\n            if (a[i] == b[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            c[k] = a[i];\n            k++;\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                int temp = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = temp;\n            }\n        }\n    }\n    *len = k;\n    return c;\n}",
    "c_func_re_decompile": "int* func0(int* a, int a_len, int* b, int b_len, int* len)\n{\n    int i, j, k, flag;\n    int* c = (int*)malloc(a_len * sizeof(int));\n    k = 0;\n    for (i = 0; i < a_len; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == c[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            for (j = 0; j < b_len; j++) {\n                if (a[i] == b[j]) {\n                    c[k] = a[i];\n                    k++;\n                    break;\n                }\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                int temp = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = temp;\n            }\n        }\n    }\n    *len = k;\n    return c;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, int* b, int m, int* retSize)\n{\n    int* ret = (int*)malloc(n * sizeof(int));\n    int i, j, k, l, t;\n    for (i = 0, k = 0; i < n; i++) {\n        t = 0;\n        for (j = 0; j < k; j++) {\n            if (ret[j] == a[i]) {\n                t = 1;\n                break;\n            }\n        }\n        if (t == 0) {\n            for (l = 0; l < m; l++) {\n                if (a[i] == b[l]) {\n                    ret[k++] = a[i];\n                    break;\n                }\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (ret[j] > ret[j + 1]) {\n                t = ret[j];\n                ret[j] = ret[j + 1];\n                ret[j + 1] = t;\n            }\n        }\n    }\n    *retSize = k;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* b, int m, int* retSize)\n{\n    int* ret = (int*)malloc(n * sizeof(int));\n    int i, j, k, l, t;\n    for (i = 0, k = 0; i < n; i++) {\n        t = 0;\n        for (j = 0; j < k; j++) {\n            if (ret[j] == a[i]) {\n                t = 1;\n                break;\n            }\n        }\n        if (t == 0) {\n            for (l = 0; l < m; l++) {\n                if (a[i] == b[l]) {\n                    ret[k++] = a[i];\n                    break;\n                }\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (ret[j] > ret[j + 1]) {\n                t = ret[j];\n                ret[j] = ret[j + 1];\n                ret[j + 1] = t;\n            }\n        }\n    }\n    *retSize = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    char *vowels = \"aeiou\";\n    int count = 0;\n    int len = strlen(str);\n    int i;\n\n    for (i = 0; i < len; i++) {\n        if (strchr(vowels, str[i]) != NULL) {\n            count++;\n        }\n    }\n\n    if (len > 0 && (str[len - 1] == 'y' || str[len - 1] == 'Y')) {\n        count++;\n    }\n\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    char *vowels = \"aeiou\";\n    int count = 0;\n    int len = strlen(str);\n    int i;\n\n    for (i = 0; i < len; i++) {\n        if (strchr(vowels, str[i]) != NULL) {\n            count++;\n        }\n    }\n\n    if (len > 0 && (str[len - 1] == 'y' || str[len - 1] == 'Y')) {\n        count++;\n    }\n\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int* a, int a_len, int* b, int b_len, int* returnSize)\n{\n    int* ret = (int*)malloc(a_len * sizeof(int));\n    int ret_len = 0;\n    for (int i = 0; i < a_len; i++)\n    {\n        int flag = 0;\n        for (int j = 0; j < ret_len; j++)\n        {\n            if (ret[j] == a[i])\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag)\n            continue;\n        for (int j = 0; j < b_len; j++)\n        {\n            if (a[i] == b[j])\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag)\n            continue;\n        ret[ret_len++] = a[i];\n    }\n    for (int i = 0; i < ret_len - 1; i++)\n    {\n        for (int j = 0; j < ret_len - 1 - i; j++)\n        {\n            if (ret[j] > ret[j + 1])\n            {\n                int tmp = ret[j];\n                ret[j] = ret[j + 1];\n                ret[j + 1] = tmp;\n            }\n        }\n    }\n    *returnSize = ret_len;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int* a, int a_len, int* b, int b_len, int* returnSize)\n{\n    int* ret = (int*)malloc(a_len * sizeof(int));\n    int ret_len = 0;\n    for (int i = 0; i < a_len; i++)\n    {\n        int flag = 0;\n        for (int j = 0; j < ret_len; j++)\n        {\n            if (ret[j] == a[i])\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag)\n            continue;\n        for (int j = 0; j < b_len; j++)\n        {\n            if (a[i] == b[j])\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag)\n            continue;\n        ret[ret_len++] = a[i];\n    }\n    for (int i = 0; i < ret_len - 1; i++)\n    {\n        for (int j = 0; j < ret_len - 1 - i; j++)\n        {\n            if (ret[j] > ret[j + 1])\n            {\n                int tmp = ret[j];\n                ret[j] = ret[j + 1];\n                ret[j + 1] = tmp;\n            }\n        }\n    }\n    *returnSize = ret_len;\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j;\n    int a[100] = {0};\n    a[1] = 1;\n    for (i = 3; i <= n; i += 4) {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    for (j = i - 3; j <= n; j++) {\n        a[j] = a[j - 1] + a[j - 2] + a[j - 3];\n    }\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, j;\n    int a[100] = {0};\n    a[1] = 1;\n    for (i = 3; i <= n; i += 3) {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    for (j = i - 3; j <= n; j++) {\n        a[j] = a[j - 1] + a[j - 2] + a[j - 3];\n    }\n    return a[n];\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_decompile": "\nint func0(char *str, int n)\n{\n    char num1[10] = {0};\n    char num2[10] = {0};\n    int flag = 0;\n    int i, j = 0;\n\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        if (__ctype_b_loc()[(int)str[i]] & 2048)\n        {\n            if (flag == 0)\n            {\n                num1[j++] = str[i];\n            }\n            else\n            {\n                num2[j++] = str[i];\n            }\n        }\n        else\n        {\n            if (flag == 0 && j > 0)\n            {\n                flag = 1;\n                j = 0;\n            }\n        }\n    }\n\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
    "c_func_decompile": "\nint *func0(int *a, int n)\n{\n    int i, max, min;\n    int *p;\n\n    max = -1;\n    min = 0x7fffffff;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (max == -1 || a[i] < min) {\n                max = i;\n                min = a[i];\n            }\n        }\n    }\n    if (max == -1)\n        return NULL;\n    p = (int *)malloc(2 * sizeof(int));\n    p[0] = min;\n    p[1] = max;\n    return p;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_decompile": "\nint func0(char *str, int n)\n{\n    char *p = str;\n    char num[10] = {0};\n    char op[10] = {0};\n    int i = 0, j = 0;\n    int flag = 0;\n    while (*p != '\\0') {\n        if (__ctype_b_loc()[*p + 1] & 0x08) {\n            if (flag == 0) {\n                num[i++] = *p;\n            } else {\n                op[j++] = *p;\n            }\n        } else {\n            if (flag == 0) {\n                if (i > 0) {\n                    n -= strtol(num, NULL, 10);\n                    i = 0;\n                }\n                flag = 1;\n            }\n        }\n        p++;\n    }\n    if (i > 0) {\n        n -= strtol(num, NULL, 10);\n    }\n    n -= strtol(op, NULL, 10);\n    return n;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_decompile": "\nint func0(char *s, int n)\n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int flag = 0;\n    char *p = s;\n    char num1[10] = {0};\n    char num2[10] = {0};\n    while (*p != '\\0')\n    {\n        if (__ctype_b_loc()[*p + 1] & 0x08)\n        {\n            if (flag == 0)\n            {\n                num1[i++] = *p;\n            }\n            else\n            {\n                num2[j++] = *p;\n            }\n        }\n        else\n        {\n            if (flag == 0 && i > 0)\n            {\n                flag = 1;\n            }\n        }\n        p++;\n    }\n    k = n - (strtol(num1, NULL, 10) + strtol(num2, NULL, 10));\n    return k;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_decompile": "\nint func0(char *s, int n)\n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int flag = 0;\n    char *p = s;\n    char num1[10] = {0};\n    char num2[10] = {0};\n    while (*p != '\\0')\n    {\n        if (__ctype_b_loc()[*p + 1] & 0x08)\n        {\n            if (flag == 0)\n            {\n                num1[i++] = *p;\n            }\n            else\n            {\n                num2[j++] = *p;\n            }\n        }\n        else\n        {\n            if (flag == 0 && i > 0)\n            {\n                flag = 1;\n            }\n        }\n        p++;\n    }\n    k = n - (strtol(num1, NULL, 10) + strtol(num2, NULL, 10));\n    return k;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len, count;\n    char *p;\n\n    len = strlen(str);\n    count = 0;\n    for (i = 0; i < len; i++) {\n        p = strchr(\"aeiou\", str[i]);\n        if (p != NULL)\n            count++;\n    }\n    if (str[len - 1] == 'y' || str[len - 1] == 'Y')\n        count++;\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, len, count;\n    char *p;\n\n    len = strlen(str);\n    count = 0;\n    for (i = 0; i < len; i++) {\n        p = strchr(\"aeiou\", str[i]);\n        if (p != NULL)\n            count++;\n    }\n    if (str[len - 1] == 'y' || str[len - 1] == 'Y')\n        count++;\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
    "c_func_decompile": "\nstruct Assistant **func0(int **a, int n, int *m, int x, int *k)\n{\n    int i, j, l;\n    struct Assistant **b;\n\n    b = (struct Assistant **) malloc(100 * sizeof(struct Assistant *));\n    l = 0;\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (a[i][j] == x) {\n                b[l] = (struct Assistant *) malloc(sizeof(struct Assistant));\n                b[l]->i = i;\n                b[l]->j = j;\n                l++;\n            }\n        }\n    }\n    *k = l;\n    return b;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len, count;\n    char *p;\n\n    len = strlen(str);\n    count = 0;\n    for (i = 0; i < len; i++) {\n        p = strchr(\"aeiou\", str[i]);\n        if (p != NULL)\n            count++;\n    }\n    if (str[len - 1] == 'y' || str[len - 1] == 'Y')\n        count++;\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, len, count;\n    char *p;\n\n    len = strlen(str);\n    count = 0;\n    for (i = 0; i < len; i++) {\n        p = strchr(\"aeiou\", str[i]);\n        if (p != NULL)\n            count++;\n    }\n    if (str[len - 1] == 'y' || str[len - 1] == 'Y')\n        count++;\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len, count;\n    char *p;\n\n    len = strlen(str);\n    count = 0;\n    for (i = 0; i < len; i++) {\n        p = strchr(\"aeiou\", str[i]);\n        if (p != NULL)\n            count++;\n    }\n    if (str[len - 1] == 'y' || str[len - 1] == 'Y')\n        count++;\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, len, count;\n    char *p;\n\n    len = strlen(str);\n    count = 0;\n    for (i = 0; i < len; i++) {\n        p = strchr(\"aeiou\", str[i]);\n        if (p != NULL)\n            count++;\n    }\n    if (str[len - 1] == 'y' || str[len - 1] == 'Y')\n        count++;\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n    int i, c, n;\n    char *p;\n    int in_word;\n\n    n = 0;\n    in_word = 0;\n    p = s;\n    while (*p) {\n        c = *p++;\n        if (((__ctype_b_loc()+1)[(unsigned char)(c)] & (0x20)) && in_word) {\n            in_word = 0;\n        }\n        if (((__ctype_b_loc()+1)[(unsigned char)(c)] & (0x20)) && !in_word) {\n            in_word = 1;\n            n++;\n        }\n    }\n    return n;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, sum = 0;\n    for (i = 0; str[i] != '\\0'; i++)\n        if (str[i] >= 'A' && str[i] <= 'Z')\n            sum += str[i];\n    return sum;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, sum = 0;\n    for (i = 0; str[i] != '\\0'; i++)\n        if (str[i] >= 'A' && str[i] <= 'Z')\n            sum += str[i];\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int sum = 0;\n    while (*str != '\\0') {\n        if (*str >= 'A' && *str <= 'Z') {\n            sum += *str;\n        }\n        str++;\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int sum = 0;\n    while (*str != '\\0') {\n        if (*str >= 'A' && *str <= 'Z') {\n            sum += *str;\n        }\n        str++;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int sum = 0;\n    while (*str != '\\0') {\n        if (*str >= 'A' && *str <= 'Z') {\n            sum += *str;\n        }\n        str++;\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int sum = 0;\n    while (*str != '\\0') {\n        if (*str >= 'A' && *str <= 'Z') {\n            sum += *str;\n        }\n        str++;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, sum = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z')\n            sum += str[i];\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, sum = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z')\n            sum += str[i];\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n int i, j, k, l;\n\n j = 1;\n k = 0;\n l = 0;\n for (i = 0; str[i] != '\\0'; i++) {\n  if (((__ctype_b_loc()[str[i] & 0xff]) & (0x002000)) != 0 && k != 0) {\n   k = 0;\n   l++;\n  }\n  if (str[i] == 'I' && j != 0) {\n   k = 1;\n  } else {\n   if (((__ctype_b_loc()[str[i] & 0xff]) & (0x002000)) == 0) {\n    k = 0;\n   }\n  }\n  if (((__ctype_b_loc()[str[i] & 0xff]) & (0x002000)) == 0) {\n   j = 0;\n  }\n  if (str[i] == '.' || str[i] == '?' || str[i] == '!') {\n   j = 1;\n  }\n }\n return l;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    char *p = \"0123456789\";\n\n    for (i = 0; s[i]; i++) {\n        char c = s[i];\n        if (__ctype_b_loc()[c] & (0x0200))\n            c = toupper(c);\n        else if (__ctype_b_loc()[c] & (0x0100))\n            c = tolower(c);\n        for (j = 0; p[j]; j++) {\n            if (p[j] == c) {\n                if (j < 10)\n                    c += 2;\n                break;\n            }\n        }\n        t[i] = c;\n    }\n    t[i] = '\\0';\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_decompile": "\nint func0(int a, int b)\n{\n    if (b == 0)\n        return 0;\n    else\n        return func1(a, b);\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
    "c_func_decompile": "\nchar *func0(int a, int b)\n{\n    char buf[50];\n    char *p;\n    int i, j;\n\n    __sprintf_chk(buf, 1, 50, \"%s%d\", \"func0\", a);\n    p = buf;\n    for (i = strlen(buf); i < b; i++) {\n        for (j = 0; j < i / 2; j++) {\n            char tmp = p[j];\n            p[j] = p[i - j - 1];\n            p[i - j - 1] = tmp;\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": "char *func0(int a, int b)\n{\n    char buf[50];\n    char *p;\n    int i, j;\n\n    __sprintf_chk(buf, 1, 50, \"%s%d\", \"func0\", a);\n    p = buf;\n    for (i = strlen(buf); i < b; i++) {\n        for (j = 0; j < i / 2; j++) {\n            char tmp = p[j];\n            p[j] = p[i - j - 1];\n            p[i - j - 1] = tmp;\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    char *p = \"abcdefghijklmnopqrstuvwxyz\";\n    for (i = 0; s[i]; i++) {\n        if (__ctype_b_loc()[s[i] & 0xff] & (0x200))\n            s[i] = __ctype_toupper_loc()[s[i] & 0xff];\n        else if (__ctype_b_loc()[s[i] & 0xff] & (0x100))\n            s[i] = __ctype_tolower_loc()[s[i] & 0xff];\n        for (j = 0; p[j]; j++)\n            if (p[j] == s[i])\n                break;\n        if (j < 10)\n            s[i] += 2;\n        t[i] = s[i];\n    }\n    t[i] = 0;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i, j;\n    char *p = \"abcdefghijklmnopqrstuvwxyz\";\n    for (i = 0; s[i]; i++) {\n        if (__ctype_b_loc()[s[i] & 0xff] & (0x200))\n            s[i] = __ctype_toupper_loc()[s[i] & 0xff];\n        else if (__ctype_b_loc()[s[i] & 0xff] & (0x100))\n            s[i] = __ctype_tolower_loc()[s[i] & 0xff];\n        for (j = 0; p[j]; j++)\n            if (p[j] == s[i])\n                break;\n        if (j < 10)\n            s[i] += 2;\n        t[i] = s[i];\n    }\n    t[i] = 0;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
    "c_func_decompile": "\nchar *func0(int i, int j)\n{\n  static char buf[1000];\n  char tmp;\n  int k, len;\n\n  sprintf(buf, \"i = %d\", i);\n  len = strlen(buf);\n  if (len < j) {\n    for (k = 0; k < len/2; k++) {\n      tmp = buf[k];\n      buf[k] = buf[len-1-k];\n      buf[len-1-k] = tmp;\n    }\n  } else {\n    char tmp[50];\n    strcpy(tmp, buf+len-j);\n    tmp[j] = '\\0';\n    strncat(tmp, buf, len-j);\n    strcpy(buf, tmp);\n  }\n  return buf;\n}",
    "c_func_re_decompile": "char *func0(int i, int j)\n{\n  static char buf[1000];\n  char tmp;\n  int k, len;\n\n  sprintf(buf, \"i = %d\", i);\n  len = strlen(buf);\n  if (len < j) {\n    for (k = 0; k < len/2; k++) {\n      tmp = buf[k];\n      buf[k] = buf[len-1-k];\n      buf[len-1-k] = tmp;\n    }\n  } else {\n    char tmp[50];\n    strcpy(tmp, buf+len-j);\n    tmp[j] = '\\0';\n    strncat(tmp, buf, len-j);\n    strcpy(buf, tmp);\n  }\n  return buf;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *str1)\n{\n    int i, j;\n    char *p = \"abcdefghijklmnopqrstuvwxyz\";\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        if (((__ctype_loc ()->_mbbtype[(unsigned char)str[i]] & 0x0200) != 0))\n            str1[i] = (__ctype_toupper_loc ()->_mbbtype[(unsigned char)str[i]]);\n        else if (((__ctype_loc ()->_mbbtype[(unsigned char)str[i]] & 0x0100) != 0))\n            str1[i] = (__ctype_b_loc ()->_mbbtype[(unsigned char)str[i]]);\n        else\n        {\n            for (j = 0; p[j] != '\\0'; j++)\n            {\n                if (str[i] == p[j])\n                {\n                    if (j < 10)\n                        str1[i] = str[i] + 2;\n                    else\n                        str1[i] = str[i];\n                    break;\n                }\n            }\n        }\n    }\n    str1[i] = '\\0';\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(float *x, int n)\n{\n    int i;\n    char **y = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        if (x[i
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(float *x, int n)\n{\n    int i;\n    char **y = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        if (x[i
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
    "c_func_decompile": "\nchar *func0(int a, int b)\n{\n    static char buf[50];\n    int i, j, len;\n    char tmp;\n\n    __sprintf_chk(buf, 1, 50, \"%d\", a);\n    len = strlen(buf);\n    if (len < b) {\n        for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n            tmp = buf[i];\n            buf[i] = buf[j];\n            buf[j] = tmp;\n        }\n    } else {\n        char tmp[50];\n        __strcpy_chk(tmp, buf + len - b, 50);\n        tmp[b] = '\\0';\n        __strncat_chk(tmp, buf, len - b, 50);\n        __strcpy_chk(buf, tmp, 50);\n    }\n    return buf;\n}",
    "c_func_re_decompile": "char *func0(int a, int b)\n{\n    static char buf[50];\n    int i, j, len;\n    char tmp;\n\n    __sprintf_chk(buf, 1, 50, \"%d\", a);\n    len = strlen(buf);\n    if (len < b) {\n        for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n            tmp = buf[i];\n            buf[i] = buf[j];\n            buf[j] = tmp;\n        }\n    } else {\n        char tmp[50];\n        __strcpy_chk(tmp, buf + len - b, 50);\n        tmp[b] = '\\0';\n        __strncat_chk(tmp, buf, len - b, 50);\n        __strcpy_chk(buf, tmp, 50);\n    }\n    return buf;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, max = -1, *b;\n\n    b = (int *) calloc((size_t) (n + 1), sizeof(int));\n    for (i = 0; i < n; i++) {\n        if (++b[a[i]] > b[max])\n            max = a[i];\n    }\n    free(b);\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, max = -1, *b;\n\n    b = (int *) calloc((size_t) (n + 1), sizeof(int));\n    for (i = 0; i < n; i++) {\n        if (++b[a[i]] > b[max])\n            max = a[i];\n        else if (b[a[i]] == b[max])\n            max = (a[i] > max) ? a[i] : max;\n    }\n    free(b);\n    return max;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, max;\n    int *b;\n\n    b = (int *) calloc(n+1, sizeof(int));\n    max = -1;\n    for (i=0; i<n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] >= a[i] && a[i] > max)\n            max = a[i];\n    }\n    free(b);\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, max;\n    int *b;\n\n    b = (int *) calloc(n+1, sizeof(int));\n    max = -1;\n    for (i=0; i<n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] >= a[i] && a[i] > max)\n            max = a[i];\n    }\n    free(b);\n    return max;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, max = -1, *b;\n\n    b = (int *) calloc((size_t) (n + 1), sizeof(int));\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] > a[i])\n            max = (max > a[i]) ? max : a[i];\n    }\n    free(b);\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, max = -1, *b;\n\n    b = (int *) calloc((size_t) (n + 1), sizeof(int));\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] > a[i])\n            max = (max > a[i]) ? max : a[i];\n    }\n    free(b);\n    return max;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *argv[], int argc)\n{\n    int i, j;\n    int flag1, flag2;\n    char *p;\n\n    if (argc == 0)\n        return 0;\n\n    flag1 = 0;\n    flag2 = 0;\n\n    for (i = 0; i < argc; i++) {\n        p = argv[i];\n        for (j = 0; p[j] != '\\0'; j++) {\n            if (!((__ctype_b_loc ()->*__ctype_b_loc ()->_bmask[((unsigned char)(p[j]))]) & (0200)))\n                return 0;\n            if (((__ctype_b_loc ()->*__ctype_b_loc ()->_bmask[((unsigned char)(p[j]))]) & (0100)))\n                flag2 = 1;\n            if (((__ctype_b_loc ()->*__ctype_b_loc ()->_bmask[((unsigned char)(p[j]))]) & (0400)))\n                flag1 = 1;\n            if (flag1 + flag2 == 2)\n                return 0;\n        }\n    }\n\n    return 1;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
    "c_func_decompile": "\nint* func0(int* arr, int len, int* ret)\n{\n    int min = 0x7fffffff;\n    int index = -1;\n    for (int i = 0; i < len; i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min || index == -1) {\n                min = arr[i];\n                index = i;\n            }\n        }\n    }\n    if (index == -1) {\n        return NULL;\n    }\n    ret[0] = min;\n    ret[1] = index;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int* arr, int len, int* ret)\n{\n    int min = 0x7fffffff;\n    int index = -1;\n    for (int i = 0; i < len; i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min || index == -1) {\n                min = arr[i];\n                index = i;\n            }\n        }\n    }\n    if (index == -1) {\n        return NULL;\n    }\n    ret[0] = min;\n    ret[1] = index;\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
    "c_func_decompile": "\nchar *\nfunc0 (int a, int b)\n{\n  static char buf[50];\n  char *p = buf;\n  int i, j, len;\n\n  __sprintf_chk (p, 1, 50, \"%s%d\", \"func0: \", a);\n  len = strlen (p);\n  if (len < b)\n    {\n      for (i = 0, j = len - 1; i < j; i++, j--)\n {\n   char t = p[i];\n   p[i] = p[j];\n   p[j] = t;\n }\n    }\n  else\n    {\n      char buf2[50];\n      p = __strcpy_chk (buf2, p + len - b, 50);\n      buf2[b] = '\\0';\n      p = __strncat_chk (p, buf2, 50, 50);\n      p = __strcpy_chk (p, buf2, 50);\n    }\n  return p;\n}",
    "c_func_re_decompile": "char *\nfunc0 (int a, int b)\n{\n  static char buf[50];\n  char *p = buf;\n  int i, j, len;\n\n  __sprintf_chk (p, 1, 50, \"%s%d\", \"func0: \", a);\n  len = strlen (p);\n  if (len < b)\n    {\n      for (i = 0, j = len - 1; i < j; i++, j--)\n {\n   char t = p[i];\n   p[i] = p[j];\n   p[j] = t;\n }\n    }\n  else\n    {\n      char buf2[50];\n      p = __strcpy_chk (buf2, p + len - b, 50);\n      buf2[b] = '\\0';\n      p = __strncat_chk (p, buf2, 50, 50);\n      p = __strcpy_chk (p, buf2, 50);\n    }\n  return p;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, count = 0;\n    for (i = 0; i < n/2; i++)\n        if (a[i] != a[n-1-i])\n            count++;\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, count = 0;\n    for (i = 0; i < n/2; i++)\n        if (a[i] != a[n-1-i])\n            count++;\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, int* ret) {\n    int i, max = -1, max_i = -1;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (max_i == -1 || a[i] > max) {\n                max = a[i];\n                max_i = i;\n            }\n        }\n    }\n    if (max_i == -1) {\n        return NULL;\n    }\n    ret[0] = max;\n    ret[1] = max_i;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* ret) {\n    int i, min = 0x7fffffff, min_i = -1;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (min_i == -1 || a[i] < min) {\n                min = a[i];\n                min_i = i;\n            }\n        }\n    }\n    if (min_i == -1) {\n        return NULL;\n    }\n    ret[0] = min;\n    ret[1] = min_i;\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, max = -1;\n    int *b = calloc(n + 1, sizeof(int));\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] > b[max])\n            max = a[i];\n    }\n    free(b);\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, max = -1;\n    int *b = calloc(n + 1, sizeof(int));\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] > b[max])\n            max = a[i];\n        else if (b[a[i]] == b[max])\n            max = (a[i] > max) ? a[i] : max;\n    }\n    free(b);\n    return max;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
    "c_func_decompile": "\nfloat func0(float x, float y, float z)\n{\n    if (x + z <= y || y + z <= x || y + z <= x)\n        return 1;\n    float p = (x + y + z) / 2;\n    return roundf(sqrtf(p * (p - x) * (p - y) * (p - z)) / 4) / 4;\n}",
    "c_func_re_decompile": "float func0(float x, float y, float z)\n{\n    if (x + y <= z || y + z <= x || x + z <= y)\n        return 1;\n    float p = (x + y + z) / 2;\n    return roundf(sqrtf(p * (p - x) * (p - y) * (p - z)) / 4) / 4;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, count = 0;\n\n    for (i = 0; i < n/2; i++)\n        if (a[i] != a[n-i-1])\n            count++;\n\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, count = 0;\n\n    for (i = 0; i < n/2; i++)\n        if (a[i] != a[n-i-1])\n            count++;\n\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
    "c_func_decompile": "\nfloat func0(float a, float b, float c)\n{\n    float p, s;\n\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n\n    p = (a + b + c) / 2;\n    s = sqrtf(p * (p - a) * (p - b) * (p - c));\n\n    return roundf(s * 100) / 100;\n}",
    "c_func_re_decompile": "float func0(float a, float b, float c)\n{\n    float p, s;\n\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n\n    p = (a + b + c) / 2;\n    s = sqrtf(p * (p - a) * (p - b) * (p - c));\n\n    return roundf(s * 100) / 100;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
    "c_func_decompile": " float func0(float x, float y, float z)\n{\n    if (x + y <= z || x + z <= y || y + z <= x)\n        return 0.0f;\n\n    float s = (x + y + z) / 2.0f;\n    return roundf(sqrtf(s * (s - x) * (s - y) * (s - z)) / 4.0f) / 4.0f;\n}",
    "c_func_re_decompile": "float func0(float x, float y, float z)\n{\n    if (x + y <= z || x + z <= y || y + z <= x)\n        return 0.0f;\n\n    float s = (x + y + z) / 2.0f;\n    return roundf(sqrtf(s * (s - x) * (s - y) * (s - z)) / 4.0f) / 4.0f;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j, count = 0;\n    for (i = 0, j = n - 1; i < n / 2; i++, j--)\n        if (a[i] != a[j])\n            count++;\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j, count = 0;\n    for (i = 0, j = n - 1; i < n / 2; i++, j--)\n        if (a[i] != a[j])\n            count++;\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n, int* ret) {\n    int i, max = -1, max_i = -1;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (max_i == -1 || a[i] > max) {\n                max = a[i];\n                max_i = i;\n            }\n        }\n    }\n    if (max_i == -1) {\n        return NULL;\n    }\n    ret[0] = max;\n    ret[1] = max_i;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* ret) {\n    int i, min = 0x7fffffff, min_i = -1;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (min_i == -1 || a[i] < min) {\n                min = a[i];\n                min_i = i;\n            }\n        }\n    }\n    if (min_i == -1) {\n        return NULL;\n    }\n    ret[0] = min;\n    ret[1] = min_i;\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
    "c_func_decompile": "\nfloat func0(float x, float y, float z)\n{\n    if (x + y <= z || x + z <= y || y + z <= x)\n        return 0.0f;\n\n    float s = (x + y + z) / 2.0f;\n    return roundf(sqrtf(s * (s - x) * (s - y) * (s - z)) / 4.0f) / 4.0f;\n}",
    "c_func_re_decompile": "float func0(float x, float y, float z)\n{\n    if (x + y <= z || x + z <= y || y + z <= x)\n        return 0.0f;\n\n    float s = (x + y + z) / 2.0f;\n    return roundf(sqrtf(s * (s - x) * (s - y) * (s - z)) / 4.0f) / 4.0f;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
    "c_func_decompile": "\nbool func0(int *arr, int len, int k)\n{\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1])\n            return false;\n        sum += arr[i] * 2;\n    }\n    if (len % 2 == 1)\n        sum += arr[i];\n    return sum <= k;\n}",
    "c_func_re_decompile": "bool func0(int *arr, int len, int k)\n{\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1])\n            return false;\n        sum += arr[i] * 2;\n    }\n    if (len % 2 == 1)\n        sum += arr[i];\n    return sum <= k;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
    "c_func_decompile": "\nbool func0(int *arr, int len, int k)\n{\n int i, sum = 0;\n for (i = 0; i < len / 2; i++) {\n  if (arr[i] != arr[len - i - 1])\n   return false;\n  sum += arr[i] * 2;\n }\n if (len % 2 == 1)\n  sum += arr[i];\n return sum <= k;\n}",
    "c_func_re_decompile": "bool func0(int *arr, int len, int k)\n{\n int i, sum = 0;\n for (i = 0; i < len / 2; i++) {\n  if (arr[i] != arr[len - i - 1])\n   return false;\n  sum += arr[i] * 2;\n }\n if (len % 2 == 1)\n  sum += arr[i];\n return sum <= k;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
    "c_func_decompile": "\nbool func0(int *arr, int len, int k)\n{\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] + arr[len - i - 1];\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}",
    "c_func_re_decompile": "bool func0(int *arr, int len, int k)\n{\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] + arr[len - i - 1];\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
    "c_func_decompile": " bool func0(int *arr, int len, int k)\n{\n    int sum = 0;\n    for (int i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - 1 - i]) {\n            return false;\n        }\n        sum += arr[i] + arr[len - 1 - i];\n    }\n    if (len % 2 == 1) {\n        sum += arr[len / 2];\n    }\n    return sum <= k;\n}",
    "c_func_re_decompile": "bool func0(int *arr, int len, int k)\n{\n    int sum = 0;\n    for (int i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - 1 - i]) {\n            return false;\n        }\n        sum += arr[i] + arr[len - 1 - i];\n    }\n    if (len % 2 == 1) {\n        sum += arr[len / 2];\n    }\n    return sum <= k;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n    int i, j, t;\n\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        b[2 * i] = a[i];\n        b[2 * i + 1] = a[n - 1 - i];\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n    int i, j, t;\n\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        b[2 * i] = a[i];\n        b[2 * i + 1] = a[n - 1 - i];\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
    "c_func_decompile": "\nchar **func0(char **a, int n, char **b, int m)\n{\n    int i, sum1 = 0, sum2 = 0;\n    for (i = 0; i < n; i++)\n        sum1 += strlen(a[i]);\n    for (i = 0; i < m; i++)\n        sum2 += strlen(b[i]);\n    return sum1 > sum2 ? a : b;\n}",
    "c_func_re_decompile": "char **func0(char **a, int n, char **b, int m)\n{\n    int i, sum1 = 0, sum2 = 0;\n    for (i = 0; i < n; i++)\n        sum1 += strlen(a[i]);\n    for (i = 0; i < m; i++)\n        sum2 += strlen(b[i]);\n    return sum1 > sum2 ? a : b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n    int i, j, t;\n\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n\n    for (i = 0, j = n - 1; i <= j; i++, j--) {\n        b[2 * i] = a[i];\n        if (i != j) {\n            b[2 * i + 1] = a[j];\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n    int i, j, t;\n\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n\n    for (i = 0, j = n - 1; i <= j; i++, j--) {\n        b[2 * i] = a[i];\n        if (i != j) {\n            b[2 * i + 1] = a[j];\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n, int m)\n{\n    int i, j;\n    j = 1;\n    for (i = 0; j <= n && i < 100; i++) {\n        if (j == n)\n            return 1;\n        j *= m;\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n, int m)\n{\n    int i, j;\n    j = 1;\n    for (i = 0; j <= n && i < 100; i++) {\n        if (j == n)\n            return 1;\n        j *= m;\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j, k, count = 0;\n\n    for (i = 0, j = n - 1, k = n / 2; i < k; i++, j--) {\n        if (a[i] != a[j])\n            count++;\n        if (i + 1 < k && a[i + 1] != a[j - 1])\n            count++;\n    }\n\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j, k, count = 0;\n\n    for (i = 0, j = n - 1, k = n / 2; i < k; i++, j--) {\n        if (a[i] != a[j])\n            count++;\n        if (i + 1 < k && a[i + 1] != a[j - 1])\n            count++;\n    }\n\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j;\n    if (n <= 1)\n        return 0;\n    for (i = 0, j = 2; j * j <= n && n > 1; j++) {\n        while (n % j == 0) {\n            n /= j;\n            i++;\n        }\n    }\n    if (n > 1)\n        i++;\n    return i == 3;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, j;\n    if (n <= 1)\n        return 0;\n    for (i = 0, j = 2; j * j <= n && n > 1; j++) {\n        while (n % j == 0) {\n            n /= j;\n            i++;\n        }\n    }\n    if (n > 1)\n        i++;\n    return i == 3;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j, k;\n    k = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n            k++;\n        }\n    }\n    if (n > 1)\n        k++;\n    return k == 3;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, j, k;\n    k = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n            k++;\n        }\n    }\n    if (n > 1)\n        k++;\n    return k == 3;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++)\n        if (strchr(\"aeiou\", str[i]))\n            count++;\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++)\n        if (strchr(\"aeiou\", str[i]))\n            count++;\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n    int i, j, k, t;\n\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n\n    k = 0;\n    for (i = 0; i < n - 1; i++) {\n        b[k++] = a[i];\n        b[k++] = a[n - 1];\n    }\n    if (n - 1)\n        b[k] = a[n - 1];\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n    int i, j, k, t;\n\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n\n    k = 0;\n    for (i = 0; i < n - 1; i++) {\n        b[k++] = a[i];\n        b[k++] = a[n - 1];\n    }\n    if (n - 1)\n        b[k] = a[n - 1];\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n  int i, j, t;\n\n  for (i=0; i<n-1; i++) {\n    for (j=i+1; j<n; j++) {\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n\n  int l = 0;\n  int r = n-1;\n  int k = 0;\n  while (l <= r) {\n    if (l == r) {\n      b[k++] = a[l++];\n    } else {\n      b[k++] = a[l++];\n      b[k++] = a[r--];\n    }\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n  int i, j, t;\n\n  for (i=0; i<n-1; i++) {\n    for (j=i+1; j<n; j++) {\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n\n  int l = 0;\n  int r = n-1;\n  int k = 0;\n  while (l <= r) {\n    if (l == r) {\n      b[k++] = a[l++];\n    } else {\n      b[k++] = a[l++];\n      b[k++] = a[r--];\n    }\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    for (i = 0; i * i * i <= (n > 0 ? n : -n); i++)\n        if (i * i * i == (n > 0 ? n : -n))\n            return 1;\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    for (i = 0; i * i * i <= (n > 0 ? n : -n); i++)\n        if (i * i * i == (n > 0 ? n : -n))\n            return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++)\n        if (strchr(\"aeiou\", str[i]) != NULL)\n            count++;\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++)\n        if (strchr(\"aeiou\", str[i]) != NULL)\n            count++;\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
    "c_func_decompile": "\nchar **func0(char **s1, int n1, char **s2, int n2)\n{\n    int i, len1 = 0, len2 = 0;\n    for (i = 0; i < n1; i++)\n        len1 += strlen(s1[i]);\n    for (i = 0; i < n2; i++)\n        len2 += strlen(s2[i]);\n    return len1 > len2 ? s1 : s2;\n}",
    "c_func_re_decompile": "char **func0(char **s1, int n1, char **s2, int n2)\n{\n    int i, len1 = 0, len2 = 0;\n    for (i = 0; i < n1; i++)\n        len1 += strlen(s1[i]);\n    for (i = 0; i < n2; i++)\n        len2 += strlen(s2[i]);\n    return len1 > len2 ? s1 : s2;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
    "c_func_decompile": "\nchar **func0(char **s1, int n1, char **s2, int n2)\n{\n    int i, len1 = 0, len2 = 0;\n    for (i = 0; i < n1; i++)\n        len1 += strlen(s1[i]);\n    for (i = 0; i < n2; i++)\n        len2 += strlen(s2[i]);\n    return len1 > len2 ? s1 : s2;\n}",
    "c_func_re_decompile": "char **func0(char **s1, int n1, char **s2, int n2)\n{\n    int i, len1 = 0, len2 = 0;\n    for (i = 0; i < n1; i++)\n        len1 += strlen(s1[i]);\n    for (i = 0; i < n2; i++)\n        len2 += strlen(s2[i]);\n    return len1 > len2 ? s1 : s2;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, count = 0;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            count++;\n            n /= i;\n        }\n    }\n    if (n > 1)\n        count++;\n    return count == 2;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, count = 0;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            count++;\n            n /= i;\n        }\n    }\n    if (n > 1)\n        count++;\n    return count == 3;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, count = 0;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            count++;\n            n /= i;\n        }\n    }\n    if (n > 1)\n        count++;\n    return count == 2;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, count = 0;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            count++;\n            n /= i;\n        }\n    }\n    if (n > 1)\n        count++;\n    return count == 3;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n, int k)\n{\n    int i, j;\n    int sum = 1;\n\n    if (n <= 0)\n        return 0;\n\n    for (i = 1; i <= n; i++) {\n        sum *= k;\n        if (sum == n)\n            return 1;\n        if (sum > n)\n            return 0;\n    }\n\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n, int k)\n{\n    int i, j;\n    int sum = 1;\n\n    if (n <= 0)\n        return 0;\n\n    for (i = 1; i <= n; i++) {\n        sum *= k;\n        if (sum == n)\n            return 1;\n        if (sum > n)\n            return 0;\n    }\n\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    char *ch = \"aeiou\";\n    int count = 0;\n    for (int i = 0; i < strlen(str); i++)\n    {\n        if (strchr(ch, str[i]) != NULL)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    char *ch = \"aeiou\";\n    int count = 0;\n    for (int i = 0; i < strlen(str); i++)\n    {\n        if (strchr(ch, str[i]) != NULL)\n        {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++)\n        if (strchr(\"aeiou\", str[i]))\n            count++;\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++)\n        if (strchr(\"aeiou\", str[i]))\n            count++;\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n, int k)\n{\n    int i, j;\n    int sum = 1;\n\n    if (n <= 0)\n        return 0;\n\n    for (i = 1; i <= n; i++) {\n        sum *= k;\n        if (sum == n)\n            return 1;\n        if (sum > n)\n            return 0;\n    }\n\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n, int k)\n{\n    int i, j;\n    int sum = 1;\n\n    if (n <= 0)\n        return 0;\n\n    for (i = 1; i <= n; i++) {\n        sum *= k;\n        if (sum == n)\n            return 1;\n        if (sum > n)\n            return 0;\n    }\n\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    size_t len = strlen(str);\n    size_t i;\n\n    for (i = 0; i < len - 2; i++) {\n        if (str[i] == str[i + 2]) {\n            return 0;\n        }\n    }\n\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    size_t len = strlen(str);\n    size_t i;\n\n    for (i = 0; i < len - 2; i++) {\n        if (str[i] == str[i + 2]) {\n            return 0;\n        }\n    }\n\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
    "c_func_decompile": "\nchar **func0(char **arg0, int arg1, char **arg2, int arg3)\n{\n    int i;\n    int len0 = 0;\n    int len2 = 0;\n\n    for (i = 0; i < arg1; i++) {\n        len0 += strlen(arg0[i]);\n    }\n\n    for (i = 0; i < arg3; i++) {\n        len2 += strlen(arg2[i]);\n    }\n\n    if (len0 < len2) {\n        return arg0;\n    } else if (len0 > len2) {\n        return arg2;\n    } else {\n        return arg0;\n    }\n}",
    "c_func_re_decompile": "char **func0(char **arg0, int arg1, char **arg2, int arg3)\n{\n    int i;\n    int len0 = 0;\n    int len2 = 0;\n\n    for (i = 0; i < arg1; i++) {\n        len0 += strlen(arg0[i]);\n    }\n\n    for (i = 0; i < arg3; i++) {\n        len2 += strlen(arg2[i]);\n    }\n\n    if (len0 < len2) {\n        return arg0;\n    } else if (len0 > len2) {\n        return arg2;\n    } else {\n        return arg0;\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i;\n    if (strlen(str) < 3)\n        return 0;\n    for (i = 2; i < strlen(str); i++)\n        if (str[i] == str[i - 1] || str[i] == str[i - 2])\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i;\n    if (strlen(str) < 3)\n        return 0;\n    for (i = 2; i < strlen(str); i++)\n        if (str[i] == str[i - 1] || str[i] == str[i - 2])\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i;\n    int m;\n\n    if (n < 0)\n        n = -n;\n\n    for (i = 1; ; i++) {\n        m = i * i * i;\n        if (m > n)\n            break;\n        if (m == n)\n            return 1;\n    }\n\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i;\n    int m;\n\n    if (n < 0)\n        n = -n;\n\n    if (n == 0)\n        return 1;\n\n    for (i = 1; ; i++) {\n        m = i * i * i;\n        if (m > n)\n            break;\n        if (m == n)\n            return 1;\n    }\n\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int len = strlen(str);\n    int i;\n\n    if (len < 2)\n        return 0;\n\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int len = strlen(str);\n    int i;\n\n    if (len < 2)\n        return 0;\n\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len;\n\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, len;\n\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, result;\n\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n\n    result = 18;\n    for (i = 2; i < n; i++)\n        result = result * 10;\n\n    return result;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, result;\n\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n\n    result = 18;\n    for (i = 2; i < n; i++)\n        result = result * 10;\n\n    return result;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    size_t len = strlen(str);\n    size_t i;\n\n    for (i = 0; i < len - 2; i++) {\n        if (str[i] == str[i + 2]) {\n            return 0;\n        }\n    }\n\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    size_t len = strlen(str);\n    size_t i;\n\n    for (i = 0; i < len - 2; i++) {\n        if (str[i] == str[i + 1] || str[i + 1] == str[i + 2]) {\n            return 0;\n        }\n    }\n\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n, int m)\n{\n    int i, j;\n    int sum;\n\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n\n    sum = 0;\n    for (i = 1; i <= 99; i++) {\n        j = n;\n        while (j >= m) {\n            sum++;\n            j = j - m;\n        }\n        if (j == n)\n            break;\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int n, int m)\n{\n    int i, j;\n    int sum;\n\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n\n    sum = 0;\n    for (i = 1; i <= 99; i++) {\n        j = m;\n        while (j <= n) {\n            sum++;\n            j = j * m;\n        }\n        if (j == n)\n            break;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, sum;\n\n    sum = 0;\n    for (i = 0; i < n; i++)\n        sum = sum * 10 + 18;\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, sum;\n\n    sum = 0;\n    for (i = 2; i < n; i++)\n        sum = sum * 10 + 18;\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j;\n    if (n < 0)\n        n = -n;\n    if (n == 0)\n        return 1;\n    for (i = 1; i * i * i <= n; i++)\n        for (j = 1; j * j * j <= n; j++)\n            if (i * i * i + j * j * j == n)\n                return 1;\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, j;\n    if (n < 0)\n        n = -n;\n    if (n == 0)\n        return 1;\n    for (i = 1; i * i * i <= n; i++)\n        for (j = 1; j * j * j <= n; j++)\n            if (i * i * i + j * j * j == n)\n                return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j;\n    if (n < 0)\n        n = -n;\n    if (n == 0)\n        return 1;\n    for (i = 1; i * i * i <= n; i++)\n        for (j = 1; j * j * j <= n; j++)\n            if (i * i * i + j * j * j == n)\n                return 1;\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, j;\n    if (n < 0)\n        n = -n;\n    if (n == 0)\n        return 1;\n    for (i = 1; i * i * i <= n; i++)\n        for (j = 1; j * j * j <= n; j++)\n            if (i * i * i + j * j * j == n)\n                return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    size_t len = strlen(str);\n    size_t i;\n\n    for (i = 2; i < len; i++) {\n        if (str[i] == str[i - 1] || str[i] == str[i - 2]) {\n            return 0;\n        }\n    }\n\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    size_t len = strlen(str);\n    size_t i;\n\n    for (i = 2; i < len; i++) {\n        if (str[i] == str[i - 1] || str[i] == str[i - 2]) {\n            return 0;\n        }\n    }\n\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, result;\n\n    result = 0;\n    for (i = 0; i < n; i++)\n    {\n        result = result * 10 + 18;\n    }\n    return result;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, result;\n\n    result = 0;\n    for (i = 0; i < n; i++)\n    {\n        result = result * 10 + 18;\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len;\n\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n    if (len > 3) {\n        for (i = 2; i * i <= len; i++)\n            if (len % i == 0)\n                return 0;\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, len;\n\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n    if (len > 3) {\n        for (i = 2; i * i <= len; i++)\n            if (len % i == 0)\n                return 0;\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, len;\n\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n    if (len > 3) {\n        for (i = 2; i * i <= len; i++)\n            if (len % i == 0)\n                return 0;\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, len;\n\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n    if (len > 3) {\n        for (i = 2; i * i <= len; i++)\n            if (len % i == 0)\n                return 0;\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 1; i < n; i += 2)\n        if (a[i] % 2 == 0)\n            sum += a[i];\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 1; i < n; i += 2)\n        if (a[i] % 2 == 0)\n            sum += a[i];\n    return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 1; i < n; i++)\n        if (a[i] % 2 == 0)\n            sum += a[i];\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 1; i < n; i += 2)\n        if (a[i] % 2 == 0)\n            sum += a[i];\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 1; i < n; i++) {\n        if (a[i] % 2 == 0)\n            sum += a[i];\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 1; i < n; i++) {\n        if (a[i] % 2 == 0)\n            sum += a[i];\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n  int i, sum = 0;\n\n  for (i = 0; i < 2*i+1; i++)\n    if (a[2*i+1] % 2 == 0)\n      sum += a[2*i+1];\n\n  return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n  int i, sum = 0;\n\n  for (i = 0; i < 2*i+1; i++)\n    if (a[2*i+1] % 2 == 0)\n      sum += a[2*i+1];\n\n  return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, result;\n\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 18;\n    result = 18;\n    for (i = 2; i < n; i++)\n        result *= i;\n    return result;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, result;\n\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 18;\n    if (n == 3)\n        return 180;\n    result = 180;\n    for (i = 2; i < n; i++)\n        result *= i;\n    return result;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
    "c_func_decompile": "\nchar *func0(int n)\n{\n    char buf[6];\n    char *p;\n    int i, j, k;\n\n    __sprintf_chk(buf, 1, 6, \"%d\", n);\n    for (i = 0; buf[i] != '\\0'; i++)\n        ;\n    p = malloc(i + 1);\n    for (j = 0, k = i - 1; j < i; j++, k--)\n        p[j] = buf[k] - '0';\n    p[j] = '\\0';\n    return p;\n}",
    "c_func_re_decompile": "char *func0(int n)\n{\n    char buf[6];\n    char *p;\n    int i, j, k;\n\n    __sprintf_chk(buf, 1, 6, \"%d\", n);\n    for (i = 0; buf[i] != '\\0'; i++)\n        ;\n    p = malloc(i + 1);\n    for (j = 0, k = i - 1; j < i; j++, k--)\n        p[j] = buf[k] - '0';\n    p[j] = '\\0';\n    return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
    "c_func_decompile": "\nchar *func0(int n)\n{\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0)\n        s[i--] = '0';\n    while (n > 0) {\n        s[i--] = (n % 2) + '0';\n        n /= 2;\n    }\n    s[i--] = 'b';\n    s[i] = 'd';\n    char *t = malloc(64 - i);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    strcpy(t, s + i);\n    strcpy(t + strlen(t), \"bd\");\n    free(s);\n    return t;\n}",
    "c_func_re_decompile": "char *func0(int n)\n{\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0)\n        s[i--] = '0';\n    while (n > 0) {\n        s[i--] = (n % 2) + '0';\n        n /= 2;\n    }\n    s[i--] = 'b';\n    s[i] = 'd';\n    char *t = malloc(64 - i);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    strcpy(t, s + i);\n    strcpy(t + strlen(t), \"bd\");\n    free(s);\n    return t;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
    "c_func_decompile": "\nchar *func0(int n)\n{\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0)\n        s[i--] = '0';\n    else\n        while (n != 0) {\n            s[i--] = (n & 1) + '0';\n            n >>= 1;\n        }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    char *t = malloc(5);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    t = stpcpy(t, s + i);\n    t[0] = 'b';\n    t[1] = 'd';\n    t[2] = '\\0';\n    free(s);\n    return t;\n}",
    "c_func_re_decompile": "char *func0(int n)\n{\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0)\n        s[i--] = '0';\n    else\n        while (n != 0) {\n            s[i--] = (n & 1) + '0';\n            n >>= 1;\n        }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    char *t = malloc(5);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    t = stpcpy(t, s + i);\n    t[0] = 'b';\n    t[1] = 'd';\n    t[2] = '\\0';\n    free(s);\n    return t;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
    "c_func_decompile": "\nchar *func0(int n)\n{\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0)\n        s[i--] = '0';\n    else\n        while (n != 0) {\n            s[i--] = (n & 1) + '0';\n            n >>= 1;\n        }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    char *t = malloc(5);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    t = stpcpy(t, s + i);\n    t[0] = 'b';\n    t[1] = 'd';\n    t[2] = '\\0';\n    free(s);\n    return t;\n}",
    "c_func_re_decompile": "char *func0(int n)\n{\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0)\n        s[i--] = '0';\n    else\n        while (n != 0) {\n            s[i--] = (n & 1) + '0';\n            n >>= 1;\n        }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    char *t = malloc(5);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    t = stpcpy(t, s + i);\n    t[0] = 'b';\n    t[1] = 'd';\n    t[2] = '\\0';\n    free(s);\n    return t;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
    "c_func_decompile": "\nchar *func0(int n)\n{\n    char *s;\n    char *t;\n    int i;\n    int j;\n    int k;\n\n    s = malloc(64);\n    if (s == NULL)\n        return NULL;\n\n    i = 62;\n    s[63] = '\\0';\n\n    if (n == 0)\n        s[i--] = '0';\n    else\n        while (n > 0) {\n            s[i--] = (n % 2) + '0';\n            n = n / 2;\n        }\n\n    s[i--] = 'b';\n    s[i--] = 'd';\n\n    j = i + 1;\n    k = 62 - j;\n\n    t = malloc(k + 3);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n\n    strcpy(t, s + j);\n    strcpy(t + strlen(t), \"bd\");\n\n    free(s);\n\n    return t;\n}",
    "c_func_re_decompile": "char *func0(int n)\n{\n    char *s;\n    char *t;\n    int i;\n    int j;\n    int k;\n\n    s = malloc(64);\n    if (s == NULL)\n        return NULL;\n\n    i = 62;\n    s[63] = '\\0';\n\n    if (n == 0)\n        s[i--] = '0';\n    else\n        while (n > 0) {\n            s[i--] = (n % 2) + '0';\n            n = n / 2;\n        }\n\n    s[i--] = 'b';\n    s[i--] = 'd';\n\n    j = i + 1;\n    k = 62 - j;\n\n    t = malloc(k + 3);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n\n    strcpy(t, s + j);\n    strcpy(t + strlen(t), \"bd\");\n\n    free(s);\n\n    return t;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int b, int *c, int *d)\n{\n    *d = b;\n    if (b) {\n        *c = 0;\n        return;\n    }\n    *c = 0;\n}",
    "c_func_re_decompile": "void func0(int *a, int b, int *c, int *d)\n{\n    *d = b;\n    if (b) {\n        *c = 0;\n        return;\n    }\n    *c = 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int b, int *c, int *d)\n{\n    *d = b;\n    if (b) {\n        *c = 0;\n        return;\n    }\n    *c = 0;\n}",
    "c_func_re_decompile": "void func0(int *a, int b, int *c, int *d)\n{\n    *d = b;\n    if (b) {\n        *c = 0;\n        return;\n    }\n    *c = 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
    "c_func_decompile": "\nchar* func0(int n)\n{\n    char str[10];\n    sprintf(str, \"%d\", n);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n    char* result = (char*)malloc(33);\n    int len = 0;\n    if (sum == 0)\n        result[len++] = '0';\n    while (sum > 0)\n    {\n        result[len++] = sum % 2 + '0';\n        sum /= 2;\n    }\n    result[len] = '\\0';\n    for (int i = 0; i < len / 2; i++)\n    {\n        char temp = result[i];\n        result[i] = result[len - i - 1];\n        result[len - i - 1] = temp;\n    }\n    return result;\n}",
    "c_func_re_decompile": "char* func0(int n)\n{\n    char str[10];\n    sprintf(str, \"%d\", n);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n    char* result = (char*)malloc(33);\n    int len = 0;\n    if (sum == 0)\n        result[len++] = '0';\n    while (sum > 0)\n    {\n        result[len++] = sum % 2 + '0';\n        sum /= 2;\n    }\n    result[len] = '\\0';\n    for (int i = 0; i < len / 2; i++)\n    {\n        char temp = result[i];\n        result[i] = result[len - i - 1];\n        result[len - i - 1] = temp;\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
    "c_func_decompile": "\nchar* func0(int n)\n{\n    char str[6];\n    __sprintf_chk(str, 1, sizeof(str), \"%d\", n);\n    int i = 0;\n    int sum = 0;\n    while (str[i] != '\\0') {\n        sum += str[i] - '0';\n        i++;\n    }\n    char* result = (char*)malloc(33);\n    i = 0;\n    while (sum > 0) {\n        result[i] = sum % 2 + '0';\n        sum /= 2;\n        i++;\n    }\n    result[i] = '\\0';\n    int j = 0;\n    char temp;\n    for (j = 0; j < i / 2; j++) {\n        temp = result[j];\n        result[j] = result[i - 1 - j];\n        result[i - 1 - j] = temp;\n    }\n    return result;\n}",
    "c_func_re_decompile": "char* func0(int n)\n{\n    char str[6];\n    __sprintf_chk(str, 1, sizeof(str), \"%d\", n);\n    int i = 0;\n    int sum = 0;\n    while (str[i] != '\\0') {\n        sum += str[i] - '0';\n        i++;\n    }\n    char* result = (char*)malloc(33);\n    i = 0;\n    while (sum != 0) {\n        result[i] = sum % 2 + '0';\n        sum /= 2;\n        i++;\n    }\n    if (i == 0) {\n        result[i] = '0';\n        i++;\n    }\n    result[i] = '\\0';\n    int j = 0;\n    char temp;\n    for (j = 0; j < i / 2; j++) {\n        temp = result[j];\n        result[j] = result[i - 1 - j];\n        result[i - 1 - j] = temp;\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
    "c_func_decompile": "\nchar *func0(int n)\n{\n    char *str;\n    char buf[6];\n    int i, j, k;\n\n    __sprintf_chk(buf, 1, 6, \"%d\", n);\n    for (i = 0; buf[i]; i++)\n        k = k * 10 + buf[i] - '0';\n\n    str = (char *)malloc(33);\n    for (i = 0; k; i++, k >>= 1)\n        str[i] = k & 1 ? '1' : '0';\n    str[i] = '\\0';\n\n    for (j = 0, i--; j < i; j++, i--) {\n        k = str[j];\n        str[j] = str[i];\n        str[i] = k;\n    }\n\n    return str;\n}",
    "c_func_re_decompile": "char *func0(int n)\n{\n    char *str;\n    char buf[6];\n    int i, j, k;\n\n    __sprintf_chk(buf, 1, 6, \"%d\", n);\n    for (i = 0; buf[i]; i++)\n        k = k * 10 + buf[i] - '0';\n\n    str = (char *)malloc(33);\n    for (i = 0; k; i++, k >>= 1)\n        str[i] = k & 1 ? '1' : '0';\n    str[i] = '\\0';\n\n    for (j = 0, i--; j < i; j++, i--) {\n        k = str[j];\n        str[j] = str[i];\n        str[i] = k;\n    }\n\n    return str;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i;\n    for (i = 0; s[i] != '\\0'; i++)\n        t[i] = s[i] - 'a' + 'A';\n    t[i] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, char *t)\n{\n    int i;\n    for (i = 0; s[i] != '\\0'; i++)\n        t[i] = (s[i] - 'a' + 3) % 26 + 'a';\n    t[i] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
    "c_func_decompile": "\nint **func0(int **a, int n, int *m, int x, int *p)\n{\n    int i, j, k;\n    int **b;\n\n    b = (int **) malloc(100 * sizeof(int *));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (a[i][j] == x) {\n                b[k] = (int *) malloc(2 * sizeof(int));\n                b[k][0] = i;\n                b[k][1] = j;\n                k++;\n            }\n        }\n    }\n    *p = k;\n    return b;\n}",
    "c_func_re_decompile": "int **func0(int **a, int n, int *m, int x, int *p)\n{\n    int i, j, k;\n    int **b;\n\n    b = (int **) malloc(100 * sizeof(int *));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (a[i][j] == x) {\n                b[k] = (int *) malloc(2 * sizeof(int));\n                b[k][0] = i;\n                b[k][1] = j;\n                k++;\n            }\n        }\n    }\n    *p = k;\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
    "c_func_decompile": "\nint **func0(int **arr, int n, int *len, int val, int *ret_len)\n{\n    int **ret = (int **)malloc(sizeof(int *) * 100);\n    int i, j, k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = len[i] - 1; j >= 0; j--) {\n            if (arr[i][j] == val) {\n                ret[k] = (int *)malloc(sizeof(int) * 2);\n                ret[k][0] = i;\n                ret[k][1] = j;\n                k++;\n            }\n        }\n    }\n    *ret_len = k;\n    return ret;\n}",
    "c_func_re_decompile": "int **func0(int **arr, int n, int *len, int val, int *ret_len)\n{\n    int **ret = (int **)malloc(sizeof(int *) * 100);\n    int i, j, k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = len[i] - 1; j >= 0; j--) {\n            if (arr[i][j] == val) {\n                ret[k] = (int *)malloc(sizeof(int) * 2);\n                ret[k][0] = i;\n                ret[k][1] = j;\n                k++;\n            }\n        }\n    }\n    *ret_len = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *a, char *b)\n{\n  int i;\n  int c;\n\n  for (i = 0; a[i] != '\\0'; i++) {\n    c = (a[i] - 'a' + 1) % 26 + 'a';\n    b[i] = c;\n  }\n  b[i] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *a, char *b)\n{\n  int i;\n  int c;\n\n  for (i = 0; a[i] != '\\0'; i++) {\n    c = (a[i] - 'a' + 1) % 26 + 'a';\n    b[i] = c;\n  }\n  b[i] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i;\n    for (i = 0; s[i] != '\\0'; i++)\n        t[i] = s[i] - 'a' + 'A';\n    t[i] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, char *t)\n{\n    int i;\n    for (i = 0; s[i] != '\\0'; i++)\n        t[i] = (s[i] - 'a' + 1) % 26 + 'a';\n    t[i] = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
    "c_func_decompile": "\nint **func0(int **a, int n, int *m, int x, int *k)\n{\n    int i, j, l = 0;\n    int **b = (int **) malloc(100 * sizeof(int *));\n    for (i = 0; i < n; i++)\n        for (j = m[i] - 1; j >= 0; j--)\n            if (a[i][j] == x)\n            {\n                b[l] = (int *) malloc(2 * sizeof(int));\n                b[l][0] = i;\n                b[l][1] = j;\n                l++;\n            }\n    *k = l;\n    return b;\n}",
    "c_func_re_decompile": "int **func0(int **a, int n, int *m, int x, int *k)\n{\n    int i, j, l = 0;\n    int **b = (int **) malloc(100 * sizeof(int *));\n    for (i = 0; i < n; i++)\n        for (j = m[i] - 1; j >= 0; j--)\n            if (a[i][j] == x)\n            {\n                b[l] = (int *) malloc(2 * sizeof(int));\n                b[l][0] = i;\n                b[l][1] = j;\n                l++;\n            }\n    *k = l;\n    return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i;\n    for (i = 0; s[i] != '\\0'; i++)\n        t[i] = s[i] - 'a' + 'A';\n    t[i] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, char *t)\n{\n    int i;\n    for (i = 0; s[i] != '\\0'; i++)\n        t[i] = (s[i] - 'a' + 1) % 26 + 'a';\n    t[i] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int len = strlen(str);\n    char *ret = (char *)malloc(len + 2);\n    char tmp[50];\n    int i, j, k, l, m;\n    i = 0;\n    m = 0;\n    for (j = 0; j <= len; j++) {\n        if (str[j] == ' ' || str[j] == '\\0') {\n            for (k = 0; k < m - 1; k++) {\n                for (l = k + 1; l < m; l++) {\n                    if (tmp[k] > tmp[l]) {\n                        char t = tmp[k];\n                        tmp[k] = tmp[l];\n                        tmp[l] = t;\n                    }\n                }\n            }\n            if (i > 0)\n                ret[i++] = ' ';\n            for (k = 0; k < m; k++)\n                ret[i++] = tmp[k];\n            m = 0;\n        } else\n            tmp[m++] = str[j];\n    }\n    ret[i] = '\\0';\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    int len = strlen(str);\n    char *ret = (char *)malloc(len + 2);\n    char tmp[50];\n    int i, j, k, l, m;\n    i = 0;\n    m = 0;\n    for (j = 0; j <= len; j++) {\n        if (str[j] == ' ' || str[j] == '\\0') {\n            for (k = 0; k < m - 1; k++) {\n                for (l = k + 1; l < m; l++) {\n                    if (tmp[k] > tmp[l]) {\n                        char t = tmp[k];\n                        tmp[k] = tmp[l];\n                        tmp[l] = t;\n                    }\n                }\n            }\n            if (i > 0)\n                ret[i++] = ' ';\n            for (k = 0; k < m; k++)\n                ret[i++] = tmp[k];\n            m = 0;\n        } else\n            tmp[m++] = str[j];\n    }\n    ret[i] = '\\0';\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(float *x, int n)\n{\n    int i;\n    char **y = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        if (x[i] >= 1.0)\n            y[i] = \"A\";\n        else if (x[i] >= 0.9)\n            y[i] = \"B\";\n        else if (x[i] >= 0.8)\n            y[i] = \"C\";\n        else if (x[i] >= 0.7)\n            y[i] = \"D\";\n        else if (x[i] >= 0.6)\n            y[i] = \"E\";\n        else if (x[i] >= 0.5)\n            y[i] = \"F\";\n        else if (x[i] >= 0.4)\n            y[i] = \"G\";\n        else if (x[i] >= 0.3)\n            y[i] = \"H\";\n        else if (x[i] >= 0.2)\n            y[i] = \"I\";\n        else if (x[i] >= 0.1)\n            y[i] = \"J\";\n        else if (x[i] >= 0.05)\n            y[i] = \"K\";\n        else\n            y[i] = \"L\";\n    }\n    return y;\n}",
    "c_func_re_decompile": "char **func0(float *x, int n)\n{\n    int i;\n    char **y = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        if (x[i] >= 1.0)\n            y[i] = \"A\";\n        else if (x[i] >= 0.9)\n            y[i] = \"B\";\n        else if (x[i] >= 0.8)\n            y[i] = \"C\";\n        else if (x[i] >= 0.7)\n            y[i] = \"D\";\n        else if (x[i] >= 0.6)\n            y[i] = \"E\";\n        else if (x[i] >= 0.5)\n            y[i] = \"F\";\n        else if (x[i] >= 0.4)\n            y[i] = \"G\";\n        else if (x[i] >= 0.3)\n            y[i] = \"H\";\n        else if (x[i] >= 0.2)\n            y[i] = \"I\";\n        else if (x[i] >= 0.1)\n            y[i] = \"J\";\n        else if (x[i] >= 0.05)\n            y[i] = \"K\";\n        else if (x[i] >= 0.01)\n            y[i] = \"L\";\n        else if (x[i] >= 0.001)\n            y[i] = \"M\";\n        else if (x[i] >= 0.0001)\n            y[i] = \"N\";\n        else if (x[i] >= 0.00001)\n            y[i] = \"O\";\n        else if (x[i] >= 0.000001)\n            y[i] = \"P\";\n        else\n            y[i] = \"Q\";\n    }\n    return y;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, max, second;\n\n    max = second = 0x7fffffff;\n    for (i = 0; i < n; i++) {\n        if (a[i] < second) {\n            if (a[i] < max)\n                second = a[i];\n            else if (a[i] == max)\n                second = max;\n        }\n    }\n    if (second == 0x7fffffff)\n        return -1;\n    return second;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, max, second;\n\n    max = second = 0x7fffffff;\n    for (i = 0; i < n; i++) {\n        if (a[i] < second) {\n            if (a[i] < max)\n                second = a[i];\n            else if (a[i] == max)\n                second = max;\n        }\n    }\n    if (second == 0x7fffffff)\n        return -1;\n    return second;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, max, second;\n\n    if (n < 2)\n        return -1;\n\n    max = 0x7fffffff;\n    second = 0x7fffffff;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > max) {\n            second = max;\n            max = a[i];\n        } else if (a[i] > second && a[i] != max) {\n            second = a[i];\n        }\n    }\n\n    if (second == 0x7fffffff)\n        return -1;\n\n    return second;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, max, second;\n\n    if (n < 2)\n        return -1;\n\n    max = 0x7fffffff;\n    second = 0x7fffffff;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > max) {\n            second = max;\n            max = a[i];\n        } else if (a[i] > second && a[i] != max) {\n            second = a[i];\n        }\n    }\n\n    if (second == 0x7fffffff)\n        return -1;\n\n    return second;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(float *x, int n)\n{\n    int i;\n    char **y;\n\n    y = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n if (x[i] >= 0.9)\n     y[i] = \"A\";\n else if (x[i] >= 0.8)\n     y[i] = \"B\";\n else if (x[i] >= 0.7)\n     y[i] = \"C\";\n else if (x[i] >= 0.6)\n     y[i] = \"D\";\n else if (x[i] >= 0.5)\n     y[i] = \"E\";\n else if (x[i] >= 0.4)\n     y[i] = \"F\";\n else if (x[i] >= 0.3)\n     y[i] = \"G\";\n else if (x[i] >= 0.2)\n     y[i] = \"H\";\n else if (x[i] >= 0.1)\n     y[i] = \"I\";\n else if (x[i] >= 0.05)\n     y[i] = \"J\";\n else if (x[i] >= 0.01)\n     y[i] = \"K\";\n else if (x[i] >= 0.001)\n     y[i] = \"L\";\n else if (x[i] >= 0.0001)\n     y[i] = \"M\";\n else\n     y[i] = \"N\";\n    }\n    return y;\n}",
    "c_func_re_decompile": "char **func0(float *x, int n)\n{\n    int i;\n    char **y;\n\n    y = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n if (x[i] >= 0.9)\n     y[i] = \"A\";\n else if (x[i] >= 0.8)\n     y[i] = \"B\";\n else if (x[i] >= 0.7)\n     y[i] = \"C\";\n else if (x[i] >= 0.6)\n     y[i] = \"D\";\n else if (x[i] >= 0.5)\n     y[i] = \"E\";\n else if (x[i] >= 0.4)\n     y[i] = \"F\";\n else if (x[i] >= 0.3)\n     y[i] = \"G\";\n else if (x[i] >= 0.2)\n     y[i] = \"H\";\n else if (x[i] >= 0.1)\n     y[i] = \"I\";\n else if (x[i] >= 0.05)\n     y[i] = \"J\";\n else if (x[i] >= 0.01)\n     y[i] = \"K\";\n else if (x[i] >= 0.001)\n     y[i] = \"L\";\n else if (x[i] >= 0.0001)\n     y[i] = \"M\";\n else if (x[i] >= 0.00001)\n     y[i] = \"N\";\n else if (x[i] >= 0.000001)\n     y[i] = \"O\";\n else if (x[i] >= 0.0000001)\n     y[i] = \"P\";\n else if (x[i] >= 0.00000001)\n     y[i] = \"Q\";\n else if (x[i] >= 0.000000001)\n     y[i] = \"R\";\n else\n     y[i] = \"S\";\n    }\n    return y;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int i, j, k, len, len2;\n    char *str2, str3[50];\n\n    len = strlen(str);\n    str2 = (char *)malloc((len + 2) * sizeof(char));\n    len2 = 0;\n    for (i = 0; i <= len; i++) {\n        if (str[i] == ' ' || str[i] == '\\0') {\n            for (j = 0; j < len2 - 1; j++) {\n                for (k = j + 1; k < len2; k++) {\n                    if (str3[j] > str3[k]) {\n                        str3[j] = str3[j] + str3[k];\n                        str3[k] = str3[j] - str3[k];\n                        str3[j] = str3[j] - str3[k];\n                    }\n                }\n            }\n            if (len2 != 0)\n                str2[len2++] = ' ';\n            for (j = 0; j < len2; j++)\n                str2[len2++] = str3[j];\n            len2 = 0;\n        } else\n            str3[len2++] = str[i];\n    }\n    str2[len2] = '\\0';\n    return str2;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    int i, j, k, len, len2;\n    char *str2, str3[50];\n\n    len = strlen(str);\n    str2 = (char *)malloc((len + 2) * sizeof(char));\n    len2 = 0;\n    for (i = 0; i <= len; i++) {\n        if (str[i] == ' ' || str[i] == '\\0') {\n            for (j = 0; j < len2 - 1; j++) {\n                for (k = j + 1; k < len2; k++) {\n                    if (str3[j] > str3[k]) {\n                        str3[j] = str3[j] + str3[k];\n                        str3[k] = str3[j] - str3[k];\n                        str3[j] = str3[j] - str3[k];\n                    }\n                }\n            }\n            if (len2 != 0)\n                str2[len2++] = ' ';\n            for (j = 0; j < len2; j++)\n                str2[len2++] = str3[j];\n            len2 = 0;\n        } else\n            str3[len2++] = str[i];\n    }\n    str2[len2] = '\\0';\n    return str2;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, max, second;\n\n    if (n < 2)\n        return -1;\n\n    max = second = 0x7fffffff;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > max) {\n            second = max;\n            max = a[i];\n        } else if (a[i] > second && a[i] != max)\n            second = a[i];\n    }\n\n    if (second == 0x7fffffff)\n        return -1;\n\n    return second;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, max, second;\n\n    if (n < 2)\n        return -1;\n\n    max = second = 0x7fffffff;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > max) {\n            second = max;\n            max = a[i];\n        } else if (a[i] > second && a[i] != max)\n            second = a[i];\n    }\n\n    if (second == 0x7fffffff)\n        return -1;\n\n    return second;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int i, j, k, len, len2;\n    char *str2, str3[50];\n\n    len = strlen(str);\n    str2 = (char *)malloc((len + 2) * sizeof(char));\n    len2 = 0;\n    for (i = 0; i <= len; i++) {\n        if (str[i] == ' ' || str[i] == '\\0') {\n            for (j = 0; j < len2 - 1; j++) {\n                for (k = j + 1; k < len2; k++) {\n                    if (str3[j] > str3[k]) {\n                        str3[j] = str3[j] + str3[k];\n                        str3[k] = str3[j] - str3[k];\n                        str3[j] = str3[j] - str3[k];\n                    }\n                }\n            }\n            if (len2 != 0) {\n                str2[len2] = ' ';\n                len2++;\n            }\n            for (j = 0; j < len2; j++) {\n                str2[len2] = str3[j];\n                len2++;\n            }\n            len2 = 0;\n        } else {\n            str3[len2] = str[i];\n            len2++;\n        }\n    }\n    str2[len2] = '\\0';\n    return str2;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    int i, j, k, len, len2;\n    char *str2, str3[50];\n\n    len = strlen(str);\n    str2 = (char *)malloc((len + 2) * sizeof(char));\n    len2 = 0;\n    for (i = 0; i <= len; i++) {\n        if (str[i] == ' ' || str[i] == '\\0') {\n            for (j = 0; j < len2 - 1; j++) {\n                for (k = j + 1; k < len2; k++) {\n                    if (str3[j] > str3[k]) {\n                        str3[j] = str3[j] + str3[k];\n                        str3[k] = str3[j] - str3[k];\n                        str3[j] = str3[j] - str3[k];\n                    }\n                }\n            }\n            if (len2 != 0) {\n                str2[len2] = ' ';\n                len2++;\n            }\n            for (j = 0; j < len2; j++) {\n                str2[len2] = str3[j];\n                len2++;\n            }\n            len2 = 0;\n        } else {\n            str3[len2] = str[i];\n            len2++;\n        }\n    }\n    str2[len2] = '\\0';\n    return str2;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nbool func0(float a, float b, float c)\n{\n    if (roundf(a) != a)\n        return false;\n    if (roundf(b) != b)\n        return false;\n    if (roundf(c) != c)\n        return false;\n    if (a + b == c || a + c == b || b + c == a)\n        return true;\n    return false;\n}",
    "c_func_re_decompile": "bool func0(float a, float b, float c)\n{\n    if (roundf(a) != a)\n        return false;\n    if (roundf(b) != b)\n        return false;\n    if (roundf(c) != c)\n        return false;\n    if (a + b == c || a + c == b || b + c == a)\n        return true;\n    return false;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int i, j, k, len, len1, len2, len3;\n    char *str1, *str2, *str3;\n    char ch, ch1, ch2;\n\n    len1 = strlen(str);\n    len2 = len1 + 2;\n    str1 = (char *)malloc(len2);\n    len3 = 0;\n    len = 0;\n    for (i = 0; i <= len1; i++) {\n        ch = str[i];\n        if (ch != ' ' && ch != '\\0') {\n            str2 = (char *)malloc(len + 1);\n            str2[len] = ch;\n            len++;\n        } else {\n            for (j = 0; j < len - 1; j++) {\n                for (k = j + 1; k < len; k++) {\n                    ch1 = str2[j];\n                    ch2 = str2[k];\n                    if (ch1 > ch2) {\n                        str2[j] = ch2;\n                        str2[k] = ch1;\n                    }\n                }\n            }\n            for (j = 0; j < len3; j++) {\n                str1[len3] = ' ';\n                len3++;\n            }\n            for (j = 0; j < len; j++) {\n                str1[len3] = str2[j];\n                len3++;\n            }\n            len = 0;\n        }\n    }\n    str1[len3] = '\\0';\n    return str1;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    int i, j, k, len, len1, len2, len3;\n    char *str1, *str2, *str3;\n    char ch, ch1, ch2;\n    char str4[50];\n\n    len1 = strlen(str);\n    len2 = len1 + 2;\n    str1 = (char *)malloc(len2);\n    len3 = 0;\n    len = 0;\n    for (i = 0; i <= len1; i++) {\n        ch = str[i];\n        if (ch != ' ' && ch != '\\0') {\n            str4[len] = ch;\n            len++;\n        } else {\n            for (j = 0; j < len - 1; j++) {\n                for (k = j + 1; k < len; k++) {\n                    ch1 = str4[j];\n                    ch2 = str4[k];\n                    if (ch1 > ch2) {\n                        str4[j] = ch2;\n                        str4[k] = ch1;\n                    }\n                }\n            }\n            for (j = 0; j < len3; j++) {\n                str1[len3] = ' ';\n                len3++;\n            }\n            for (j = 0; j < len; j++) {\n                str1[len3] = str4[j];\n                len3++;\n            }\n            len = 0;\n        }\n    }\n    str1[len3] = '\\0';\n    return str1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(float a, float b, float c)\n{\n    if (roundf(a) != a)\n        return 0;\n    if (roundf(b) != b)\n        return 0;\n    if (roundf(c) != c)\n        return 0;\n    if (a + b == c)\n        return 1;\n    if (a + c == b)\n        return 1;\n    if (b + c == a)\n        return 1;\n    return 0;\n}",
    "c_func_re_decompile": "int func0(float a, float b, float c)\n{\n    if (roundf(a) != a)\n        return 0;\n    if (roundf(b) != b)\n        return 0;\n    if (roundf(c) != c)\n        return 0;\n    if (a + b == c)\n        return 1;\n    if (a + c == b)\n        return 1;\n    if (b + c == a)\n        return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(float a, float b, float c)\n{\n    if (roundf(a) != a)\n        return 0;\n    if (roundf(b) != b)\n        return 0;\n    if (roundf(c) != c)\n        return 0;\n    if (a + b == c)\n        return 1;\n    if (a + c == b)\n        return 1;\n    if (b + c == a)\n        return 1;\n    return 0;\n}",
    "c_func_re_decompile": "int func0(float a, float b, float c)\n{\n    if (roundf(a) != a)\n        return 0;\n    if (roundf(b) != b)\n        return 0;\n    if (roundf(c) != c)\n        return 0;\n    if (a + b == c)\n        return 1;\n    if (a + c == b)\n        return 1;\n    if (b + c == a)\n        return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k;\n    int temp;\n    int flag;\n\n    *m = n;\n    if (n == 0) {\n        *b = 0;\n        return;\n    }\n\n    *b = (int *) malloc(n * sizeof(int));\n    if (*b == 0) {\n        exit(1);\n    }\n\n    for (i = 0; i < n; i++) {\n        (*b)[i] = a[i];\n    }\n\n    flag = ((a[0] + a[n - 1]) % 2 == 1);\n\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (flag) {\n                if ((*b)[i] > (*b)[j]) {\n                    temp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = temp;\n                }\n            } else {\n                if ((*b)[i] < (*b)[j]) {\n                    temp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = temp;\n                }\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k;\n    int temp;\n    int flag;\n\n    *m = n;\n    if (n == 0) {\n        *b = 0;\n        return;\n    }\n\n    *b = (int *) malloc(n * sizeof(int));\n    if (*b == 0) {\n        exit(1);\n    }\n\n    for (i = 0; i < n; i++) {\n        (*b)[i] = a[i];\n    }\n\n    flag = ((a[0] + a[n - 1]) % 2 == 1);\n\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (flag) {\n                if ((*b)[i] > (*b)[j]) {\n                    temp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = temp;\n                }\n            } else {\n                if ((*b)[i] < (*b)[j]) {\n                    temp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = temp;\n                }\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, max, second;\n\n    if (n < 2)\n        return -1;\n\n    max = a[0];\n    second = 0x7fffffff;\n\n    for (i = 1; i < n; i++) {\n        if (a[i] > max) {\n            second = max;\n            max = a[i];\n        } else if (a[i] != max) {\n            if (a[i] > second)\n                second = a[i];\n        }\n    }\n\n    if (second == 0x7fffffff)\n        return -1;\n\n    return second;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, max, second;\n\n    if (n < 2)\n        return -1;\n\n    max = a[0];\n    second = 0x7fffffff;\n\n    for (i = 1; i < n; i++) {\n        if (a[i] < max) {\n            second = max;\n            max = a[i];\n        } else if (a[i] != max) {\n            if (a[i] < second)\n                second = a[i];\n        }\n    }\n\n    if (second == 0x7fffffff)\n        return -1;\n\n    return second;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n    int i, c, n;\n    int in_word;\n    const char *cs;\n    const unsigned short *ct;\n\n    cs = s;\n    ct = __ctype_b_loc() + 1;\n    n = 0;\n    in_word = 0;\n    while ((c = *cs++) != '\\0') {\n if (ct[c] & 0x20) {\n     if (in_word) {\n  n++;\n  in_word = 0;\n     }\n } else {\n     in_word = 1;\n }\n    }\n    if (in_word)\n n++;\n    return n;\n}",
    "c_func_re_decompile": "int func0(char *s)\n{\n    int i, c, n;\n    int in_word;\n    const char *cs;\n    const unsigned short *ct;\n\n    cs = s;\n    ct = __ctype_b_loc() + 1;\n    n = 0;\n    in_word = 0;\n    while ((c = *cs++) != '\\0') {\n if (ct[c] & 0x20) {\n     if (in_word) {\n  n++;\n  in_word = 0;\n     }\n } else {\n     in_word = 1;\n }\n    }\n    if (in_word)\n n++;\n    return n;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(float a, float b, float c)\n{\n    if (roundf(a) != a)\n        return 0;\n    if (roundf(b) != b)\n        return 0;\n    if (roundf(c) != c)\n        return 0;\n    if (a + b == c)\n        return 1;\n    if (a + c == b)\n        return 1;\n    if (b + c == a)\n        return 1;\n    return 0;\n}",
    "c_func_re_decompile": "int func0(float a, float b, float c)\n{\n    if (roundf(a) != a)\n        return 0;\n    if (roundf(b) != b)\n        return 0;\n    if (roundf(c) != c)\n        return 0;\n    if (a + b == c)\n        return 1;\n    if (a + c == b)\n        return 1;\n    if (b + c == a)\n        return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n  int i, c, n;\n  char *p;\n  unsigned short *ct;\n\n  n = 0;\n  p = s;\n  ct = __ctype_b_loc()[0];\n  i = 1;\n  while ((c = *p++) != '\\0') {\n    if (i && ct[c] & 0x2000) {\n      i = 0;\n      n++;\n    }\n    if (ct[c] & 0x2000)\n      i = 1;\n    if (c == 'I')\n      i = 1;\n    if (c == '?')\n      i = 0;\n    if (c == ' ')\n      i = 0;\n    if (c == '.' || c == ',' || c == ';' || c == ':' || c == '!')\n      i = 1;\n  }\n  return n;\n}",
    "c_func_re_decompile": "int func0(char *s)\n{\n  int i, c, n;\n  char *p;\n  unsigned short *ct;\n\n  n = 0;\n  p = s;\n  ct = __ctype_b_loc()[0];\n  i = 1;\n  while ((c = *p++) != '\\0') {\n    if (i && ct[c] & 0x2000) {\n      i = 0;\n      n++;\n    }\n    if (ct[c] & 0x2000)\n      i = 1;\n    if (c == 'I')\n      i = 1;\n    if (c == '?')\n      i = 0;\n    if (c == ' ')\n      i = 0;\n    if (c == '.' || c == ',' || c == ';' || c == ':' || c == '!')\n      i = 1;\n  }\n  return n;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *m = n;\n    if (n == 0)\n        *b = NULL;\n    else {\n        *b = (int *) malloc(n * sizeof(int));\n        if (*b == NULL)\n            exit(1);\n        for (i = 0; i < n; i++)\n            (*b)[i] = a[i];\n        if ((a[0] + a[n - 1]) % 2 == 0) {\n            for (i = 0; i < n - 1; i++)\n                for (j = i + 1; j < n; j++)\n                    if ((*b)[i] < (*b)[j]) {\n                        t = (*b)[i];\n                        (*b)[i] = (*b)[j];\n                        (*b)[j] = t;\n                    }\n        } else {\n            for (i = 0; i < n - 1; i++)\n                for (j = i + 1; j < n; j++)\n                    if ((*b)[i] > (*b)[j]) {\n                        t = (*b)[i];\n                        (*b)[i] = (*b)[j];\n                        (*b)[j] = t;\n                    }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *m = n;\n    if (n == 0)\n        *b = NULL;\n    else {\n        *b = (int *) malloc(n * sizeof(int));\n        if (*b == NULL)\n            exit(1);\n        for (i = 0; i < n; i++)\n            (*b)[i] = a[i];\n        if ((a[0] + a[n - 1]) % 2 == 0) {\n            for (i = 0; i < n - 1; i++)\n                for (j = i + 1; j < n; j++)\n                    if ((*b)[i] < (*b)[j]) {\n                        t = (*b)[i];\n                        (*b)[i] = (*b)[j];\n                        (*b)[j] = t;\n                    }\n        } else {\n            for (i = 0; i < n - 1; i++)\n                for (j = i + 1; j < n; j++)\n                    if ((*b)[i] > (*b)[j]) {\n                        t = (*b)[i];\n                        (*b)[i] = (*b)[j];\n                        (*b)[j] = t;\n                    }\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j, k, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        k = a[i];\n        if (k > 1) {\n            int flag = 1;\n            for (j = 2; j * j <= k; j++) {\n                if (k % j == 0) {\n                    flag = 0;\n                    break;\n                }\n            }\n            if (flag) {\n                max = max > k ? max : k;\n            }\n        }\n    }\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j, k, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        k = a[i];\n        if (k > 1) {\n            int flag = 1;\n            for (j = 2; j * j <= k; j++) {\n                if (k % j == 0) {\n                    flag = 0;\n                    break;\n                }\n            }\n            if (flag) {\n                max = max > k ? max : k;\n            }\n        }\n    }\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 2)\n            continue;\n        for (j = 2; j * j <= a[i]; j++) {\n            if (a[i] % j == 0)\n                goto next;\n        }\n        if (a[i] > max)\n            max = a[i];\n    next:\n        ;\n    }\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 2)\n            continue;\n        for (j = 2; j * j <= a[i]; j++) {\n            if (a[i] % j == 0)\n                goto next;\n        }\n        if (a[i] > max)\n            max = a[i];\n    next:\n        ;\n    }\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j, k, max, sum;\n\n    max = 0;\n    for (i=0; i<n; i++) {\n        if (a[i] > 1) {\n            for (j=2; j*j<=a[i]; j++) {\n                if (a[i] % j == 0)\n                    break;\n            }\n            if (j*j > a[i]) {\n                sum = 0;\n                k = a[i];\n                while (k > 0) {\n                    sum += k % 10;\n                    k /= 10;\n                }\n                if (sum > max)\n                    max = sum;\n            }\n        }\n    }\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j, k, max, sum;\n\n    max = 0;\n    for (i=0; i<n; i++) {\n        if (a[i] > 1) {\n            for (j=2; j*j<=a[i]; j++) {\n                if (a[i] % j == 0)\n                    break;\n            }\n            if (j*j > a[i]) {\n                sum = 0;\n                k = a[i];\n                while (k > 0) {\n                    sum += k % 10;\n                    k /= 10;\n                }\n                if (sum > max)\n                    max = sum;\n            }\n        }\n    }\n    return max;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
    "c_func_decompile": "\nint func0(int x, int y)\n{\n    return (((x) < 0 ? -(x) : (x)) % 10) * (((y) < 0 ? -(y) : (y)) % 10);\n}",
    "c_func_re_decompile": "int func0(int x, int y)\n{\n    return (((x) < 0 ? -(x) : (x)) % 10) * (((y) < 0 ? -(y) : (y)) % 10);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 2)\n            continue;\n        if (a[i] < 4) {\n            sum += a[i];\n            continue;\n        }\n        if (a[i] % 2 == 0)\n            continue;\n        for (j = 2; j * j <= a[i]; j++) {\n            if (a[i] % j == 0)\n                goto next;\n        }\n        sum += a[i];\n        next:;\n    }\n    while (sum) {\n        max += sum % 10;\n        sum /= 10;\n    }\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 2)\n            continue;\n        if (a[i] < 4) {\n            if (a[i] > max)\n                max = a[i];\n            continue;\n        }\n        if (a[i] % 2 == 0)\n            continue;\n        for (j = 2; j * j <= a[i]; j++) {\n            if (a[i] % j == 0)\n                goto next;\n        }\n        if (a[i] > max)\n            max = a[i];\n        next:;\n    }\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
    "c_func_decompile": "\nint func0(int x, int y)\n{\n    return (((x) < 0) ? -(x) : (x)) % 10 * (((y) < 0) ? -(y) : (y)) % 10;\n}",
    "c_func_re_decompile": "int func0(int x, int y)\n{\n    return (((x) < 0) ? -(x) : (x)) % 10 * (((y) < 0) ? -(y) : (y)) % 10;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *len)\n{\n int i, j;\n int *p = (int *)malloc(n * sizeof(int));\n *len = 0;\n for (i = 2; i < n; i++) {\n  for (j = 0; j < *len; j++) {\n   if (i < p[j] * p[j])\n    break;\n   if (i % p[j] == 0)\n    break;\n  }\n  if (j == *len)\n   p[(*len)++] = i;\n }\n return p;\n}",
    "c_func_re_decompile": "int *func0(int n, int *len)\n{\n int i, j;\n int *p = (int *)malloc(n * sizeof(int));\n *len = 0;\n for (i = 2; i < n; i++) {\n  for (j = 0; j < *len; j++) {\n   if (i < p[j] * p[j])\n    break;\n   if (i % p[j] == 0)\n    break;\n  }\n  if (j == *len)\n   p[(*len)++] = i;\n }\n return p;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *m)\n{\n  int i, j, k, flag;\n  int *a;\n\n  a = (int *)malloc(n * sizeof(int));\n\n  *m = 0;\n  for (i = 2; i < n; i++) {\n    flag = 1;\n    for (j = 0; j < *m; j++) {\n      k = a[j];\n      if (k * k > i)\n        break;\n      if (i % k == 0) {\n        flag = 0;\n        break;\n      }\n    }\n    if (flag) {\n      a[*m] = i;\n      (*m)++;\n    }\n  }\n  return a;\n}",
    "c_func_re_decompile": "int *func0(int n, int *m)\n{\n  int i, j, k, flag;\n  int *a;\n\n  a = (int *)malloc(n * sizeof(int));\n\n  *m = 0;\n  for (i = 2; i < n; i++) {\n    flag = 1;\n    for (j = 0; j < *m; j++) {\n      k = a[j];\n      if (k * k > i)\n        break;\n      if (i % k == 0) {\n        flag = 0;\n        break;\n      }\n    }\n    if (flag) {\n      a[*m] = i;\n      (*m)++;\n    }\n  }\n  return a;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *argv[], int argc)\n{\n  int i, j, k, l, m, n;\n  char *p;\n  const unsigned short *map;\n\n  if (argc == 0)\n    return 0;\n\n  for (i = 0; i < argc; i++) {\n    p = argv[i];\n    map = __ctype_b_loc()[0];\n    j = k = l = 0;\n    while (*p) {\n      if (map[(unsigned char) *p] & 0x0400) {\n        if (map[(unsigned char) *p] & 0x0100)\n          return 0;\n        if (map[(unsigned char) *p] & 0x0200)\n          j = 1;\n        else\n          j = 0;\n        if (k + j == 2)\n          return 0;\n        k = j;\n      } else {\n        if (map[(unsigned char) *p] & 0x0200)\n          return 0;\n        l = 1;\n      }\n      p++;\n    }\n  }\n\n  return 1;\n}",
    "c_func_re_decompile": "int func0(char *argv[], int argc)\n{\n  int i, j, k, l, m, n;\n  char *p;\n  const unsigned short *map;\n\n  if (argc == 0)\n    return 0;\n\n  for (i = 0; i < argc; i++) {\n    p = argv[i];\n    map = __ctype_b_loc()[0];\n    j = k = l = 0;\n    while (*p) {\n      if (map[(unsigned char) *p] & 0x0400) {\n        if (map[(unsigned char) *p] & 0x0100)\n          return 0;\n        if (map[(unsigned char) *p] & 0x0200)\n          j = 1;\n        else\n          j = 0;\n        if (k + j == 2)\n          return 0;\n        k = j;\n      } else {\n        if (map[(unsigned char) *p] & 0x0200)\n          return 0;\n        l = 1;\n      }\n      p++;\n    }\n  }\n\n  return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *m)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            if (i < p[j] * p[j] || i % p[j] == 0)\n                break;\n        }\n        if (j == *m) {\n            p[*m] = i;\n            (*m)++;\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n, int *m)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            if (i < p[j] * p[j] || i % p[j] == 0)\n                break;\n        }\n        if (j == *m) {\n            p[*m] = i;\n            (*m)++;\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *argv[], int argc)\n{\n  int i, j, k, l, m, n;\n  char *p;\n  unsigned short *map;\n\n  if (argc == 0)\n    return 0;\n\n  for (i = 0; i < argc; i++) {\n    p = argv[i];\n    map = __ctype_b_loc()[0];\n    j = k = l = 0;\n    while (*p) {\n      m = map[(unsigned char) *p];\n      if (m & 0x0400) {\n        if (m & 0x0100) {\n          if (m & 0x0200)\n            break;\n          j = 1;\n        } else {\n          if (j)\n            break;\n          k = 1;\n        }\n        if (k + j == 2)\n          break;\n      }\n      p++;\n    }\n    if (k + j != 2)\n      return 0;\n  }\n  return 1;\n}",
    "c_func_re_decompile": "int func0(char *argv[], int argc)\n{\n  int i, j, k, l, m, n;\n  char *p;\n  unsigned short *map;\n\n  if (argc == 0)\n    return 0;\n\n  for (i = 0; i < argc; i++) {\n    p = argv[i];\n    map = __ctype_b_loc()[0];\n    j = k = l = 0;\n    while (*p) {\n      m = map[(unsigned char) *p];\n      if (m & 0x0400) {\n        if (m & 0x0100) {\n          if (m & 0x0200)\n            break;\n          j = 1;\n        } else {\n          if (j)\n            break;\n          k = 1;\n        }\n        if (k + j == 2)\n          break;\n      }\n      p++;\n    }\n    if (k + j != 2)\n      return 0;\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n, int *m)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            if (i < p[j] * p[j] || i % p[j] == 0)\n                break;\n        }\n        if (j == *m) {\n            p[*m] = i;\n            (*m)++;\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n, int *m)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            if (i < p[j] * p[j] || i % p[j] == 0)\n                break;\n        }\n        if (j == *m) {\n            p[*m] = i;\n            (*m)++;\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
    "c_func_decompile": "\nint func0(int x, int y)\n{\n    return (((x) >= 0 ? (x) : -(x)) % 10) * (((y) >= 0 ? (y) : -(y)) % 10);\n}",
    "c_func_re_decompile": "int func0(int x, int y)\n{\n    return (((x) >= 0 ? (x) : -(x)) % 10) * (((y) >= 0 ? (y) : -(y)) % 10);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int a, int b)\n{\n    if (b == 0)\n        return 1;\n    else\n        return func1(a, b);\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n  char *vowels = \"aeiou\";\n  size_t len = strlen(str);\n  int i;\n  for (i = len - 2; i > 0; i--)\n    if (strchr(vowels, str[i]) && !strchr(vowels, str[i + 1]) && !strchr(vowels, str[i - 1]))\n    {\n      result = str[i];\n      return &result;\n    }\n  result = '\\0';\n  return &result;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
    "c_func_decompile": "\nint func0(int x, int y)\n{\n    return (((x) >= 0 ? (x) : -(x)) % 10) * (((y) >= 0 ? (y) : -(y)) % 10);\n}",
    "c_func_re_decompile": "int func0(int x, int y)\n{\n    return (((x) >= 0 ? (x) : -(x)) % 10) * (((y) >= 0 ? (y) : -(y)) % 10);\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    char *vowels = \"aeiou\";\n    int count = 0;\n    int i;\n\n    for (i = 0; str[i] != '\\0' && 2 * i < strlen(str); i++)\n        if (strchr(vowels, str[2 * i]) != NULL)\n            count++;\n\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    char *vowels = \"aeiou\";\n    int count = 0;\n    int i;\n\n    for (i = 0; str[i] != '\\0' && 2 * i < strlen(str); i++)\n        if (strchr(vowels, str[2 * i]) != NULL)\n            count++;\n\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int n, int *m)\n{\n    int i, j, k, l, len, count;\n    char **p, *p1, *p2;\n    const struct _ctype_t *ct;\n\n    len = strlen(str);\n    p1 = malloc(len + 1);\n    ct = __ctype_b_loc();\n    j = k = count = 0;\n    p = NULL;\n    for (i = 0; i < len; i++) {\n        if (!(ct->_mbbtype[str[i]] & 0x0020) && str[i] != '\\0') {\n            p1[i - j] = str[i];\n            if (strchr(\" \\t\\n\\r\\v\\f\", str[i]) == NULL) {\n                k++;\n            }\n        } else {\n            p1[i - j] = '\\0';\n            count++;\n            p = realloc(p, count * sizeof(char *));\n            p[count - 1] = malloc(strlen(p1) + 1);\n            strcpy(p[count - 1], p1);\n            j = i + 1;\n            k = 0;\n        }\n        if (k == n) {\n            p1[i - j] = '\\0';\n            count++;\n            p = realloc(p, count * sizeof(char *));\n            p[count - 1] = malloc(strlen(p1) + 1);\n            strcpy(p[count - 1], p1);\n            j = i + 1;\n            k = 0;\n        }\n    }\n    free(p1);\n    *m = count;\n    return p;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n\n    for (i = 0; i < len / 2; i++) {\n        if (strchr(\"aeiou\", str[i]) != NULL)\n            count++;\n    }\n\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (i == len / 2)\n            break;\n        if (strchr(\"aeiou\", str[i]) != NULL)\n            count++;\n    }\n\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (i >= len / 2)\n            break;\n        if (strchr(\"aeiou\", str[i]) != NULL)\n            count++;\n    }\n\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (i >= (len + 1) / 2)\n            break;\n        if (strchr(\"aeiou\", str[i]) != NULL)\n            count++;\n    }\n\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n    double d = atof(s);\n    if (d < 0)\n        return (int)ceil(d - 0.5);\n    else\n        return (int)floor(d + 0.5);\n}",
    "c_func_re_decompile": "int func0(char *s)\n{\n    double d = atof(s);\n    if (d < 0)\n        return (int)ceil(d - 0.5);\n    else\n        return (int)floor(d + 0.5);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (i >= len / 2)\n            break;\n        if (strchr(\"aeiou\", str[i]) != NULL)\n            count++;\n    }\n\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i, count = 0;\n    size_t len = strlen(str);\n\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (i >= (len + 1) / 2)\n            break;\n        if (strchr(\"aeiou\", str[i]) != NULL)\n            count++;\n    }\n\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n  double d = strtod(s, NULL);\n  if (d < 0)\n    return (int) (d - floor(d));\n  else\n    return (int) (d + ceil(d));\n}",
    "c_func_re_decompile": "int func0(char *s)\n{\n  double d = strtod(s, NULL);\n  if (d < 0)\n    return (int) (d - floor(d));\n  else\n    return (int) (d + ceil(d));\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n  double d = strtod(s, NULL);\n  if (d < 0)\n    return (int) (d - floor(d));\n  else\n    return (int) (d + ceil(d));\n}",
    "c_func_re_decompile": "int func0(char *s)\n{\n  double d = strtod(s, NULL);\n  if (d < 0)\n    return (int) (d - floor(d));\n  else\n    return (int) (d + ceil(d));\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n  double d;\n  d = strtod(s, NULL);\n  if (d < 0)\n    return (int) (d - floor(d));\n  else\n    return (int) (d - ceil(d));\n}",
    "c_func_re_decompile": "int func0(char *s)\n{\n  double d;\n  d = strtod(s, NULL);\n  if (d < 0)\n    return (int) (d - floor(d + 0.5));\n  else\n    return (int) (d - ceil(d - 0.5));\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n)\n{\n  int i;\n  int *p = (int *)malloc(n * sizeof(int));\n  p[0] = n;\n  for (i = 1; i < n; i++)\n    p[i] = p[i - 1] + 2;\n  return p;\n}",
    "c_func_re_decompile": "int *func0(int n)\n{\n  int i;\n  int *p = (int *)malloc(n * sizeof(int));\n  p[0] = n;\n  for (i = 1; i < n; i++)\n    p[i] = p[i - 1] + 2;\n  return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n)\n{\n    int *p = malloc(n * sizeof(int));\n    p[0] = n;\n    for (int i = 1; i < n; i++)\n        p[i] = p[i - 1] + 2;\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n)\n{\n    int *p = malloc(n * sizeof(int));\n    p[0] = n;\n    for (int i = 1; i < n; i++)\n        p[i] = p[i - 1] + 2;\n    return p;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n)\n{\n    int i;\n    int *p = (int *)malloc(n * sizeof(int));\n    p[0] = n;\n    for (i = 1; i < n; i++)\n        p[i] = i * 2;\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n)\n{\n    int i;\n    int *p = (int *)malloc(n * sizeof(int));\n    p[0] = n;\n    for (i = 1; i < n; i++)\n        p[i] = i * 2 + 2;\n    return p;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n)\n{\n int i, j = 0, k = 0, m = 0, len = strlen(str);\n char **ret = NULL;\n char tmp[100] = {0};\n\n if (strchr(str, ' ') || strchr(str, ',')) {\n  ret = (char **)malloc((len + 1) * sizeof(char *));\n  for (i = 0; i <= len; i++) {\n   if (str[i] == ' ' || str[i] == ',' || str[i] == '\\0') {\n    if (j > 0) {\n     tmp[j] = '\\0';\n     ret[m] = strdup(tmp);\n     m++;\n    }\n    j = 0;\n   } else {\n    tmp[j++] = str[i];\n   }\n  }\n } else {\n  for (i = 0; i < len; i++) {\n   if (((__ctype_b_loc()[(int) (str[i])]) & (0200000)) && (str[i] - 'a') % 2 == 1) {\n    k++;\n   }\n  }\n  ret = (char **)malloc(sizeof(char *));\n  ret[0] = (char *)malloc(sizeof(char) * 12);\n  sprintf(ret[0], \"%d\", k);\n  m = 1;\n }\n *n = m;\n return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n)\n{\n    int i;\n    int *p = (int *)malloc(n * sizeof(int));\n    p[0] = n;\n    for (i = 1; i < n; i++)\n        p[i] = p[i - 1] + 2;\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n)\n{\n    int i;\n    int *p = (int *)malloc(n * sizeof(int));\n    p[0] = n;\n    for (i = 1; i < n; i++)\n        p[i] = p[i - 1] + 2;\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(int a, int b)\n{\n    if (b == 0)\n        return 1;\n    else\n        return func1(a, b);\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int a, int b)\n{\n  if (b < a)\n    return -1;\n  if (b == a && b % 2 == 1)\n    return -1;\n  if (b % 2 == 1)\n    return b - 1;\n  return b;\n}",
    "c_func_re_decompile": "int func0(int a, int b)\n{\n  if (b < a)\n    return -1;\n  if (b == a && b % 2 == 1)\n    return -1;\n  if (b % 2 == 1)\n    return b - 1;\n  return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int x, int y)\n{\n  if (y < x)\n    return -1;\n  else if (y == x && y % 2 == 1)\n    return -1;\n  else if (y % 2 == 1)\n    return y - 1;\n  else\n    return y;\n}",
    "c_func_re_decompile": "int func0(int x, int y)\n{\n  if (y < x)\n    return -1;\n  else if (y == x && y % 2 == 1)\n    return -1;\n  else if (y % 2 == 1)\n    return y - 1;\n  else\n    return y;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int x, int y)\n{\n  if (y < x)\n    return -1;\n  else if (y == x && y % 2 == 1)\n    return -1;\n  else if (y % 2 == 1)\n    return y - 1;\n  else\n    return y;\n}",
    "c_func_re_decompile": "int func0(int x, int y)\n{\n  if (y < x)\n    return -1;\n  else if (y == x && y % 2 == 1)\n    return -1;\n  else if (y % 2 == 1)\n    return y - 1;\n  else\n    return y;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n)\n{\n    int i, j, k, len, count;\n    char *p, *q, *r, *s, *t;\n    char **ret;\n    char buf[100] = {0};\n\n    len = strlen(str);\n    p = str;\n    q = strchr(p, ' ');\n    if (q == NULL)\n        q = strchr(p, ',');\n    if (q == NULL)\n        q = p + len;\n    ret = (char **)malloc((len + 1) * sizeof(char *));\n    count = 0;\n    i = 0;\n    j = 0;\n    while (i < len) {\n        if (p[i] != ' ' && p[i] != ',') {\n            buf[j++] = p[i];\n        } else {\n            buf[j] = '\\0';\n            ret[count] = strdup(buf);\n            count++;\n            j = 0;\n        }\n        i++;\n    }\n    if (q != p + len) {\n        r = __ctype_b_loc()->_S_ctype;\n        for (i = 0; i < len; i++) {\n            if (r[p[i] & 0xff] & (0x02)) {\n                if ((p[i] - 'a') % 2 == 1)\n                    count++;\n            }\n        }\n    }\n    ret[0] = (char *)malloc(12);\n    __sprintf_chk(ret[0], 1, 12, \"%d\", count);\n    *n = 1;\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int x, int y)\n{\n  if (y < x)\n    return -1;\n  else if (y == x)\n    {\n      if (y % 2 == 1)\n return -1;\n      else\n return y;\n    }\n  else\n    {\n      if (y % 2 == 1)\n return y - 1;\n      else\n return y;\n    }\n}",
    "c_func_re_decompile": "int func0(int x, int y)\n{\n  if (y < x)\n    return -1;\n  else if (y == x)\n    {\n      if (y % 2 == 1)\n return -1;\n      else\n return y;\n    }\n  else\n    {\n      if (y % 2 == 1)\n return y - 1;\n      else\n return y;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n  int i;\n  char *p;\n  char *q;\n  char *r;\n  char *s;\n  char *t;\n  char *u;\n  char *v;\n  char *w;\n  char *x;\n  char *y;\n  char *z;\n  char *a;\n  char *b;\n  char *c;\n  char *d;\n  char *e;\n  char *f;\n  char *g;\n  char *h;\n  char *i;\n  char *j;\n  char *k;\n  char *l;\n  char *m;\n  char *n;\n  char *o;\n  char *p;\n  char *q;\n  char *r;\n  char *s;\n  char *t;\n  char *u;\n  char *v;\n  char *w;\n  char *x;\n  char *y;\n  char *z;\n  char *a;\n  char *b;\n  char *c;\n  char *d;\n  char *e;\n  char *f;\n  char *g;\n  char *h;\n  char *i;\n  char *j;\n  char *k;\n  char *l;\n  char *m;\n  char *n;\n  char *o;\n  char *p;\n  char *q;\n  char *r;\n  char *s;\n  char *t;\n  char *u;\n  char *v;\n  char *w;\n  char *x;\n  char *y;\n  char *z;\n  char *a;\n  char *b;\n  char *c;\n  char *d;\n  char *e;\n  char *f;\n  char *g;\n  char *h;\n  char *i;\n  char *j;\n  char *k;\n  char *l;\n  char *m;\n  char *n;\n  char *o;\n  char *p;\n  char *q;\n  char *r;\n  char *s;\n  char *t;\n  char *u;\n  char *v;\n  char *w;\n  char *x;\n  char *y;\n  char *z;\n  char *a;\n  char *b;\n  char *c;\n  char *d;\n  char *e;\n  char *f;\n  char *g;\n  char *h;\n  char *i;\n  char *j;\n  char *k;\n  char *l;\n  char *m;\n  char *n;\n  char *o;\n  char *p;\n  char *q;\n  char *r;\n  char *s;\n  char *t;\n  char *u;\n  char *v;\n  char *w;\n  char *x;\n  char *y;\n  char *z;\n  char *a;\n  char *b;\n  char *c;\n  char *d;\n  char *e;\n  char *f;\n  char *g;\n  char *h;\n  char *i;\n  char *j;\n  char *k;\n  char *l;\n  char *m;\n  char *n;\n  char *o;\n  char *p;\n  char *q;\n  char *r;\n  char *s;\n  char *t;\n  char *u;\n  char *v;\n  char *w;\n  char *x;\n  char *y;\n  char *z;\n  char *a;\n  char *b;\n  char *c;\n  char *d;\n  char *e;\n  char *f;\n  char *g;\n  char *h;\n  char *i;\n  char *j;\n  char *k;\n  char *l;\n  char *m;\n  char *n;\n  char *o;\n  char *p;\n  char *q;\n  char *r;\n  char *s;\n  char *t;\n  char *u;\n  char *v;\n  char *w;\n  char *x;\n  char *y;\n  char *z;\n  char *a",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
    "c_func_decompile": "\nchar* func0(char* s1, char* s2)\n{\n    int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n    i = strlen(s1);\n    j = strlen(s2);\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        }\n        if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    for (m = 0; m < j; m++) {\n        if (s2[m] == '(') {\n            n++;\n        }\n        if (s2[m] == ')') {\n            n--;\n        }\n        if (n < 0) {\n            return \"NO\";\n        }\n    }\n    if (l == 0 && n == 0) {\n        return \"YES\";\n    }\n    if (l == 0 && n != 0) {\n        return \"NO\";\n    }\n    if (l != 0 && n == 0) {\n        return \"NO\";\n    }\n    for (o = 0; o < i; o++) {\n        if (s1[o] == '(') {\n            p++;\n        }\n        if (s1[o] == ')') {\n            p--;\n        }\n        if (p < 0) {\n            return \"NO\";\n        }\n    }\n    for (q = 0; q < j; q++) {\n        if (s2[q] == '(') {\n            r++;\n        }\n        if (s2[q] == ')') {\n            r--;\n        }\n        if (r < 0) {\n            return \"NO\";\n        }\n    }\n    if (p == 0 && r == 0) {\n        return \"YES\";\n    }\n    if (p == 0 && r != 0) {\n        return \"NO\";\n    }\n    if (p != 0 && r == 0) {\n        return \"NO\";\n    }\n    for (t = 0; t < i; t++) {\n        if (s1[t] == '(') {\n            u++;\n        }\n        if (s1[t] == ')') {\n            u--;\n        }\n        if (u < 0) {\n            return \"NO\";\n        }\n    }\n    for (v = 0; v < j; v++) {\n        if (s2[v] == '(') {\n            w++;\n        }\n        if (s2[v] == ')') {\n            w--;\n        }\n        if (w < 0) {\n            return \"NO\";\n        }\n    }\n    if (u == 0 && w == 0) {\n        return \"YES\";\n    }\n    if (u == 0 && w != 0) {\n        return \"NO\";\n    }\n    if (u != 0 && w == 0) {\n        return \"NO\";\n    }\n    for (x = 0; x < i; x++) {\n        if (s1[x] == '(') {\n            y++;\n        }\n        if (s1[x] == ')') {\n            y--;\n        }\n        if (y < 0) {\n            return \"NO\";\n        }\n    }\n    for (z = 0; z < j; z++) {\n        if (s2[z] == '(') {\n            w++;\n        }\n        if (s2[z] == ')') {\n            w--;\n        }\n        if (w < 0) {\n            return \"NO\";\n        }\n    }\n    if (",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
    "c_func_decompile": "\nchar *func0(int a, int b)\n{\n    int i, n;\n    char *s;\n\n    if (a > b)\n        return \"a > b\";\n\n    n = (a + b) / 2;\n    s = malloc(33);\n    s[0] = '\\0';\n    i = 32;\n    do {\n        s[i--] = '\\0';\n        s[i--] = '0' + n % 2;\n        n /= 2;\n    } while (n > 0);\n\n    return s + i + 1;\n}",
    "c_func_re_decompile": "char *func0(int a, int b)\n{\n    int i, n;\n    char *s;\n\n    if (a > b)\n        return \"a > b\";\n\n    n = (a + b) / 2;\n    s = malloc(33);\n    s[0] = '\\0';\n    i = 32;\n    do {\n        s[i--] = '\\0';\n        s[i--] = '0' + n % 2;\n        n /= 2;\n    } while (n > 0);\n\n    return s + i + 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
    "c_func_decompile": "\nchar* func0(char* str1, char* str2)\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    i = strlen(str1);\n    j = strlen(str2);\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    s = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    for (k = 0; k < i; k++)\n    {\n        if (str1[k] == '(')\n        {\n            l++;\n        }\n        else if (str1[k] == ')')\n        {\n            l--;\n        }\n        if (l < 0)\n        {\n            return \"NO\";\n        }\n    }\n    for (m = 0; m < j; m++)\n    {\n        if (str2[m] == '(')\n        {\n            n++;\n        }\n        else if (str2[m] == ')')\n        {\n            n--;\n        }\n        if (n < 0)\n        {\n            return \"NO\";\n        }\n    }\n    if (l == 0 && n == 0)\n    {\n        return \"YES\";\n    }\n    else if (l == 0 && n != 0)\n    {\n        return \"NO\";\n    }\n    else if (l != 0 && n == 0)\n    {\n        return \"NO\";\n    }\n    else\n    {\n        for (o = 0; o < i; o++)\n        {\n            if (str1[o] == '(')\n            {\n                p++;\n            }\n            else if (str1[o] == ')')\n            {\n                p--;\n            }\n            if (p < 0)\n            {\n                return \"NO\";\n            }\n        }\n        for (q = 0; q < j; q++)\n        {\n            if (str2[q] == '(')\n            {\n                r++;\n            }\n            else if (str2[q] == ')')\n            {\n                r--;\n            }\n            if (r < 0)\n            {\n                return \"NO\";\n            }\n        }\n        if (p == 0 && r == 0)\n        {\n            return \"YES\";\n        }\n        else if (p == 0 && r != 0)\n        {\n            return \"NO\";\n        }\n        else if (p != 0 && r == 0)\n        {\n            return \"NO\";\n        }\n        else\n        {\n            for (s = 0; s < i; s++)\n            {\n                if (str1[s] == '(')\n                {\n                    t++;\n                }\n                else if (str1[s] == ')')\n                {\n                    t--;\n                }\n                if (t < 0)\n                {\n                    return \"NO\";\n                }\n            }\n            for (u = 0; u < j; u++)\n            {\n                if (str2[u] == '(')\n                {\n                    v++;\n                }\n                else if (str2[u] == ')')\n                {\n                    v--;\n                }\n                if (v < 0)\n                {\n                    return \"NO\";\n                }\n            }\n            if (t == 0 && v == 0)\n            {\n                return \"YES\";\n            }\n            else if (t == 0 && v != 0)\n            {\n                return \"NO\";\n            }\n            else if (t != 0 && v == 0)\n            {\n                return \"NO\";\n            }\n            else\n            {\n                for (w = 0; w < i; w++)\n                {\n                    if (str1[w] == '(')\n                    {\n                        x++;\n                    }\n                    else if (str1[w] == ')')\n                    {\n                        x",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
    "c_func_decompile": "\nchar *func0(int a, int b)\n{\n    if (a > b)\n        return \"a > b\";\n    int c = (a + b) / 2;\n    char *s = malloc(33);\n    s[32] = '\\0';\n    s[31] = '\\0';\n    int i = 31;\n    while (c > 0) {\n        s[i] = '0' + c % 2;\n        c /= 2;\n        i--;\n    }\n    return s;\n}",
    "c_func_re_decompile": "char *func0(int a, int b)\n{\n    if (a > b)\n        return \"a > b\";\n    int c = (a + b) / 2;\n    char *s = malloc(33);\n    s[0] = '\\0';\n    s[32] = '\\0';\n    int i = 31;\n    while (c > 0) {\n        s[i] = '0' + c % 2;\n        c /= 2;\n        i--;\n    }\n    return s;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n)\n{\n    int i, j, k, len, count;\n    char **ret, *p, *q, *r, *s;\n\n    len = strlen(str);\n    p = str;\n    q = strchr(str, ' ');\n    if (q == NULL)\n        q = strchr(str, ',');\n    if (q == NULL) {\n        count = 0;\n        for (i = 0; i < len; i++)\n            if (((__ctype_b_loc ()->*((int *) (4 +1)))[(int) (p[i])] & (02)) && ((p[i] - 'a') % 2 == 1))\n                count++;\n        ret = (char **) malloc(sizeof(char *));\n        ret[0] = (char *) malloc(12);\n        __sprintf_chk(ret[0], 1, 12, \"%d\", count);\n        *n = 1;\n        return ret;\n    }\n    ret = (char **) malloc((len + 1) * sizeof(char *));\n    j = 0;\n    k = 0;\n    r = (char *) malloc(32);\n    for (i = 0; i <= len; i++) {\n        if (p[i] == ' ' || p[i] == ',' || p[i] == '\\0') {\n            if (k != 0) {\n                r[k] = '\\0';\n                s = strdup(r);\n                ret[j] = s;\n                j++;\n                k = 0;\n            }\n        } else {\n            r[k] = p[i];\n            k++;\n        }\n    }\n    *n = j;\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n)\n{\n    int i, j, k, len, count;\n    char **ret, *p, *q, *r, *s;\n\n    len = strlen(str);\n    p = str;\n    q = strchr(str, ' ');\n    if (q == NULL)\n        q = strchr(str, ',');\n    if (q == NULL) {\n        count = 0;\n        for (i = 0; i < len; i++) {\n            if (((__ctype_b_loc ()->*((int *) (4 +1))[(int) (p[i])]) & 2) && ((p[i] - 'a') % 2 == 1))\n                count++;\n        }\n        ret = (char **) malloc(sizeof(char *));\n        ret[0] = (char *) malloc(12);\n        __sprintf_chk(ret[0], 1, 12, \"%d\", count);\n        *n = 1;\n        return ret;\n    }\n    ret = (char **) malloc((len + 1) * sizeof(char *));\n    j = 0;\n    k = 0;\n    r = (char *) malloc(32);\n    for (i = 0; i <= len; i++) {\n        if (p[i] == ' ' || p[i] == ',' || p[i] == '\\0') {\n            if (k != 0) {\n                r[k] = '\\0';\n                ret[j] = strdup(r);\n                j++;\n                k = 0;\n            }\n        } else {\n            r[k] = p[i];\n            k++;\n        }\n    }\n    *n = j;\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
    "c_func_decompile": "\nchar *func0(int a, int b)\n{\n    if (a > b)\n        return \"a > b\";\n    else {\n        int c = a + b;\n        char *s = malloc(33);\n        s[32] = s[31] = '\\0';\n        int i = 31;\n        while (c > 1) {\n            s[i--] = '0' + c % 2;\n            c /= 2;\n        }\n        return s;\n    }\n}",
    "c_func_re_decompile": "char *func0(int a, int b)\n{\n    if (a > b)\n        return \"a > b\";\n    else {\n        int c = a + b;\n        char *s = malloc(33);\n        s[32] = s[31] = '\\0';\n        int i = 31;\n        while (c > 1) {\n            s[i--] = '0' + c % 2;\n            c /= 2;\n        }\n        return s;\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
    "c_func_decompile": "\nchar *func0(int a, int b)\n{\n    if (a > b)\n        return \"a > b\";\n    else {\n        int c = a + b;\n        char *s = malloc(33);\n        s[32] = s[31] = '\\0';\n        int i = 31;\n        while (c > 1) {\n            s[i--] = '0' + c % 2;\n            c /= 2;\n        }\n        return s;\n    }\n}",
    "c_func_re_decompile": "char *func0(int a, int b)\n{\n    if (a > b)\n        return \"a > b\";\n    else {\n        int c = a + b;\n        char *s = malloc(33);\n        s[32] = s[31] = '\\0';\n        int i = 31;\n        while (c > 1) {\n            s[i--] = '0' + c % 2;\n            c /= 2;\n        }\n        return s;\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
    "c_func_decompile": "\nchar **\nfunc0(char *str, int *n)\n{\n int i, j, k;\n int nalloc = 10;\n char **v = malloc(nalloc * sizeof(char *));\n char *w = malloc(strlen(str) + 1);\n\n for (i = 0, j = 0, k = 0; str[k]; k++) {\n  if (str[k] == ' ' || str[k] == ',') {\n   if (j > 0) {\n    w[j] = '\\0';\n    v[i++] = strdup(w);\n    j = 0;\n    if (i >= nalloc) {\n     nalloc *= 2;\n     v = realloc(v, nalloc * sizeof(char *));\n    }\n   }\n   continue;\n  }\n  w[j++] = str[k];\n }\n if (j > 0) {\n  w[j] = '\\0';\n  v[i++] = strdup(w);\n }\n free(w);\n *n = i;\n return v;\n}",
    "c_func_re_decompile": "char **\nfunc0(char *str, int *n)\n{\n int i, j, k;\n int nalloc = 10;\n char **v = malloc(nalloc * sizeof(char *));\n char *w = malloc(strlen(str) + 1);\n\n for (i = 0, j = 0, k = 0; str[k]; k++) {\n  if (str[k] == ' ' || str[k] == ',') {\n   if (j > 0) {\n    w[j] = '\\0';\n    v[i++] = strdup(w);\n    j = 0;\n    if (i >= nalloc) {\n     nalloc *= 2;\n     v = realloc(v, nalloc * sizeof(char *));\n    }\n   }\n   continue;\n  }\n  w[j++] = str[k];\n }\n if (j > 0) {\n  w[j] = '\\0';\n  v[i++] = strdup(w);\n }\n free(w);\n *n = i;\n return v;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *len)\n{\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0;\n    while (str[i]) {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (j) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n            }\n        } else {\n            tmp[j++] = str[i];\n        }\n        if (k >= k * 2) {\n            k *= 2;\n            ret = realloc(ret, k * sizeof(char *));\n        }\n        i++;\n    }\n    if (j) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *len = k;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *len)\n{\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0, l = 10;\n    while (str[i]) {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (j) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n            }\n        } else {\n            tmp[j++] = str[i];\n        }\n        if (k >= l) {\n            l *= 2;\n            ret = realloc(ret, l * sizeof(char *));\n        }\n        i++;\n    }\n    if (j) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *len = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n)\n{\n  int i, sum, prod;\n  int *p;\n\n  p = (int *) malloc(n * sizeof(int));\n\n  sum = 0;\n  prod = 1;\n  for (i = 1; i <= n; i++) {\n    sum = sum + i;\n    prod = prod * i;\n    if (i % 2 == 0)\n      p[i-1] = prod;\n    else\n      p[i-1] = sum;\n  }\n\n  return p;\n}",
    "c_func_re_decompile": "int *func0(int n)\n{\n  int i, sum, prod;\n  int *p;\n\n  p = (int *) malloc(n * sizeof(int));\n\n  sum = 0;\n  prod = 1;\n  for (i = 1; i <= n; i++) {\n    sum = sum + i;\n    prod = prod * i;\n    if (i % 2 == 0)\n      p[i-1] = prod;\n    else\n      p[i-1] = sum;\n  }\n\n  return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n)\n{\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0;\n    int size = 10;\n\n    while (str[i] != '\\0') {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (j > 0) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n            }\n            if (k >= size) {\n                size *= 2;\n                ret = realloc(ret, size * sizeof(char *));\n            }\n        } else {\n            tmp[j++] = str[i];\n        }\n        i++;\n    }\n    if (j > 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = k;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *n)\n{\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0;\n    int size = 10;\n\n    while (str[i] != '\\0') {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (j > 0) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n            }\n            if (k >= size) {\n                size *= 2;\n                ret = realloc(ret, size * sizeof(char *));\n            }\n        } else {\n            tmp[j++] = str[i];\n        }\n        i++;\n    }\n    if (j > 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    for (i = 0, j = 1, k = 0; i < n; i++) {\n        if (j % 2)\n            k += j;\n        else\n            k *= j;\n        p[i] = k;\n        j++;\n    }\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    for (i = 0, j = 1, k = 0; i < n; i++) {\n        if (j % 2)\n            k += j;\n        else\n            k *= j;\n        p[i] = k;\n        j++;\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    for (i = 0, j = 1, k = 0; i < n; i++) {\n        if (j % 2)\n            k += j;\n        else\n            j *= j;\n        p[i] = k;\n    }\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    for (i = 0, j = 1, k = 0; i < n; i++) {\n        if (j % 2)\n            k += j;\n        else\n            j *= j;\n        p[i] = k;\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    bool flag;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        t = a[i];\n        flag = false;\n        if (t == 0)\n            flag = true;\n        while (t > 0 && !flag) {\n            if (t % 2 == 0)\n                flag = true;\n            t /= 10;\n        }\n        if (!flag) {\n            (*b)[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++)\n        for (j = 0; j < *m - i - 1; j++)\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    bool flag;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        t = a[i];\n        flag = false;\n        if (t == 0)\n            flag = true;\n        while (t > 0 && !flag) {\n            if (t % 2 == 0)\n                flag = true;\n            t /= 10;\n        }\n        if (!flag) {\n            (*b)[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++)\n        for (j = 0; j < *m - i - 1; j++)\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int *n)\n{\n    char **ret = malloc(10 * sizeof(char *));\n    int ret_size = 10;\n    int ret_n = 0;\n    char *buf = malloc(strlen(str) + 1);\n    int buf_n = 0;\n    int i;\n\n    for (i = 0; str[i]; i++) {\n        if (str[i] == ' ') {\n            continue;\n        }\n        if (str[i] == ',') {\n            if (buf_n == 0) {\n                continue;\n            }\n            buf[buf_n] = '\\0';\n            ret[ret_n++] = strdup(buf);\n            buf_n = 0;\n            if (ret_n >= ret_size) {\n                ret_size *= 2;\n                ret = realloc(ret, ret_size * sizeof(char *));\n            }\n            continue;\n        }\n        buf[buf_n++] = str[i];\n    }\n    if (buf_n != 0) {\n        buf[buf_n] = '\\0';\n        ret[ret_n++] = strdup(buf);\n    }\n    free(buf);\n    *n = ret_n;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *n)\n{\n    char **ret = malloc(10 * sizeof(char *));\n    int ret_size = 10;\n    int ret_n = 0;\n    char *buf = malloc(strlen(str) + 1);\n    int buf_n = 0;\n    int i;\n\n    for (i = 0; str[i]; i++) {\n        if (str[i] == ' ') {\n            continue;\n        }\n        if (str[i] == ',') {\n            if (buf_n == 0) {\n                continue;\n            }\n            buf[buf_n] = '\\0';\n            ret[ret_n++] = strdup(buf);\n            buf_n = 0;\n            if (ret_n >= ret_size) {\n                ret_size *= 2;\n                ret = realloc(ret, ret_size * sizeof(char *));\n            }\n            continue;\n        }\n        buf[buf_n++] = str[i];\n    }\n    if (buf_n != 0) {\n        buf[buf_n] = '\\0';\n        ret[ret_n++] = strdup(buf);\n    }\n    free(buf);\n    *n = ret_n;\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] == 0)\n            continue;\n        for (j = a[i], k = 0; j > 0; j /= 10) {\n            if (j % 10 == 0) {\n                k = 1;\n                break;\n            }\n        }\n        if (k == 0) {\n            (*b)[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = i + 1; j < *m; j++) {\n            if ((*b)[i] > (*b)[j]) {\n                t = (*b)[i];\n                (*b)[i] = (*b)[j];\n                (*b)[j] = t;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] == 0)\n            continue;\n        for (j = a[i], k = 0; j > 0; j /= 10) {\n            if (j % 10 == 0) {\n                k = 1;\n                break;\n            }\n        }\n        if (k == 0) {\n            (*b)[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = i + 1; j < *m; j++) {\n            if ((*b)[i] > (*b)[j]) {\n                t = (*b)[i];\n                (*b)[i] = (*b)[j];\n                (*b)[j] = t;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] != 0) {\n            for (j = a[i]; j > 0; j /= 10) {\n                if (j % 10 % 2 == 0) {\n                    break;\n                }\n            }\n            if (j == 0) {\n                (*b)[(*m)++] = a[i];\n            }\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = *m - 1; j > i; j--) {\n            if ((*b)[j] < (*b)[j - 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j - 1];\n                (*b)[j - 1] = t;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] != 0) {\n            for (j = a[i]; j > 0; j /= 10) {\n                if (j % 10 % 2 == 0) {\n                    break;\n                }\n            }\n            if (j == 0) {\n                (*b)[(*m)++] = a[i];\n            }\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = *m - 1; j > i; j--) {\n            if ((*b)[j] < (*b)[j - 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j - 1];\n                (*b)[j - 1] = t;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": " void func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            t = a[i];\n            while (t > 0) {\n                if (t % 10 % 2 == 0) {\n                    break;\n                }\n                t /= 10;\n            }\n            if (t == 0) {\n                (*b)[*m] = a[i];\n                (*m)++;\n            }\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int **b, int *m)\n{\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            t = a[i];\n            while (t > 0) {\n                if (t % 10 % 2 == 0) {\n                    break;\n                }\n                t /= 10;\n            }\n            if (t == 0) {\n                (*b)[*m] = a[i];\n                (*m)++;\n            }\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    for (i = 0, j = 1, k = 0; i < n; i++) {\n        j *= i + 1;\n        if (i % 2)\n            p[i] = k;\n        else\n            p[i] = j;\n        k += i + 1;\n    }\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n)\n{\n    int i, j, k;\n    int *p;\n\n    p = (int *)malloc(n * sizeof(int));\n    for (i = 0, j = 1, k = 0; i < n; i++) {\n        j *= i + 1;\n        if (i % 2)\n            p[i] = k;\n        else\n            p[i] = j;\n        k += i + 1;\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, char ***p, int *m)\n{\n    int i, j, t;\n    char *s[10] = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n\n    *m = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*m)++;\n\n    *p = (char **) malloc(sizeof(char *) * (*m));\n    for (i = n - 1, j = 0; i >= 0 && j < *m; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*p)[j++] = s[a[i]];\n}",
    "c_func_re_decompile": "void func0(int *a, int n, char ***p, int *m)\n{\n    int i, j, t;\n    char *s[10] = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n\n    *m = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*m)++;\n\n    *p = (char **) malloc(sizeof(char *) * (*m));\n    for (i = n - 1, j = 0; i >= 0 && j < *m; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*p)[j++] = s[a[i]];\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, char ***b, int *c)\n{\n    int i, j;\n    char *s[10] = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                int t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n\n    *c = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*c)++;\n\n    *b = (char **) malloc(sizeof(char *) * (*c));\n    for (i = n - 1, j = 0; i >= 0 && j < *c; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*b)[j++] = s[a[i]];\n}",
    "c_func_re_decompile": "void func0(int *a, int n, char ***b, int *c)\n{\n    int i, j;\n    char *s[10] = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                int t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n\n    *c = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*c)++;\n\n    *b = (char **) malloc(sizeof(char *) * (*c));\n    for (i = n - 1, j = 0; i >= 0 && j < *c; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*b)[j++] = s[a[i]];\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
    "c_func_decompile": "\nint* func0(int n)\n{\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    int i;\n    for (i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2) {\n                result[1]++;\n            } else {\n                result[0]++;\n            }\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": "int* func0(int n)\n{\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    int i;\n    for (i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2) {\n                result[1]++;\n            } else {\n                result[0]++;\n            }\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n  int i, cnt = 0;\n  if (n == 0)\n    return 1;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i-1])\n      cnt++;\n  if (a[n-1] > a[0])\n    cnt++;\n  if (cnt <= 1)\n    return 1;\n  else\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n  int i, cnt = 0;\n  if (n == 0)\n    return 1;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i-1])\n      cnt++;\n  if (a[n-1] > a[0])\n    cnt++;\n  if (cnt <= 1)\n    return 1;\n  else\n    return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
    "c_func_decompile": "\nbool func0(int *arr, int len)\n{\n    int i, count = 0;\n\n    if (len == 0)\n        return true;\n\n    for (i = 1; i < len; i++)\n        if (arr[i] < arr[i - 1])\n            count++;\n\n    if (arr[len - 1] > arr[0])\n        count++;\n\n    return count <= 1;\n}",
    "c_func_re_decompile": "bool func0(int *arr, int len)\n{\n    int i, count = 0;\n\n    if (len == 0)\n        return true;\n\n    for (i = 1; i < len; i++)\n        if (arr[i] < arr[i - 1])\n            count++;\n\n    if (arr[len - 1] > arr[0])\n        count++;\n\n    return count <= 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, char ***p, int *m)\n{\n    int i, j, k;\n    char *s[10] = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                k = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = k;\n            }\n\n    *m = 0;\n    for (i = n - 1; i >= 0; i--) {\n        if (a[i] > 0 && a[i] < 10)\n            (*m)++;\n    }\n\n    *p = (char **) malloc(sizeof(char *) * (*m));\n    k = 0;\n    for (i = n - 1; i >= 0 && k < *m; i--) {\n        if (a[i] > 0 && a[i] < 10)\n            (*p)[k++] = s[a[i]];\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, char ***p, int *m)\n{\n    int i, j, k;\n    char *s[10] = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                k = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = k;\n            }\n\n    *m = 0;\n    for (i = n - 1; i >= 0; i--) {\n        if (a[i] > 0 && a[i] < 10)\n            (*m)++;\n    }\n\n    *p = (char **) malloc(sizeof(char *) * (*m));\n    k = 0;\n    for (i = n - 1; i >= 0 && k < *m; i--) {\n        if (a[i] > 0 && a[i] < 10)\n            (*p)[k++] = s[a[i]];\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
    "c_func_decompile": "\nint* func0(int n)\n{\n    int i, j, k, t;\n    int *ret = (int *)malloc(sizeof(int) * 2);\n    ret[0] = 0;\n    ret[1] = 0;\n    for (i = 1; i <= n; i++) {\n        j = 0;\n        k = i;\n        t = i;\n        while (t) {\n            j = j * 10 + t % 10;\n            t /= 10;\n        }\n        if (k == j) {\n            if (k % 2 == 0)\n                ret[0]++;\n            else\n                ret[1]++;\n        }\n    }\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int n)\n{\n    int i, j, k, t;\n    int *ret = (int *)malloc(sizeof(int) * 2);\n    ret[0] = 0;\n    ret[1] = 0;\n    for (i = 1; i <= n; i++) {\n        j = 0;\n        k = i;\n        t = i;\n        while (t) {\n            j = j * 10 + t % 10;\n            t /= 10;\n        }\n        if (k == j) {\n            if (k % 2 == 0)\n                ret[0]++;\n            else\n                ret[1]++;\n        }\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
    "c_func_decompile": "\nint* func0(int n)\n{\n    int i, j, k, sum;\n    int *result = (int *)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (i = 1; i <= n; i++) {\n        sum = 0;\n        j = i;\n        while (j) {\n            k = j % 10;\n            sum = sum * 10 + k;\n            j /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": "int* func0(int n)\n{\n    int i, j, k, sum;\n    int *result = (int *)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (i = 1; i <= n; i++) {\n        sum = 0;\n        j = i;\n        while (j) {\n            k = j % 10;\n            sum = sum * 10 + k;\n            j /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, char ***p, int *m)\n{\n    int i, j;\n    char *s[10] = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n\n    for (i = 0; i < n - 1; i++)\n        for (j = i + 1; j < n; j++)\n            if (a[i] > a[j]) {\n                int t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n\n    *m = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*m)++;\n\n    *p = (char **) malloc(sizeof(char *) * (*m));\n    for (i = n - 1, j = 0; i >= 0 && j < *m; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*p)[j++] = s[a[i]];\n}",
    "c_func_re_decompile": "void func0(int *a, int n, char ***p, int *m)\n{\n    int i, j;\n    char *s[10] = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n\n    for (i = 0; i < n - 1; i++)\n        for (j = i + 1; j < n; j++)\n            if (a[i] > a[j]) {\n                int t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n\n    *m = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*m)++;\n\n    *p = (char **) malloc(sizeof(char *) * (*m));\n    for (i = n - 1, j = 0; i >= 0 && j < *m; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*p)[j++] = s[a[i]];\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j, k, sum;\n    int count = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n        } else {\n            sum = 0;\n            for (j = (a[i] > 0 ? a[i] : -a[i]); j >= 10; j /= 10) {\n                sum += j % 10;\n            }\n            sum -= j;\n            if (sum > 0) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j, k, sum;\n    int count = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n        } else {\n            sum = 0;\n            for (j = (a[i] > 0 ? a[i] : -a[i]); j >= 10; j /= 10) {\n                sum += j % 10;\n            }\n            sum -= j;\n            if (sum > 0) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
    "c_func_decompile": "\nbool func0(int *arr, int len)\n{\n    int i, count = 0;\n\n    if (len == 0)\n        return true;\n\n    for (i = 1; i < len; i++) {\n        if (arr[i] < arr[i - 1])\n            count++;\n    }\n\n    if (arr[0] < arr[len - 1])\n        count++;\n\n    return count <= 1;\n}",
    "c_func_re_decompile": "bool func0(int *arr, int len)\n{\n    int i, count = 0;\n\n    if (len == 0)\n        return true;\n\n    for (i = 1; i < len; i++) {\n        if (arr[i] < arr[i - 1])\n            count++;\n    }\n\n    if (arr[0] < arr[len - 1])\n        count++;\n\n    return count <= 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
    "c_func_decompile": "\nlong func0(long *x, int n)\n{\n  long m = x[0];\n  int i;\n  for (i = 1; i < n; i++)\n    {\n      if (x[i] < 0)\n x[i] += m;\n      if (x[i] < m)\n m = x[i];\n    }\n  return m;\n}",
    "c_func_re_decompile": "long func0(long *x, int n)\n{\n  long m = x[0];\n  int i;\n  for (i = 1; i < n; i++)\n    {\n      if (x[i] < 0)\n x[i] += m;\n      if (x[i] < m)\n m = x[i];\n    }\n  return m;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
    "c_func_decompile": "\nlong func0(long *a, int n)\n{\n  int i;\n  long min, sum;\n\n  sum = a[0];\n  min = a[0];\n  for (i = 1; i < n; i++) {\n    sum = (sum < 0) ? sum + a[i] : a[i];\n    if (sum < min)\n      min = sum;\n  }\n  return min;\n}",
    "c_func_re_decompile": "long func0(long *a, int n)\n{\n  int i;\n  long min, sum;\n\n  sum = a[0];\n  min = a[0];\n  for (i = 1; i < n; i++) {\n    sum = (sum < 0) ? sum + a[i] : a[i];\n    if (sum < min)\n      min = sum;\n  }\n  return min;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
    "c_func_decompile": "\nchar* func0(int* a, int a_len, int* b, int b_len)\n{\n    int i, j, count = 0;\n    for (i = 0; i < a_len; i++)\n        if (a[i] % 2 == 0)\n            count++;\n    for (j = 0; j < b_len; j++)\n        if (b[j] % 2 == 0)\n            count++;\n    if (count >= a_len)\n        return \"YES\";\n    else\n        return \"NO\";\n}",
    "c_func_re_decompile": "char* func0(int* a, int a_len, int* b, int b_len)\n{\n    int i, j, count = 0;\n    for (i = 0; i < a_len; i++)\n        if (a[i] % 2 == 0)\n            count++;\n    for (j = 0; j < b_len; j++)\n        if (b[j] % 2 == 0)\n            count++;\n    if (count >= a_len)\n        return \"YES\";\n    else\n        return \"NO\";\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum, count;\n\n    count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n        } else {\n            sum = 0;\n            a[i] = -a[i];\n            while (a[i] > 0) {\n                sum += a[i] % 10;\n                a[i] /= 10;\n            }\n            if (sum > a[i]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum, count;\n\n    count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n        } else {\n            sum = 0;\n            a[i] = -a[i];\n            while (a[i] > 0) {\n                sum += a[i] % 10;\n                a[i] /= 10;\n            }\n            if (sum > a[i]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum, count;\n\n    count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n        } else {\n            sum = 0;\n            a[i] = -a[i];\n            while (a[i] > 0) {\n                sum += a[i] % 10;\n                a[i] /= 10;\n            }\n            if (sum > a[i]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum, count;\n\n    count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n        } else {\n            sum = 0;\n            a[i] = -a[i];\n            while (a[i] > 0) {\n                sum += a[i] % 10;\n                a[i] /= 10;\n            }\n            if (sum > a[i]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j, k, sum, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n            continue;\n        }\n        k = a[i];\n        sum = 0;\n        while (k < 0) {\n            k = k * -1;\n        }\n        while (k > 9) {\n            j = k % 10;\n            sum += j;\n            k = k / 10;\n        }\n        if (k < sum) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j, k, sum, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n            continue;\n        }\n        k = a[i];\n        sum = 0;\n        if (k < 0) {\n            k = k * -1;\n        }\n        while (k > 9) {\n            j = k % 10;\n            sum += j;\n            k = k / 10;\n        }\n        if (k < sum) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
    "c_func_decompile": "\nchar *func0(int *a, int n, int *b, int m)\n{\n    int i, cnt = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] % 2 == 0)\n            cnt++;\n    for (i = 0; i < m; i++)\n        if (b[i] % 2 == 0)\n            cnt++;\n    if (cnt > n)\n        return \"YES\";\n    else\n        return \"NO\";\n}",
    "c_func_re_decompile": "char *func0(int *a, int n, int *b, int m)\n{\n    int i, cnt = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] % 2 == 0)\n            cnt++;\n    for (i = 0; i < m; i++)\n        if (b[i] % 2 == 0)\n            cnt++;\n    if (cnt > n)\n        return \"YES\";\n    else\n        return \"NO\";\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
    "c_func_decompile": "\nchar *func0(int *a, int n, int *b, int m)\n{\n  int i, cnt = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 0)\n      cnt++;\n  for (i = 0; i < m; i++)\n    if (b[i] % 2 == 0)\n      cnt++;\n  if (cnt > n)\n    return \"YES\";\n  else\n    return \"NO\";\n}",
    "c_func_re_decompile": "char *func0(int *a, int n, int *b, int m)\n{\n  int i, cnt = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] % 2 == 0)\n      cnt++;\n  for (i = 0; i < m; i++)\n    if (b[i] % 2 == 0)\n      cnt++;\n  if (cnt > n)\n    return \"YES\";\n  else\n    return \"NO\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
    "c_func_decompile": "\nchar *func0(int *a, int n, int *b, int m)\n{\n    int i, j, k;\n    k = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] % 2 == 0)\n            k++;\n    for (j = 0; j < m; j++)\n        if (b[j] % 2 == 0)\n            k++;\n    if (k > n)\n        return \"YES\";\n    else\n        return \"NO\";\n}",
    "c_func_re_decompile": "char *func0(int *a, int n, int *b, int m)\n{\n    int i, j, k;\n    k = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] % 2 == 0)\n            k++;\n    for (j = 0; j < m; j++)\n        if (b[j] % 2 == 0)\n            k++;\n    if (k > n)\n        return \"YES\";\n    else\n        return \"NO\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
    "c_func_decompile": "\nlong func0(long *x, int n)\n{\n  long m;\n  int i;\n\n  m = x[0];\n  for (i = 1; i < n; i++)\n    if (m < 0)\n      m += x[i];\n    else\n      m = ((m) < (x[i]) ? (m) : (x[i]));\n  return m;\n}",
    "c_func_re_decompile": "long func0(long *x, int n)\n{\n  long m;\n  int i;\n\n  m = x[0];\n  for (i = 1; i < n; i++)\n    if (m < 0)\n      m += x[i];\n    else\n      m = ((m) < (x[i]) ? (m) : (x[i]));\n  return m;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
    "c_func_decompile": "\nint* func0(int n)\n{\n    int i, j, k, sum;\n    int *result = (int *)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (i = 1; i <= n; i++) {\n        sum = 0;\n        j = i;\n        while (j) {\n            k = j % 10;\n            sum = sum * 10 + k;\n            j /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": "int* func0(int n)\n{\n    int i, j, k, sum;\n    int *result = (int *)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (i = 1; i <= n; i++) {\n        sum = 0;\n        j = i;\n        while (j) {\n            k = j % 10;\n            sum = sum * 10 + k;\n            j /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++)\n            sum += a[i][j];\n        if (sum > 0)\n            count += (sum + k - 1) / k;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, count = 0;\n    for (j = 0; j < n; j++) {\n        sum = 0;\n        for (i = 0; i < m; i++)\n            sum += a[i][j];\n        if (sum > 0)\n            count += (sum + k - 1) / k;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, count;\n\n    count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++)\n            sum += a[i][j];\n        if (sum > 0)\n            count += (sum + k - 1) / k;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, count;\n\n    count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++)\n            sum += a[i][j];\n        if (sum > 0)\n            count += (sum + k - 1) / k;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
    "c_func_decompile": "\nlong func0(long *x, int n)\n{\n  long sum;\n  int i;\n\n  sum = x[0];\n  for (i = 1; i < n; i++)\n    {\n      if (sum >= 0)\n        {\n          if (x[i] < sum)\n            sum = x[i];\n        }\n      else\n        {\n          if (sum + x[i] < sum)\n            sum = sum + x[i];\n        }\n    }\n  return sum;\n}",
    "c_func_re_decompile": "long func0(long *x, int n)\n{\n  long sum;\n  long sum1;\n  int i;\n\n  sum = x[0];\n  for (i = 1; i < n; i++)\n    {\n      sum1 = sum;\n      if (sum >= 0)\n        {\n          if (x[i] < sum)\n            sum = x[i];\n        }\n      else\n        {\n          if (sum + x[i] < sum)\n            sum = sum + x[i];\n        }\n      if (sum1 < sum)\n        sum = sum1;\n    }\n  return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, int *arr, int *max, char *ch)\n{\n    int i, j, k, max_num = 0;\n    int num[26] = {0};\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        if (str[i] == ' ')\n            continue;\n        j = str[i] - 'a';\n        num[j]++;\n        if (num[j] > max_num)\n            max_num = num[j];\n    }\n    for (i = 0; i < 26; i++)\n    {\n        arr[i] = num[i];\n        if (num[i] == max_num)\n            ch[k++] = i + 'a';\n    }\n    *max = max_num;\n    ch[k] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, int *arr, int *max, char *ch)\n{\n    int i, j, k, max_num = 0;\n    int num[26] = {0};\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        if (str[i] == ' ')\n            continue;\n        j = str[i] - 'a';\n        num[j]++;\n        if (num[j] > max_num)\n            max_num = num[j];\n    }\n    for (i = 0; i < 26; i++)\n    {\n        arr[i] = num[i];\n        if (num[i] == max_num)\n            ch[k++] = i + 'a';\n    }\n    *max = max_num;\n    ch[k] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, count;\n\n    count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++)\n            sum += a[i][j];\n        if (sum > 0)\n            count += (sum + k - 1) / k;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, count;\n\n    count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++)\n            sum += a[i][j];\n        if (sum > 0)\n            count += (sum + k - 1) / k;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, int *arr, int *max, char *ch)\n{\n    int i, j, k, max_count = 0;\n    int count[26] = {0};\n\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        if (str[i] != ' ')\n        {\n            j = str[i] - 'a';\n            count[j]++;\n            if (count[j] > max_count)\n                max_count = count[j];\n        }\n    }\n\n    for (i = 0; i < 26; i++)\n    {\n        arr[i] = count[i];\n        if (count[i] == max_count)\n            ch[k++] = i + 'a';\n    }\n\n    *max = max_count;\n    ch[k] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, int *arr, int *max, char *ch)\n{\n    int i, j, k, max_count = 0;\n    int count[26] = {0};\n\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        if (str[i] != ' ')\n        {\n            j = str[i] - 'a';\n            count[j]++;\n            if (count[j] > max_count)\n                max_count = count[j];\n        }\n    }\n\n    for (i = 0; i < 26; i++)\n    {\n        arr[i] = count[i];\n        if (count[i] == max_count)\n            ch[k++] = i + 'a';\n    }\n\n    *max = max_count;\n    ch[k] = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char **str, int n)\n{\n    char **res = malloc(n * sizeof(char *));\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (char *p = str[i]; *p; p++) {\n            if (*p >= '0' && *p <= '9') {\n                if (*p % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        res[i] = malloc(100);\n        __sprintf_chk(res[i], 1, 100, \"%s%d%d\", \"Number of odd digits: \", count, count);\n    }\n    return res;\n}",
    "c_func_re_decompile": "char **func0(char **str, int n)\n{\n    char **res = malloc(n * sizeof(char *));\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (char *p = str[i]; *p; p++) {\n            if (*p >= '0' && *p <= '9') {\n                if (*p % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        res[i] = malloc(100);\n        __sprintf_chk(res[i], 1, 100, \"%s%d%d\", \"Number of odd digits: \", count, count);\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char **argv, int argc)\n{\n  int i, j, k;\n  char **ret = malloc(argc * sizeof(char *));\n  for (i = 0; i < argc; i++) {\n    k = 0;\n    for (j = 0; argv[i][j]; j++)\n      if (argv[i][j] >= '0' && argv[i][j] <= '9' && argv[i][j] % 2)\n        k++;\n    ret[i] = malloc(100);\n    __sprintf_chk(ret[i], 1, 100, \"%s: %d\", \"func0\", k);\n  }\n  return ret;\n}",
    "c_func_re_decompile": "char **func0(char **argv, int argc)\n{\n  int i, j, k;\n  char **ret = malloc(argc * sizeof(char *));\n  for (i = 0; i < argc; i++) {\n    k = 0;\n    for (j = 0; argv[i][j]; j++)\n      if (argv[i][j] >= '0' && argv[i][j] <= '9' && argv[i][j] % 2)\n        k++;\n    ret[i] = malloc(100);\n    __sprintf_chk(ret[i], 1, 100, \"%s: %d (%d)\", \"func0\", k, k);\n  }\n  return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar ** func0(char ** str, int n)\n{\n    int i, j, k;\n    char ** ret = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        k = 0;\n        for (j = 0; str[i][j] != '\\0'; j++) {\n            if (str[i][j] >= '0' && str[i][j] <= '9' && (str[i][j] - '0') % 2 == 1) {\n                k++;\n            }\n        }\n        ret[i] = (char *)malloc(100 * sizeof(char));\n        sprintf(ret[i], \"%d %d %d\", k, k, k);\n    }\n    return ret;\n}",
    "c_func_re_decompile": "char ** func0(char ** str, int n)\n{\n    int i, j, k;\n    char ** ret = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        k = 0;\n        for (j = 0; str[i][j] != '\\0'; j++) {\n            if (str[i][j] >= '0' && str[i][j] <= '9' && (str[i][j] - '0') % 2 == 1) {\n                k++;\n            }\n        }\n        ret[i] = (char *)malloc(100 * sizeof(char));\n        sprintf(ret[i], \"%d %d %d\", k, k, k);\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char **str, int n)\n{\n    int i, j, k, count;\n    char **res = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        count = 0;\n        for (j = 0; str[i][j] != '\\0'; j++) {\n            if (str[i][j] >= '0' && str[i][j] <= '9') {\n                if ((str[i][j] - '0') % 2 == 1)\n                    count++;\n            }\n        }\n        res[i] = (char *)malloc(100 * sizeof(char));\n        __sprintf_chk(res[i], 1, 100, \"%d\", count, count, count);\n    }\n    return res;\n}",
    "c_func_re_decompile": "char **func0(char **str, int n)\n{\n    int i, j, k, count;\n    char **res = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        count = 0;\n        for (j = 0; str[i][j] != '\\0'; j++) {\n            if (str[i][j] >= '0' && str[i][j] <= '9') {\n                if ((str[i][j] - '0') % 2 == 1)\n                    count++;\n            }\n        }\n        res[i] = (char *)malloc(100 * sizeof(char));\n        __sprintf_chk(res[i], 1, 100, \"%d\", count, count, count);\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, int *count, int *max, char *max_char)\n{\n    int i, j, max_count = 0;\n    int count_char[26] = {0};\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == ' ')\n            continue;\n        count_char[str[i] - 'a']++;\n        if (count_char[str[i] - 'a'] > max_count)\n            max_count = count_char[str[i] - 'a'];\n    }\n    *max = max_count;\n    j = 0;\n    for (i = 0; i < 26; i++) {\n        count[i] = count_char[i];\n        if (count_char[i] == max_count)\n            max_char[j++] = i + 'a';\n    }\n    max_char[j] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, int *count, int *max, char *max_char)\n{\n    int i, j, max_count = 0;\n    int count_char[26] = {0};\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == ' ')\n            continue;\n        count_char[str[i] - 'a']++;\n        if (count_char[str[i] - 'a'] > max_count)\n            max_count = count_char[str[i] - 'a'];\n    }\n    *max = max_count;\n    j = 0;\n    for (i = 0; i < 26; i++) {\n        count[i] = count_char[i];\n        if (count_char[i] == max_count)\n            max_char[j++] = i + 'a';\n    }\n    max_char[j] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, int *a, int *max, char *b)\n{\n    int i, j, k, m, n, p, q, r, t, u, v, w, x, y, z;\n    int c[26] = {0};\n    char *p1;\n\n    m = 0;\n    p1 = s;\n    k = 0;\n    while (*p1 != '\\0') {\n        if (*p1 != ' ') {\n            t = *p1 - 'a';\n            c[t]++;\n            if (c[t] > m) {\n                m = c[t];\n            }\n        }\n        p1++;\n    }\n    for (i = 0; i < 26; i++) {\n        a[i] = c[i];\n        if (c[i] == m) {\n            b[k++] = i + 'a';\n        }\n    }\n    *max = m;\n    b[k] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, int *a, int *max, char *b)\n{\n    int i, j, k, m, n, p, q, r, t, u, v, w, x, y, z;\n    int c[26] = {0};\n    char *p1;\n\n    m = 0;\n    p1 = s;\n    k = 0;\n    while (*p1 != '\\0') {\n        if (*p1 != ' ') {\n            t = *p1 - 'a';\n            c[t]++;\n            if (c[t] > m) {\n                m = c[t];\n            }\n        }\n        p1++;\n    }\n    for (i = 0; i < 26; i++) {\n        a[i] = c[i];\n        if (c[i] == m) {\n            b[k++] = i + 'a';\n        }\n    }\n    *max = m;\n    b[k] = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, count = 0;\n\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++)\n            sum += a[i][j];\n        if (sum > 0)\n            count += (sum + k - 1) / k;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int **a, int m, int n, int k)\n{\n    int i, j, sum, count = 0;\n\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++)\n            sum += a[i][j];\n        if (sum > 0)\n            count += (sum + k - 1) / k;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": " void func0(int *a, int n)\n{\n  int i, j, t;\n  int x, y, z;\n\n  for (i=0; i<n; i++) {\n    for (j=i+1; j<n; j++) {\n      x = y = z = 0;\n      t = a[i];\n      while (t > 0) {\n        x += t & 1;\n        t >>= 1;\n      }\n      t = a[j];\n      while (t > 0) {\n        y += t & 1;\n        t >>= 1;\n      }\n      if (y < x || (y == x && a[j] < a[i])) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int n)\n{\n  int i, j, t;\n  int x, y, z;\n\n  for (i=0; i<n; i++) {\n    for (j=i+1; j<n; j++) {\n      x = 0;\n      y = a[i];\n      z = a[j];\n      while (y > 0) {\n        x += y & 1;\n        y >>= 1;\n      }\n      y = x;\n      x = 0;\n      while (z > 0) {\n        x += z & 1;\n        z >>= 1;\n      }\n      z = x;\n      if (z < y || (z == y && a[j] < a[i])) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *delim, char *str1, char *str2)\n{\n    int len = strlen(str);\n    char *str3 = (char *)malloc(len + 1);\n    int i, j = 0, k;\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        char *p = delim;\n        char flag = 0;\n        while (*p != '\\0')\n        {\n            if (str[i] == *p)\n            {\n                flag = 1;\n                break;\n            }\n            p++;\n        }\n        if (!flag)\n            str3[j++] = str[i];\n    }\n    str3[j] = '\\0';\n    int len2 = strlen(str3);\n    char flag2 = 1;\n    for (k = 0; k < len2 / 2; k++)\n    {\n        if (str3[k] != str3[len2 - 1 - k])\n        {\n            flag2 = 0;\n            break;\n        }\n    }\n    strcpy(str1, str3);\n    strcpy(str2, flag2 ? \"Yes\" : \"No\");\n    free(str3);\n}",
    "c_func_re_decompile": "void func0(char *str, char *delim, char *str1, char *str2)\n{\n    int len = strlen(str);\n    char *str3 = (char *)malloc(len + 1);\n    int i, j = 0, k;\n    for (i = 0; str[i] != '\\0'; i++)\n    {\n        char *p = delim;\n        char flag = 0;\n        while (*p != '\\0')\n        {\n            if (str[i] == *p)\n            {\n                flag = 1;\n                break;\n            }\n            p++;\n        }\n        if (!flag)\n            str3[j++] = str[i];\n    }\n    str3[j] = '\\0';\n    int len2 = strlen(str3);\n    char flag2 = 1;\n    for (k = 0; k < len2 / 2; k++)\n    {\n        if (str3[k] != str3[len2 - 1 - k])\n        {\n            flag2 = 0;\n            break;\n        }\n    }\n    strcpy(str1, str3);\n    strcpy(str2, flag2 ? \"Yes\" : \"No\");\n    free(str3);\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n)\n{\n    int i, j, k, t;\n    int c1, c2;\n\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            c1 = 0;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            c2 = 0;\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n                k = a[i];\n                a[i] = a[j];\n                a[j] = k;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n)\n{\n    int i, j, k, t;\n    int c1, c2;\n\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            c1 = 0;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            c2 = 0;\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n                k = a[i];\n                a[i] = a[j];\n                a[j] = k;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n)\n{\n    int i, j, k, t;\n    int c1, c2;\n\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            c1 = 0;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            c2 = 0;\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 < c2 || (c1 == c2 && a[i] > a[j])) {\n                k = a[i];\n                a[i] = a[j];\n                a[j] = k;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n)\n{\n    int i, j, k, t;\n    int c1, c2;\n\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            c1 = 0;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            c2 = 0;\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 < c2 || (c1 == c2 && a[i] > a[j])) {\n                k = a[i];\n                a[i] = a[j];\n                a[j] = k;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
    "c_func_decompile": "\nvoid func0(char *str1, char *str2, char *str3, char *str4)\n{\n    int i, j, k, len;\n    char *str;\n\n    str = (char *)malloc(sizeof(char) * (strlen(str1) + 1));\n    k = 0;\n    for (i = 0; str1[i] != '\\0'; i++) {\n        for (j = 0; str2[j] != '\\0'; j++) {\n            if (str1[i] == str2[j]) {\n                str[k] = str1[i];\n                k++;\n                break;\n            }\n        }\n    }\n    str[k] = '\\0';\n\n    len = strlen(str);\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (str[i] != str[j]) {\n            strcpy(str3, str);\n            strcpy(str4, \"No\");\n            break;\n        }\n    }\n    if (i >= len / 2) {\n        strcpy(str3, str);\n        strcpy(str4, \"Yes\");\n    }\n    free(str);\n}",
    "c_func_re_decompile": "void func0(char *str1, char *str2, char *str3, char *str4)\n{\n    int i, j, k, len;\n    char *str;\n\n    str = (char *)malloc(sizeof(char) * (strlen(str1) + 1));\n    k = 0;\n    for (i = 0; str1[i] != '\\0'; i++) {\n        for (j = 0; str2[j] != '\\0'; j++) {\n            if (str1[i] == str2[j]) {\n                str[k] = str1[i];\n                k++;\n                break;\n            }\n        }\n    }\n    str[k] = '\\0';\n\n    len = strlen(str);\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (str[i] != str[j]) {\n            strcpy(str3, str);\n            strcpy(str4, \"No\");\n            break;\n        }\n    }\n    if (i >= len / 2) {\n        strcpy(str3, str);\n        strcpy(str4, \"Yes\");\n    }\n    free(str);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n  int i;\n  int len = strlen(str);\n  for (i = len - 2; i > 0; i--)\n    if (strchr(\"aeiou\", str[i]) && !strchr(\"aeiou\", str[i+1]) && !strchr(\"aeiou\", str[i-1]))\n      {\n        static char ret[100];\n        ret[0] = str[i];\n        return ret;\n      }\n  return NULL;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n  int i;\n  int len = strlen(str);\n  for (i = len - 2; i > 0; i--)\n    if (strchr(\"aeiou\", str[i]) && !strchr(\"aeiou\", str[i+1]) && !strchr(\"aeiou\", str[i-1]))\n      {\n        static char ret[100];\n        ret[0] = str[i];\n        return ret;\n      }\n  return NULL;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
    "c_func_decompile": "\nvoid func0(char *str1, char *str2, char *str3, char *str4)\n{\n    int i, j, k, len;\n    char *str;\n\n    str = (char *)malloc(sizeof(char) * (strlen(str1) + 1));\n    k = 0;\n    for (i = 0; str1[i] != '\\0'; i++) {\n        for (j = 0; str2[j] != '\\0'; j++) {\n            if (str1[i] == str2[j]) {\n                break;\n            }\n        }\n        if (str2[j] == '\\0') {\n            str[k++] = str1[i];\n        }\n    }\n    str[k] = '\\0';\n\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - 1 - i]) {\n            memcpy(str3, str, len + 1);\n            strcpy(str4, \"NO\");\n            break;\n        }\n    }\n    if (i >= len / 2) {\n        memcpy(str3, str, len + 1);\n        strcpy(str4, \"YES\");\n    }\n    free(str);\n}",
    "c_func_re_decompile": "void func0(char *str1, char *str2, char *str3, char *str4)\n{\n    int i, j, k, len;\n    char *str;\n\n    str = (char *)malloc(sizeof(char) * (strlen(str1) + 1));\n    k = 0;\n    for (i = 0; str1[i] != '\\0'; i++) {\n        for (j = 0; str2[j] != '\\0'; j++) {\n            if (str1[i] == str2[j]) {\n                break;\n            }\n        }\n        if (str2[j] == '\\0') {\n            str[k++] = str1[i];\n        }\n    }\n    str[k] = '\\0';\n\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - 1 - i]) {\n            memcpy(str3, str, len + 1);\n            strcpy(str4, \"NO\");\n            break;\n        }\n    }\n    if (i >= len / 2) {\n        memcpy(str3, str, len + 1);\n        strcpy(str4, \"YES\");\n    }\n    free(str);\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n)\n{\n    int i, j, t;\n    int c1, c2;\n\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            c1 = 0;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            c2 = 0;\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n)\n{\n    int i, j, t;\n    int c1, c2;\n\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            c1 = 0;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            c2 = 0;\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
    "c_func_decompile": "\nvoid func0(char *str1, char *str2, char *str3, char *str4)\n{\n    int i, j, k, len;\n    char *str;\n\n    str = (char *)malloc(sizeof(char) * (strlen(str1) + 1));\n    k = 0;\n    for (i = 0; str1[i] != '\\0'; i++) {\n        for (j = 0; str2[j] != '\\0'; j++) {\n            if (str1[i] == str2[j]) {\n                break;\n            }\n        }\n        if (str2[j] == '\\0') {\n            str[k++] = str1[i];\n        }\n    }\n    str[k] = '\\0';\n\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - 1 - i]) {\n            memcpy(str3, str, len + 1);\n            strcpy(str4, \"NO\");\n            break;\n        }\n    }\n    if (i >= len / 2) {\n        memcpy(str3, str, len + 1);\n        strcpy(str4, \"YES\");\n    }\n    free(str);\n}",
    "c_func_re_decompile": "void func0(char *str1, char *str2, char *str3, char *str4)\n{\n    int i, j, k, len;\n    char *str;\n\n    str = (char *)malloc(sizeof(char) * (strlen(str1) + 1));\n    k = 0;\n    for (i = 0; str1[i] != '\\0'; i++) {\n        for (j = 0; str2[j] != '\\0'; j++) {\n            if (str1[i] == str2[j]) {\n                break;\n            }\n        }\n        if (str2[j] == '\\0') {\n            str[k++] = str1[i];\n        }\n    }\n    str[k] = '\\0';\n\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - 1 - i]) {\n            memcpy(str3, str, len + 1);\n            strcpy(str4, \"NO\");\n            break;\n        }\n    }\n    if (i >= len / 2) {\n        memcpy(str3, str, len + 1);\n        strcpy(str4, \"YES\");\n    }\n    free(str);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n  int i;\n  int len = strlen(str);\n  for (i = len - 2; i > 0; i--)\n    if (strchr(\"aeiou\", str[i]) && !strchr(\"aeiou\", str[i+1]) && !strchr(\"aeiou\", str[i-1]))\n      {\n        static char ret[100];\n        ret[0] = str[i];\n        return ret;\n      }\n  return NULL;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n  int i;\n  int len = strlen(str);\n  for (i = len - 2; i > 0; i--)\n    if (strchr(\"aeiou\", str[i]) && !strchr(\"aeiou\", str[i+1]) && !strchr(\"aeiou\", str[i-1]))\n      {\n        static char ret[100];\n        ret[0] = str[i];\n        return ret;\n      }\n  return NULL;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 1)\n            sum += a[i];\n    }\n\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 1)\n            sum += a[i];\n    }\n\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n  int i, sum;\n\n  sum = 0;\n  for (i = 0; 2*i < n; i++)\n    if (a[2*i] % 2 == 1)\n      sum += a[2*i];\n  return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n  int i, sum;\n\n  sum = 0;\n  for (i = 0; 2*i < n; i++)\n    if (a[2*i] % 2 == 1)\n      sum += a[2*i];\n  return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i;\n    int sum = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (a[i] % 2 == 1)\n        {\n            sum += a[i];\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i;\n    int sum = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (a[i] % 2 == 1)\n        {\n            sum += a[i];\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (a[i] + 99 < 192)\n            sum += a[i];\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (a[i] + 99 < 192)\n            sum += a[i];\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
    "c_func_decompile": " void func0(int *arr, int n, int k, int *res)\n{\n    int i, j, tmp;\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    for (i = 0; i < k; i++) {\n        res[i] = arr[n - k + i];\n    }\n}",
    "c_func_re_decompile": "void func0(int *arr, int n, int k, int *res)\n{\n    int i, j, tmp;\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    for (i = 0; i < k; i++) {\n        res[i] = arr[n - k + i];\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int m, int *b)\n{\n    int i, j, t;\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    for (i = 0; i < m; i++)\n        b[i] = a[n - m + i];\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int m, int *b)\n{\n    int i, j, t;\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    for (i = 0; i < m; i++)\n        b[i] = a[n - m + i];\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 1)\n            sum += a[i];\n    }\n\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 1)\n            sum += a[i];\n    }\n\n    return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int m, int *b)\n{\n    int i, j, t;\n\n    for (i = n - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (a[j] > a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n        }\n    }\n\n    for (i = 0; i < m; i++) {\n        b[i] = a[n - m + i];\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int m, int *b)\n{\n    int i, j, t;\n\n    for (i = n - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (a[j] > a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n        }\n    }\n\n    for (i = 0; i < m; i++) {\n        b[i] = a[n - m + i];\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] >= -100 && a[i] <= 99) {\n            sum += a[i];\n        }\n    }\n\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] >= -100 && a[i] <= 99) {\n            sum += a[i];\n        }\n    }\n\n    return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i;\n    int sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > 99) {\n            sum += a[i];\n        }\n    }\n\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i;\n    int sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] > 99 && a[i] < 200) {\n            sum += a[i];\n        }\n    }\n\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i;\n    int sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] + 99 < 199)\n            sum += a[i];\n    }\n\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i;\n    int sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (a[i] + 99 < 199)\n            sum += a[i];\n    }\n\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int m, int *b)\n{\n    int i, j;\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] < a[j + 1])\n            {\n                int t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    for (i = 0; i < m; i++)\n        b[i] = a[n - m + i];\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int m, int *b)\n{\n    int i, j;\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] < a[j + 1])\n            {\n                int t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    for (i = 0; i < m; i++)\n        b[i] = a[n - m + i];\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int n, int *m)\n{\n    char *delim = \" \\t\\n\";\n    char **ret = NULL;\n    int i, j, k, l, len;\n\n    j = 0;\n    k = 0;\n    l = 0;\n    len = strlen(str);\n    char *tmp = (char *)malloc(len + 1);\n    for (i = 0; i <= len; i++) {\n        if (((((*__ctype_b_loc())[(int) (str[i])]) & (0x2000)) != 0) || str[i] == '\\0') {\n            if (j == n) {\n                tmp[i - l] = '\\0';\n                ret = (char **)realloc(ret, (k + 1) * sizeof(char *));\n                ret[k] = (char *)malloc(strlen(tmp) + 1);\n                strcpy(ret[k], tmp);\n                k++;\n            }\n            l = i + 1;\n            j = 0;\n        } else {\n            tmp[i - l] = str[i];\n            if (strchr(delim, str[i]) == NULL && ((((*__ctype_b_loc())[(int) (str[i])]) & (0x0400)) != 0))\n                j++;\n        }\n    }\n    free(tmp);\n    *m = k;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int n, int *m)\n{\n    char *delim = \" \\t\\n\";\n    char **ret = NULL;\n    int i, j, k, l, len;\n\n    j = 0;\n    k = 0;\n    l = 0;\n    len = strlen(str);\n    char *tmp = (char *)malloc(len + 1);\n    for (i = 0; i <= len; i++) {\n        if (((((*__ctype_b_loc())[(int) (str[i])]) & (0x2000)) != 0) || str[i] == '\\0') {\n            if (j == n) {\n                tmp[i - l] = '\\0';\n                ret = (char **)realloc(ret, (k + 1) * sizeof(char *));\n                ret[k] = (char *)malloc(strlen(tmp) + 1);\n                strcpy(ret[k], tmp);\n                k++;\n            }\n            l = i + 1;\n            j = 0;\n        } else {\n            tmp[i - l] = str[i];\n            if (strchr(delim, str[i]) == NULL && ((((*__ctype_b_loc())[(int) (str[i])]) & (0x0400)) != 0))\n                j++;\n        }\n    }\n    free(tmp);\n    *m = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int n, int *m)\n{\n    int i, j, k, len, count;\n    char *p, *q, *s;\n    char **pstr;\n    const unsigned short *ctype_b;\n\n    len = strlen(str);\n    p = malloc(len + 1);\n    ctype_b = __ctype_b_loc();\n    pstr = NULL;\n    j = k = count = 0;\n    for (i = 0; i < len; i++) {\n        if (!(ctype_b[str[i]] & (0x0020)) && str[i]) {\n            p[i - j] = str[i];\n            if (strchr(\" \\t\\n\\r\", str[i]) || (ctype_b[str[i]] & (0x400))) {\n                if (k == n) {\n                    p[i - j] = '\\0';\n                    pstr = realloc(pstr, (count + 1) * sizeof(char *));\n                    pstr[count] = malloc(strlen(p) + 1);\n                    memcpy(pstr[count], p, strlen(p) + 1);\n                    count++;\n                    k = 0;\n                }\n                j = i + 1;\n                k++;\n            }\n        }\n    }\n    free(p);\n    *m = count;\n    return pstr;\n}",
    "c_func_re_decompile": "char **func0(char *str, int n, int *m)\n{\n    int i, j, k, len, count;\n    char *p, *q, *s;\n    char **pstr;\n    const unsigned short *ctype_b;\n\n    len = strlen(str);\n    p = malloc(len + 1);\n    pstr = NULL;\n    j = k = count = 0;\n    ctype_b = __ctype_b_loc();\n    for (i = 0; i < len; i++) {\n        if (!(ctype_b[str[i]] & (0x0020)) && str[i]) {\n            p[i - j] = str[i];\n            if (strchr(\" \\t\\n\\r\", str[i]) || (ctype_b[str[i]] & (0x400))) {\n                if (k == n) {\n                    p[i - j] = '\\0';\n                    pstr = realloc(pstr, (count + 1) * sizeof(char *));\n                    pstr[count] = malloc(strlen(p) + 1);\n                    memcpy(pstr[count], p, strlen(p) + 1);\n                    count++;\n                    k = 0;\n                }\n                j = i + 1;\n                k++;\n            }\n        }\n    }\n    free(p);\n    *m = count;\n    return pstr;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *str, int n, int *m)\n{\n    int i, j, k, len, count;\n    char *p, *q, *r;\n    char **s;\n    const unsigned short *ctype_b;\n\n    len = strlen(str);\n    p = malloc(len + 1);\n    ctype_b = __ctype_b_loc();\n    s = NULL;\n    i = j = k = count = 0;\n    while (i < len) {\n        if (ctype_b[str[i]] & 0x0020) {\n            if (i - j == n) {\n                count++;\n                p[i - j] = '\\0';\n                s = realloc(s, (count + 1) * sizeof(char *));\n                s[count - 1] = malloc(strlen(p) + 1);\n                memcpy(s[count - 1], p, strlen(p) + 1);\n                j = i;\n            }\n            k = i;\n        } else if (str[i] != '\\0' && strchr(\" \\t\\n\\r\\v\\f\", str[i]) == NULL) {\n            if (ctype_b[str[i]] & 0x400)\n                k = i;\n        }\n        p[i - j] = str[i];\n        i++;\n    }\n    free(p);\n    *m = count;\n    return s;\n}",
    "c_func_re_decompile": "char **func0(char *str, int n, int *m)\n{\n    int i, j, k, len, count;\n    char *p, *q, *r;\n    char **s;\n    const unsigned short *ctype_b;\n\n    len = strlen(str);\n    p = malloc(len + 1);\n    ctype_b = __ctype_b_loc();\n    s = NULL;\n    i = j = k = count = 0;\n    while (i < len) {\n        if (ctype_b[str[i]] & 0x0020) {\n            if (i - j == n) {\n                count++;\n                p[i - j] = '\\0';\n                s = realloc(s, (count + 1) * sizeof(char *));\n                s[count - 1] = malloc(strlen(p) + 1);\n                memcpy(s[count - 1], p, strlen(p) + 1);\n                j = i;\n            }\n            k = i;\n        } else if (str[i] != '\\0' && strchr(\" \\t\\n\\r\\v\\f\", str[i]) == NULL) {\n            if (ctype_b[str[i]] & 0x400)\n                k = i;\n        }\n        p[i - j] = str[i];\n        i++;\n    }\n    free(p);\n    *m = count;\n    return s;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int n, int *a, int *len)\n{\n    int i, j, k, m = 10;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= m) {\n                m *= 2;\n                a = realloc(a, m * sizeof(int));\n            }\n            a[(*len)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        for (j = i - 1; j >= 0 && a[j] > k; j--) {\n            a[j + 1] = a[j];\n        }\n        a[j + 1] = k;\n    }\n}",
    "c_func_re_decompile": "void func0(int n, int *a, int *len)\n{\n    int i, j, k, m = 10;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= m) {\n                m *= 2;\n                a = realloc(a, m * sizeof(int));\n            }\n            a[(*len)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        for (j = i - 1; j >= 0 && a[j] > k; j--) {\n            a[j + 1] = a[j];\n        }\n        a[j + 1] = k;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int n, int *a, int *len)\n{\n    int i, j, k, m;\n\n    *len = 1;\n    a[0] = 1;\n    m = 10;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= m) {\n                m *= 2;\n                a = realloc(a, m * sizeof(int));\n            }\n            a[(*len)++] = n;\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        for (j = i - 1; j >= 0 && a[j] > k; j--)\n            a[j + 1] = a[j];\n        a[j + 1] = k;\n    }\n}",
    "c_func_re_decompile": "void func0(int n, int *a, int *len)\n{\n    int i, j, k, m;\n\n    *len = 1;\n    a[0] = 1;\n    m = 10;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= m) {\n                m *= 2;\n                a = realloc(a, m * sizeof(int));\n            }\n            a[(*len)++] = n;\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        for (j = i - 1; j >= 0 && a[j] > k; j--)\n            a[j + 1] = a[j];\n        a[j + 1] = k;\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int n, int *a, int *len)\n{\n    int i, j, k, m;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= 10) {\n                a = (int *)realloc(a, 2 * *len * sizeof(int));\n            }\n            a[(*len)++] = n;\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        j = i - 1;\n        while (j >= 0 && a[j] > k) {\n            a[j + 1] = a[j];\n            j--;\n        }\n        a[j + 1] = k;\n    }\n}",
    "c_func_re_decompile": "void func0(int n, int *a, int *len)\n{\n    int i, j, k, m;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= 10) {\n                a = (int *)realloc(a, 2 * *len * sizeof(int));\n            }\n            a[(*len)++] = n;\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        j = i - 1;\n        while (j >= 0 && a[j] > k) {\n            a[j + 1] = a[j];\n            j--;\n        }\n        a[j + 1] = k;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, j, k, len;\n    len = strlen(str);\n    i = j = k = 0;\n    while (i < len) {\n        if (str[i] == '[') {\n            j++;\n            if (j > k)\n                k = j;\n        } else if (str[i] == ']')\n            j--;\n        i++;\n    }\n    return k;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int n, int *a, int *len)\n{\n    int i, j, k, m;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= 10) {\n                a = (int *)realloc(a, sizeof(int) * (*len * 2));\n            }\n            a[(*len)++] = n;\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        for (j = i - 1; j >= 0; j--) {\n            if (a[j] > k) {\n                a[j + 1] = a[j];\n            } else {\n                break;\n            }\n        }\n        a[j + 1] = k;\n    }\n}",
    "c_func_re_decompile": "void func0(int n, int *a, int *len)\n{\n    int i, j, k, m;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= 10) {\n                a = (int *)realloc(a, sizeof(int) * (*len * 2));\n            }\n            a[(*len)++] = n;\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        for (j = i - 1; j >= 0; j--) {\n            if (a[j] > k) {\n                a[j + 1] = a[j];\n            } else {\n                break;\n            }\n        }\n        a[j + 1] = k;\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, j = 0, k = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '[')\n            j++;\n        if (str[i] == ']')\n            j--;\n        if (j < 0)\n            j = 0;\n        if (j > k)\n            k = j;\n        if (j < k - 1)\n            return 1;\n    }\n    return 0;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
    "c_func_decompile": "\nchar* func0(char* str1, char* str2)\n{\n    int i, j, k, l, m, n, o, p;\n    i = 0;\n    j = strlen(str1);\n    k = strlen(str2);\n    l = 1;\n    for (m = 0; m < j; m++)\n    {\n        if (str1[m] == '(')\n            i++;\n        if (str1[m] == ')')\n            i--;\n        if (i < 0)\n            l = 0;\n    }\n    for (m = 0; m < k; m++)\n    {\n        if (str2[m] == '(')\n            i++;\n        if (str2[m] == ')')\n            i--;\n        if (i < 0)\n            l = 0;\n    }\n    if (i == 0 && l != 0)\n        return \"YES\";\n    i = 0;\n    l = 1;\n    for (m = 0; m < k; m++)\n    {\n        if (str2[m] == '(')\n            i++;\n        if (str2[m] == ')')\n            i--;\n        if (i < 0)\n            l = 0;\n    }\n    for (m = 0; m < j; m++)\n    {\n        if (str1[m] == '(')\n            i++;\n        if (str1[m] == ')')\n            i--;\n        if (i < 0)\n            l = 0;\n    }\n    if (i == 0 && l != 0)\n        return \"YES\";\n    return \"NO\";\n}",
    "c_func_re_decompile": "char* func0(char* str1, char* str2)\n{\n    int i, j, k, l, m, n, o, p;\n    i = 0;\n    j = strlen(str1);\n    k = strlen(str2);\n    l = 1;\n    for (m = 0; m < j; m++)\n    {\n        if (str1[m] == '(')\n            i++;\n        if (str1[m] == ')')\n            i--;\n        if (i < 0)\n            l = 0;\n    }\n    for (m = 0; m < k; m++)\n    {\n        if (str2[m] == '(')\n            i++;\n        if (str2[m] == ')')\n            i--;\n        if (i < 0)\n            l = 0;\n    }\n    if (i == 0 && l != 0)\n        return \"YES\";\n    i = 0;\n    l = 1;\n    for (m = 0; m < k; m++)\n    {\n        if (str2[m] == '(')\n            i++;\n        if (str2[m] == ')')\n            i--;\n        if (i < 0)\n            l = 0;\n    }\n    for (m = 0; m < j; m++)\n    {\n        if (str1[m] == '(')\n            i++;\n        if (str1[m] == ')')\n            i--;\n        if (i < 0)\n            l = 0;\n    }\n    if (i == 0 && l != 0)\n        return \"YES\";\n    return \"NO\";\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, j, k, len;\n    len = strlen(str);\n    for (i = 0, j = 0, k = 0; i < len; i++) {\n        if (str[i] == '[') {\n            j++;\n            if (j > k)\n                k = j;\n        } else if (str[i] == ']') {\n            j--;\n            if (j < 0)\n                return 0;\n        }\n        if (j < k - 1)\n            return 1;\n    }\n    if (j != 0)\n        return 0;\n    return 1;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    if (strlen(str) != 10)\n        return 0;\n\n    for (size_t i = 0; i < 10; i++)\n        if (!((str[i] >= '0' && str[i] <= '9') || str[i] == '-'))\n            return 0;\n\n    char month[3] = {str[0], str[1], '\\0'};\n    char day[3] = {str[3], str[4], '\\0'};\n    char year[5] = {str[6], str[7], str[8], str[9], '\\0'};\n\n    long m = strtol(month, NULL, 10);\n    long d = strtol(day, NULL, 10);\n    long y = strtol(year, NULL, 10);\n\n    if (m < 1 || m > 12 || d < 1 || d > 31 || y < 1 || y > 9999)\n        return 0;\n\n    if (m == 2 && d > 28)\n        return 0;\n\n    if (m == 4 || m == 6 || m == 9 || m == 11)\n        if (d == 31)\n            return 0;\n\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    if (strlen(str) != 10)\n        return 0;\n\n    for (size_t i = 0; i < 10; i++)\n        if (!((str[i] >= '0' && str[i] <= '9') || str[i] == '-'))\n            return 0;\n\n    char month[3] = {str[0], str[1], '\\0'};\n    char day[3] = {str[3], str[4], '\\0'};\n    char year[5] = {str[6], str[7], str[8], str[9], '\\0'};\n\n    long m = strtol(month, NULL, 10);\n    long d = strtol(day, NULL, 10);\n    long y = strtol(year, NULL, 10);\n\n    if (m < 1 || m > 12 || d < 1 || d > 31 || y < 1 || y > 9999)\n        return 0;\n\n    if (m == 2 && d > 28)\n        return 0;\n\n    if (m == 4 || m == 6 || m == 9 || m == 11)\n        if (d == 31)\n            return 0;\n\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i, j, k, len;\n    len = strlen(str);\n    for (i = 0, j = 0, k = 0; i < len; i++) {\n        if (str[i] == '[') {\n            j++;\n            if (j > k)\n                k = j;\n        } else if (str[i] == ']') {\n            j--;\n            if (j < 0)\n                return 0;\n        }\n        if (j < k - 1)\n            return 1;\n    }\n    if (j != 0)\n        return 0;\n    return 1;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i-1] || (a[i] == a[i-1] && i > 1 && a[i] == a[i-2]))\n            return 0;\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i-1] || (a[i] == a[i-1] && i > 1 && a[i] == a[i-2]))\n            return 0;\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i;\n\n    if (n == 0)\n        return 1;\n\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i - 1])\n            return 0;\n        if (i > 1 && a[i] == a[i - 1] && a[i] == a[i - 2])\n            return 0;\n    }\n\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i;\n\n    if (n == 0)\n        return 1;\n\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i - 1])\n            return 0;\n        if (i > 1 && a[i] == a[i - 1] && a[i] == a[i - 2])\n            return 0;\n    }\n\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "\nbool func0(int *arr, int len)\n{\n    int i;\n    for (i = 1; i < len; i++) {\n        if (arr[i] < arr[i - 1] || (i > 1 && arr[i] == arr[i - 1] && arr[i] == arr[i - 2])) {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_re_decompile": "bool func0(int *arr, int len)\n{\n    int i;\n    for (i = 1; i < len; i++) {\n        if (arr[i] < arr[i - 1] || (i > 1 && arr[i] == arr[i - 1] && arr[i] == arr[i - 2])) {\n            return false;\n        }\n    }\n    return true;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i;\n    char month[3], day[3], year[5];\n    int m, d, y;\n\n    if (strlen(str) != 10)\n        return 0;\n\n    for (i = 0; i < 10; i++) {\n        if ((i == 2 || i == 5) && str[i] != '-')\n            return 0;\n        else if (i != 2 && i != 5) {\n            if (str[i] < '0' || str[i] > '9')\n                return 0;\n        }\n    }\n\n    month[0] = str[0];\n    month[1] = str[1];\n    month[2] = '\\0';\n\n    day[0] = str[3];\n    day[1] = str[4];\n    day[2] = '\\0';\n\n    year[0] = str[6];\n    year[1] = str[7];\n    year[2] = str[8];\n    year[3] = str[9];\n    year[4] = '\\0';\n\n    m = atoi(month);\n    d = atoi(day);\n    y = atoi(year);\n\n    if (m < 1 || m > 12)\n        return 0;\n\n    if (d < 1 || d > 31)\n        return 0;\n\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d == 31)\n        return 0;\n\n    if (m == 2 && d > 29)\n        return 0;\n\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i;\n    char month[3], day[3], year[5];\n    int m, d, y;\n\n    if (strlen(str) != 10)\n        return 0;\n\n    for (i = 0; i < 10; i++) {\n        if ((i == 2 || i == 5) && str[i] != '-')\n            return 0;\n        else if (i != 2 && i != 5) {\n            if (str[i] < '0' || str[i] > '9')\n                return 0;\n        }\n    }\n\n    month[0] = str[0];\n    month[1] = str[1];\n    month[2] = '\\0';\n\n    day[0] = str[3];\n    day[1] = str[4];\n    day[2] = '\\0';\n\n    year[0] = str[6];\n    year[1] = str[7];\n    year[2] = str[8];\n    year[3] = str[9];\n    year[4] = '\\0';\n\n    m = atoi(month);\n    d = atoi(day);\n    y = atoi(year);\n\n    if (m < 1 || m > 12)\n        return 0;\n\n    if (d < 1 || d > 31)\n        return 0;\n\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d == 31)\n        return 0;\n\n    if (m == 2 && d > 29)\n        return 0;\n\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
    "c_func_decompile": "\nchar *func0(int a, int b, int c, int d)\n{\n  int i, x, y, z;\n\n  x = (a > c) ? a : c;\n  y = (b < d) ? b : d;\n  z = y - x;\n\n  if (z < 2)\n    return \"No\";\n\n  for (i = 2; i * i <= z; i++)\n    if (z % i == 0)\n      return \"No\";\n\n  return \"Yes\";\n}",
    "c_func_re_decompile": "char *func0(int a, int b, int c, int d)\n{\n  int i, x, y, z;\n\n  x = (a > c) ? a : c;\n  y = (b < d) ? b : d;\n  z = y - x;\n\n  if (z < 2)\n    return \"No\";\n\n  for (i = 2; i * i <= z; i++)\n    if (z % i == 0)\n      return \"No\";\n\n  return \"Yes\";\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
    "c_func_decompile": "\nchar *func0(int a, int b, int c, int d)\n{\n    int i, j;\n    if (a > c)\n        c = a;\n    if (b > d)\n        d = b;\n    j = d - c;\n    if (j <= 1)\n        return \"No\";\n    if (j <= 3)\n        return \"Yes\";\n    if (j % 2 == 0)\n        return \"No\";\n    for (i = 2; i * i <= j; i++)\n        if (j % i == 0)\n            return \"No\";\n    return \"Yes\";\n}",
    "c_func_re_decompile": "char *func0(int a, int b, int c, int d)\n{\n    int i, j;\n    if (a > c)\n        c = a;\n    if (b > d)\n        d = b;\n    j = d - c;\n    if (j <= 1)\n        return \"No\";\n    if (j <= 3)\n        return \"Yes\";\n    if (j % 2 == 0)\n        return \"No\";\n    for (i = 2; i * i <= j; i++)\n        if (j % i == 0)\n            return \"No\";\n    return \"Yes\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
    "c_func_decompile": "\nchar *func0(int a, int b, int c, int d)\n{\n    int i, j;\n    if (a > c)\n        a = c;\n    if (b < d)\n        b = d;\n    d = b - a;\n    if (d < 2)\n        return \"NO\";\n    if (d < 4)\n        return \"YES\";\n    if (d % 2 == 0)\n        return \"YES\";\n    for (i = 2; i * i <= d; i++)\n        if (d % i == 0)\n            return \"YES\";\n    return \"NO\";\n}",
    "c_func_re_decompile": "char *func0(int a, int b, int c, int d)\n{\n    int i, j;\n    if (a < c)\n        a = c;\n    if (b > d)\n        b = d;\n    d = b - a;\n    if (d < 2)\n        return \"NO\";\n    if (d < 4)\n        return \"YES\";\n    if (d % 2 == 0)\n        return \"YES\";\n    for (i = 2; i * i <= d; i++)\n        if (d % i == 0)\n            return \"YES\";\n    return \"NO\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
    "c_func_decompile": "\nchar* func0(char* str1, char* str2)\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    i = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    s = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    for (i = 0; i < len1; i++)\n    {\n        if (str1[i] == '(')\n        {\n            j++;\n        }\n        else if (str1[i] == ')')\n        {\n            j--;\n        }\n        if (j < 0)\n        {\n            return \"NO\";\n        }\n    }\n    if (j != 0)\n    {\n        return \"NO\";\n    }\n    for (i = 0; i < len2; i++)\n    {\n        if (str2[i] == '(')\n        {\n            j++;\n        }\n        else if (str2[i] == ')')\n        {\n            j--;\n        }\n        if (j < 0)\n        {\n            return \"NO\";\n        }\n    }\n    if (j != 0)\n    {\n        return \"NO\";\n    }\n    for (i = 0; i < len1; i++)\n    {\n        if (str1[i] == '(')\n        {\n            j++;\n        }\n        else if (str1[i] == ')')\n        {\n            j--;\n        }\n        if (j < 0)\n        {\n            return \"NO\";\n        }\n    }\n    if (j != 0)\n    {\n        return \"NO\";\n    }\n    for (i = 0; i < len2; i++)\n    {\n        if (str2[i] == '(')\n        {\n            j++;\n        }\n        else if (str2[i] == ')')\n        {\n            j--;\n        }\n        if (j < 0)\n        {\n            return \"NO\";\n        }\n    }\n    if (j != 0)\n    {\n        return \"NO\";\n    }\n    return \"YES\";\n}",
    "c_func_re_decompile": "char* func0(char* str1, char* str2)\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    i = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    s = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    for (i = 0; i < len1; i++)\n    {\n        if (str1[i] == '(')\n        {\n            j++;\n        }\n        else if (str1[i] == ')')\n        {\n            j--;\n        }\n        if (j < 0)\n        {\n            return \"NO\";\n        }\n    }\n    if (j != 0)\n    {\n        return \"NO\";\n    }\n    for (i = 0; i < len2; i++)\n    {\n        if (str2[i] == '(')\n        {\n            j++;\n        }\n        else if (str2[i] == ')')\n        {\n            j--;\n        }\n        if (j < 0)\n        {\n            return \"NO\";\n        }\n    }\n    if (j != 0)\n    {\n        return \"NO\";\n    }\n    for (i = 0; i < len1; i++)\n    {\n        if (str1[i] == '(')\n        {\n            j++;\n        }\n        else if (str1[i] == ')')\n        {\n            j--;\n        }\n        if (j < 0)\n        {\n            return \"NO\";\n        }\n    }\n    if (j != 0)\n    {\n        return \"NO\";\n    }\n    for (i = 0; i < len2; i++)\n    {\n        if (str2[i] == '(')\n        {\n            j++;\n        }\n        else if (str2[i] == ')')\n        {\n            j--;\n        }\n        if (j < 0)\n        {\n            return \"NO\";\n        }\n    }\n    if (j != 0)\n    {\n        return \"NO\";\n    }\n    return \"YES\";\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum, sign;\n\n    if (n == 0)\n        return -32768;\n\n    sum = 0;\n    sign = 1;\n    for (i = 0; i < n; i++) {\n        sum += (a[i] >= 0 ? a[i] : -a[i]);\n        if (a[i] == 0)\n            sign = 0;\n        if (a[i] < 0)\n            sign = -sign;\n    }\n    return sum * sign;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum, sign;\n\n    if (n == 0)\n        return -32768;\n\n    sum = 0;\n    sign = 1;\n    for (i = 0; i < n; i++) {\n        sum += (a[i] >= 0 ? a[i] : -a[i]);\n        if (a[i] == 0)\n            sign = 0;\n        if (a[i] < 0)\n            sign = -sign;\n    }\n    return sum * sign;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    int i;\n    int month, day, year;\n    char month_str[3], day_str[3], year_str[5];\n\n    if (strlen(str) != 10)\n        return 0;\n\n    for (i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (str[i] != '-')\n                return 0;\n        } else {\n            if (str[i] < '0' || str[i] > '9')\n                return 0;\n        }\n    }\n\n    month_str[0] = str[0];\n    month_str[1] = str[1];\n    month_str[2] = '\\0';\n\n    day_str[0] = str[3];\n    day_str[1] = str[4];\n    day_str[2] = '\\0';\n\n    year_str[0] = str[6];\n    year_str[1] = str[7];\n    year_str[2] = str[8];\n    year_str[3] = str[9];\n    year_str[4] = '\\0';\n\n    month = strtol(month_str, NULL, 10);\n    day = strtol(day_str, NULL, 10);\n    year = strtol(year_str, NULL, 10);\n\n    if (month < 1 || month > 12 || day < 1 || day > 31)\n        return 0;\n\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day == 31)\n            return 0;\n    }\n\n    if (month == 2) {\n        if (day > 29)\n            return 0;\n    }\n\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    int i;\n    int month, day, year;\n    char month_str[3], day_str[3], year_str[5];\n\n    if (strlen(str) != 10)\n        return 0;\n\n    for (i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (str[i] != '-')\n                return 0;\n        } else {\n            if (str[i] < '0' || str[i] > '9')\n                return 0;\n        }\n    }\n\n    month_str[0] = str[0];\n    month_str[1] = str[1];\n    month_str[2] = '\\0';\n\n    day_str[0] = str[3];\n    day_str[1] = str[4];\n    day_str[2] = '\\0';\n\n    year_str[0] = str[6];\n    year_str[1] = str[7];\n    year_str[2] = str[8];\n    year_str[3] = str[9];\n    year_str[4] = '\\0';\n\n    month = strtol(month_str, NULL, 10);\n    day = strtol(day_str, NULL, 10);\n    year = strtol(year_str, NULL, 10);\n\n    if (month < 1 || month > 12 || day < 1 || day > 31)\n        return 0;\n\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day == 31)\n            return 0;\n    }\n\n    if (month == 2) {\n        if (day > 29)\n            return 0;\n    }\n\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
    "c_func_decompile": "\nchar *func0(int a, int b, int c, int d)\n{\n    int i, j;\n    if (a > c)\n        c = a;\n    if (b > d)\n        d = b;\n    j = d - c;\n    if (j <= 1)\n        return \"No\";\n    if (j <= 3)\n        return \"Yes\";\n    if (j % 2 == 0)\n        return \"No\";\n    for (i = 2; i * i <= j; i++)\n        if (j % i == 0)\n            return \"No\";\n    return \"Yes\";\n}",
    "c_func_re_decompile": "char *func0(int a, int b, int c, int d)\n{\n    int i, j;\n    if (a > c)\n        c = a;\n    if (b > d)\n        d = b;\n    j = d - c;\n    if (j <= 1)\n        return \"No\";\n    if (j <= 3)\n        return \"Yes\";\n    if (j % 2 == 0)\n        return \"No\";\n    for (i = 2; i * i <= j; i++)\n        if (j % i == 0)\n            return \"No\";\n    return \"Yes\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0, sign = 1;\n\n    if (n == 0)\n        return -32768;\n\n    for (i = 0; i < n; i++) {\n        sum += (a[i] > 0 ? a[i] : -a[i]);\n        if (a[i] != 0)\n            sign = (a[i] > 0 ? sign : -sign);\n    }\n\n    return sum * sign;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0, sign = 1;\n\n    if (n == 0)\n        return -32768;\n\n    for (i = 0; i < n; i++) {\n        sum += (a[i] > 0 ? a[i] : -a[i]);\n        if (a[i] != 0)\n            sign = (a[i] > 0 ? sign : -sign);\n    }\n\n    return sum * sign;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0, sign = 1;\n\n    if (n == 0)\n        return 0;\n\n    for (i = 0; i < n; i++) {\n        sum += (a[i] >= 0 ? a[i] : -a[i]);\n        if (a[i] == 0)\n            sign = 0;\n        else if (a[i] < 0)\n            sign = -sign;\n    }\n\n    return sign * sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0, sign = 1;\n\n    if (n == 0)\n        return 0;\n\n    for (i = 0; i < n; i++) {\n        sum += (a[i] >= 0 ? a[i] : -a[i]);\n        if (a[i] == 0)\n            sign = 0;\n        else if (a[i] < 0)\n            sign = -sign;\n    }\n\n    return sign * sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    int a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1;\n    int aa, bb, cc, dd, ee, ff, gg, hh, ii, jj, kk, ll, mm, pp, qq, rr, ss, tt, uu, vv, ww, xx, yy, zz;\n    int aaa, bbb, ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk, lll, mmm, ppp, qqq, rrr, sss, ttt, uuu, vvv, www, xxx, yyy, zzz;\n    int aaaa, bbbb, cccc, dddd, eeee, ffff, gggg, hhhh, iii, jjjj, kkkk, llll, mmmm, pppp, qqqq, rrrr, ssss, tttt, uuuu, vvvv, wwww, xxxx, yyyy, zzzz;\n    int aaaaa, bbbbb, ccccc, ddddd, eeeee, fffff, ggggg, hhhhh, iiiii, jjjjj, kkkkk, lllll, mmmmm, ppppp, qqqqq, rrrrr, sssss, ttttt, uuuuu, vvvvv, wwww, xxxxx, yyyyy, zzzzz;\n    int aaaaaa, bbbbbb, cccccc, dddddd, eeeeee, ffffff, gggggg, hhhhhh, iiiiii, jjjjjj, kkkkkk, llllll, mmmmmm, pppppp, qqqqqq, rrrrrr, ssssss, tttttt, uuuuuu, vvvvvv, wwww, xxxxx, yyyyy, zzzzz;\n    int aaaaaaa, bbbbbbb, ccccccc, ddddddd, eeeeeee, fffffff, ggggggg, hhhhhhh, iiiiiii, jjjjjjj, kkkkkkk, lllllll, mmmmmmm, ppppppp, qqqqqqq, rrrrrrr, sssssss, ttttttt, uuuuuuu, vvvvvvv, wwww, xxxxx, yyyyy, zzzzz;\n    int aaaaaaaa, bbbbbbbb, cccccccc, dddddddd, eeeeeeee, ffffffff, gggggggg, hhhhhhhh, iiiiiiii, jjjjjjjj, kkkkkkkk, llllllll, mmmmmmmm, pppppppp, qqqqqqqq, rrrrrrrr, ssssssss, tttttttt, uuuuuuuu, vvvvvvvv, wwww, xxxxx, yyyyy, zzzzz;\n    int aaaaaaaaa, bbbbbbbbb, ccccccccc, ddddddddd, eeeeeeeee, fffffffff, ggggggggg, hhhhhhhhh, iiiiiiiii, jjjjjjjjj, kkkkkkkkk, lllllllll, mmmmmmmmm, ppppppppp, qqqqqqqqq, rrrrrrrrr, sssssssss, ttttttttt, uuuuuuuuu, vvvvvvvvv, wwww, xxxxx, yyyyy, zzzzz;\n    int aaaaaaaaaa, bbbbbbbbbb, cccccccccc, dddddddddd, eeeeeeeeee, ffffffffff, gggggggggg, hhhhhhhhhh, iiiiiiiiii, jjjjjjjjjj, kkkkkkkkkk, llllllllll, mmmmm",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0, sign = 1;\n\n    if (n == 0)\n        return 0;\n\n    for (i = 0; i < n; i++) {\n        sum += (a[i] > 0 ? a[i] : -a[i]);\n        if (a[i] == 0)\n            sign = 0;\n        else if (a[i] < 0)\n            sign = -sign;\n    }\n\n    return sign * sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0, sign = 1;\n\n    if (n == 0)\n        return 0;\n\n    for (i = 0; i < n; i++) {\n        sum += (a[i] > 0 ? a[i] : -a[i]);\n        if (a[i] == 0)\n            sign = 0;\n        else if (a[i] < 0)\n            sign = -sign;\n    }\n\n    return sign * sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *str)\n{\n    if (strlen(str) != 10)\n        return 0;\n    if (str[0] < '0' || str[0] > '9')\n        return 0;\n    if (str[1] < '0' || str[1] > '9')\n        return 0;\n    if (str[2] != '-')\n        return 0;\n    if (str[3] < '0' || str[3] > '9')\n        return 0;\n    if (str[4] < '0' || str[4] > '9')\n        return 0;\n    if (str[5] != '-')\n        return 0;\n    if (str[6] < '0' || str[6] > '9')\n        return 0;\n    if (str[7] < '0' || str[7] > '9')\n        return 0;\n    if (str[8] < '0' || str[8] > '9')\n        return 0;\n    if (str[9] < '0' || str[9] > '9')\n        return 0;\n\n    char month[3] = {str[0], str[1], '\\0'};\n    char day[3] = {str[3], str[4], '\\0'};\n    char year[3] = {str[6], str[7], str[8], str[9], '\\0'};\n\n    int m = (int)strtol(month, NULL, 10);\n    int d = (int)strtol(day, NULL, 10);\n    int y = (int)strtol(year, NULL, 10);\n\n    if (m < 1 || m > 12)\n        return 0;\n    if (d < 1 || d > 31)\n        return 0;\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12)\n    {\n        if (d == 31)\n            return 0;\n    }\n    if (m == 2)\n    {\n        if (d > 29)\n            return 0;\n    }\n\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str)\n{\n    if (strlen(str) != 10)\n        return 0;\n    if (str[0] < '0' || str[0] > '9')\n        return 0;\n    if (str[1] < '0' || str[1] > '9')\n        return 0;\n    if (str[2] != '-')\n        return 0;\n    if (str[3] < '0' || str[3] > '9')\n        return 0;\n    if (str[4] < '0' || str[4] > '9')\n        return 0;\n    if (str[5] != '-')\n        return 0;\n    if (str[6] < '0' || str[6] > '9')\n        return 0;\n    if (str[7] < '0' || str[7] > '9')\n        return 0;\n    if (str[8] < '0' || str[8] > '9')\n        return 0;\n    if (str[9] < '0' || str[9] > '9')\n        return 0;\n\n    char month[3] = {str[0], str[1], '\\0'};\n    char day[3] = {str[3], str[4], '\\0'};\n    char year[3] = {str[6], str[7], str[8], str[9], '\\0'};\n\n    int m = (int)strtol(month, NULL, 10);\n    int d = (int)strtol(day, NULL, 10);\n    int y = (int)strtol(year, NULL, 10);\n\n    if (m < 1 || m > 12)\n        return 0;\n    if (d < 1 || d > 31)\n        return 0;\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12)\n    {\n        if (d == 31)\n            return 0;\n    }\n    if (m == 2)\n    {\n        if (d > 29)\n            return 0;\n    }\n\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int** a, int n, int m, int* p)\n{\n    int i, j, k, l, min, *b;\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            if (a[i][j] == 1)\n            {\n                k = i;\n                l = j;\n            }\n    min = n * n;\n    if (k > 0 && a[k - 1][l] < min)\n        min = a[k - 1][l];\n    if (k < n - 1 && a[k + 1][l] < min)\n        min = a[k + 1][l];\n    if (l > 0 && a[k][l - 1] < min)\n        min = a[k][l - 1];\n    if (l < n - 1 && a[k][l + 1] < min)\n        min = a[k][l + 1];\n    *p = m;\n    b = (int*)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++)\n        if (i % 2 == 0)\n            b[i] = 1;\n        else\n            b[i] = min;\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int** a, int n, int m, int* p)\n{\n    int i, j, k, l, min, *b;\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            if (a[i][j] == 1)\n            {\n                k = i;\n                l = j;\n            }\n    min = n * n;\n    if (k > 0 && a[k - 1][l] < min)\n        min = a[k - 1][l];\n    if (k < n - 1 && a[k + 1][l] < min)\n        min = a[k + 1][l];\n    if (l > 0 && a[k][l - 1] < min)\n        min = a[k][l - 1];\n    if (l < n - 1 && a[k][l + 1] < min)\n        min = a[k][l + 1];\n    *p = m;\n    b = (int*)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++)\n        if (i % 2 == 0)\n            b[i] = 1;\n        else\n            b[i] = min;\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int** a, int n, int m, int* len)\n{\n    int i, j;\n    int min = n * n;\n    int x = 0, y = 0;\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    for (i = x; i < n; i++)\n        if (a[i][y] < min)\n            min = a[i][y];\n    for (i = x; i > 0; i--)\n        if (a[i - 1][y] < min)\n            min = a[i - 1][y];\n    for (j = y; j < n; j++)\n        if (a[x][j] < min)\n            min = a[x][j];\n    for (j = y; j > 0; j--)\n        if (a[x][j - 1] < min)\n            min = a[x][j - 1];\n    *len = m;\n    int* ret = (int*)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++)\n        ret[i] = i % 2 == 0 ? 1 : min;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int** a, int n, int m, int* len)\n{\n    int i, j;\n    int min = n * n;\n    int x = 0, y = 0;\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    for (i = x; i < n; i++)\n        if (a[i][y] < min)\n            min = a[i][y];\n    for (i = x; i > 0; i--)\n        if (a[i - 1][y] < min)\n            min = a[i - 1][y];\n    for (j = y; j < n; j++)\n        if (a[x][j] < min)\n            min = a[x][j];\n    for (j = y; j > 0; j--)\n        if (a[x][j - 1] < min)\n            min = a[x][j - 1];\n    *len = m;\n    int* ret = (int*)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++)\n        ret[i] = i % 2 == 0 ? 1 : min;\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int** a, int n, int m, int* retSize)\n{\n    int i, j, min, x, y;\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = n * n;\n    if (x)\n        min = a[x - 1][y] < min ? a[x - 1][y] : min;\n    if (x < n - 1)\n        min = a[x + 1][y] < min ? a[x + 1][y] : min;\n    if (y)\n        min = a[x][y - 1] < min ? a[x][y - 1] : min;\n    if (y < n - 1)\n        min = a[x][y + 1] < min ? a[x][y + 1] : min;\n    *retSize = m;\n    int* ret = (int*)malloc(sizeof(int) * m);\n    for (i = 0; i < m; i++)\n        ret[i] = i % 2 ? min : 1;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int** a, int n, int m, int* retSize)\n{\n    int i, j, min, x, y;\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = n * n;\n    if (x)\n        min = a[x - 1][y] < min ? a[x - 1][y] : min;\n    if (x < n - 1)\n        min = a[x + 1][y] < min ? a[x + 1][y] : min;\n    if (y)\n        min = a[x][y - 1] < min ? a[x][y - 1] : min;\n    if (y < n - 1)\n        min = a[x][y + 1] < min ? a[x][y + 1] : min;\n    *retSize = m;\n    int* ret = (int*)malloc(sizeof(int) * m);\n    for (i = 0; i < m; i++)\n        ret[i] = i % 2 ? min : 1;\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
    "c_func_decompile": "\nint* func0(int** a, int n, int m, int* len)\n{\n    int i, j, min, min_i, min_j;\n    min = n * n;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                min_i = i;\n                min_j = j;\n                goto L1;\n            }\n        }\n    }\nL1:\n    for (i = 0; i < n; i++) {\n        if (a[i][min_j] < min) {\n            min = a[i][min_j];\n        }\n    }\n    for (j = 0; j < n; j++) {\n        if (a[min_i][j] < min) {\n            min = a[min_i][j];\n        }\n    }\n    *len = m;\n    int* b = (int*)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            b[i] = 1;\n        } else {\n            b[i] = min;\n        }\n    }\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int** a, int n, int m, int* len)\n{\n    int i, j, min, min_i, min_j;\n    min = n * n;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                min_i = i;\n                min_j = j;\n                goto L1;\n            }\n        }\n    }\nL1:\n    for (i = 0; i < n; i++) {\n        if (a[i][min_j] < min) {\n            min = a[i][min_j];\n        }\n    }\n    for (j = 0; j < n; j++) {\n        if (a[min_i][j] < min) {\n            min = a[min_i][j];\n        }\n    }\n    *len = m;\n    int* b = (int*)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            b[i] = 1;\n        } else {\n            b[i] = min;\n        }\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n)\n{\n  int i;\n  int *p;\n\n  p = (int *) malloc((n+1) * sizeof(int));\n  p[0] = 1;\n  if (n == 0)\n    return p;\n  p[1] = 3;\n  for (i = 2; i <= n; i++)\n    if (i % 2 == 0)\n      p[i] = i/2 + 1;\n    else\n      p[i] = p[i-1] + p[i-2] + 1;\n  return p;\n}",
    "c_func_re_decompile": "int *func0(int n)\n{\n  int i;\n  int *p;\n\n  p = (int *) malloc((n+1) * sizeof(int));\n  p[0] = 1;\n  if (n == 0)\n    return p;\n  p[1] = 3;\n  for (i = 2; i <= n; i++)\n    if (i % 2 == 0)\n      p[i] = i/2 + 1;\n    else\n      p[i] = p[i-1] + p[i-2] + 1 + (i+1)/2;\n  return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n)\n{\n  int i;\n  int *p = (int *)malloc((n+1)*sizeof(int));\n  p[0] = 1;\n  for (i = 1; i <= n; i++)\n    if (i % 2 == 0)\n      p[i] = p[i-1] + p[i/2] + 1;\n    else\n      p[i] = p[i/2] + 1;\n  return p;\n}",
    "c_func_re_decompile": "int *func0(int n)\n{\n  int i;\n  int *p = (int *)malloc((n+1)*sizeof(int));\n  p[0] = 1;\n  if (n == 0)\n    return p;\n  p[1] = 3;\n  for (i = 2; i <= n; i++)\n    if (i % 2 == 0)\n      p[i] = p[i-1] + p[i/2] + 1;\n    else\n      p[i] = p[i/2] + 1;\n  return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n)\n{\n    int i;\n    int *p = (int *)malloc((n + 1) * sizeof(int));\n    p[0] = 1;\n    if (n > 0)\n        p[1] = 3;\n    for (i = 2; i <= n; i++)\n        if (i % 2 == 0)\n            p[i] = i / 2 + 1;\n        else\n            p[i] = p[i - 1] + p[i - 2] + (i + 1) / 2;\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n)\n{\n    int i;\n    int *p = (int *)malloc((n + 1) * sizeof(int));\n    p[0] = 1;\n    if (n > 0)\n        p[1] = 3;\n    for (i = 2; i <= n; i++)\n        if (i % 2 == 0)\n            p[i] = p[i - 1] + p[i - 2] + (i + 1) / 2;\n        else\n            p[i] = i / 2 + 1;\n    return p;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int mul = 1;\n    int flag = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 1) {\n            flag = 1;\n            mul *= digit;\n        }\n        n /= 10;\n    }\n    if (flag) {\n        return mul;\n    } else {\n        return 0;\n    }\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int mul = 1;\n    int flag = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 1) {\n            flag = 1;\n            mul *= digit;\n        }\n        n /= 10;\n    }\n    if (flag) {\n        return mul;\n    } else {\n        return 0;\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
    "c_func_decompile": "\nint *func0(int n)\n{\n    int i;\n    int *p = malloc((n + 1) * sizeof(int));\n    p[0] = 1;\n    for (i = 1; i < n; i++)\n        if (i % 2)\n            p[i] = p[i - 1] + p[i - 2] + (i + 1) / 2 + 1;\n        else\n            p[i] = p[i - 1] + (i + 1) / 2 + 1;\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n)\n{\n    int i;\n    int *p = malloc((n + 1) * sizeof(int));\n    p[0] = 1;\n    if (n)\n        p[1] = 3;\n    for (i = 2; i < n; i++)\n        if (i % 2)\n            p[i] = p[i - 1] + p[i - 2] + (i + 1) / 2 + 1;\n        else\n            p[i] = p[i - 1] + (i + 1) / 2 + 1;\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int result = 1;\n    int last_digit;\n    int odd_digit_found = 0;\n\n    while (n > 0)\n    {\n        last_digit = n % 10;\n        if (last_digit % 2 != 0)\n        {\n            odd_digit_found = 1;\n            result *= last_digit;\n        }\n        n /= 10;\n    }\n\n    if (odd_digit_found)\n        return result;\n    else\n        return 0;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int result = 1;\n    int last_digit;\n    int odd_digit_found = 0;\n\n    while (n > 0)\n    {\n        last_digit = n % 10;\n        if (last_digit % 2 != 0)\n        {\n            odd_digit_found = 1;\n            result *= last_digit;\n        }\n        n /= 10;\n    }\n\n    if (odd_digit_found)\n        return result;\n    else\n        return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(float *x, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++)\n        sum += (int)x[i] * (int)x[i];\n    return sum;\n}",
    "c_func_re_decompile": "int func0(float *x, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++)\n        sum += (int)x[i] * (int)x[i];\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(float *x, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++)\n        sum += (int)ceil(x[i]) * (int)ceil(x[i]);\n    return sum;\n}",
    "c_func_re_decompile": "int func0(float *x, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++)\n        sum += (int)ceil(x[i]) * (int)ceil(x[i]);\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(float *x, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++)\n        sum += (int)(x[i] - (int)x[i]) * (int)(x[i] - (int)x[i]);\n    return sum;\n}",
    "c_func_re_decompile": "int func0(float *x, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++)\n        sum += (int)(x[i] - (int)x[i]) * (int)(x[i] - (int)x[i]);\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int result = 1;\n    int last_digit;\n    int odd_digit_found = 0;\n\n    while (n > 0)\n    {\n        last_digit = n % 10;\n        if (last_digit % 2 != 0)\n        {\n            odd_digit_found = 1;\n            result *= last_digit;\n        }\n        n /= 10;\n    }\n\n    if (odd_digit_found)\n        return result;\n    else\n        return 0;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int result = 1;\n    int last_digit;\n    int odd_digit_found = 0;\n\n    while (n > 0)\n    {\n        last_digit = n % 10;\n        if (last_digit % 2 != 0)\n        {\n            odd_digit_found = 1;\n            result *= last_digit;\n        }\n        n /= 10;\n    }\n\n    if (odd_digit_found)\n        return result;\n    else\n        return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(float *x, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++)\n        sum += (int)(x[i] - (int)x[i]) * (int)(x[i] - (int)x[i]);\n    return sum;\n}",
    "c_func_re_decompile": "int func0(float *x, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++)\n        sum += (int)(x[i] - (int)x[i] + 0.5f) * (int)(x[i] - (int)x[i] + 0.5f);\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n  int i, max = -1;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i-1])\n      max = i;\n  return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n  int i, max = -1;\n  for (i = 1; i < n; i++)\n    if (a[i] < a[i-1])\n      max = i;\n  return max;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, max = -1;\n    for (i = 1; i < n; i++)\n        if (a[i] < a[i-1])\n            max = i;\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, max = -1;\n    for (i = 1; i < n; i++)\n        if (a[i] < a[i-1])\n            max = i;\n    return max;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, max = -1;\n    for (i = 1; i < n; i++)\n        if (a[i] < a[i-1])\n            max = i;\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, max = -1;\n    for (i = 1; i < n; i++)\n        if (a[i] < a[i-1])\n            max = i;\n    return max;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int a, int b, int c, struct s0 *s)\n{\n  if (b > c) {\n    s->a = a + c;\n    s->b = 0;\n  } else {\n    s->a = a + b;\n    s->b = c - b;\n  }\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  if (!((*(const unsigned short *)((const unsigned char *)__ctype_b_loc() + 1) + (unsigned char)s[len - 1]) & (0x10)))\n    return 0;\n  if (len == 1)\n    return 0;\n  if (((*(const unsigned short *)((const unsigned char *)__ctype_b_loc() + 1) + (unsigned char)s[len - 2]) & (0x400)))\n    return 0;\n  return 1;\n}",
    "c_func_re_decompile": "int func0(char *s)\n{\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  if (!((*(const unsigned short *)((const unsigned char *)__ctype_b_loc() + 1) + (unsigned char)s[len - 1]) & (0x400)))\n    return 0;\n  if (len == 1)\n    return 0;\n  if (((*(const unsigned short *)((const unsigned char *)__ctype_b_loc() + 1) + (unsigned char)s[len - 2]) & (0x400)))\n    return 0;\n  return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n  int len;\n  unsigned char c1, c2;\n\n  len = strlen(s);\n  if (len == 0)\n    return 0;\n  c1 = s[len - 1];\n  if (!((((*__ctype_b_loc ())[(int) (c1)] & (02000)) != 0)))\n    return 0;\n  if (len == 1)\n    return 1;\n  c2 = s[len - 2];\n  if (((((*__ctype_b_loc ())[(int) (c2)] & (02000)) != 0)))\n    return 0;\n  return 1;\n}",
    "c_func_re_decompile": "int func0(char *s)\n{\n  int len;\n  unsigned char c1, c2;\n\n  len = strlen(s);\n  if (len == 0)\n    return 0;\n  c1 = s[len - 1];\n  if (!((((*__ctype_b_loc ())[(int) (c1)] & (02000)) != 0)))\n    return 0;\n  if (len == 1)\n    return 1;\n  c2 = s[len - 2];\n  if (((((*__ctype_b_loc ())[(int) (c2)] & (02000)) != 0)))\n    return 0;\n  return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  if (!((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 1]) & (0x10)))\n    return 0;\n  if (len == 1)\n    return 0;\n  if (((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 2]) & (0x400)))\n    return 1;\n  return 0;\n}",
    "c_func_re_decompile": "int func0(char *s)\n{\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  if (!((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 1]) & (0x4)))\n    return 0;\n  if (len == 1)\n    return 0;\n  if (((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 2]) & (0x400)))\n    return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
    "c_func_decompile": "\nint func0(char *s)\n{\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  if (!((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 1]) & (0x10)))\n    return 0;\n  if (len == 1)\n    return 0;\n  if (((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 2]) & (0x400)))\n    return 1;\n  return 0;\n}",
    "c_func_re_decompile": "int func0(char *s)\n{\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  if (!((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 1]) & (0x4)))\n    return 0;\n  if (len == 1)\n    return 0;\n  if (((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 2]) & (0x400)))\n    return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int a, int b, int c, struct s0 *s)\n{\n  if (b > c) {\n    s->a = a + c;\n    s->b = 0;\n  } else {\n    s->a = a + b;\n    s->b = c - b;\n  }\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, j, k;\n    int max = -1;\n\n    for (i = 1; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] > a[i - 1]) {\n                max = i;\n            }\n            if (a[j] > a[i]) {\n                max = j;\n            }\n        }\n    }\n\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, j, k;\n    int max = -1;\n\n    for (i = 1; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] > a[i - 1]) {\n                max = i;\n            }\n            if (a[j] > a[i]) {\n                max = j;\n            }\n        }\n    }\n\n    return max;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int x)\n{\n  if (x % 2 == 0 && x > 7)\n    return 1;\n  else\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int x)\n{\n  if (x % 2 == 0 && x > 7)\n    return 1;\n  else\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
    "c_func_decompile": " void func0(int *a, int n, int *b)\n{\n  int i;\n  int min = 0;\n  int max = 0;\n\n  for (i=0; i<n; i++) {\n    if (a[i] < 0) {\n      if (min == 0 || a[i] < min) {\n        min = a[i];\n      }\n    }\n    if (a[i] > 0) {\n      if (max == 0 || a[i] > max) {\n        max = a[i];\n      }\n    }\n  }\n  b[0] = min;\n  b[1] = max;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n  int i;\n  int min = 0;\n  int max = 0;\n\n  for (i=0; i<n; i++) {\n    if (a[i] < 0) {\n      if (min == 0 || a[i] < min) {\n        min = a[i];\n      }\n    }\n    if (a[i] > 0) {\n      if (max == 0 || a[i] > max) {\n        max = a[i];\n      }\n    }\n  }\n  b[0] = min;\n  b[1] = max;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int x)\n{\n  return (x ^ 1) & (x > 7);\n}",
    "c_func_re_decompile": "int func0(int x)\n{\n  return (x ^ 1) & (x > 7);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int x)\n{\n  if (x < 8)\n    return 0;\n  else\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int x)\n{\n  if (x < 8)\n    return 0;\n  else\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(int x)\n{\n  if (x < 8)\n    return 0;\n  else\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int x)\n{\n  if (x < 8)\n    return 0;\n  else\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n    int i, max, min;\n\n    max = min = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (a[i] > max)\n                max = a[i];\n            else if (max == 0)\n                max = a[i];\n        } else if (a[i] > 0) {\n            if (min == 0 || a[i] < min)\n                min = a[i];\n        }\n    }\n    b[0] = max;\n    b[1] = min;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n    int i, max, min;\n\n    max = min = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (a[i] > max)\n                max = a[i];\n            else if (max == 0)\n                max = a[i];\n        } else if (a[i] > 0) {\n            if (min == 0 || a[i] < min)\n                min = a[i];\n        }\n    }\n    b[0] = max;\n    b[1] = min;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n    int i, max1, max2;\n\n    max1 = max2 = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (max1 < a[i])\n                max1 = a[i];\n            else if (max1 == a[i])\n                max1 = 0;\n        } else if (a[i] > 0) {\n            if (max2 < a[i])\n                max2 = a[i];\n            else if (max2 == a[i])\n                max2 = 0;\n        }\n    }\n    b[0] = max1;\n    b[1] = max2;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n    int i, max1, max2;\n\n    max1 = max2 = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (max1 < a[i])\n                max1 = a[i];\n            else if (max1 == 0)\n                max1 = a[i];\n        } else if (a[i] > 0) {\n            if (max2 < a[i])\n                max2 = a[i];\n            else if (max2 == 0)\n                max2 = a[i];\n        }\n    }\n    b[0] = max1;\n    b[1] = max2;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
    "c_func_decompile": "\nvoid func0(int *a, int n, int *b)\n{\n    int i, max, min;\n\n    max = min = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (a[i] > max || max == 0)\n                max = a[i];\n        } else if (a[i] > 0) {\n            if (a[i] < min || min == 0)\n                min = a[i];\n        }\n    }\n    b[0] = max;\n    b[1] = min;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b)\n{\n    int i, max, min;\n\n    max = min = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (a[i] > max || max == 0)\n                max = a[i];\n        } else if (a[i] > 0) {\n            if (a[i] < min || min == 0)\n                min = a[i];\n        }\n    }\n    b[0] = max;\n    b[1] = min;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
    "c_func_decompile": "\nlong func0(int n)\n{\n    int i;\n    long result = 1;\n\n    for (i = 1; i <= n; i++)\n        result *= i;\n\n    return result;\n}",
    "c_func_re_decompile": "long func0(int n)\n{\n    int i;\n    long result = 1;\n\n    for (i = 1; i <= n; i++)\n        result *= i;\n\n    return result;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
    "c_func_decompile": "\nlong func0(int n)\n{\n    int i;\n    long result = 1;\n\n    for (i = 1; i <= n; i++)\n        result *= i;\n\n    return result;\n}",
    "c_func_re_decompile": "long func0(int n)\n{\n    int i;\n    long result = 1;\n\n    for (i = 1; i <= n; i++)\n        result *= i;\n\n    return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
    "c_func_decompile": "\nlong func0(int n)\n{\n  int i;\n  long a = 1;\n  long b = 1;\n\n  for (i = 1; i <= n; i++)\n    {\n      a *= i;\n      b *= a;\n    }\n\n  return b;\n}",
    "c_func_re_decompile": "long func0(int n)\n{\n  int i;\n  long a = 1;\n  long b = 1;\n\n  for (i = 1; i <= n; i++)\n    {\n      a *= i;\n      b *= a;\n    }\n\n  return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
    "c_func_decompile": "\nlong func0(int n)\n{\n    int i;\n    long result = 1;\n\n    for (i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n\n    return result;\n}",
    "c_func_re_decompile": "long func0(int n)\n{\n    int i;\n    long result = 1;\n\n    for (i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n\n    return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n int i, j, len, count = 0;\n char temp;\n\n len = strlen(str);\n\n for (i = 0; i < len; i++)\n {\n  if (((__ctype_b_loc ()->*__ctype_b_loc ()->_bmask[((unsigned char)(str[i]))]) & (0200)))\n  {\n   if (((__ctype_b_loc ()->*__ctype_b_loc ()->_bmask[((unsigned char)(str[i]))]) & (0100)))\n    str[i] = tolower((unsigned char)str[i]);\n   else if (((__ctype_b_loc ()->*__ctype_b_loc ()->_bmask[((unsigned char)(str[i]))]) & (0400)))\n    str[i] = toupper((unsigned char)str[i]);\n  }\n  else\n   count++;\n }\n\n if (count == len)\n {\n  for (j = 0; j < len / 2; j++)\n  {\n   temp = str[j];\n   str[j] = str[len - j - 1];\n   str[len - j - 1] = temp;\n  }\n }\n\n return str;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int i, j, len;\n    len = strlen(str);\n    for (i = 0, j = len - 1; i < len; i++, j--) {\n        if (((__ctype_b_loc()->_mbbtype[(unsigned char)(str[i])] & (0x400)) != 0)) {\n            if (((__ctype_b_loc()->_mbbtype[(unsigned char)(str[i])] & (0x100)) != 0)) {\n                str[i] = (*__ctype_tolower_loc())[(unsigned char)str[i]];\n            } else if (((__ctype_b_loc()->_mbbtype[(unsigned char)(str[i])] & (0x200)) != 0)) {\n                str[i] = (*__ctype_toupper_loc())[(unsigned char)str[i]];\n            }\n        }\n    }\n    if (i == j) {\n        for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n            char tmp = str[i];\n            str[i] = str[j];\n            str[j] = tmp;\n        }\n    }\n    return str;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
    "c_func_decompile": "\nchar *func0(char *a, char *b)\n{\n    char *s1 = strdup(a);\n    char *s2 = strdup(b);\n    char *p;\n    double d1, d2;\n\n    for (p = s1; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (p = s2; *p; p++)\n        if (*p == ',')\n            *p = '.';\n\n    d1 = strtod(s1, &p);\n    if (*p) {\n        free(s1);\n        free(s2);\n        return \"error\";\n    }\n    d2 = strtod(s2, &p);\n    if (*p) {\n        free(s1);\n        free(s2);\n        return \"error\";\n    }\n\n    free(s1);\n    free(s2);\n\n    if (d1 == d2)\n        return \"equal\";\n    else\n        return d1 > d2 ? a : b;\n}",
    "c_func_re_decompile": "char *func0(char *a, char *b)\n{\n    char *s1 = strdup(a);\n    char *s2 = strdup(b);\n    char *p;\n    double d1, d2;\n\n    for (p = s1; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (p = s2; *p; p++)\n        if (*p == ',')\n            *p = '.';\n\n    d1 = strtod(s1, &p);\n    if (*p) {\n        free(s1);\n        free(s2);\n        return \"error\";\n    }\n    d2 = strtod(s2, &p);\n    if (*p) {\n        free(s1);\n        free(s2);\n        return \"error\";\n    }\n\n    free(s1);\n    free(s2);\n\n    if (d1 == d2)\n        return \"equal\";\n    else\n        return d1 > d2 ? a : b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
    "c_func_decompile": "\nchar *func0(char *a, char *b)\n{\n    char *a1 = strdup(a);\n    char *b1 = strdup(b);\n    char *end;\n    double a2, b2;\n    int i, j;\n\n    for (i = 0; a1[i] != '\\0'; i++)\n        if (a1[i] == ',')\n            a1[i] = '.';\n    for (j = 0; b1[j] != '\\0'; j++)\n        if (b1[j] == ',')\n            b1[j] = '.';\n\n    a2 = strtod(a1, &end);\n    if (*end != '\\0') {\n        free(a1);\n        free(b1);\n        return \"Error\";\n    }\n    b2 = strtod(b1, &end);\n    if (*end != '\\0') {\n        free(a1);\n        free(b1);\n        return \"Error\";\n    }\n    free(a1);\n    free(b1);\n    if (a2 == b2)\n        return \"Equal\";\n    return a2 > b2 ? a : b;\n}",
    "c_func_re_decompile": "char *func0(char *a, char *b)\n{\n    char *a1 = strdup(a);\n    char *b1 = strdup(b);\n    char *end;\n    double a2, b2;\n    int i, j;\n\n    for (i = 0; a1[i] != '\\0'; i++)\n        if (a1[i] == ',')\n            a1[i] = '.';\n    for (j = 0; b1[j] != '\\0'; j++)\n        if (b1[j] == ',')\n            b1[j] = '.';\n\n    a2 = strtod(a1, &end);\n    if (*end != '\\0') {\n        free(a1);\n        free(b1);\n        return \"Error\";\n    }\n    b2 = strtod(b1, &end);\n    if (*end != '\\0') {\n        free(a1);\n        free(b1);\n        return \"Error\";\n    }\n    free(a1);\n    free(b1);\n    if (a2 == b2)\n        return \"Equal\";\n    return a2 > b2 ? a : b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
    "c_func_decompile": "\nchar *func0(char *a, char *b)\n{\n    char *s1 = strdup(a);\n    char *s2 = strdup(b);\n    char *p;\n    double d1, d2;\n\n    for (p = s1; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (p = s2; *p; p++)\n        if (*p == ',')\n            *p = '.';\n\n    d1 = strtod(s1, &p);\n    if (*p) {\n        free(s1);\n        free(s2);\n        return \"error\";\n    }\n    d2 = strtod(s2, &p);\n    if (*p) {\n        free(s1);\n        free(s2);\n        return \"error\";\n    }\n    free(s1);\n    free(s2);\n    if (d1 == d2)\n        return \"equal\";\n    return d1 > d2 ? a : b;\n}",
    "c_func_re_decompile": "char *func0(char *a, char *b)\n{\n    char *s1 = strdup(a);\n    char *s2 = strdup(b);\n    char *p;\n    double d1, d2;\n\n    for (p = s1; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (p = s2; *p; p++)\n        if (*p == ',')\n            *p = '.';\n\n    d1 = strtod(s1, &p);\n    if (*p) {\n        free(s1);\n        free(s2);\n        return \"error\";\n    }\n    d2 = strtod(s2, &p);\n    if (*p) {\n        free(s1);\n        free(s2);\n        return \"error\";\n    }\n    free(s1);\n    free(s2);\n    if (d1 == d2)\n        return \"equal\";\n    return d1 > d2 ? a : b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
    "c_func_decompile": "\nchar *func0(char *a, char *b)\n{\n    char *s1 = strdup(a);\n    char *s2 = strdup(b);\n    char *p;\n    double d1, d2;\n    char *end;\n\n    for (p = s1; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (p = s2; *p; p++)\n        if (*p == ',')\n            *p = '.';\n\n    d1 = strtod(s1, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"error\";\n    }\n    d2 = strtod(s2, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"error\";\n    }\n    free(s1);\n    free(s2);\n\n    if (d1 == d2)\n        return \"equal\";\n    else if (d1 > d2)\n        return a;\n    else\n        return b;\n}",
    "c_func_re_decompile": "char *func0(char *a, char *b)\n{\n    char *s1 = strdup(a);\n    char *s2 = strdup(b);\n    char *p;\n    double d1, d2;\n    char *end;\n\n    for (p = s1; *p; p++)\n        if (*p == ',')\n            *p = '.';\n    for (p = s2; *p; p++)\n        if (*p == ',')\n            *p = '.';\n\n    d1 = strtod(s1, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"error\";\n    }\n    d2 = strtod(s2, &end);\n    if (*end) {\n        free(s1);\n        free(s2);\n        return \"error\";\n    }\n    free(s1);\n    free(s2);\n\n    if (d1 == d2)\n        return \"equal\";\n    else if (d1 > d2)\n        return a;\n    else\n        return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *str1)\n{\n    int i, j, k;\n\n    k = 0;\n    j = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == ' ') {\n            k++;\n        } else {\n            if (k == 1) {\n                str1[j++] = '_';\n            }\n            if (k == 2) {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            if (k > 2) {\n                str1[j++] = '-';\n            }\n            k = 0;\n            str1[j++] = str[i];\n        }\n    }\n    if (k == 1) {\n        str1[j++] = '_';\n    }\n    if (k == 2) {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    if (k > 2) {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1)\n{\n    int i, j, k;\n\n    k = 0;\n    j = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == ' ') {\n            k++;\n        } else {\n            if (k == 1) {\n                str1[j++] = '_';\n            }\n            if (k == 2) {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            if (k > 2) {\n                str1[j++] = '-';\n            }\n            k = 0;\n            str1[j++] = str[i];\n        }\n    }\n    if (k == 1) {\n        str1[j++] = '_';\n    }\n    if (k == 2) {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    if (k > 2) {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *str1)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            switch (l)\n            {\n            case 0:\n                str1[j++] = str[i];\n                break;\n            case 1:\n                str1[j++] = '_';\n                break;\n            case 2:\n                str1[j++] = '_';\n                str1[j++] = '_';\n                break;\n            }\n            l = 0;\n        }\n    }\n    switch (l)\n    {\n    case 0:\n        str1[j++] = str[i];\n        break;\n    case 1:\n        str1[j++] = '_';\n        break;\n    case 2:\n        str1[j++] = '_';\n        str1[j++] = '_';\n        break;\n    }\n    str1[j] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            switch (l)\n            {\n            case 0:\n                str1[j++] = str[i];\n                break;\n            case 1:\n                str1[j++] = '_';\n                break;\n            case 2:\n                str1[j++] = '_';\n                str1[j++] = '_';\n                break;\n            }\n            l = 0;\n        }\n    }\n    switch (l)\n    {\n    case 0:\n        str1[j++] = str[i];\n        break;\n    case 1:\n        str1[j++] = '_';\n        break;\n    case 2:\n        str1[j++] = '_';\n        str1[j++] = '_';\n        break;\n    }\n    str1[j] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            sum += a[i] * a[i];\n        } else if (i % 4 == 0) {\n            sum += a[i] * a[i] * a[i];\n        } else {\n            sum += a[i];\n        }\n    }\n\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0;\n\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            sum += a[i] * a[i];\n        } else if (i % 4 == 0) {\n            sum += a[i] * a[i] * a[i];\n        } else {\n            sum += a[i];\n        }\n    }\n\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0)\n            sum += a[i] * a[i] * a[i];\n        else if (i % 3 == 1)\n            sum += a[i] * a[i];\n        else\n            sum += a[i];\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0)\n            sum += a[i] * a[i] * a[i];\n        else if (i % 3 == 1)\n            sum += a[i] * a[i];\n        else\n            sum += a[i];\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0)\n            sum += a[i] * a[i] * a[i];\n        else\n            sum += a[i] * a[i];\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0)\n            sum += a[i] * a[i] * a[i];\n        else if (i % 4 == 0)\n            sum += a[i] * a[i];\n        else\n            sum += a[i];\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0)\n            sum += a[i] * a[i] * a[i];\n        else\n            sum += a[i] * a[i];\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0)\n            sum += a[i] * a[i] * a[i];\n        else if (i % 4 == 0)\n            sum += a[i] * a[i];\n        else\n            sum += a[i];\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
    "c_func_decompile": "\nchar *func0(char *s)\n{\n  int i, len, num, dot;\n\n  len = strlen(s);\n  if (len < 5)\n    return \"0\";\n  if (s[0] < '[' || s[0] > 'e')\n    return \"0\";\n  if (!strcmp(s + len - 4, \".def\") || !strcmp(s + len - 4, \".DEF\") ||\n      !strcmp(s + len - 4, \".Def\"))\n    return \"0\";\n  num = dot = 0;\n  for (i = 0; i < len - 1; i++)\n    if (s[i] >= '0' && s[i] <= '9')\n      num++;\n    else if (s[i] == '.')\n      dot++;\n  if (num < 4)\n    return \"0\";\n  if (dot == 1)\n    return \"1\";\n  return \"2\";\n}",
    "c_func_re_decompile": "char *func0(char *s)\n{\n  int i, len, num, dot;\n\n  len = strlen(s);\n  if (len < 5)\n    return \"0\";\n  if ((s[0] >= '[' && s[0] <= 'e') || (s[0] >= 'A' && s[0] <= 'Z'))\n    return \"0\";\n  if (!strcmp(s + len - 4, \".def\") || !strcmp(s + len - 4, \".DEF\") ||\n      !strcmp(s + len - 4, \".Def\"))\n    return \"0\";\n  num = dot = 0;\n  for (i = 0; i < len - 1; i++)\n    if (s[i] >= '0' && s[i] <= '9')\n      num++;\n    else if (s[i] == '.')\n      dot++;\n  if (num < 4)\n    return \"0\";\n  if (dot == 1)\n    return \"1\";\n  return \"2\";\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *str1)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            switch (l)\n            {\n            case 0:\n                str1[j++] = str[i];\n                break;\n            case 1:\n                str1[j++] = '_';\n                break;\n            case 2:\n                str1[j++] = '_';\n                str1[j++] = '_';\n                break;\n            }\n            l = 0;\n        }\n    }\n    switch (l)\n    {\n    case 0:\n        str1[j++] = str[i];\n        break;\n    case 1:\n        str1[j++] = '_';\n        break;\n    case 2:\n        str1[j++] = '_';\n        str1[j++] = '_';\n        break;\n    }\n    str1[j] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            switch (l)\n            {\n            case 0:\n                str1[j++] = str[i];\n                break;\n            case 1:\n                str1[j++] = '_';\n                break;\n            case 2:\n                str1[j++] = '-';\n                break;\n            }\n            l = 0;\n        }\n    }\n    switch (l)\n    {\n    case 0:\n        str1[j++] = str[i];\n        break;\n    case 1:\n        str1[j++] = '_';\n        break;\n    case 2:\n        str1[j++] = '-';\n        break;\n    }\n    str1[j] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int i, len, num_digit = 0, num_dot = 0;\n    char *p, c;\n\n    len = strlen(str);\n    if (len < 5)\n        return \"Invalid\";\n\n    c = str[0];\n    if (!((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')))\n        return \"Invalid\";\n\n    p = str + len - 4;\n    if (strcmp(p, \"@163\") && strcmp(p, \"@gmail\") && strcmp(p, \"@hotmail\"))\n        return \"Invalid\";\n\n    for (i = 0; i < len; i++) {\n        if (str[i] >= '0' && str[i] <= '9')\n            num_digit++;\n        if (str[i] == '.')\n            num_dot++;\n    }\n\n    if (num_digit < 4 || num_dot != 1)\n        return \"Invalid\";\n\n    return \"Valid\";\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    int i, len, num_digit = 0, num_dot = 0;\n    char *p, c;\n\n    len = strlen(str);\n    if (len < 5)\n        return \"Invalid\";\n\n    c = str[0];\n    if (!((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')))\n        return \"Invalid\";\n\n    p = str + len - 4;\n    if (strcmp(p, \"@163\") && strcmp(p, \"@gmail\") && strcmp(p, \"@hotmail\"))\n        return \"Invalid\";\n\n    for (i = 0; i < len; i++) {\n        if (str[i] >= '0' && str[i] <= '9')\n            num_digit++;\n        if (str[i] == '.')\n            num_dot++;\n    }\n\n    if (num_digit < 4 || num_dot != 1)\n        return \"Invalid\";\n\n    return \"Valid\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *str1)\n{\n    int i, j, k;\n    j = 0;\n    k = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            str1[j++] = '_';\n        }\n        else if (k == 1)\n        {\n            str1[j++] = '-';\n            str1[j++] = str[i];\n            k = 0;\n        }\n        else if (k == 2)\n        {\n            str1[j++] = '_';\n            str1[j++] = '_';\n            k = 0;\n        }\n        else\n        {\n            str1[j++] = str[i];\n        }\n    }\n    if (k == 1)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    else if (k == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    else\n    {\n        str1[j++] = '_';\n    }\n    if (j > 0)\n    {\n        str1[j] = '\\0';\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1)\n{\n    int i, j, k;\n    j = 0;\n    k = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            k++;\n        }\n        else\n        {\n            if (k == 1)\n            {\n                str1[j++] = '_';\n            }\n            else if (k == 2)\n            {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            else if (k > 2)\n            {\n                str1[j++] = '_';\n                str1[j++] = '-';\n                str1[j++] = str[i];\n            }\n            else\n            {\n                str1[j++] = str[i];\n            }\n            k = 0;\n        }\n    }\n    if (k == 1)\n    {\n        str1[j++] = '_';\n    }\n    else if (k == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    else if (k > 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
    "c_func_decompile": "\nchar *func0(char *s)\n{\n    int i, len, num, dot;\n    char *p;\n\n    len = strlen(s);\n    if (len < 5)\n        return \"0\";\n    if (s[0] < '0' || s[0] > '9')\n        return \"0\";\n    if (s[0] > '9' && s[0] < 'A')\n        return \"0\";\n    if (s[0] > 'Z' && s[0] < 'a')\n        return \"0\";\n    if (s[0] > 'z')\n        return \"0\";\n    if (strcmp(s + len - 4, \"inch\") && strcmp(s + len - 4, \"Inch\") &&\n        strcmp(s + len - 4, \"INCH\"))\n        return \"0\";\n    num = 0;\n    dot = 0;\n    for (i = 0; i < len - 4; i++) {\n        if (s[i] >= '0' && s[i] <= '9')\n            num++;\n        else if (s[i] == '.')\n            dot++;\n    }\n    if (num > 3 || dot != 1)\n        return \"0\";\n    p = s + len - 4;\n    *p = '\\0';\n    return s;\n}",
    "c_func_re_decompile": "char *func0(char *s)\n{\n    int i, len, num, dot;\n    char *p;\n\n    len = strlen(s);\n    if (len < 5)\n        return \"0\";\n    if (s[0] < '[' || s[0] > 'z')\n        return \"0\";\n    if (s[0] > 'Z' && s[0] < 'a')\n        return \"0\";\n    if (s[0] > 'z')\n        return \"0\";\n    if (strcmp(s + len - 4, \"inch\") && strcmp(s + len - 4, \"Inch\") &&\n        strcmp(s + len - 4, \"INCH\"))\n        return \"0\";\n    num = 0;\n    dot = 0;\n    for (i = 0; i < len - 4; i++) {\n        if (s[i] >= '0' && s[i] <= '9')\n            num++;\n        else if (s[i] == '.')\n            dot++;\n    }\n    if (num > 3 || dot != 1)\n        return \"0\";\n    p = s + len - 4;\n    *p = '\\0';\n    return s;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
    "c_func_decompile": "\nchar *func0(char *s)\n{\n  int i, len, num, dot;\n  char *ret;\n\n  len = strlen(s);\n  if (len < 5)\n    return \"0\";\n\n  if (s[0] >= '0' && s[0] <= '9')\n    {\n      ret = \"0\";\n    }\n  else if (s[0] >= 'A' && s[0] <= 'Z')\n    {\n      if (strcmp(s + len - 4, \"inch\") == 0 ||\n   strcmp(s + len - 4, \"inchs\") == 0 ||\n   strcmp(s + len - 4, \"inches\") == 0)\n {\n   ret = \"1\";\n }\n      else\n {\n   ret = \"0\";\n }\n    }\n  else\n    {\n      ret = \"0\";\n    }\n\n  num = 0;\n  dot = 0;\n  for (i = 0; i < len; i++)\n    {\n      if (s[i] >= '0' && s[i] <= '9')\n {\n   num++;\n }\n      else if (s[i] == '.')\n {\n   dot++;\n }\n    }\n\n  if (num < 4)\n    {\n      ret = \"0\";\n    }\n  else if (dot != 1)\n    {\n      ret = \"0\";\n    }\n\n  return ret;\n}",
    "c_func_re_decompile": "char *func0(char *s)\n{\n  int i, len, num, dot;\n  char *ret;\n\n  len = strlen(s);\n  if (len < 5)\n    return \"0\";\n\n  if (s[0] >= '0' && s[0] <= '9')\n    {\n      ret = \"0\";\n    }\n  else if (s[0] >= 'A' && s[0] <= 'Z')\n    {\n      if (strcmp(s + len - 4, \"inch\") == 0 ||\n   strcmp(s + len - 4, \"inchs\") == 0 ||\n   strcmp(s + len - 4, \"inches\") == 0)\n {\n   ret = \"1\";\n }\n      else\n {\n   ret = \"0\";\n }\n    }\n  else\n    {\n      ret = \"0\";\n    }\n\n  num = 0;\n  dot = 0;\n  for (i = 0; i < len; i++)\n    {\n      if (s[i] >= '0' && s[i] <= '9')\n {\n   num++;\n }\n      else if (s[i] == '.')\n {\n   dot++;\n }\n    }\n\n  if (num < 4)\n    {\n      ret = \"0\";\n    }\n  else if (dot != 1)\n    {\n      ret = \"0\";\n    }\n\n  return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *a, char *b)\n{\n    int i, j;\n    char buf[100];\n    long x, y, z, w;\n\n    for (i = 0; a[i] != '/'; i++)\n        buf[i] = a[i];\n    buf[i] = '\\0';\n    x = strtol(buf, NULL, 10);\n    for (j = 0; a[i + 1 + j] != '\\0'; j++)\n        buf[j] = a[i + 1 + j];\n    buf[j] = '\\0';\n    y = strtol(buf, NULL, 10);\n\n    for (i = 0; b[i] != '/'; i++)\n        buf[i] = b[i];\n    buf[i] = '\\0';\n    z = strtol(buf, NULL, 10);\n    for (j = 0; b[i + 1 + j] != '\\0'; j++)\n        buf[j] = b[i + 1 + j];\n    buf[j] = '\\0';\n    w = strtol(buf, NULL, 10);\n\n    return (x * z) % (y * w) == 0;\n}",
    "c_func_re_decompile": "int func0(char *a, char *b)\n{\n    int i, j;\n    char buf[100];\n    long x, y, z, w;\n\n    for (i = 0; a[i] != '/'; i++)\n        buf[i] = a[i];\n    buf[i] = '\\0';\n    x = strtol(buf, NULL, 10);\n    for (j = 0; a[i + 1 + j] != '\\0'; j++)\n        buf[j] = a[i + 1 + j];\n    buf[j] = '\\0';\n    y = strtol(buf, NULL, 10);\n\n    for (i = 0; b[i] != '/'; i++)\n        buf[i] = b[i];\n    buf[i] = '\\0';\n    z = strtol(buf, NULL, 10);\n    for (j = 0; b[i + 1 + j] != '\\0'; j++)\n        buf[j] = b[i + 1 + j];\n    buf[j] = '\\0';\n    w = strtol(buf, NULL, 10);\n\n    return (x * z) % (y * w) == 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i, j, k, l;\n    bool flag;\n\n    l = 0;\n    j = 0;\n    k = 0;\n    i = 0;\n    while (s[i] != '\\0') {\n        if (s[i] != ' ') {\n            l++;\n        } else {\n            flag = true;\n            for (int m = 2; m * m <= l; m++) {\n                if (l % m == 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                if (k > 0) {\n                    t[k++] = ' ';\n                }\n                memcpy(t + k, s + i - l, l);\n                k += l;\n            }\n            l = 0;\n        }\n        i++;\n    }\n    if (l > 1) {\n        flag = true;\n        for (int m = 2; m * m <= l; m++) {\n            if (l % m == 0) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            if (k > 0) {\n                t[k++] = ' ';\n            }\n            memcpy(t + k, s + i - l, l);\n            k += l;\n        }\n    }\n    t[k] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, char *t)\n{\n    int i, j, k, l;\n    bool flag;\n\n    l = 0;\n    j = 0;\n    k = 0;\n    i = 0;\n    while (s[i] != '\\0') {\n        if (s[i] != ' ') {\n            l++;\n        } else {\n            if (l > 1) {\n                flag = true;\n                for (int m = 2; m * m <= l; m++) {\n                    if (l % m == 0) {\n                        flag = false;\n                        break;\n                    }\n                }\n            } else {\n                flag = false;\n            }\n            if (flag) {\n                if (k > 0) {\n                    t[k++] = ' ';\n                }\n                memcpy(t + k, s + i - l, l);\n                k += l;\n            }\n            l = 0;\n        }\n        i++;\n    }\n    if (l > 1) {\n        flag = true;\n        for (int m = 2; m * m <= l; m++) {\n            if (l % m == 0) {\n                flag = false;\n                break;\n            }\n        }\n    } else {\n        flag = false;\n    }\n    if (flag) {\n        if (k > 0) {\n            t[k++] = ' ';\n        }\n        memcpy(t + k, s + i - l, l);\n        k += l;\n    }\n    t[k] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *a, char *b)\n{\n    int i, j;\n    int a1, a2, b1, b2;\n    char buf[128], buf2[128];\n\n    i = 0;\n    while (a[i] != '/') {\n        buf[i] = a[i];\n        i++;\n    }\n    buf[i] = '\\0';\n    a1 = atoi(buf);\n\n    j = 0;\n    i++;\n    while (a[i] != '\\0') {\n        buf2[j] = a[i];\n        i++;\n        j++;\n    }\n    buf2[j] = '\\0';\n    a2 = atoi(buf2);\n\n    i = 0;\n    while (b[i] != '/') {\n        buf[i] = b[i];\n        i++;\n    }\n    buf[i] = '\\0';\n    b1 = atoi(buf);\n\n    j = 0;\n    i++;\n    while (b[i] != '\\0') {\n        buf2[j] = b[i];\n        i++;\n        j++;\n    }\n    buf2[j] = '\\0';\n    b2 = atoi(buf2);\n\n    if (a1 * b1 % (b2 * a2) == 0)\n        return 1;\n    else\n        return 0;\n}",
    "c_func_re_decompile": "int func0(char *a, char *b)\n{\n    int i, j;\n    int a1, a2, b1, b2;\n    char buf[128], buf2[128];\n\n    i = 0;\n    while (a[i] != '/') {\n        buf[i] = a[i];\n        i++;\n    }\n    buf[i] = '\\0';\n    a1 = atoi(buf);\n\n    j = 0;\n    i++;\n    while (a[i] != '\\0') {\n        buf2[j] = a[i];\n        i++;\n        j++;\n    }\n    buf2[j] = '\\0';\n    a2 = atoi(buf2);\n\n    i = 0;\n    while (b[i] != '/') {\n        buf[i] = b[i];\n        i++;\n    }\n    buf[i] = '\\0';\n    b1 = atoi(buf);\n\n    j = 0;\n    i++;\n    while (b[i] != '\\0') {\n        buf2[j] = b[i];\n        i++;\n        j++;\n    }\n    buf2[j] = '\\0';\n    b2 = atoi(buf2);\n\n    if (a1 * b1 % (b2 * a2) == 0)\n        return 1;\n    else\n        return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            if (a[i] / 10 % 2 == 1 && a[i] % 10 % 2 == 1)\n                count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            if (a[i] / 10 % 2 == 1 && a[i] % 10 % 2 == 1)\n                count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i, j, k, l;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (j > 1) {\n                l = j;\n                if (j > 3) {\n                    for (j = 2; j * j <= l; j++) {\n                        if (l % j == 0) {\n                            l = 0;\n                            break;\n                        }\n                    }\n                }\n                if (l != 0) {\n                    if (k != 0) {\n                        t[k++] = ' ';\n                    }\n                    memcpy(t + k, s + i - j, j);\n                    k += j;\n                }\n            }\n            j = 0;\n        } else {\n            j++;\n        }\n        i++;\n    }\n    if (j > 1) {\n        l = j;\n        if (j > 3) {\n            for (j = 2; j * j <= l; j++) {\n                if (l % j == 0) {\n                    l = 0;\n                    break;\n                }\n            }\n        }\n        if (l != 0) {\n            if (k != 0) {\n                t[k++] = ' ';\n            }\n            memcpy(t + k, s + i - j, j);\n            k += j;\n        }\n    }\n    t[k] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, char *t)\n{\n    int i, j, k, l;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (j > 1) {\n                l = j;\n                if (j > 3) {\n                    for (j = 2; j * j <= l; j++) {\n                        if (l % j == 0) {\n                            l = 0;\n                            break;\n                        }\n                    }\n                }\n                if (l != 0) {\n                    if (k != 0) {\n                        t[k++] = ' ';\n                    }\n                    memcpy(t + k, s + i - j, j);\n                    k += j;\n                }\n            }\n            j = 0;\n        } else {\n            j++;\n        }\n        i++;\n    }\n    if (j > 1) {\n        l = j;\n        if (j > 3) {\n            for (j = 2; j * j <= l; j++) {\n                if (l % j == 0) {\n                    l = 0;\n                    break;\n                }\n            }\n        }\n        if (l != 0) {\n            if (k != 0) {\n                t[k++] = ' ';\n            }\n            memcpy(t + k, s + i - j, j);\n            k += j;\n        }\n    }\n    t[k] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            while (a[i] >= 100) {\n                a[i] /= 10;\n            }\n            if (a[i] % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            while (a[i] >= 100) {\n                a[i] /= 10;\n            }\n            if (a[i] % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
    "c_func_decompile": " int func0(int *a, int n)\n{\n  int i, j, k, l, m, o;\n  o = 0;\n  for (i=0; i<n; i++) {\n    if (a[i] > 10) {\n      j = a[i] % 10;\n      k = a[i];\n      while (k > 9) {\n        k = k / 10;\n        l = k % 10;\n        if (l % 2 == 1) {\n          if (j % 2 == 1) {\n            o++;\n            break;\n          }\n        }\n      }\n    }\n  }\n  return o;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n  int i, j, k, l, m, o;\n  o = 0;\n  for (i=0; i<n; i++) {\n    if (a[i] > 10) {\n      j = a[i] % 10;\n      k = a[i];\n      while (k > 9) {\n        k = k / 10;\n        l = k % 10;\n        if (l % 2 == 1) {\n          if (j % 2 == 1) {\n            o++;\n            break;\n          }\n        }\n      }\n    }\n  }\n  return o;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "\nint func0(int *a, int n)\n{\n    int i, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            while (a[i] >= 100) {\n                a[i] /= 10;\n            }\n            if (a[i] % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n)\n{\n    int i, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            while (a[i] >= 100) {\n                a[i] /= 10;\n            }\n            if (a[i] % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *a, char *b)\n{\n    int i, j;\n    char buf1[128], buf2[128], buf3[128], buf4[128];\n    long x, y, z, w;\n\n    for (i = 0; a[i] != '/'; i++)\n        buf1[i] = a[i];\n    buf1[i] = '\\0';\n    x = strtol(buf1, NULL, 10);\n\n    for (j = 0; a[i] != '\\0'; i++, j++)\n        buf2[j] = a[i];\n    buf2[j] = '\\0';\n    y = strtol(buf2, NULL, 10);\n\n    for (i = 0; b[i] != '/'; i++)\n        buf3[i] = b[i];\n    buf3[i] = '\\0';\n    z = strtol(buf3, NULL, 10);\n\n    for (j = 0; b[i] != '\\0'; i++, j++)\n        buf4[j] = b[i];\n    buf4[j] = '\\0';\n    w = strtol(buf4, NULL, 10);\n\n    if (x * w % (y * z) == 0)\n        return 1;\n    else\n        return 0;\n}",
    "c_func_re_decompile": "int func0(char *a, char *b)\n{\n    int i, j;\n    char buf1[128], buf2[128], buf3[128], buf4[128];\n    long x, y, z, w;\n\n    for (i = 0; a[i] != '/'; i++)\n        buf1[i] = a[i];\n    buf1[i] = '\\0';\n    x = strtol(buf1, NULL, 10);\n\n    for (j = 0; a[i] != '\\0'; i++, j++)\n        buf2[j] = a[i];\n    buf2[j] = '\\0';\n    y = strtol(buf2, NULL, 10);\n\n    for (i = 0; b[i] != '/'; i++)\n        buf3[i] = b[i];\n    buf3[i] = '\\0';\n    z = strtol(buf3, NULL, 10);\n\n    for (j = 0; b[i] != '\\0'; i++, j++)\n        buf4[j] = b[i];\n    buf4[j] = '\\0';\n    w = strtol(buf4, NULL, 10);\n\n    if (x * w % (y * z) == 0)\n        return 1;\n    else\n        return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(char *a, char *b)\n{\n    int i, j;\n    char buf1[128], buf2[128], buf3[128], buf4[128];\n    long x, y, z, w;\n\n    for (i = 0; a[i] != '/'; i++)\n        buf1[i] = a[i];\n    buf1[i] = '\\0';\n    x = strtol(buf1, NULL, 10);\n\n    for (j = 0; a[i] != '\\0'; i++, j++)\n        buf2[j] = a[i];\n    buf2[j] = '\\0';\n    y = strtol(buf2, NULL, 10);\n\n    for (i = 0; b[i] != '/'; i++)\n        buf3[i] = b[i];\n    buf3[i] = '\\0';\n    z = strtol(buf3, NULL, 10);\n\n    for (j = 0; b[i] != '\\0'; i++, j++)\n        buf4[j] = b[i];\n    buf4[j] = '\\0';\n    w = strtol(buf4, NULL, 10);\n\n    if (x * w % (y * z) == 0)\n        return 1;\n    else\n        return 0;\n}",
    "c_func_re_decompile": "int func0(char *a, char *b)\n{\n    int i, j;\n    char buf1[128], buf2[128], buf3[128], buf4[128];\n    long x, y, z, w;\n\n    for (i = 0; a[i] != '/'; i++)\n        buf1[i] = a[i];\n    buf1[i] = '\\0';\n    x = strtol(buf1, NULL, 10);\n\n    for (j = 0; a[i] != '\\0'; i++, j++)\n        buf2[j] = a[i];\n    buf2[j] = '\\0';\n    y = strtol(buf2, NULL, 10);\n\n    for (i = 0; b[i] != '/'; i++)\n        buf3[i] = b[i];\n    buf3[i] = '\\0';\n    z = strtol(buf3, NULL, 10);\n\n    for (j = 0; b[i] != '\\0'; i++, j++)\n        buf4[j] = b[i];\n    buf4[j] = '\\0';\n    w = strtol(buf4, NULL, 10);\n\n    if (x * w % (y * z) == 0)\n        return 1;\n    else\n        return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *s, char *t)\n{\n    int i, j, k, l;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (j > 1) {\n                l = j;\n                if (j > 3) {\n                    for (j = 2; j * j <= l; j++) {\n                        if (l % j == 0) {\n                            l = 0;\n                            break;\n                        }\n                    }\n                }\n                if (l != 0) {\n                    if (k != 0) {\n                        t[k++] = ' ';\n                    }\n                    memcpy(t + k, s + i - j, j);\n                    k += j;\n                }\n            }\n            j = 0;\n        } else {\n            j++;\n        }\n        i++;\n    }\n    if (j > 1) {\n        l = j;\n        if (j > 3) {\n            for (j = 2; j * j <= l; j++) {\n                if (l % j == 0) {\n                    l = 0;\n                    break;\n                }\n            }\n        }\n        if (l != 0) {\n            if (k != 0) {\n                t[k++] = ' ';\n            }\n            memcpy(t + k, s + i - j, j);\n            k += j;\n        }\n    }\n    t[k] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, char *t)\n{\n    int i, j, k, l;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (j > 1) {\n                l = j;\n                if (j > 3) {\n                    for (j = 2; j * j <= l; j++) {\n                        if (l % j == 0) {\n                            l = 0;\n                            break;\n                        }\n                    }\n                }\n                if (l != 0) {\n                    if (k != 0) {\n                        t[k++] = ' ';\n                    }\n                    memcpy(t + k, s + i - j, j);\n                    k += j;\n                }\n            }\n            j = 0;\n        } else {\n            j++;\n        }\n        i++;\n    }\n    if (j > 1) {\n        l = j;\n        if (j > 3) {\n            for (j = 2; j * j <= l; j++) {\n                if (l % j == 0) {\n                    l = 0;\n                    break;\n                }\n            }\n        }\n        if (l != 0) {\n            if (k != 0) {\n                t[k++] = ' ';\n            }\n            memcpy(t + k, s + i - j, j);\n            k += j;\n        }\n    }\n    t[k] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n)\n{\n    int i, j, k, sum, temp;\n    int* b = (int*)malloc(n * sizeof(int));\n    char str[12];\n\n    for (i = 0; i < n; i++) {\n        sprintf(str, \"%d\", a[i] > 0 ? a[i] : -a[i]);\n        sum = 0;\n        for (k = strlen(str), j = 1; j < k; j++)\n            sum += str[j] - '0';\n        if (a[i] > 0)\n            sum += str[0] - '0';\n        else\n            sum -= str[0] - '0';\n        b[i] = sum;\n    }\n\n    for (i = 0; i < n; i++)\n        for (j = 1; j < n; j++)\n            if (b[j - 1] > b[j]) {\n                temp = b[j];\n                b[j] = b[j - 1];\n                b[j - 1] = temp;\n                temp = a[j];\n                a[j] = a[j - 1];\n                a[j - 1] = temp;\n            }\n\n    free(b);\n    return a;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n)\n{\n    int i, j, k, sum, temp;\n    int* b = (int*)malloc(n * sizeof(int));\n    char str[12];\n\n    for (i = 0; i < n; i++) {\n        sprintf(str, \"%d\", a[i] > 0 ? a[i] : -a[i]);\n        sum = 0;\n        for (k = strlen(str), j = 1; j < k; j++)\n            sum += str[j] - '0';\n        if (a[i] > 0)\n            sum += str[0] - '0';\n        else\n            sum -= str[0] - '0';\n        b[i] = sum;\n    }\n\n    for (i = 0; i < n; i++)\n        for (j = 1; j < n; j++)\n            if (b[j - 1] > b[j]) {\n                temp = b[j];\n                b[j] = b[j - 1];\n                b[j - 1] = temp;\n                temp = a[j];\n                a[j] = a[j - 1];\n                a[j - 1] = temp;\n            }\n\n    free(b);\n    return a;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n)\n{\n    int i, j, k, t;\n    int* b = (int*)malloc(n * sizeof(int));\n    char s[12];\n    for (i = 0; i < n; i++) {\n        t = a[i];\n        if (t < 0)\n            t = -t;\n        __sprintf_chk(s, 1, 12, \"%d\", t);\n        for (j = 0, k = 0; j < strlen(s); j++)\n            k = k * 10 + s[j] - '0';\n        if (a[i] > 0)\n            b[i] = k;\n        else\n            b[i] = -k;\n    }\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n - 1; j++)\n            if (b[j] < b[j + 1]) {\n                t = b[j];\n                b[j] = b[j + 1];\n                b[j + 1] = t;\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    free(b);\n    return a;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n)\n{\n    int i, j, k, t;\n    int* b = (int*)malloc(n * sizeof(int));\n    char s[12];\n    for (i = 0; i < n; i++) {\n        t = a[i];\n        if (t < 0)\n            t = -t;\n        __sprintf_chk(s, 1, 12, \"%d\", t);\n        for (j = 0, k = 0; j < strlen(s); j++)\n            k = k * 10 + s[j] - '0';\n        if (a[i] > 0)\n            b[i] = k;\n        else\n            b[i] = -k;\n    }\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n - 1; j++)\n            if (b[j] < b[j + 1]) {\n                t = b[j];\n                b[j] = b[j + 1];\n                b[j + 1] = t;\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    free(b);\n    return a;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
    "c_func_decompile": "\nint* func0(int* a, int n)\n{\n    int i, j, k, l, m, t;\n    int* b = (int*)malloc(n * sizeof(int));\n    char s[12];\n    for (i = 0; i < n; i++) {\n        m = a[i] > 0 ? a[i] : -a[i];\n        __sprintf_chk(s, 1, 12, \"%d\", m);\n        l = strlen(s);\n        t = 0;\n        for (j = 1; j < l; j++)\n            t = t * 10 + s[j] - '0';\n        if (a[i] > 0)\n            b[i] = t + s[0] - '0';\n        else\n            b[i] = -(t + s[0] - '0');\n    }\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n    free(b);\n    return a;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n)\n{\n    int i, j, k, l, m, t;\n    int* b = (int*)malloc(n * sizeof(int));\n    char s[12];\n    for (i = 0; i < n; i++) {\n        m = a[i] > 0 ? a[i] : -a[i];\n        __sprintf_chk(s, 1, 12, \"%d\", m);\n        l = strlen(s);\n        t = 0;\n        for (j = 1; j < l; j++)\n            t = t * 10 + s[j] - '0';\n        if (a[i] > 0)\n            b[i] = t + s[0] - '0';\n        else\n            b[i] = -(t + s[0] - '0');\n    }\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n    free(b);\n    return a;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *a, char *b, int *c)\n{\n    char *str[] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n    int i, j, k, l;\n    char **p;\n\n    i = -1;\n    j = -1;\n    for (k = 0; k < 8; k++) {\n        if (!strcmp(str[k], a))\n            i = k;\n        if (!strcmp(str[k], b))\n            j = k;\n    }\n    if (i == -1 || j == -1 || i == j) {\n        *c = 0;\n        return NULL;\n    }\n    if (i > j) {\n        l = i;\n        i = j;\n        j = l;\n    }\n    *c = j - i - 1;\n    if (*c <= 0) {\n        *c = 0;\n        return NULL;\n    }\n    p = (char **)malloc(*c * sizeof(char *));\n    for (k = i + 1; k < j; k++)\n        p[k - i - 1] = str[k];\n    return p;\n}",
    "c_func_re_decompile": "char **func0(char *a, char *b, int *c)\n{\n    char *str[] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n    int i, j, k, l;\n    char **p;\n\n    i = -1;\n    j = -1;\n    for (k = 0; k < 8; k++) {\n        if (!strcmp(str[k], a))\n            i = k;\n        if (!strcmp(str[k], b))\n            j = k;\n    }\n    if (i == -1 || j == -1 || i == j) {\n        *c = 0;\n        return NULL;\n    }\n    if (i > j) {\n        l = i;\n        i = j;\n        j = l;\n    }\n    *c = j - i - 1;\n    if (*c <= 0) {\n        *c = 0;\n        return NULL;\n    }\n    p = (char **)malloc(*c * sizeof(char *));\n    for (k = i + 1; k < j; k++)\n        p[k - i - 1] = str[k];\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *a, char *b, int *c)\n{\n    char *s[] = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\n    int i, j, k;\n    char **r;\n\n    i = -1;\n    j = -1;\n    for (k = 0; k < 8; k++) {\n        if (!strcmp(s[k], a))\n            i = k;\n        if (!strcmp(s[k], b))\n            j = k;\n    }\n    if (i == -1 || j == -1 || i == j) {\n        *c = 0;\n        return NULL;\n    }\n    if (i > j) {\n        k = i;\n        i = j;\n        j = k;\n    }\n    *c = j - i - 1;\n    if (*c <= 0)\n        return NULL;\n    r = (char **) malloc(*c * sizeof(char *));\n    for (k = i + 1; k < j; k++)\n        r[k - i - 1] = s[k];\n    return r;\n}",
    "c_func_re_decompile": "char **func0(char *a, char *b, int *c)\n{\n    char *s[] = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\n    int i, j, k;\n    char **r;\n\n    i = -1;\n    j = -1;\n    for (k = 0; k < 8; k++) {\n        if (!strcmp(s[k], a))\n            i = k;\n        if (!strcmp(s[k], b))\n            j = k;\n    }\n    if (i == -1 || j == -1 || i == j) {\n        *c = 0;\n        return NULL;\n    }\n    if (i > j) {\n        k = i;\n        i = j;\n        j = k;\n    }\n    *c = j - i - 1;\n    if (*c <= 0)\n        return NULL;\n    r = (char **) malloc(*c * sizeof(char *));\n    for (k = i + 1; k < j; k++)\n        r[k - i - 1] = s[k];\n    return r;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
    "c_func_decompile": "\nint* func0(int* arr, int len)\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int* arr2 = (int*)malloc(len * sizeof(int));\n    for (i = 0; i < len; i++) {\n        char buf[12];\n        int sum = 0;\n        __sprintf_chk(buf, 1, 12, \"%d\", (arr[i] > 0 ? arr[i] : -arr[i]));\n        for (j = 0; j < strlen(buf) - 1; j++) {\n            sum += buf[j] - '0';\n        }\n        arr2[i] = (arr[i] > 0 ? sum + (buf[0] - '0') : sum - (buf[0] - '0'));\n    }\n    for (i = 0; i < len; i++) {\n        for (j = 1; j < len; j++) {\n            if (arr2[j - 1] > arr2[j]) {\n                int tmp = arr2[j - 1];\n                arr2[j - 1] = arr2[j];\n                arr2[j] = tmp;\n                tmp = arr[j - 1];\n                arr[j - 1] = arr[j];\n                arr[j] = tmp;\n            }\n        }\n    }\n    free(arr2);\n    return arr;\n}",
    "c_func_re_decompile": "int* func0(int* arr, int len)\n{\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int* arr2 = (int*)malloc(len * sizeof(int));\n    for (i = 0; i < len; i++) {\n        char buf[12];\n        int sum = 0;\n        __sprintf_chk(buf, 1, 12, \"%d\", (arr[i] > 0 ? arr[i] : -arr[i]));\n        for (j = 0; j < strlen(buf) - 1; j++) {\n            sum += buf[j] - '0';\n        }\n        arr2[i] = (arr[i] > 0 ? sum + (buf[0] - '0') : sum - (buf[0] - '0'));\n    }\n    for (i = 0; i < len; i++) {\n        for (j = 1; j < len; j++) {\n            if (arr2[j - 1] > arr2[j]) {\n                int tmp = arr2[j - 1];\n                arr2[j - 1] = arr2[j];\n                arr2[j] = tmp;\n                tmp = arr[j - 1];\n                arr[j - 1] = arr[j];\n                arr[j] = tmp;\n            }\n        }\n    }\n    free(arr2);\n    return arr;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *a, char *b, int *c)\n{\n    char *s[] = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\n    int i, j, k, l, m;\n    char **r;\n\n    i = -1;\n    j = -1;\n    for (k = 0; k < 8; k++) {\n        if (!strcmp(s[k], a))\n            i = k;\n        if (!strcmp(s[k], b))\n            j = k;\n    }\n    if (i == -1 || j == -1 || i == j) {\n        *c = 0;\n        return NULL;\n    }\n    if (i > j) {\n        l = i;\n        i = j;\n        j = l;\n    }\n    *c = j - i - 1;\n    if (*c <= 0) {\n        *c = 0;\n        return NULL;\n    }\n    r = (char **) malloc(*c * sizeof(char *));\n    for (k = 0, l = i + 1; l < j; k++, l++)\n        r[k] = s[l];\n    return r;\n}",
    "c_func_re_decompile": "char **func0(char *a, char *b, int *c)\n{\n    char *s[] = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\n    int i, j, k, l, m;\n    char **r;\n\n    i = -1;\n    j = -1;\n    for (k = 0; k < 8; k++) {\n        if (!strcmp(s[k], a))\n            i = k;\n        if (!strcmp(s[k], b))\n            j = k;\n    }\n    if (i == -1 || j == -1 || i == j) {\n        *c = 0;\n        return NULL;\n    }\n    if (i > j) {\n        l = i;\n        i = j;\n        j = l;\n    }\n    *c = j - i - 1;\n    if (*c <= 0) {\n        *c = 0;\n        return NULL;\n    }\n    r = (char **) malloc(*c * sizeof(char *));\n    for (k = 0, l = i + 1; l < j; k++, l++)\n        r[k] = s[l];\n    return r;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
    "c_func_decompile": "\nvoid func0(char *str, char *str1)\n{\n    int i, j, k, l, m, n;\n    i = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    while (str[i] != '\\0')\n    {\n        if (str[i] == ' ')\n        {\n            if (j > 1)\n            {\n                if (j > 3)\n                {\n                    for (k = 2; k * k <= j; k++)\n                    {\n                        if (j % k == 0)\n                        {\n                            j = 0;\n                            break;\n                        }\n                    }\n                    if (j != 0)\n                    {\n                        if (m > 0)\n                        {\n                            str1[m] = ' ';\n                            m++;\n                        }\n                        memcpy(str1 + m, str + i - j, j);\n                        m = m + j;\n                        j = 0;\n                    }\n                }\n                else\n                {\n                    if (m > 0)\n                    {\n                        str1[m] = ' ';\n                        m++;\n                    }\n                    memcpy(str1 + m, str + i - j, j);\n                    m = m + j;\n                    j = 0;\n                }\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        else\n        {\n            j++;\n        }\n        i++;\n    }\n    if (j > 1)\n    {\n        if (j > 3)\n        {\n            for (k = 2; k * k <= j; k++)\n            {\n                if (j % k == 0)\n                {\n                    j = 0;\n                    break;\n                }\n            }\n            if (j != 0)\n            {\n                if (m > 0)\n                {\n                    str1[m] = ' ';\n                    m++;\n                }\n                memcpy(str1 + m, str + i - j, j);\n                m = m + j;\n                j = 0;\n            }\n        }\n        else\n        {\n            if (m > 0)\n            {\n                str1[m] = ' ';\n                m++;\n            }\n            memcpy(str1 + m, str + i - j, j);\n            m = m + j;\n            j = 0;\n        }\n    }\n    str1[m] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1)\n{\n    int i, j, k, l, m, n;\n    i = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    while (str[i] != '\\0')\n    {\n        if (str[i] == ' ')\n        {\n            if (j > 1)\n            {\n                if (j > 3)\n                {\n                    for (k = 2; k * k <= j; k++)\n                    {\n                        if (j % k == 0)\n                        {\n                            j = 0;\n                            break;\n                        }\n                    }\n                    if (j != 0)\n                    {\n                        if (m > 0)\n                        {\n                            str1[m] = ' ';\n                            m++;\n                        }\n                        memcpy(str1 + m, str + i - j, j);\n                        m = m + j;\n                        j = 0;\n                    }\n                }\n                else\n                {\n                    if (m > 0)\n                    {\n                        str1[m] = ' ';\n                        m++;\n                    }\n                    memcpy(str1 + m, str + i - j, j);\n                    m = m + j;\n                    j = 0;\n                }\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        else\n        {\n            j++;\n        }\n        i++;\n    }\n    if (j > 1)\n    {\n        if (j > 3)\n        {\n            for (k = 2; k * k <= j; k++)\n            {\n                if (j % k == 0)\n                {\n                    j = 0;\n                    break;\n                }\n            }\n            if (j != 0)\n            {\n                if (m > 0)\n                {\n                    str1[m] = ' ';\n                    m++;\n                }\n                memcpy(str1 + m, str + i - j, j);\n                m = m + j;\n                j = 0;\n            }\n        }\n        else\n        {\n            if (m > 0)\n            {\n                str1[m] = ' ';\n                m++;\n            }\n            memcpy(str1 + m, str + i - j, j);\n            m = m + j;\n            j = 0;\n        }\n    }\n    str1[m] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int n, int a, int b)\n{\n    int i, flag = 1;\n    if (n <= 1)\n        flag = 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            flag = 0;\n    return flag ? a : b;\n}",
    "c_func_re_decompile": "int func0(int n, int a, int b)\n{\n    int i, flag = 1;\n    if (n <= 1)\n        flag = 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            flag = 0;\n    return flag ? a : b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int n, int a, int b)\n{\n    int i, flag = 0;\n    if (n > 1)\n        flag = 1;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            flag = 0;\n    if (flag)\n        return a;\n    else\n        return b;\n}",
    "c_func_re_decompile": "int func0(int n, int a, int b)\n{\n    int i, flag = 0;\n    if (n > 1)\n        flag = 1;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            flag = 0;\n    if (flag)\n        return a;\n    else\n        return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int n, int a, int b)\n{\n    int i, flag = 0;\n    if (n < 2)\n        flag = 1;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            flag = 0;\n    if (flag)\n        return a;\n    else\n        return b;\n}",
    "c_func_re_decompile": "int func0(int n, int a, int b)\n{\n    int i, flag = 0;\n    if (n < 2)\n        flag = 1;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            flag = 0;\n    if (flag)\n        return a;\n    else\n        return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
    "c_func_decompile": "\nint func0(int n, int a, int b)\n{\n    int i;\n    int flag = 0;\n    if (n < 2)\n        flag = 1;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            flag = 1;\n    if (flag)\n        return a;\n    else\n        return b;\n}",
    "c_func_re_decompile": "int func0(int n, int a, int b)\n{\n    int i;\n    int flag = 0;\n    if (n < 2)\n        flag = 1;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            flag = 0;\n    if (flag)\n        return a;\n    else\n        return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nchar ** func0(char ** arr, int n, int * len)\n{\n    *len = 0;\n    for (int i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*len] = arr[i];\n            (*len)++;\n        }\n    }\n\n    for (int i = 0; i < *len - 1; i++) {\n        for (int j = 0; j < *len - 1 - i; j++) {\n            if (strlen(arr[j]) > strlen(arr[j + 1]) ||\n                (strlen(arr[j]) == strlen(arr[j + 1]) &&\n                 strcmp(arr[j], arr[j + 1]) > 0)) {\n                char * tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n\n    char ** ret = (char **)malloc(sizeof(char *) * (*len));\n    for (int i = 0; i < *len; i++) {\n        ret[i] = arr[i];\n    }\n    return ret;\n}",
    "c_func_re_decompile": "char ** func0(char ** arr, int n, int * len)\n{\n    *len = 0;\n    for (int i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*len] = arr[i];\n            (*len)++;\n        }\n    }\n\n    for (int i = 0; i < *len - 1; i++) {\n        for (int j = 0; j < *len - 1 - i; j++) {\n            if (strlen(arr[j]) > strlen(arr[j + 1]) ||\n                (strlen(arr[j]) == strlen(arr[j + 1]) &&\n                 strcmp(arr[j], arr[j + 1]) > 0)) {\n                char * tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n\n    char ** ret = (char **)malloc(sizeof(char *) * (*len));\n    for (int i = 0; i < *len; i++) {\n        ret[i] = arr[i];\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nchar ** func0(char ** arr, int n, int * m)\n{\n    int i, j;\n    char ** ret;\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*m] = arr[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            size_t len1 = strlen(arr[j]);\n            size_t len2 = strlen(arr[j + 1]);\n            if (len1 > len2 || (len1 == len2 && strcmp(arr[j], arr[j + 1]) > 0)) {\n                char * tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    ret = (char **)malloc(sizeof(char *) * (*m));\n    for (i = 0; i < *m; i++) {\n        ret[i] = arr[i];\n    }\n    return ret;\n}",
    "c_func_re_decompile": "char ** func0(char ** arr, int n, int * m)\n{\n    int i, j;\n    char ** ret;\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*m] = arr[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            size_t len1 = strlen(arr[j]);\n            size_t len2 = strlen(arr[j + 1]);\n            if (len1 > len2 || (len1 == len2 && strcmp(arr[j], arr[j + 1]) > 0)) {\n                char * tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    ret = (char **)malloc(sizeof(char *) * (*m));\n    for (i = 0; i < *m; i++) {\n        ret[i] = arr[i];\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
    "c_func_decompile": " void func0(int *a, int *b, int *c, int n)\n{\n  int i;\n  for (i=0; i<n; i++)\n    c[i] = abs(a[i]-b[i]);\n}",
    "c_func_re_decompile": "void func0(int *a, int *b, int *c, int n)\n{\n  int i;\n  for (i=0; i<n; i++)\n    c[i] = abs(a[i]-b[i]);\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nlong func0(float *x, int n)\n{\n    int i;\n    long sum = 0;\n\n    for (i = 0; i < n; i++)\n        if (fabs(x[i] - round(x[i])) < 0.000001 && x[i] > 0 && (int)round(x[i]) % 2 == 1)\n            sum += (int)round(x[i]) * (int)round(x[i]);\n\n    return sum;\n}",
    "c_func_re_decompile": "long func0(float *x, int n)\n{\n    int i;\n    long sum = 0;\n\n    for (i = 0; i < n; i++)\n        if (fabs(x[i] - round(x[i])) < 0.000001 && x[i] > 0 && (int)round(x[i]) % 2 == 1)\n            sum += (int)round(x[i]) * (int)round(x[i]);\n\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nlong func0(float *a, int n)\n{\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.00001 && x > 0 && (int)y % 2 == 1) {\n            sum += y * y;\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "long func0(float *a, int n)\n{\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.00001 && x > 0 && (int)y % 2 == 1) {\n            sum += (long)y * (long)y;\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nlong func0(float *a, int n)\n{\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.000001 && x > 0 && (int)y % 2 == 1) {\n            sum += y * y;\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "long func0(float *a, int n)\n{\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.000001 && x > 0 && (int)y % 2 == 1) {\n            sum += (int)y * (int)y;\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n    int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    int *a, **b, **c;\n\n    a = (int *) malloc(n * sizeof(int));\n    b = (int **) malloc((n + 1) * sizeof(int *));\n    c = (int **) malloc((n + 1) * sizeof(int *));\n    for (i = 0; i <= n; i++) {\n b[i] = (int *) calloc(3, sizeof(int));\n c[i] = (int *) calloc(3, sizeof(int));\n    }\n    b[0][0] = b[0][1] = b[0][2] = 0;\n    c[0][0] = c[0][1] = c[0][2] = 0;\n    for (i = 1; i <= n; i++) {\n a[i - 1] = (i * i - i + 1) % 3;\n b[i][0] = b[i - 1][0];\n b[i][1] = b[i - 1][1];\n b[i][2] = b[i - 1][2];\n b[i][a[i - 1]]++;\n    }\n    for (i = 1; i <= 2; i++) {\n for (j = 0; j <= n; j++) {\n     c[j][0] = c[j][1] = c[j][2] = c[j][0];\n     for (k = 0; k < 3; k++)\n  c[j][(a[j] + k) % 3] += b[j][k];\n }\n    }\n    z = c[n][0];\n    for (i = 0; i <= n; i++) {\n free(b[i]);\n free(c[i]);\n    }\n    free(b);\n    free(c);\n    free(a);\n    return z;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n    int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    int *a, **b, **c;\n\n    a = (int *) malloc(n * sizeof(int));\n    b = (int **) malloc((n + 1) * sizeof(int *));\n    c = (int **) malloc((n + 1) * sizeof(int *));\n    for (i = 0; i <= n; i++) {\n b[i] = (int *) calloc(3, sizeof(int));\n c[i] = (int *) calloc(3, sizeof(int));\n    }\n    b[0][0] = b[0][1] = b[0][2] = 0;\n    c[0][0] = c[0][1] = c[0][2] = 0;\n    for (i = 1; i <= n; i++) {\n a[i - 1] = (i * i - i + 1) % 3;\n b[i][0] = b[i - 1][0];\n b[i][1] = b[i - 1][1];\n b[i][2] = b[i - 1][2];\n b[i][a[i - 1]]++;\n    }\n    for (i = 1; i <= 2; i++) {\n for (j = 0; j <= n; j++) {\n     c[j][0] = c[j][1] = c[j][2] = c[j][0];\n     for (k = 0; k < 3; k++)\n  c[j][(a[j] + k) % 3] += b[j][k];\n }\n for (j = 0; j <= n; j++) {\n     b[j][0] = c[j][0];\n     b[j][1] = c[j][1];\n     b[j][2] = c[j][2];\n     c[j][0] = c[j][1] = c[j][2] = 0;\n }\n    }\n    z = c[n][0];\n    for (i = 0; i <= n; i++) {\n free(b[i]);\n free(c[i]);\n    }\n    free(b);\n    free(c);\n    free(a);\n    return z;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int *b, int *c, int n)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        c[i] = abs(a[i] - b[i]);\n}",
    "c_func_re_decompile": "void func0(int *a, int *b, int *c, int n)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        c[i] = abs(a[i] - b[i]);\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int *b, int *c, int n)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        c[i] = abs(a[i] - b[i]);\n}",
    "c_func_re_decompile": "void func0(int *a, int *b, int *c, int n)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        c[i] = abs(a[i] - b[i]);\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
    "c_func_decompile": "\nvoid func0(int *a, int *b, int *c, int n)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        c[i] = abs(a[i] - b[i]);\n}",
    "c_func_re_decompile": "void func0(int *a, int *b, int *c, int n)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        c[i] = abs(a[i] - b[i]);\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "\nlong func0(float *x, int n)\n{\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float y = roundf(x[i]);\n        if (fabs(x[i] - y) < 0.000001 && x[i] > 0 && (int)y % 2 == 1) {\n            sum += y * y;\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "long func0(float *x, int n)\n{\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float y = roundf(x[i]);\n        if (fabs(x[i] - y) < 0.000001 && x[i] > 0 && (int)y % 2 == 1) {\n            sum += (int)y * (int)y;\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a;\n  int **b;\n  int ***c;\n\n  a = (int *) malloc(n * sizeof(int));\n  b = (int **) malloc((n + 1) * sizeof(int *));\n  c = (int ***) malloc((n + 1) * sizeof(int **));\n\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *) calloc(3, sizeof(int));\n    c[i] = (int **) calloc(3, sizeof(int *));\n  }\n\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n\n  for (i = 1; i <= n; i++) {\n    a[i - 1] = (i * i - i + 1) % 3;\n    for (j = 0; j < 3; j++) {\n      b[i][j] = b[i - 1][j];\n    }\n    b[i][a[i - 1]]++;\n  }\n\n  for (j = 1; j <= 2; j++) {\n    for (i = 1; i <= n; i++) {\n      for (k = 0; k < 3; k++) {\n        c[i][k] = c[i - 1][(a[i - 1] + k) % 3];\n      }\n    }\n    for (i = 0; i <= n; i++) {\n      for (k = 0; k < 3; k++) {\n        b[i][k] = c[i][k];\n        c[i][k] = 0;\n      }\n    }\n  }\n\n  z = b[n][0];\n\n  for (i = 0; i <= n; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free(b);\n  free(c);\n  free(a);\n\n  return z;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a;\n  int **b;\n  int ***c;\n\n  a = (int *) malloc(n * sizeof(int));\n  b = (int **) malloc((n + 1) * sizeof(int *));\n  c = (int ***) malloc((n + 1) * sizeof(int **));\n\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *) calloc(3, sizeof(int));\n    c[i] = (int **) calloc(3, sizeof(int *));\n  }\n\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n\n  for (i = 1; i <= n; i++) {\n    a[i - 1] = (i * i - i + 1) % 3;\n    for (j = 0; j < 3; j++) {\n      b[i][j] = b[i - 1][j];\n    }\n    b[i][a[i - 1]]++;\n  }\n\n  for (j = 1; j <= 2; j++) {\n    for (i = 1; i <= n; i++) {\n      for (k = 0; k < 3; k++) {\n        c[i][k] = c[i - 1][(a[i - 1] + k) % 3];\n      }\n    }\n    for (i = 0; i <= n; i++) {\n      for (k = 0; k < 3; k++) {\n        b[i][k] = c[i][k];\n        c[i][k] = 0;\n      }\n    }\n  }\n\n  z = b[n][0];\n\n  for (i = 0; i <= n; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free(b);\n  free(c);\n  free(a);\n\n  return z;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
    "c_func_decompile": "\nvoid func0(int n, int *p)\n{\n    int even = 0, odd = 0;\n    n = n < 0 ? -n : n;\n    do {\n        int r = n % 10;\n        if (r % 2 == 0)\n            even++;\n        else\n            odd++;\n        n /= 10;\n    } while (n > 0);\n    p[0] = even;\n    p[1] = odd;\n}",
    "c_func_re_decompile": "void func0(int n, int *p)\n{\n    int even = 0, odd = 0;\n    n = n < 0 ? -n : n;\n    do {\n        int r = n % 10;\n        if (r % 2 == 0)\n            even++;\n        else\n            odd++;\n        n /= 10;\n    } while (n > 0);\n    p[0] = even;\n    p[1] = odd;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
    "c_func_decompile": "\nvoid func0(int n, int *p)\n{\n    int count0 = 0, count1 = 0;\n    n = n > 0 ? n : -n;\n    while (n > 0) {\n        if (n % 2 == 1)\n            count1++;\n        else\n            count0++;\n        n /= 10;\n    }\n    p[0] = count0;\n    p[1] = count1;\n}",
    "c_func_re_decompile": "void func0(int n, int *p)\n{\n    int count0 = 0, count1 = 0;\n    n = n > 0 ? n : -n;\n    while (n > 0) {\n        if (n % 2 == 0)\n            count0++;\n        else\n            count1++;\n        n /= 10;\n    }\n    p[0] = count0;\n    p[1] = count1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
    "c_func_decompile": "\nint func0(char *str, char *substr)\n{\n    int i, len;\n    char *tmp;\n\n    len = strlen(substr);\n    tmp = (char *)malloc(sizeof(char) * (len * 2 + 1));\n\n    for (i = 0; i < len; i++) {\n        strncpy(tmp, substr + i, len - i);\n        strncpy(tmp + len - i, substr, i);\n        tmp[len] = '\\0';\n\n        if (strstr(str, tmp)) {\n            free(tmp);\n            return 1;\n        }\n    }\n\n    free(tmp);\n    return 0;\n}",
    "c_func_re_decompile": "int func0(char *str, char *substr)\n{\n    int i, len;\n    char *tmp;\n\n    len = strlen(substr);\n    tmp = (char *)malloc(sizeof(char) * (len * 2 + 1));\n\n    for (i = 0; i < len; i++) {\n        strncpy(tmp, substr + i, len - i);\n        strncpy(tmp + len - i, substr, i);\n        tmp[len] = '\\0';\n\n        if (strstr(str, tmp)) {\n            free(tmp);\n            return 1;\n        }\n    }\n\n    free(tmp);\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
    "c_func_decompile": "\nint func0(char *s1, char *s2)\n{\n    int i, len;\n    char *s;\n\n    len = strlen(s2);\n    s = (char *)malloc((len * 2 + 1) * sizeof(char));\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len * 2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}",
    "c_func_re_decompile": "int func0(char *s1, char *s2)\n{\n    int i, len;\n    char *s;\n\n    len = strlen(s2);\n    s = (char *)malloc((len * 2 + 1) * sizeof(char));\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len * 2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nchar ** func0(char ** strs, int strsSize, int * returnSize)\n{\n    *returnSize = 0;\n    int i, j;\n    for (i = 0; i < strsSize; i++) {\n        if (strlen(strs[i]) % 2 == 0) {\n            strs[*returnSize] = strs[i];\n            (*returnSize)++;\n        }\n    }\n    for (i = 0; i < *returnSize - 1; i++) {\n        for (j = 0; j < *returnSize - 1 - i; j++) {\n            if (strlen(strs[j]) > strlen(strs[j + 1]) ||\n                (strlen(strs[j]) == strlen(strs[j + 1]) &&\n                 strcmp(strs[j], strs[j + 1]) > 0)) {\n                char * tmp = strs[j];\n                strs[j] = strs[j + 1];\n                strs[j + 1] = tmp;\n            }\n        }\n    }\n    char ** ret = (char **)malloc(sizeof(char *) * (*returnSize));\n    for (i = 0; i < *returnSize; i++) {\n        ret[i] = strs[i];\n    }\n    return ret;\n}",
    "c_func_re_decompile": "char ** func0(char ** strs, int strsSize, int * returnSize)\n{\n    *returnSize = 0;\n    int i, j;\n    for (i = 0; i < strsSize; i++) {\n        if (strlen(strs[i]) % 2 == 0) {\n            strs[*returnSize] = strs[i];\n            (*returnSize)++;\n        }\n    }\n    for (i = 0; i < *returnSize - 1; i++) {\n        for (j = 0; j < *returnSize - 1 - i; j++) {\n            if (strlen(strs[j]) > strlen(strs[j + 1]) ||\n                (strlen(strs[j]) == strlen(strs[j + 1]) &&\n                 strcmp(strs[j], strs[j + 1]) > 0)) {\n                char * tmp = strs[j];\n                strs[j] = strs[j + 1];\n                strs[j + 1] = tmp;\n            }\n        }\n    }\n    char ** ret = (char **)malloc(sizeof(char *) * (*returnSize));\n    for (i = 0; i < *returnSize; i++) {\n        ret[i] = strs[i];\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
    "c_func_decompile": "\nint func0(char *str1, char *str2)\n{\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    char *str = (char *)malloc(sizeof(char) * (len2 * 2 + 1));\n    int i;\n    for (i = 0; i < len2; i++) {\n        strncpy(str, str2 + i, len2 - i);\n        strncpy(str + len2 - i, str2, i);\n        str[len2] = '\\0';\n        if (strstr(str1, str)) {\n            free(str);\n            return 1;\n        }\n    }\n    free(str);\n    return 0;\n}",
    "c_func_re_decompile": "int func0(char *str1, char *str2)\n{\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    char *str = (char *)malloc(sizeof(char) * (len2 * 2 + 1));\n    int i;\n    for (i = 0; i < len2; i++) {\n        strncpy(str, str2 + i, len2 - i);\n        strncpy(str + len2 - i, str2, i);\n        str[len2] = '\\0';\n        if (strstr(str1, str)) {\n            free(str);\n            return 1;\n        }\n    }\n    free(str);\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
    "c_func_decompile": "\nchar ** func0(char ** strs, int strsSize, int * returnSize)\n{\n    *returnSize = 0;\n    int i, j;\n    for (i = 0; i < strsSize; i++) {\n        if (strlen(strs[i]) % 2 == 0) {\n            strs[*returnSize] = strs[i];\n            (*returnSize)++;\n        }\n    }\n\n    for (i = 0; i < *returnSize - 1; i++) {\n        for (j = 0; j < *returnSize - 1 - i; j++) {\n            if (strlen(strs[j]) > strlen(strs[j + 1])) {\n                char * tmp = strs[j];\n                strs[j] = strs[j + 1];\n                strs[j + 1] = tmp;\n            } else if (strlen(strs[j]) == strlen(strs[j + 1])) {\n                if (strcmp(strs[j], strs[j + 1]) > 0) {\n                    char * tmp = strs[j];\n                    strs[j] = strs[j + 1];\n                    strs[j + 1] = tmp;\n                }\n            }\n        }\n    }\n\n    char ** ret = (char **)malloc(sizeof(char *) * (*returnSize));\n    for (i = 0; i < *returnSize; i++) {\n        ret[i] = strs[i];\n    }\n    return ret;\n}",
    "c_func_re_decompile": "char ** func0(char ** strs, int strsSize, int * returnSize)\n{\n    *returnSize = 0;\n    int i, j;\n    for (i = 0; i < strsSize; i++) {\n        if (strlen(strs[i]) % 2 == 0) {\n            strs[*returnSize] = strs[i];\n            (*returnSize)++;\n        }\n    }\n\n    for (i = 0; i < *returnSize - 1; i++) {\n        for (j = 0; j < *returnSize - 1 - i; j++) {\n            if (strlen(strs[j]) > strlen(strs[j + 1])) {\n                char * tmp = strs[j];\n                strs[j] = strs[j + 1];\n                strs[j + 1] = tmp;\n            } else if (strlen(strs[j]) == strlen(strs[j + 1])) {\n                if (strcmp(strs[j], strs[j + 1]) > 0) {\n                    char * tmp = strs[j];\n                    strs[j] = strs[j + 1];\n                    strs[j + 1] = tmp;\n                }\n            }\n        }\n    }\n\n    char ** ret = (char **)malloc(sizeof(char *) * (*returnSize));\n    for (i = 0; i < *returnSize; i++) {\n        ret[i] = strs[i];\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
    "c_func_decompile": "\nvoid func0(int n, int *p)\n{\n    int i, j;\n    unsigned int m;\n\n    if (n < 0)\n        n = -n;\n    m = n;\n    i = j = 0;\n    while (m > 9) {\n        if (m & 1)\n            j++;\n        else\n            i++;\n        m /= 10;\n    }\n    p[0] = i;\n    p[1] = j;\n}",
    "c_func_re_decompile": "void func0(int n, int *p)\n{\n    int i, j;\n    unsigned int m;\n\n    if (n < 0)\n        n = -n;\n    m = n;\n    i = j = 0;\n    while (m > 9) {\n        if (m & 1)\n            j++;\n        else\n            i++;\n        m /= 10;\n    }\n    p[0] = i;\n    p[1] = j;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c;\n\n  a = (int *) malloc(n * sizeof(int));\n  b = (int **) malloc((n + 1) * sizeof(int *));\n  c = (int **) malloc((n + 1) * sizeof(int *));\n\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *) calloc(3, sizeof(int));\n    c[i] = (int *) calloc(3, sizeof(int));\n  }\n\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n\n  for (i = 1; i <= n; i++) {\n    a[i - 1] = (i * (i - 1) + 1) % 3;\n    b[i][0] = b[i - 1][0];\n    b[i][1] = b[i - 1][1];\n    b[i][2] = b[i - 1][2];\n    b[i][a[i - 1]]++;\n  }\n\n  for (i = 1; i <= n; i++) {\n    c[i][0] = c[i - 1][0];\n    c[i][1] = c[i - 1][1];\n    c[i][2] = c[i - 1][2];\n    c[i][a[i - 1]]++;\n  }\n\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];\n    c[i][1] = c[i][2];\n    c[i][2] = t;\n  }\n\n  for (i = 0; i <= n; i++) {\n    t = b[i][0];\n    b[i][0] = b[i][1];\n    b[i][1] = b[i][2];\n    b[i][2] = t;\n  }\n\n  for (i = 0; i <= n; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free(b);\n  free(c);\n  free(a);\n\n  return t;\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c;\n\n  a = (int *) malloc(n * sizeof(int));\n  b = (int **) malloc((n + 1) * sizeof(int *));\n  c = (int **) malloc((n + 1) * sizeof(int *));\n\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *) calloc(3, sizeof(int));\n    c[i] = (int *) calloc(3, sizeof(int));\n  }\n\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n\n  for (i = 1; i <= n; i++) {\n    a[i - 1] = (i * (i - 1) + 1) % 3;\n    b[i][0] = b[i - 1][0];\n    b[i][1] = b[i - 1][1];\n    b[i][2] = b[i - 1][2];\n    b[i][a[i - 1]]++;\n  }\n\n  for (i = 1; i <= n; i++) {\n    c[i][0] = c[i - 1][0];\n    c[i][1] = c[i - 1][1];\n    c[i][2] = c[i - 1][2];\n    c[i][a[i - 1]]++;\n  }\n\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];\n    c[i][1] = c[i][2];\n    c[i][2] = t;\n  }\n\n  for (i = 0; i <= n; i++) {\n    t = b[i][0];\n    b[i][0] = b[i][1];\n    b[i][1] = b[i][2];\n    b[i][2] = t;\n  }\n\n  for (i = 0; i <= n; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free(b);\n  free(c);\n  free(a);\n\n  return t;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
    "c_func_decompile": "\nvoid func0(char *s, char **a, int n, char *buf)\n{\n    int i, j, k, max = -1000;\n    char *p, c;\n    p = NULL;\n    for (i = 0; i < n; i++) {\n        k = 0;\n        for (j = 0; a[i][j]; j++) {\n            c = a[i][j];\n            if (c >= 'A' && c <= 'Z')\n                k++;\n            if (c >= 'a' && c <= 'z')\n                k--;\n        }\n        if (k > max) {\n            max = k;\n            p = a[i];\n        }\n    }\n    sprintf(buf, \"%s %s\", s, p);\n}",
    "c_func_re_decompile": "void func0(char *s, char **a, int n, char *buf)\n{\n    int i, j, k, max = -1000;\n    char *p, c;\n    p = NULL;\n    for (i = 0; i < n; i++) {\n        char *p = a[i];\n        k = 0;\n        for (j = 0; p[j]; j++) {\n            c = p[j];\n            if (c >= 'A' && c <= 'Z')\n                k++;\n            if (c >= 'a' && c <= 'z')\n                k--;\n        }\n        if (k > max) {\n            max = k;\n            p = a[i];\n        }\n    }\n    sprintf(buf, \"%s %s\", s, p);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
    "c_func_decompile": "\nchar *func0(char *s, char **a, int n, char *buf)\n{\n  int i, j, k, l, m;\n  char *p, *q, *r;\n\n  l = -1000;\n  r = NULL;\n  for (i = 0; i < n; i++) {\n    p = a[i];\n    k = 0;\n    while (*p) {\n      if (*p >= 'A' && *p <= 'Z')\n k++;\n      else if (*p >= 'a' && *p <= 'z')\n k--;\n      p++;\n    }\n    if (k > l) {\n      l = k;\n      r = a[i];\n    }\n  }\n  return __sprintf_chk(buf, 1, -1, \"%s\", r);\n}",
    "c_func_re_decompile": "char *func0(char *s, char **a, int n, char *buf)\n{\n  int i, j, k, l, m;\n  char *p, *q, *r;\n\n  l = -1000;\n  r = NULL;\n  for (i = 0; i < n; i++) {\n    p = a[i];\n    k = 0;\n    while (*p) {\n      if (*p >= 'A' && *p <= 'Z')\n k++;\n      else if (*p >= 'a' && *p <= 'z')\n k--;\n      p++;\n    }\n    if (k > l) {\n      l = k;\n      r = a[i];\n    }\n  }\n  return __sprintf_chk(buf, 1, -1, \"%s\", r);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
    "c_func_decompile": "\nint func0(char *s1, char *s2)\n{\n    int i, len;\n    char *s;\n\n    len = strlen(s2);\n    s = (char *)malloc((len * 2 + 1) * sizeof(char));\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len * 2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}",
    "c_func_re_decompile": "int func0(char *s1, char *s2)\n{\n    int i, len;\n    char *s;\n\n    len = strlen(s2);\n    s = (char *)malloc((len * 2 + 1) * sizeof(char));\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len * 2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
    "c_func_decompile": "\nchar **func0(char *a, char *b, int *len)\n{\n  char *names[] = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" };\n  int i, j, k, l;\n  char **ret;\n\n  i = !strcmp(names[0], a) ? 0 : -1;\n  j = !strcmp(names[1], b) ? 0 : -1;\n  k = !strcmp(names[0], names[1]) ? 1 : -1;\n  l = !strcmp(names[2], names[0]) ? 1 : -1;\n  k = !strcmp(names[2], names[1]) ? 2 : -1;\n  l = !strcmp(names[0], names[0]) ? 2 : -1;\n  k = !strcmp(names[3], a) ? 3 : -1;\n  l = !strcmp(names[3], b) ? 3 : -1;\n  k = !strcmp(names[4], names[0]) ? 4 : -1;\n  l = !strcmp(names[4], names[1]) ? 4 : -1;\n  k = !strcmp(names[5], names[0]) ? 5 : -1;\n  l = !strcmp(names[5], names[1]) ? 5 : -1;\n  k = !strcmp(names[6], names[0]) ? 6 : -1;\n  l = !strcmp(names[6], names[1]) ? 6 : -1;\n\n  if (i == -1 || j == -1 || i == j || i == -1 || j == -1)\n    {\n      *len = 0;\n      return NULL;\n    }\n\n  if (i > j)\n    {\n      int tmp = i;\n      i = j;\n      j = tmp;\n    }\n\n  *len = j - i - 1;\n  if (*len <= 0)\n    return NULL;\n\n  ret = (char **)malloc(sizeof(char *) * *len);\n  for (int m = i + 1; m < j; m++)\n    ret[m - i - 1] = names[m];\n\n  return ret;\n}",
    "c_func_re_decompile": "char **func0(char *a, char *b, int *len)\n{\n  char *names[] = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" };\n  int i, j, k, l;\n  char **ret;\n\n  i = !strcmp(names[0], a) ? 0 : -1;\n  j = !strcmp(names[1], b) ? 0 : -1;\n  k = !strcmp(names[0], names[1]) ? 1 : -1;\n  l = !strcmp(names[2], names[0]) ? 1 : -1;\n  k = !strcmp(names[2], names[1]) ? 2 : -1;\n  l = !strcmp(names[0], names[0]) ? 2 : -1;\n  k = !strcmp(names[3], a) ? 3 : -1;\n  l = !strcmp(names[3], b) ? 3 : -1;\n  k = !strcmp(names[4], names[0]) ? 4 : -1;\n  l = !strcmp(names[4], names[1]) ? 4 : -1;\n  k = !strcmp(names[5], names[0]) ? 5 : -1;\n  l = !strcmp(names[5], names[1]) ? 5 : -1;\n  k = !strcmp(names[6], names[0]) ? 6 : -1;\n  l = !strcmp(names[6], names[1]) ? 6 : -1;\n\n  if (i == -1 || j == -1 || i == j || i == -1 || j == -1)\n    {\n      *len = 0;\n      return NULL;\n    }\n\n  if (i > j)\n    {\n      int tmp = i;\n      i = j;\n      j = tmp;\n    }\n\n  *len = j - i - 1;\n  if (*len <= 0)\n    return NULL;\n\n  ret = (char **)malloc(sizeof(char *) * *len);\n  for (int m = i + 1; m < j; m++)\n    ret[m - i - 1] = names[m];\n\n  return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nbool func0(float x, float y, float z)\n{\n    return (fabs(x * x + y * y - z * z) < 0.000001) ||\n           (fabs(x * x + z * z - y * y) < 0.000001) ||\n           (fabs(y * y + z * z - x * x) < 0.000001);\n}",
    "c_func_re_decompile": "bool func0(float x, float y, float z)\n{\n    return (fabs(x * x + y * y - z * z) < 0.000001) ||\n           (fabs(x * x + z * z - y * y) < 0.000001) ||\n           (fabs(y * y + z * z - x * x) < 0.000001);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
    "c_func_decompile": "\nvoid func0(int n, int *p)\n{\n    int c0, c1;\n    unsigned int u;\n\n    if (n < 0)\n        n = -n;\n    c0 = c1 = 0;\n    u = n;\n    while (u >= 10) {\n        if (u & 1)\n            c1++;\n        else\n            c0++;\n        u /= 10;\n    }\n    p[0] = c0;\n    p[1] = c1;\n}",
    "c_func_re_decompile": "void func0(int n, int *p)\n{\n    int c0, c1;\n    unsigned int u;\n\n    if (n < 0)\n        n = -n;\n    c0 = c1 = 0;\n    u = n;\n    while (u >= 10) {\n        if (u & 1)\n            c1++;\n        else\n            c0++;\n        u /= 10;\n    }\n    p[0] = c0;\n    p[1] = c1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
    "c_func_decompile": "\nint func0(int n)\n{\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c;\n\n  a = (int *) malloc(n * sizeof(int));\n  b = (int **) malloc((n + 1) * sizeof(int *));\n  c = (int **) malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *) calloc(3, sizeof(int));\n    c[i] = (int *) calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (i = 0; i < n; i++) {\n    j = i * (i + 1) / 3;\n    k = i * (i + 1) - j * 3;\n    b[i + 1][0] = b[i][0];\n    b[i + 1][1] = b[i][1];\n    b[i + 1][2] = b[i][2];\n    a[i] = k;\n    b[i + 1][k]++;\n  }\n  for (i = 0; i < n; i++) {\n    c[i + 1][0] = c[i][0];\n    c[i + 1][1] = c[i][1];\n    c[i + 1][2] = c[i][2];\n    k = a[i];\n    c[i + 1][k] += b[i][0];\n    c[i + 1][(k + 1) % 3] += b[i][1];\n    c[i + 1][(k + 2) % 3] += b[i][2];\n  }\n  for (i = 0; i <= n; i++) {\n    c[i][0] = b[i][0];\n    b[i][0] = c[i][0];\n    c[i][1] = b[i][1];\n    b[i][1] = c[i][1];\n    c[i][2] = b[i][2];\n    b[i][2] = c[i][2];\n  }\n  for (i = 0; i <= n; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free(b);\n  free(c);\n  free(a);\n  return b[n][0];\n}",
    "c_func_re_decompile": "int func0(int n)\n{\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c;\n\n  a = (int *) malloc(n * sizeof(int));\n  b = (int **) malloc((n + 1) * sizeof(int *));\n  c = (int **) malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *) calloc(3, sizeof(int));\n    c[i] = (int *) calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (i = 0; i < n; i++) {\n    j = i * (i + 1) / 3;\n    k = i * (i + 1) - j * 3;\n    b[i + 1][0] = b[i][0];\n    b[i + 1][1] = b[i][1];\n    b[i + 1][2] = b[i][2];\n    a[i] = k;\n    b[i + 1][k]++;\n  }\n  for (i = 0; i < n; i++) {\n    c[i + 1][0] = c[i][0];\n    c[i + 1][1] = c[i][1];\n    c[i + 1][2] = c[i][2];\n    k = a[i];\n    c[i + 1][k] += b[i][0];\n    c[i + 1][(k + 1) % 3] += b[i][1];\n    c[i + 1][(k + 2) % 3] += b[i][2];\n  }\n  for (i = 0; i <= n; i++) {\n    c[i][0] = b[i][0];\n    b[i][0] = c[i][0];\n    c[i][1] = b[i][1];\n    b[i][1] = c[i][1];\n    c[i][2] = b[i][2];\n    b[i][2] = c[i][2];\n  }\n  for (i = 0; i <= n; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free(b);\n  free(c);\n  free(a);\n  return b[n][0];\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(float x, float y, float z)\n{\n    if (fabsf(x*x + y*y - z*z) < 0.000001)\n        return 1;\n    if (fabsf(x*x - y*y + z*z) < 0.000001)\n        return 1;\n    if (fabsf(x*x + z*z - y*y) < 0.000001)\n        return 1;\n    return 0;\n}",
    "c_func_re_decompile": "int func0(float x, float y, float z)\n{\n    if (fabsf(x*x + y*y - z*z) < 0.000001)\n        return 1;\n    if (fabsf(x*x + z*z - y*y) < 0.000001)\n        return 1;\n    if (fabsf(y*y + z*z - x*x) < 0.000001)\n        return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
    "c_func_decompile": "\nvoid func0(char *s, char **p, int n, char *buf)\n{\n    int i, j, k, m;\n    char *p1, *p2;\n\n    m = -1000;\n    p2 = NULL;\n    for (i = 0; i < n; i++) {\n        p1 = p[i];\n        k = 0;\n        while (*p1) {\n            if (*p1 >= 'A' && *p1 <= 'Z')\n                k++;\n            else if (*p1 >= 'a' && *p1 <= 'z')\n                k++;\n            p1++;\n        }\n        if (k > m) {\n            m = k;\n            p2 = p[i];\n        }\n    }\n    __sprintf_chk(buf, 1, -1, \"%s\", p2);\n}",
    "c_func_re_decompile": "void func0(char *s, char **p, int n, char *buf)\n{\n    int i, j, k, m;\n    char *p1, *p2;\n\n    m = -1000;\n    p2 = NULL;\n    for (i = 0; i < n; i++) {\n        p1 = p[i];\n        k = 0;\n        while (*p1) {\n            if (*p1 >= 'A' && *p1 <= 'Z')\n                k++;\n            else if (*p1 >= 'a' && *p1 <= 'z')\n                k++;\n            p1++;\n        }\n        if (k > m) {\n            m = k;\n            p2 = p[i];\n        }\n    }\n    __sprintf_chk(buf, 1, -1, \"%s\", p2);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
    "c_func_decompile": "\nchar *func0(char *s, char **a, int n, char *buf)\n{\n  int i, j, k, l, m;\n  char *p, *q, *r;\n\n  m = -1000;\n  r = NULL;\n  for (i = 0; i < n; i++) {\n    p = a[i];\n    l = 0;\n    for (j = 0; p[j]; j++) {\n      if (p[j] >= 'A' && p[j] <= 'Z')\n        l++;\n      else if (p[j] >= 'a' && p[j] <= 'z')\n        l--;\n    }\n    if (l > m) {\n      m = l;\n      r = p;\n    }\n  }\n  return __sprintf_chk(buf, 1, -1, \"%s\", r);\n}",
    "c_func_re_decompile": "char *func0(char *s, char **a, int n, char *buf)\n{\n  int i, j, k, l, m;\n  char *p, *q, *r;\n\n  m = -1000;\n  r = NULL;\n  for (i = 0; i < n; i++) {\n    p = a[i];\n    l = 0;\n    for (j = 0; p[j]; j++) {\n      if (p[j] >= 'A' && p[j] <= 'Z')\n        l++;\n      else if (p[j] >= 'a' && p[j] <= 'z')\n        l--;\n    }\n    if (l > m) {\n      m = l;\n      r = p;\n    }\n  }\n  return __sprintf_chk(buf, 1, -1, \"%s\", r);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(float x, float y, float z)\n{\n    if (fabs(x*x + y*y - z*z) < 0.000001)\n        return 1;\n    if (fabs(x*x - y*y + z*z) < 0.000001)\n        return 1;\n    if (fabs(x*x + z*z - y*y) < 0.000001)\n        return 1;\n    return 0;\n}",
    "c_func_re_decompile": "int func0(float x, float y, float z)\n{\n    if (fabs(x*x + y*y - z*z) < 0.000001)\n        return 1;\n    if (fabs(x*x + z*z - y*y) < 0.000001)\n        return 1;\n    if (fabs(y*y + z*z - x*x) < 0.000001)\n        return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
    "c_func_decompile": "\nint func0(float x, float y, float z)\n{\n    if (fabs(x*x + y*y - z*z) < 0.000001)\n        return 1;\n    if (fabs(x*x - y*y + z*z) < 0.000001)\n        return 1;\n    if (fabs(x*x + z*z - y*y) < 0.000001)\n        return 1;\n    return 0;\n}",
    "c_func_re_decompile": "int func0(float x, float y, float z)\n{\n    if (fabs(x*x + y*y - z*z) < 0.000001)\n        return 1;\n    if (fabs(x*x + z*z - y*y) < 0.000001)\n        return 1;\n    if (fabs(y*y + z*z - x*x) < 0.000001)\n        return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int a, int b, int c, int *d)\n{\n  if (b > c)\n  {\n    d[0] = a + c;\n    d[1] = 0;\n  }\n  else\n  {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}",
    "c_func_re_decompile": "void func0(int a, int b, int c, int *d)\n{\n  if (b > c)\n  {\n    d[0] = a + c;\n    d[1] = 0;\n  }\n  else\n  {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int a, int b, int c, int *d)\n{\n    if (b > c) {\n        d[0] = a + c;\n        d[1] = 0;\n    } else {\n        d[0] = a + b;\n        d[1] = c - b;\n    }\n}",
    "c_func_re_decompile": "void func0(int a, int b, int c, int *d)\n{\n    if (b > c) {\n        d[0] = a + c;\n        d[1] = 0;\n    } else {\n        d[0] = a + b;\n        d[1] = c - b;\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int n, char *s)\n{\n    int i;\n    char *num[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int val[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    *s = '\\0';\n    for (i = 0; n > 0; i++) {\n        while (n >= val[i]) {\n            s = strcat(s, num[i]);\n            n -= val[i];\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int n, char *s)\n{\n    int i;\n    char *num[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int val[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    *s = '\\0';\n    for (i = 0; n > 0; i++) {\n        while (n >= val[i]) {\n            s = strcat(s, num[i]);\n            n -= val[i];\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int n, char *s)\n{\n    char *str[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int val[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int i = 0;\n\n    s[0] = '\\0';\n    while (n > 0) {\n        strcat(s, str[i]);\n        n -= val[i];\n        if (n >= val[i] || n <= 0) {\n            i++;\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int n, char *s)\n{\n    char *str[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int val[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int i = 0;\n\n    s[0] = '\\0';\n    while (n > 0) {\n        strcat(s, str[i]);\n        n -= val[i];\n        if (n >= val[i] || n <= 0) {\n            i++;\n        }\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int num, char *str)\n{\n    int i;\n    int val[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *roman[13] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n    *str = '\\0';\n    for (i = 0; i < 13; i++) {\n        while (num >= val[i]) {\n            str = strcat(str, roman[i]);\n            num -= val[i];\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int num, char *str)\n{\n    int i;\n    int val[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *roman[13] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n    *str = '\\0';\n    for (i = 0; num > 0; i++) {\n        while (num >= val[i]) {\n            str = strcat(str, roman[i]);\n            num -= val[i];\n        }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
    "c_func_decompile": "\nvoid func0(int n, char *s)\n{\n    int i;\n    int nums[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *strs[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n    *s = '\\0';\n    for (i = 0; i < 13 && n > 0; i++) {\n        while (n >= nums[i]) {\n            strcat(s, strs[i]);\n            n -= nums[i];\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int n, char *s)\n{\n    int i;\n    int nums[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *strs[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n    *s = '\\0';\n    for (i = 0; i < 13 && n > 0; i++) {\n        while (n >= nums[i]) {\n            strcat(s, strs[i]);\n            n -= nums[i];\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
    "c_func_decompile": "\nchar *func0(char **str, int n)\n{\n    char *ret = \"\";\n    int max = 0;\n    for (int i = 0; i < n; i++) {\n        char tmp[200] = {0};\n        int cnt = 0;\n        for (int j = 0; str[i][j]; j++) {\n            if (strchr(tmp, str[i][j]) == NULL) {\n                int len = strlen(tmp);\n                tmp[len] = str[i][j];\n                tmp[len + 1] = '\\0';\n                cnt++;\n            }\n        }\n        if (cnt > max || (cnt == max && strcmp(str[i], ret) < 0)) {\n            ret = str[i];\n            max = cnt;\n        }\n    }\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char **str, int n)\n{\n    char *ret = \"\";\n    int max = 0;\n    for (int i = 0; i < n; i++) {\n        char tmp[200] = {0};\n        int cnt = 0;\n        for (int j = 0; str[i][j]; j++) {\n            if (strchr(tmp, str[i][j]) == NULL) {\n                int len = strlen(tmp);\n                tmp[len] = str[i][j];\n                tmp[len + 1] = '\\0';\n                cnt++;\n            }\n        }\n        if (cnt > max || (cnt == max && strcmp(str[i], ret) < 0)) {\n            ret = str[i];\n            max = cnt;\n        }\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
    "c_func_decompile": "\nchar *func0(char *argv[], int argc)\n{\n    char *p, *q, *r, *s, *t;\n    int i, j, k, l, m, n;\n    char buf[256];\n\n    s = \"\";\n    for (i = 0; i < argc; i++) {\n        buf[0] = 0;\n        for (p = argv[i], j = 0; *p; p++) {\n            if (strchr(buf, *p) == NULL) {\n                k = strlen(buf);\n                buf[k] = *p;\n                buf[k + 1] = 0;\n                j++;\n            }\n        }\n        if (j > l || (j == l && strcmp(argv[i], s) < 0)) {\n            l = j;\n            s = argv[i];\n        }\n    }\n    return s;\n}",
    "c_func_re_decompile": "char *func0(char *argv[], int argc)\n{\n    char *p, *q, *r, *s, *t;\n    int i, j, k, l, m, n;\n    char buf[256];\n\n    s = \"\";\n    for (i = 0; i < argc; i++) {\n        buf[0] = 0;\n        for (p = argv[i], j = 0; *p; p++) {\n            if (strchr(buf, *p) == NULL) {\n                k = strlen(buf);\n                buf[k] = *p;\n                buf[k + 1] = 0;\n                j++;\n            }\n        }\n        if (j > l || (j == l && strcmp(argv[i], s) < 0)) {\n            l = j;\n            s = argv[i];\n        }\n    }\n    return s;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
    "c_func_decompile": "\nchar *func0(char *argv[], int argc)\n{\n    int i, j, k, max = 0;\n    char *p, *q, *r, *s = \"\";\n    char buf[256] = {0};\n\n    for (i = 0; i < argc; i++) {\n        p = argv[i];\n        q = buf;\n        for (j = 0; (k = *p++) != '\\0'; j++) {\n            if (strchr(q, k) == NULL) {\n                q[strlen(q) + 1] = '\\0';\n                q[strlen(q)] = k;\n            }\n        }\n        if (j > max) {\n            max = j;\n            s = argv[i];\n        } else if (j == max) {\n            if (strcmp(argv[i], s) < 0)\n                s = argv[i];\n        }\n    }\n    return s;\n}",
    "c_func_re_decompile": "char *func0(char *argv[], int argc)\n{\n    int i, j, k, max = 0;\n    char *p, *q, *r, *s = \"\";\n    char buf[256] = {0};\n\n    for (i = 0; i < argc; i++) {\n        p = argv[i];\n        q = buf;\n        for (j = 0; (k = *p++) != '\\0'; j++) {\n            if (strchr(q, k) == NULL) {\n                q[strlen(q) + 1] = '\\0';\n                q[strlen(q)] = k;\n            }\n        }\n        if (j > max) {\n            max = j;\n            s = argv[i];\n        } else if (j == max) {\n            if (strcmp(argv[i], s) < 0)\n                s = argv[i];\n        }\n    }\n    return s;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
    "c_func_decompile": "\nchar *func0(char **argv, int argc)\n{\n    int i, j, k, max = 0;\n    char *p, *q, *r, *s = \"\";\n    char buf[256] = {0};\n\n    for (i = 0; i < argc; i++) {\n        p = argv[i];\n        q = buf;\n        for (j = 0; p[j]; j++) {\n            if (strchr(q, p[j]) == NULL) {\n                k = strlen(q);\n                q[k] = p[j];\n                q[k + 1] = '\\0';\n            }\n        }\n        if (j > max) {\n            max = j;\n            s = argv[i];\n        } else if (j == max) {\n            if (strcmp(argv[i], s) < 0)\n                s = argv[i];\n        }\n    }\n    return s;\n}",
    "c_func_re_decompile": "char *func0(char **argv, int argc)\n{\n    int i, j, k, max = 0;\n    char *p, *q, *r, *s = \"\";\n    char buf[256] = {0};\n\n    for (i = 0; i < argc; i++) {\n        p = argv[i];\n        q = buf;\n        for (j = 0; p[j]; j++) {\n            if (strchr(q, p[j]) == NULL) {\n                k = strlen(q);\n                q[k] = p[j];\n                q[k + 1] = '\\0';\n            }\n        }\n        if (j > max) {\n            max = j;\n            s = argv[i];\n        } else if (j == max) {\n            if (strcmp(argv[i], s) < 0)\n                s = argv[i];\n        }\n    }\n    return s;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    unsigned int i, j;\n    unsigned int crc = 0xFFFFFFFF;\n    unsigned char c;\n    char *ret;\n\n    if (str[0] == '\\0')\n        return strdup(\"\");\n\n    for (i = 0; str[i] != '\\0'; i++) {\n        c = str[i];\n        crc = crc ^ ((unsigned char)c);\n        for (j = 0; j < 8; j++) {\n            if (crc & 1)\n                crc = (crc >> 1) ^ 0xEDB88320;\n            else\n                crc = crc >> 1;\n        }\n    }\n    crc = ~crc;\n\n    ret = (char *)malloc(9);\n    if (ret != NULL)\n        sprintf(ret, \"%08X\", crc);\n\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    unsigned int i, j;\n    unsigned int crc = 0xFFFFFFFF;\n    unsigned char c;\n    char *ret;\n\n    if (str[0] == '\\0')\n        return strdup(\"\");\n\n    for (i = 0; str[i] != '\\0'; i++) {\n        c = str[i];\n        crc = crc ^ ((unsigned char)c);\n        for (j = 0; j < 8; j++) {\n            if (crc & 1)\n                crc = (crc >> 1) ^ 0xEDB88320;\n            else\n                crc = crc >> 1;\n        }\n    }\n    crc = ~crc;\n\n    ret = (char *)malloc(9);\n    if (ret != NULL)\n        sprintf(ret, \"%08X\", crc);\n\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int i, j, len, count;\n    len = strlen(str);\n    count = 0;\n    for (i = 0; i < len; i++)\n    {\n        if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0400)) != 0)\n        {\n            if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0100)) != 0)\n            {\n                str[i] = (*(__ctype_tolower_loc()))[(unsigned char)(str[i])];\n            }\n            else if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0200)) != 0)\n            {\n                str[i] = (*(__ctype_toupper_loc()))[(unsigned char)(str[i])];\n            }\n            count++;\n        }\n    }\n    if (count == len)\n    {\n        for (i = 0, j = len - 1; i < j; i++, j--)\n        {\n            char temp = str[i];\n            str[i] = str[j];\n            str[j] = temp;\n        }\n    }\n    return str;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    int i, j, len, count;\n    len = strlen(str);\n    count = 0;\n    for (i = 0; i < len; i++)\n    {\n        if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0400)) != 0)\n        {\n            if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0100)) != 0)\n            {\n                str[i] = (*(__ctype_tolower_loc()))[(unsigned char)(str[i])];\n            }\n            else if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0200)) != 0)\n            {\n                str[i] = (*(__ctype_toupper_loc()))[(unsigned char)(str[i])];\n            }\n            count++;\n        }\n    }\n    if (count == len)\n    {\n        for (i = 0, j = len - 1; i < j; i++, j--)\n        {\n            char temp = str[i];\n            str[i] = str[j];\n            str[j] = temp;\n        }\n    }\n    return str;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    int i, j, len, count;\n    len = strlen(str);\n    count = 0;\n    for (i = 0; i < len; i++)\n    {\n        if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0400)) != 0)\n        {\n            if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0100)) != 0)\n            {\n                str[i] = (*(__ctype_tolower_loc()))[(unsigned char)(str[i])];\n            }\n            else if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0200)) != 0)\n            {\n                str[i] = (*(__ctype_toupper_loc()))[(unsigned char)(str[i])];\n            }\n            count++;\n        }\n    }\n    if (count == len)\n    {\n        for (i = 0, j = len - 1; i < j; i++, j--)\n        {\n            char temp = str[i];\n            str[i] = str[j];\n            str[j] = temp;\n        }\n    }\n    return str;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    int i, j, len, count;\n    len = strlen(str);\n    count = 0;\n    for (i = 0; i < len; i++)\n    {\n        if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0400)) != 0)\n        {\n            if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0100)) != 0)\n            {\n                str[i] = (*(__ctype_tolower_loc()))[(unsigned char)(str[i])];\n            }\n            else if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0200)) != 0)\n            {\n                str[i] = (*(__ctype_toupper_loc()))[(unsigned char)(str[i])];\n            }\n            count++;\n        }\n    }\n    if (count == len)\n    {\n        for (i = 0, j = len - 1; i < j; i++, j--)\n        {\n            char temp = str[i];\n            str[i] = str[j];\n            str[j] = temp;\n        }\n    }\n    return str;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
    "c_func_decompile": "\nint func0(char *op[], int *val, int n, int m)\n{\n int i, j, k, *v, *p, *q, *r, *s, *t;\n double x;\n\n v = (int *)malloc(m * sizeof(int));\n p = (int *)malloc(m * sizeof(int));\n for (i = 0; i < m; i++) {\n  v[i] = val[i];\n  p[i] = i;\n }\n for (i = 0; i < n; i++) {\n  if (!strcmp(op[i], \"pow\")) {\n   j = p[i];\n   while (j != p[j])\n    j = p[j];\n   k = p[i];\n   while (k != p[k])\n    k = p[k];\n   p[j] = k;\n   v[j] = pow(v[j], v[k]);\n   p[i] = j;\n  }\n }\n for (i = 0; i < n; i++) {\n  if (!strcmp(op[i], \"pow\") || !strcmp(op[i], \"*\")) {\n   j = p[i];\n   while (j != p[j])\n    j = p[j];\n   k = p[i];\n   while (k != p[k])\n    k = p[k];\n   p[j] = k;\n   if (!strcmp(op[i], \"*\"))\n    v[j] *= v[k];\n   else\n    v[j] /= v[k];\n   p[i] = j;\n  }\n }\n for (i = 0; i < n; i++) {\n  if (!strcmp(op[i], \"pow\") || !strcmp(op[i], \"+\")) {\n   j = p[i];\n   while (j != p[j])\n    j = p[j];\n   k = p[i];\n   while (k != p[k])\n    k = p[k];\n   p[j] = k;\n   if (!strcmp(op[i], \"+\"))\n    v[j] += v[k];\n   else\n    v[j] -= v[k];\n   p[i] = j;\n  }\n }\n j = p[0];\n free(v);\n free(p);\n return j;\n}",
    "c_func_re_decompile": "int func0(char *op[], int *val, int n, int m)\n{\n int i, j, k, *v, *p, *q, *r, *s, *t;\n double x;\n\n v = (int *)malloc(m * sizeof(int));\n p = (int *)malloc(m * sizeof(int));\n for (i = 0; i < m; i++) {\n  v[i] = val[i];\n  p[i] = i;\n }\n for (i = 0; i < n; i++) {\n  if (!strcmp(op[i], \"pow\")) {\n   j = p[i];\n   while (j != p[j])\n    j = p[j];\n   k = p[i];\n   while (k != p[k])\n    k = p[k];\n   p[j] = k;\n   v[j] = pow(v[j], v[k]);\n   p[i] = j;\n  }\n }\n for (i = 0; i < n; i++) {\n  if (!strcmp(op[i], \"pow\") || !strcmp(op[i], \"*\")) {\n   j = p[i];\n   while (j != p[j])\n    j = p[j];\n   k = p[i];\n   while (k != p[k])\n    k = p[k];\n   p[j] = k;\n   if (!strcmp(op[i], \"*\"))\n    v[j] *= v[k];\n   else\n    v[j] /= v[k];\n   p[i] = j;\n  }\n }\n for (i = 0; i < n; i++) {\n  if (!strcmp(op[i], \"pow\") || !strcmp(op[i], \"+\")) {\n   j = p[i];\n   while (j != p[j])\n    j = p[j];\n   k = p[i];\n   while (k != p[k])\n    k = p[k];\n   p[j] = k;\n   if (!strcmp(op[i], \"+\"))\n    v[j] += v[k];\n   else\n    v[j] -= v[k];\n   p[i] = j;\n  }\n }\n j = p[0];\n free(v);\n free(p);\n return j;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int n, int m, int *a, int *len)\n{\n    int i;\n    *len = 0;\n    for (i = m; i < n; i++) {\n        if (i < 10 && i % 2 == 0) {\n            a[(*len)++] = i;\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int n, int m, int *a, int *len)\n{\n    int i;\n    *len = 0;\n    for (i = m; i < n; i++) {\n        if (i < 10 && i % 2 == 0) {\n            a[(*len)++] = i;\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int a, int b, int *c, int *d)\n{\n    int i;\n\n    *d = 0;\n    if (b < a) {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    for (i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            c[(*d)++] = i;\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int a, int b, int *c, int *d)\n{\n    int i;\n\n    *d = 0;\n    if (b < a) {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    for (i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            c[(*d)++] = i;\n        }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int a, int b, int *c, int *d)\n{\n    *d = 0;\n    if (a > b)\n    {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    for (int i = a; i <= b; i++)\n    {\n        if (i < 10 && i % 2 == 0)\n        {\n            c[*d] = i;\n            (*d)++;\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int a, int b, int *c, int *d)\n{\n    *d = 0;\n    if (a > b)\n    {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    for (int i = a; i <= b; i++)\n    {\n        if (i < 10 && i % 2 == 0)\n        {\n            c[(*d)++] = i;\n        }\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
    "c_func_decompile": "\nvoid func0(int a, int b, int *c, int *d)\n{\n    int i;\n    *d = 0;\n    if (a > b) {\n        i = a;\n        a = b;\n        b = i;\n    }\n    if (a > 9)\n        return;\n    if (b > 9)\n        b = 9;\n    for (i = a; i <= b; i++) {\n        if (i % 2 == 0)\n            c[(*d)++] = i;\n    }\n}",
    "c_func_re_decompile": "void func0(int a, int b, int *c, int *d)\n{\n    int i;\n    *d = 0;\n    if (a > b) {\n        i = a;\n        a = b;\n        b = i;\n    }\n    if (a > 9)\n        return;\n    if (b > 9)\n        b = 9;\n    for (i = a; i <= b; i++) {\n        if (i % 2 == 0)\n            c[(*d)++] = i;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *s)\n{\n  unsigned int i, c;\n  char *p;\n\n  c = 0xFFFFFFFF;\n  for (i = 0; s[i]; i++) {\n    c = c ^ s[i];\n    for (int j = 8; j > 0; j >>= 1) {\n      if (c & 1)\n        c = (c >> 1) ^ 0xEDB88320;\n      else\n        c >>= 1;\n    }\n  }\n  c = ~c;\n\n  p = malloc(9);\n  if (p)\n    __sprintf_chk(p, 1, 9, \"%08X\", c);\n  else\n    p = strdup(\"00000000\");\n\n  return p;\n}",
    "c_func_re_decompile": "char *func0(char *s)\n{\n  unsigned int i, c;\n  char *p;\n\n  c = 0xFFFFFFFF;\n  for (i = 0; s[i]; i++) {\n    c = c ^ s[i];\n    for (int j = 8; j > 0; j >>= 1) {\n      if (c & 1)\n        c = (c >> 1) ^ 0xEDB88320;\n      else\n        c >>= 1;\n    }\n  }\n  c = ~c;\n\n  p = malloc(9);\n  if (p)\n    __sprintf_chk(p, 1, 9, \"%08X\", c);\n  else\n    p = strdup(\"00000000\");\n\n  return p;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    unsigned int i = 0;\n    unsigned int crc = 0xFFFFFFFF;\n    unsigned char *p = (unsigned char *)str;\n\n    while (*p) {\n        crc = crc ^ *p++;\n        for (i = 0; i < 8; i++) {\n            if (crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n\n    crc = ~crc;\n\n    char *ret = malloc(9);\n    if (ret == NULL) {\n        return strdup(\"00000000\");\n    }\n\n    __sprintf_chk(ret, 1, 9, \"%08X\", crc);\n\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    unsigned int i = 0;\n    unsigned int crc = 0xFFFFFFFF;\n    unsigned char *p = (unsigned char *)str;\n\n    while (*p) {\n        crc = crc ^ *p++;\n        for (i = 0; i < 8; i++) {\n            if (crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n\n    crc = ~crc;\n\n    char *ret = malloc(9);\n    if (ret == NULL) {\n        return strdup(\"00000000\");\n    }\n\n    __sprintf_chk(ret, 1, 9, \"%08X\", crc);\n\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
    "c_func_decompile": "\nchar *func0(char *str)\n{\n    unsigned int i, j, crc = 0xFFFFFFFF;\n    char *crc_str;\n\n    for (i = 0; str[i] != '\\0'; i++) {\n        crc = crc ^ str[i];\n        for (j = 0; j < 8; j++) {\n            if (crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n\n    crc_str = malloc(9);\n    if (crc_str == NULL) {\n        return strdup(\"00000000\");\n    }\n\n    __sprintf_chk(crc_str, 1, 9, \"%08X\", ~crc);\n    return crc_str;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    unsigned int i, j, crc = 0xFFFFFFFF;\n    char *crc_str;\n\n    for (i = 0; str[i] != '\\0'; i++) {\n        crc = crc ^ str[i];\n        for (j = 0; j < 8; j++) {\n            if (crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n\n    crc_str = malloc(9);\n    if (crc_str == NULL) {\n        return strdup(\"00000000\");\n    }\n\n    __sprintf_chk(crc_str, 1, 9, \"%08X\", ~crc);\n    return crc_str;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
    "c_func_decompile": "\nint func0(char *op[], int *val, int n, int m)\n{\n int *stack, *top;\n int i, j, k, res;\n\n stack = (int *)malloc(m * sizeof(int));\n top = (int *)malloc(m * sizeof(int));\n\n for (i = 0; i < m; i++) {\n  stack[i] = val[i];\n  top[i] = i;\n }\n\n for (i = 0; i < n; i++) {\n  if (!strcmp(op[i], \"+\")) {\n   while (top[i] != top[i + 1])\n    top[i] = top[top[i]];\n   stack[top[i]] = pow(stack[top[i]], stack[top[i + 1]]);\n   top[i + 1] = top[i];\n  }\n }\n\n for (i = 0; i < n; i++) {\n  if (!strcmp(op[i], \"*\") || !strcmp(op[i], \"/\")) {\n   while (top[i] != top[i + 1])\n    top[i] = top[top[i]];\n   if (!strcmp(op[i], \"*\"))\n    stack[top[i]] = stack[top[i]] * stack[top[i + 1]];\n   else\n    stack[top[i]] = stack[top[i]] / stack[top[i + 1]];\n   top[i + 1] = top[i];\n  }\n }\n\n res = stack[0];\n free(stack);\n free(top);\n return res;\n}",
    "c_func_re_decompile": "int func0(char *op[], int *val, int n, int m)\n{\n int *stack, *top;\n int i, j, k, res;\n\n stack = (int *)malloc(m * sizeof(int));\n top = (int *)malloc(m * sizeof(int));\n\n for (i = 0; i < m; i++) {\n  stack[i] = val[i];\n  top[i] = i;\n }\n\n for (i = 0; i < n; i++) {\n  if (!strcmp(op[i], \"+\")) {\n   while (top[i] != top[i + 1])\n    top[i] = top[top[i]];\n   stack[top[i]] = pow(stack[top[i]], stack[top[i + 1]]);\n   top[i + 1] = top[i];\n  }\n }\n\n for (i = 0; i < n; i++) {\n  if (!strcmp(op[i], \"*\") || !strcmp(op[i], \"/\")) {\n   while (top[i] != top[i + 1])\n    top[i] = top[top[i]];\n   if (!strcmp(op[i], \"*\"))\n    stack[top[i]] = stack[top[i]] * stack[top[i + 1]];\n   else\n    stack[top[i]] = stack[top[i]] / stack[top[i + 1]];\n   top[i + 1] = top[i];\n  }\n }\n\n for (i = 0; i < n; i++) {\n  if (!strcmp(op[i], \"+\") || !strcmp(op[i], \"-\")) {\n   while (top[i] != top[i + 1])\n    top[i] = top[top[i]];\n   if (!strcmp(op[i], \"+\"))\n    stack[top[i]] = stack[top[i]] + stack[top[i + 1]];\n   else\n    stack[top[i]] = stack[top[i]] - stack[top[i + 1]];\n   top[i + 1] = top[i];\n  }\n }\n\n res = stack[0];\n free(stack);\n free(top);\n return res;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
    "c_func_decompile": "\nint func0(char **a, int *b, int c, int d)\n{\n  int *e, *f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n  e = (int *)malloc(d * sizeof(int));\n  f = (int *)malloc(d * sizeof(int));\n  for (g = 0; g < d; g++)\n    e[g] = b[g];\n  for (g = 0; g < d; g++)\n    f[g] = g;\n  for (g = 0; g < c; g++)\n    if (a[g][0] == '*' && a[g][1] == '*' && a[g][2] == '\\0') {\n      h = f[g];\n      i = f[h];\n      while (i != h) {\n        h = i;\n        i = f[i];\n      }\n      j = f[g];\n      k = f[j];\n      while (k != j) {\n        j = k;\n        k = f[k];\n      }\n      e[j] = pow((double)e[h], (double)e[k]);\n      f[g] = j;\n    }\n  for (g = 0; g < c; g++)\n    if (a[g][0] == '*' && a[g][1] == '\\0') {\n      h = f[g];\n      i = f[h];\n      while (i != h) {\n        h = i;\n        i = f[i];\n      }\n      j = f[g];\n      k = f[j];\n      while (k != j) {\n        j = k;\n        k = f[k];\n      }\n      if (a[g][0] - '*' == 0)\n        e[j] *= e[h];\n      else if (a[g][0] - '*' == 1)\n        e[j] /= e[h];\n      f[g] = j;\n    }\n  for (g = 0; g < c; g++)\n    if (a[g][0] == '+' && a[g][1] == '\\0') {\n      h = f[g];\n      i = f[h];\n      while (i != h) {\n        h = i;\n        i = f[i];\n      }\n      j = f[g];\n      k = f[j];\n      while (k != j) {\n        j = k;\n        k = f[k];\n      }\n      if (a[g][0] - '+' == 0)\n        e[j] += e[h];\n      else if (a[g][0] - '+' == 1)\n        e[j] -= e[h];\n      f[g] = j;\n    }\n  z = e[0];\n  free(e);\n  free(f);\n  return z;\n}",
    "c_func_re_decompile": "int func0(char **a, int *b, int c, int d)\n{\n  int *e, *f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n  e = (int *)malloc(d * sizeof(int));\n  f = (int *)malloc(d * sizeof(int));\n  for (g = 0; g < d; g++)\n    e[g] = b[g];\n  for (g = 0; g < d; g++)\n    f[g] = g;\n  for (g = 0; g < c; g++)\n    if (a[g][0] == '*' && a[g][1] == '*' && a[g][2] == '\\0') {\n      h = f[g];\n      i = f[h];\n      while (i != h) {\n        h = i;\n        i = f[i];\n      }\n      j = f[g];\n      k = f[j];\n      while (k != j) {\n        j = k;\n        k = f[k];\n      }\n      e[j] = pow((double)e[h], (double)e[k]);\n      f[g] = j;\n    }\n  for (g = 0; g < c; g++)\n    if (a[g][0] == '*' && a[g][1] == '\\0') {\n      h = f[g];\n      i = f[h];\n      while (i != h) {\n        h = i;\n        i = f[i];\n      }\n      j = f[g];\n      k = f[j];\n      while (k != j) {\n        j = k;\n        k = f[k];\n      }\n      if (a[g][0] - '*' == 0)\n        e[j] *= e[h];\n      else if (a[g][0] - '*' == 1)\n        e[j] /= e[h];\n      f[g] = j;\n    }\n  for (g = 0; g < c; g++)\n    if (a[g][0] == '+' && a[g][1] == '\\0') {\n      h = f[g];\n      i = f[h];\n      while (i != h) {\n        h = i;\n        i = f[i];\n      }\n      j = f[g];\n      k = f[j];\n      while (k != j) {\n        j = k;\n        k = f[k];\n      }\n      if (a[g][0] - '+' == 0)\n        e[j] += e[h];\n      else if (a[g][0] - '+' == 1)\n        e[j] -= e[h];\n      f[g] = j;\n    }\n  z = e[0];\n  free(e);\n  free(f);\n  return z;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
    "c_func_decompile": "\nint func0(char **a, int *b, int c, int d)\n{\n    int *e, *f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    e = (int *)malloc(d * sizeof(int));\n    f = (int *)malloc(d * sizeof(int));\n    for (g = 0; g < d; g++)\n        f[g] = g;\n    for (g = 0; g < c; g++)\n        if (a[g][0] == '*' && a[g][1] == '*' && a[g][2] == '\\0') {\n            h = f[g];\n            while (h != f[h])\n                h = f[h];\n            f[g] = h;\n            while (h != f[h]) {\n                i = f[h];\n                f[h] = h;\n                h = i;\n            }\n            j = f[g];\n            while (j != f[j])\n                j = f[j];\n            f[g] = j;\n            while (j != f[j]) {\n                k = f[j];\n                f[j] = j;\n                j = k;\n            }\n            e[j] = (int)pow((double)e[j], (double)b[g]);\n            f[g] = j;\n        }\n    for (g = 0; g < c; g++)\n        if (a[g][0] == '*' && a[g][1] == '\\0') {\n            h = f[g];\n            while (h != f[h])\n                h = f[h];\n            f[g] = h;\n            while (h != f[h]) {\n                i = f[h];\n                f[h] = h;\n                h = i;\n            }\n            j = f[g];\n            while (j != f[j])\n                j = f[j];\n            f[g] = j;\n            while (j != f[j]) {\n                k = f[j];\n                f[j] = j;\n                j = k;\n            }\n            if (a[g][0] == '*' - 42)\n                e[j] *= b[g];\n            else if (a[g][0] == '/' && a[g][1] == '/' && a[g][2] == '\\0')\n                e[j] /= b[g];\n            f[g] = j;\n        }\n    for (g = 0; g < c; g++)\n        if (a[g][0] == '+' && a[g][1] == '\\0') {\n            h = f[g];\n            while (h != f[h])\n                h = f[h];\n            f[g] = h;\n            while (h != f[h]) {\n                i = f[h];\n                f[h] = h;\n                h = i;\n            }\n            j = f[g];\n            while (j != f[j])\n                j = f[j];\n            f[g] = j;\n            while (j != f[j]) {\n                k = f[j];\n                f[j] = j;\n                j = k;\n            }\n            if (a[g][0] == '+' - 42)\n                e[j] += b[g];\n            else if (a[g][0] == '-' && a[g][1] == '\\0')\n                e[j] -= b[g];\n            f[g] = j;\n        }\n    z = e[0];\n    free(e);\n    free(f);\n    return z;\n}",
    "c_func_re_decompile": "int func0(char **a, int *b, int c, int d)\n{\n    int *e, *f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    e = (int *)malloc(d * sizeof(int));\n    f = (int *)malloc(d * sizeof(int));\n    for (g = 0; g < d; g++)\n        f[g] = g;\n    for (g = 0; g < d; g++)\n        e[g] = b[g];\n    for (g = 0; g < c; g++)\n        if (a[g][0] == '*' && a[g][1] == '*' && a[g][2] == '\\0') {\n            h = f[g];\n            while (h != f[h])\n                h = f[h];\n            f[g] = h;\n            while (h != f[h]) {\n                i = f[h];\n                f[h] = h;\n                h = i;\n            }\n            j = f[g];\n            while (j != f[j])\n                j = f[j];\n            f[g] = j;\n            while (j != f[j]) {\n                k = f[j];\n                f[j] = j;\n                j = k;\n            }\n            e[j] = (int)pow((double)e[j], (double)b[g]);\n            f[g] = j;\n        }\n    for (g = 0; g < c; g++)\n        if (a[g][0] == '*' && a[g][1] == '\\0') {\n            h = f[g];\n            while (h != f[h])\n                h = f[h];\n            f[g] = h;\n            while (h != f[h]) {\n                i = f[h];\n                f[h] = h;\n                h = i;\n            }\n            j = f[g];\n            while (j != f[j])\n                j = f[j];\n            f[g] = j;\n            while (j != f[j]) {\n                k = f[j];\n                f[j] = j;\n                j = k;\n            }\n            if (a[g][0] == '*' - 42)\n                e[j] *= b[g];\n            else if (a[g][0] == '/' && a[g][1] == '/' && a[g][2] == '\\0')\n                e[j] /= b[g];\n            f[g] = j;\n        }\n    for (g = 0; g < c; g++)\n        if (a[g][0] == '+' && a[g][1] == '\\0') {\n            h = f[g];\n            while (h != f[h])\n                h = f[h];\n            f[g] = h;\n            while (h != f[h]) {\n                i = f[h];\n                f[h] = h;\n                h = i;\n            }\n            j = f[g];\n            while (j != f[j])\n                j = f[j];\n            f[g] = j;\n            while (j != f[j]) {\n                k = f[j];\n                f[j] = j;\n                j = k;\n            }\n            if (a[g][0] == '+' - 42)\n                e[j] += b[g];\n            else if (a[g][0] == '-' && a[g][1] == '\\0')\n                e[j] -= b[g];\n            f[g] = j;\n        }\n    z = e[0];\n    free(e);\n    free(f);\n    return z;\n}"
  }
]