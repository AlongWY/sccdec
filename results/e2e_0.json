[
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
    "c_func_decompile": "void func0(char *s, int *n) {\n    int i, j, k, m, p;\n    int *a;\n    for (i = j = k = m = 0; s[i]; i++) {\n        if (s[i] == '(') {\n            j++;\n            if (j > m)\n                m = j;\n        } else if (s[i] == ')') {\n            j--;\n            if (j == 0) {\n                k++;\n                a = realloc(a, k * sizeof(int));\n                a[k - 1] = m;\n                m = 0;\n            }\n        }\n    }\n    *n = k;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
    "c_func_decompile": "void func0(char *s, int *n) {\n    int i, j, k, m, l;\n    i = j = k = l = m = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == '(') {\n            j++;\n            if (j > m)\n                m = j;\n        } else if (s[i] == ')') {\n            j--;\n            if (j == 0) {\n                k++;\n                l = realloc(l, k * sizeof(int));\n                l[k - 1] = m;\n                m = 0;\n            }\n        }\n        i++;\n    }\n    *n = k;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
    "c_func_decompile": "void func0(char *s, int *n) {\n    int i, j, k, m, l;\n    i = j = k = l = m = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == '(') {\n            j++;\n            if (j > m)\n                m = j;\n        }\n        if (s[i] == ')') {\n            j--;\n            if (j == 0) {\n                k++;\n                l = realloc(l, k * sizeof(int));\n                l[k - 1] = m;\n                m = 0;\n            }\n        }\n        i++;\n    }\n    *n = k;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
    "c_func_decompile": "float func0(float x) {\n  return x - (int)x;\n}",
    "c_func_re_decompile": "float func0(float x) {\n  return x - (int)x;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
    "c_func_decompile": "float func0(float x) {\n  return x - (int)x;\n}",
    "c_func_re_decompile": "float func0(float x) {\n  return x - (int)x;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
    "c_func_decompile": "float func0(float x) {\n  return x - (int)x;\n}",
    "c_func_re_decompile": "float func0(float x) {\n  return x - (int)x;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float number) {\n    return number - (int)number;\n}",
    "c_func_decompile": "float func0(float x) {\n  return x - (int)x;\n}",
    "c_func_re_decompile": "float func0(float x) {\n  return x - (int)x;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    if (sum < 0)\n      return 1;\n  }\n  return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    sum += a[i];\n    if (sum < 0)\n      return 1;\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
    "c_func_decompile": "int func0(float *x, int n, float eps) {\n int i, j;\n for (i = 0; i < n; i++)\n  for (j = i + 1; j < n; j++)\n   if (fabs(x[i] - x[j]) < eps)\n    return 1;\n return 0;\n}",
    "c_func_re_decompile": "int func0(float *x, int n, float eps) {\n int i, j;\n for (i = 0; i < n; i++)\n  for (j = i + 1; j < n; j++)\n   if (fabs(x[i] - x[j]) < eps)\n    return 1;\n return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
    "c_func_decompile": "int func0(float *a, int n, float eps) {\n    int i, j;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (fabs(a[i] - a[j]) < eps)\n                return 1;\n    return 0;\n}",
    "c_func_re_decompile": "int func0(float *a, int n, float eps) {\n    int i, j;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            if (fabs(a[i] - a[j]) < eps)\n                return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
    "c_func_decompile": "int func0(float *a, int n, float eps) {\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (fabsf(a[i] - a[j]) < eps)\n        return 1;\n  return 0;\n}",
    "c_func_re_decompile": "int func0(float *a, int n, float eps) {\n  int i, j;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (fabsf(a[i] - a[j]) < eps)\n        return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum;\n    sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0)\n            return 1;\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum;\n    sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0)\n            return 1;\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum;\n    sum = a[0];\n    for (i = 0; i < n; i++) {\n        if (sum < 0)\n            return 1;\n        sum += a[i];\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum;\n    sum = a[0];\n    for (i = 0; i < n; i++) {\n        if (sum < 0)\n            return 1;\n        sum += a[i];\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int operations[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        num += operations[i];\n        if (num < 0) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum;\n    sum = a[0];\n    for (i = 0; i < n; i++) {\n        if (sum < 0)\n            return 1;\n        sum += a[i];\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum;\n    sum = a[0];\n    for (i = 0; i < n; i++) {\n        if (sum < 0)\n            return 1;\n        sum += a[i];\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(float numbers[], int size, float threshold) {\n    int i, j;\n\n    for (i = 0; i < size; i++)\n        for (j = i + 1; j < size; j++)\n            if (fabs(numbers[i] - numbers[j]) < threshold)\n                return 1;\n\n    return 0;\n}",
    "c_func_decompile": "int func0(float *x, int n, float eps) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (fabsf(x[i] - x[j]) < eps) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": "int func0(float *x, int n, float eps) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (fabsf(x[i] - x[j]) < eps) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
    "c_func_decompile": "float func0(float *x, int n) {\n    int i;\n    float sum = 0;\n    for (i = 0; i < n; i++)\n        sum += x[i];\n    float mean = sum / n;\n    sum = 0;\n    for (i = 0; i < n; i++)\n        sum += fabs(x[i] - mean);\n    return sum / n;\n}",
    "c_func_re_decompile": "float func0(float *x, int n) {\n    int i;\n    float sum = 0;\n    for (i = 0; i < n; i++)\n        sum += x[i];\n    float mean = sum / n;\n    sum = 0;\n    for (i = 0; i < n; i++)\n        sum += fabs(x[i] - mean);\n    return sum / n;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
    "c_func_decompile": "float func0(float *x, int n) {\n    int i;\n    float sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += x[i];\n    }\n    float mean = sum / n;\n    sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += fabs(x[i] - mean);\n    }\n    return sum / n;\n}",
    "c_func_re_decompile": "float func0(float *x, int n) {\n    int i;\n    float sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += x[i];\n    }\n    float mean = sum / n;\n    sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += fabs(x[i] - mean);\n    }\n    return sum / n;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
    "c_func_decompile": "float func0(float *x, int n) {\n    float sum = 0.0;\n    int i = 0;\n    for (i = 0; i < n; i++) {\n        sum += x[i];\n    }\n    float mean = sum / n;\n    float sum_diff = 0.0;\n    for (i = 0; i < n; i++) {\n        sum_diff += fabs(x[i] - mean);\n    }\n    return sum_diff / n;\n}",
    "c_func_re_decompile": "float func0(float *x, int n) {\n    float sum = 0.0;\n    int i = 0;\n    for (i = 0; i < n; i++) {\n        sum += x[i];\n    }\n    float mean = sum / n;\n    float sum_diff = 0.0;\n    for (i = 0; i < n; i++) {\n        sum_diff += fabs(x[i] - mean);\n    }\n    return sum_diff / n;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float numbers[], int size) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i = 0;\n\n    for (i = 0; i < size; i++)\n        sum += numbers[i];\n\n    avg = sum / size;\n    msum = 0;\n\n    for (i = 0; i < size; i++)\n        msum += fabs(numbers[i] - avg);\n\n    return msum / size;\n}",
    "c_func_decompile": "float func0(float *x, int n) {\n    int i;\n    float sum = 0;\n    float mean = 0;\n    float ret = 0;\n    for (i = 0; i < n; i++) {\n        sum += x[i];\n    }\n    mean = sum / n;\n    for (i = 0; i < n; i++) {\n        ret += fabs(x[i] - mean);\n    }\n    ret = ret / n;\n    return ret;\n}",
    "c_func_re_decompile": "float func0(float *x, int n) {\n    int i;\n    float sum = 0;\n    float mean = 0;\n    float ret = 0;\n    for (i = 0; i < n; i++) {\n        sum += x[i];\n    }\n    mean = sum / n;\n    for (i = 0; i < n; i++) {\n        ret += fabs(x[i] - mean);\n    }\n    ret = ret / n;\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n    int i, sum = 0, product = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        product *= a[i];\n    }\n    b[0] = sum;\n    b[1] = product;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n    int i, sum = 0, product = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        product *= a[i];\n    }\n    b[0] = sum;\n    b[1] = product;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n    int i, sum = 0, product = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        product *= a[i];\n    }\n    b[0] = sum;\n    b[1] = product;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n    int i, sum = 0, product = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        product *= a[i];\n    }\n    b[0] = sum;\n    b[1] = product;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n    int i, sum = 0, prod = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        prod *= a[i];\n    }\n    b[0] = sum;\n    b[1] = prod;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n    int i, sum = 0, prod = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        prod *= a[i];\n    }\n    b[0] = sum;\n    b[1] = prod;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int *a, int n, int x, int *m) {\n  int i, j;\n  *m = n > 0 ? 2 * n - 1 : 0;\n  int *b = (int *)malloc(*m * sizeof(int));\n  if (n > 0) {\n    b[0] = a[0];\n    for (i = 1, j = 1; i < n; i++) {\n      b[j++] = x;\n      b[j++] = a[i];\n    }\n  }\n  return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n, int x, int *m) {\n  int i, j;\n  *m = n > 0 ? 2 * n - 1 : 0;\n  int *b = (int *)malloc(*m * sizeof(int));\n  if (n > 0) {\n    b[0] = a[0];\n    for (i = 1, j = 1; i < n; i++) {\n      b[j++] = x;\n      b[j++] = a[i];\n    }\n  }\n  return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int *a, int n, int x, int *m) {\n    int i;\n    if (n > 0) {\n        *m = n * 2 - 1;\n        int *b = malloc(sizeof(int) * (*m));\n        b[0] = a[0];\n        for (i = 1; i < n; i++) {\n            b[i * 2 - 1] = x;\n            b[i * 2] = a[i];\n        }\n        return b;\n    } else {\n        *m = 0;\n        return malloc(0);\n    }\n}",
    "c_func_re_decompile": "int *func0(int *a, int n, int x, int *m) {\n    int i;\n    if (n > 0) {\n        *m = n * 2 - 1;\n        int *b = malloc(sizeof(int) * (*m));\n        b[0] = a[0];\n        for (i = 1; i < n; i++) {\n            b[i * 2 - 1] = x;\n            b[i * 2] = a[i];\n        }\n        return b;\n    } else {\n        *m = 0;\n        return malloc(0);\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char **argv, int argc, char *str, int *argc2) {\n    char **argv2 = NULL;\n    int i, j = 0;\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], str)) {\n            argv2 = realloc(argv2, (j + 1) * sizeof(char *));\n            argv2[j] = argv[i];\n            j++;\n        }\n    }\n    *argc2 = j;\n    return argv2;\n}",
    "c_func_re_decompile": "char **func0(char **argv, int argc, char *str, int *argc2) {\n    char **argv2 = NULL;\n    int i, j = 0;\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], str)) {\n            argv2 = realloc(argv2, (j + 1) * sizeof(char *));\n            argv2[j] = argv[i];\n            j++;\n        }\n    }\n    *argc2 = j;\n    return argv2;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int *a, int n, int x, int *m) {\n    int i;\n    int *b;\n    if (n > 0) {\n        *m = n * 2 - 1;\n        b = (int *)malloc(sizeof(int) * (*m));\n        b[0] = a[0];\n        for (i = 1; i < n; i++) {\n            b[i * 2 - 1] = x;\n            b[i * 2] = a[i];\n        }\n    } else {\n        *m = 0;\n        b = (int *)malloc(sizeof(int) * (*m));\n    }\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n, int x, int *m) {\n    int i;\n    int *b;\n    if (n > 0) {\n        *m = n * 2 - 1;\n        b = (int *)malloc(sizeof(int) * (*m));\n        b[0] = a[0];\n        for (i = 1; i < n; i++) {\n            b[i * 2 - 1] = x;\n            b[i * 2] = a[i];\n        }\n    } else {\n        *m = 0;\n        b = (int *)malloc(sizeof(int) * (*m));\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *numbers, int size, int *result) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result[0] = sum;\n    result[1] = product;\n}",
    "c_func_decompile": "void func0(int *a, int n, int *r) {\n    int i, sum = 0, prod = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        prod *= a[i];\n    }\n    r[0] = sum;\n    r[1] = prod;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *r) {\n    int i, sum = 0, prod = 1;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        prod *= a[i];\n    }\n    r[0] = sum;\n    r[1] = prod;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char **argv, int argc, char *str, int *argc2) {\n    int i, j = 0;\n    char **argv2 = NULL;\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], str)) {\n            argv2 = realloc(argv2, ++j * sizeof(char *));\n            argv2[j - 1] = argv[i];\n        }\n    }\n    *argc2 = j;\n    return argv2;\n}",
    "c_func_re_decompile": "char **func0(char **argv, int argc, char *str, int *argc2) {\n    int i, j = 0;\n    char **argv2 = NULL;\n    for (i = 0; i < argc; i++) {\n        if (strstr(argv[i], str)) {\n            argv2 = realloc(argv2, ++j * sizeof(char *));\n            argv2[j - 1] = argv[i];\n        }\n    }\n    *argc2 = j;\n    return argv2;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, count = 0;\n    int map[256] = {0};\n    for (i = 0; str[i] != '\\0'; i++) {\n        char c = tolower(str[i]);\n        if (map[c] == 0 && (__ctype_b_loc()[(unsigned char)c] & 0x400)) {\n            map[c] = 1;\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(const int numbers[], int size, int delimiter, int *out_size) {\n    *out_size = size > 0 ? (size * 2) - 1 : 0;\n    int *out = (int *)malloc(*out_size * sizeof(int));\n    if (size > 0) out[0] = numbers[0];\n    for (int i = 1, j = 1; i < size; ++i) {\n        out[j++] = delimiter;\n        out[j++] = numbers[i];\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int *a, int n, int m, int *len) {\n    int i;\n    int *b;\n    if (n > 0) {\n        *len = 2 * (n - 1);\n        b = (int *)malloc(sizeof(int) * (*len));\n        b[0] = a[0];\n        for (i = 1; i < n; i++) {\n            b[2 * i - 1] = a[i];\n            b[2 * i] = m;\n        }\n    } else {\n        *len = 0;\n        b = (int *)malloc(sizeof(int) * (*len));\n    }\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n, int m, int *len) {\n    int i;\n    int *b;\n    if (n > 0) {\n        *len = 2 * (n - 1);\n        b = (int *)malloc(sizeof(int) * (*len));\n        b[0] = a[0];\n        for (i = 1; i < n; i++) {\n            b[2 * i - 1] = a[i];\n            b[2 * i] = m;\n        }\n    } else {\n        *len = 0;\n        b = (int *)malloc(sizeof(int) * (*len));\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n    int c;\n    while (b) {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n    int c;\n    while (b) {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n    int t;\n    while (b != 0) {\n        t = a % b;\n        a = b;\n        b = t;\n    }\n    return a;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n    int t;\n    while (b != 0) {\n        t = a % b;\n        a = b;\n        b = t;\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int *a, int n) {\n    int i, *b;\n    if (n <= 0)\n        return NULL;\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    for (i = 0; i < n; i++)\n        b[i] = (a[i] > a[0]) ? a[i] : a[0];\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n) {\n    int i, *b;\n    if (n <= 0)\n        return NULL;\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    for (i = 0; i < n; i++)\n        b[i] = (a[i] > a[0]) ? a[i] : a[0];\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int *a, int n) {\n    int i, *b;\n    if (n <= 0)\n        return NULL;\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    b[0] = a[0];\n    for (i = 1; i < n; i++)\n        b[i] = (a[i] > b[i - 1] ? a[i] : b[i - 1]);\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n) {\n    int i, *b;\n    if (n <= 0)\n        return NULL;\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    b[0] = a[0];\n    for (i = 1; i < n; i++)\n        b[i] = (a[i] > b[i - 1] ? a[i] : b[i - 1]);\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int *a, int n) {\n    if (n <= 0)\n        return NULL;\n    int *b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    int i, max = a[0];\n    for (i = 0; i < n; i++) {\n        if (a[i] > max) {\n            max = a[i];\n            b[i] = max;\n        }\n    }\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n) {\n    if (n <= 0)\n        return NULL;\n    int *b = (int *)malloc(n * sizeof(int));\n    if (b == NULL)\n        return NULL;\n    int i, max = a[0];\n    for (i = 0; i < n; i++) {\n        if (a[i] > max) {\n            max = a[i];\n            b[i] = max;\n        }\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char **argv, int argc, char *str, int *argc2) {\n    char **argv2 = NULL;\n    int argc2_ = 0;\n    for (int i = 0; i < argc; i++) {\n        char *arg = argv[i];\n        if (strstr(arg, str) != NULL) {\n            argv2 = realloc(argv2, (argc2_ + 1) * sizeof(char *));\n            argv2[argc2_++] = arg;\n        }\n    }\n    *argc2 = argc2_;\n    return argv2;\n}",
    "c_func_re_decompile": "char **func0(char **argv, int argc, char *str, int *argc2) {\n    char **argv2 = NULL;\n    int argc2_ = 0;\n    for (int i = 0; i < argc; i++) {\n        char *arg = argv[i];\n        if (strstr(arg, str) != NULL) {\n            argv2 = realloc(argv2, (argc2_ + 1) * sizeof(char *));\n            argv2[argc2_++] = arg;\n        }\n    }\n    *argc2 = argc2_;\n    return argv2;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(const char* paren_string, int* returnSize) {\n    int* all_levels = NULL;\n    int level = 0, max_level = 0, i = 0, count = 0;\n    char chr;\n    for (i = 0; paren_string[i] != '\\0'; i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level -= 1;\n            if (level == 0) {\n                all_levels = (int*)realloc(all_levels, sizeof(int) * (count + 1));\n                all_levels[count++] = max_level;\n                max_level = 0;\n            }\n        }\n    }\n    *returnSize = count;\n    return all_levels;\n}",
    "c_func_decompile": "int* func0(char* s, int* returnSize) {\n    int* ret = NULL;\n    int i, j, k, l;\n    char c;\n    i = j = k = l = 0;\n    for (k = 0; s[k]; k++) {\n        c = s[k];\n        if (c == '(') {\n            i++;\n            if (i > j) j = i;\n        } else if (c == ')') {\n            i--;\n            if (i == 0) {\n                ret = realloc(ret, sizeof(int) * (l + 1));\n                ret[l++] = j;\n                j = 0;\n            }\n        }\n    }\n    *returnSize = l;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(char* s, int* returnSize) {\n    int* ret = NULL;\n    int i, j, k, l;\n    char c;\n    i = j = k = l = 0;\n    for (k = 0; s[k]; k++) {\n        c = s[k];\n        if (c == '(') {\n            i++;\n            if (i > j) j = i;\n        } else if (c == ')') {\n            i--;\n            if (i == 0) {\n                ret = realloc(ret, sizeof(int) * (l + 1));\n                ret[l++] = j;\n                j = 0;\n            }\n        }\n    }\n    *returnSize = l;\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char **strings, int size, const char *substring, int *out_size) {\n    char **out = NULL;\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (strstr(strings[i], substring) != NULL) {\n            out = (char **)realloc(out, sizeof(char *) * (count + 1));\n            out[count] = strings[i];\n            count++;\n        }\n    }\n    *out_size = count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char **argv, int argc, char *str, int *argc2) {\n    char **argv2 = NULL;\n    int argc2_ = 0;\n    for (int i = 0; i < argc; i++) {\n        char *arg = argv[i];\n        if (strstr(arg, str) != NULL) {\n            argv2 = realloc(argv2, (argc2_ + 1) * sizeof(char *));\n            argv2[argc2_++] = arg;\n        }\n    }\n    *argc2 = argc2_;\n    return argv2;\n}",
    "c_func_re_decompile": "char **func0(char **argv, int argc, char *str, int *argc2) {\n    char **argv2 = NULL;\n    int argc2_ = 0;\n    for (int i = 0; i < argc; i++) {\n        char *arg = argv[i];\n        if (strstr(arg, str) != NULL) {\n            argv2 = realloc(argv2, (argc2_ + 1) * sizeof(char *));\n            argv2[argc2_++] = arg;\n        }\n    }\n    *argc2 = argc2_;\n    return argv2;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
    "c_func_decompile": "char **func0(char *str, int *n) {\n    int len = strlen(str);\n    int i, j, k, count = 0;\n    int size = 10;\n    char **res = (char **)malloc(sizeof(char *) * size);\n    char *tmp = (char *)malloc(sizeof(char) * (len + 1));\n    for (i = 0, j = 0; i < len; i++) {\n        char c = str[i];\n        if (c == '(') {\n            count++;\n            tmp[j++] = c;\n        } else if (c == ')') {\n            count--;\n            tmp[j++] = c;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                res[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= size) {\n                    size *= 2;\n                    res = (char **)realloc(res, sizeof(char *) * size);\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return res;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *n) {\n    int len = strlen(str);\n    int i, j, k, count = 0;\n    int size = 10;\n    char **res = (char **)malloc(sizeof(char *) * size);\n    char *tmp = (char *)malloc(sizeof(char) * (len + 1));\n    for (i = 0, j = 0; i < len; i++) {\n        char c = str[i];\n        if (c == '(') {\n            count++;\n            tmp[j++] = c;\n        } else if (c == ')') {\n            count--;\n            tmp[j++] = c;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                res[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= size) {\n                    size *= 2;\n                    res = (char **)realloc(res, sizeof(char *) * size);\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return res;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
    "c_func_decompile": "char **func0(char *str, int *n) {\n    int i, j, k, len, count;\n    char **ret;\n    char *tmp;\n    len = strlen(str);\n    ret = (char **)malloc(10 * sizeof(char *));\n    tmp = (char *)malloc((len + 1) * sizeof(char));\n    *n = 0;\n    j = 0;\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            tmp[j++] = '(';\n            count++;\n        } else if (str[i] == ')') {\n            tmp[j++] = ')';\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                ret[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= 10) {\n                    ret = (char **)realloc(ret, 2 * 10 * sizeof(char *));\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *n) {\n    int i, j, k, len, count;\n    char **ret;\n    char *tmp;\n    len = strlen(str);\n    ret = (char **)malloc(10 * sizeof(char *));\n    tmp = (char *)malloc((len + 1) * sizeof(char));\n    *n = 0;\n    j = 0;\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            tmp[j++] = '(';\n            count++;\n        } else if (str[i] == ')') {\n            tmp[j++] = ')';\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                ret[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= 10) {\n                    ret = (char **)realloc(ret, 2 * 10 * sizeof(char *));\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *numbers, int size) {\n    if (size <= 0) {\n        return NULL;\n    }\n    \n    int *out = malloc(size * sizeof(int));\n    if (!out) {\n        return NULL;\n    }\n    \n    int max = numbers[0];\n    for (int i = 0; i < size; i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int *a, int n) {\n    int i;\n    int *b = NULL;\n    if (n <= 0) {\n        return NULL;\n    }\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL) {\n        return NULL;\n    }\n    for (i = 0; i < n; i++) {\n        b[i] = a[i] > a[0] ? a[i] : a[0];\n    }\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n) {\n    int i;\n    int *b = NULL;\n    if (n <= 0) {\n        return NULL;\n    }\n    b = (int *)malloc(n * sizeof(int));\n    if (b == NULL) {\n        return NULL;\n    }\n    for (i = 0; i < n; i++) {\n        b[i] = a[i] > a[0] ? a[i] : a[0];\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
    "c_func_decompile": "char **func0(char *str, int *n) {\n    int i, j, k, len, count;\n    char **ret;\n    char *tmp;\n    len = strlen(str);\n    ret = (char **)malloc(10 * sizeof(char *));\n    tmp = (char *)malloc((len + 1) * sizeof(char));\n    *n = 0;\n    j = 0;\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            tmp[j++] = '(';\n            count++;\n        } else if (str[i] == ')') {\n            tmp[j++] = ')';\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                ret[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= 10) {\n                    ret = (char **)realloc(ret, 2 * 10 * sizeof(char *));\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *n) {\n    int i, j, k, len, count;\n    char **ret;\n    char *tmp;\n    len = strlen(str);\n    ret = (char **)malloc(10 * sizeof(char *));\n    tmp = (char *)malloc((len + 1) * sizeof(char));\n    *n = 0;\n    j = 0;\n    count = 0;\n    for (i = 0; i < len; i++) {\n        if (str[i] == '(') {\n            tmp[j++] = '(';\n            count++;\n        } else if (str[i] == ')') {\n            tmp[j++] = ')';\n            count--;\n            if (count == 0) {\n                tmp[j] = '\\0';\n                ret[*n] = strdup(tmp);\n                (*n)++;\n                if (*n >= 10) {\n                    ret = (char **)realloc(ret, 2 * 10 * sizeof(char *));\n                }\n                j = 0;\n            }\n        }\n    }\n    free(tmp);\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n    while (b != 0) {\n        int r = a % b;\n        a = b;\n        b = r;\n    }\n    return a;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n    while (b != 0) {\n        int r = a % b;\n        a = b;\n        b = r;\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int a, int b) {\n    while (b != 0) {\n        int m = a % b;\n        a = b;\n        b = m;\n    }\n    return a;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n    while (b != 0) {\n        int r = a % b;\n        a = b;\n        b = r;\n    }\n    return a;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n    while (b != 0) {\n        int r = a % b;\n        a = b;\n        b = r;\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "char *func0(char *str[], int n) {\n    char *p = \"\";\n    int i, max = 0, len;\n    for (i = 0; i < n; i++) {\n        len = strlen(str[i]);\n        if (len > max) {\n            p = str[i];\n            max = len;\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": "char *func0(char *str[], int n) {\n    char *p = \"\";\n    int i, max = 0, len;\n    for (i = 0; i < n; i++) {\n        len = strlen(str[i]);\n        if (len > max) {\n            p = str[i];\n            max = len;\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* paren_string, int* group_count) {\n    int length = strlen(paren_string);\n    int level = 0;\n    int capacity = 10;\n    char** groups = malloc(capacity * sizeof(char*));\n    char* buffer = malloc(length + 1);\n    int buffer_index = 0;\n    *group_count = 0;\n\n    for (int i = 0; i < length; ++i) {\n        char chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            buffer[buffer_index++] = chr;\n        } else if (chr == ')') {\n            level--;\n            buffer[buffer_index++] = chr;\n            if (level == 0) {\n                buffer[buffer_index] = '\\0';\n                groups[*group_count] = strdup(buffer);\n                (*group_count)++;\n                if (*group_count >= capacity) {\n                    capacity *= 2;\n                    groups = realloc(groups, capacity * sizeof(char*));\n                }\n                buffer_index = 0;\n            }\n        }\n    }\n\n    free(buffer);\n    return groups;\n}",
    "c_func_decompile": "char **func0(char *s, int *n) {\n    int i, j, k, l, m;\n    char **a;\n    char *b;\n    l = strlen(s);\n    a = malloc(10 * sizeof(char *));\n    b = malloc((l + 1) * sizeof(char));\n    *n = 0;\n    j = 0;\n    for (i = 0; i < l; i++) {\n        if (s[i] == '(') {\n            j++;\n            b[i] = '(';\n        } else if (s[i] == ')') {\n            j--;\n            b[i] = ')';\n            if (j == 0) {\n                b[i + 1] = '\\0';\n                if (*n >= 10) {\n                    m = 10;\n                    while (m <= *n) {\n                        m *= 2;\n                    }\n                    a = realloc(a, m * sizeof(char *));\n                }\n                a[*n] = strdup(b);\n                (*n)++;\n            }\n        }\n    }\n    free(b);\n    return a;\n}",
    "c_func_re_decompile": "char **func0(char *s, int *n) {\n    int i, j, k, l, m;\n    char **a;\n    char *b;\n    l = strlen(s);\n    a = malloc(10 * sizeof(char *));\n    b = malloc((l + 1) * sizeof(char));\n    *n = 0;\n    j = 0;\n    for (i = 0; i < l; i++) {\n        if (s[i] == '(') {\n            j++;\n            b[i] = '(';\n        } else if (s[i] == ')') {\n            j--;\n            b[i] = ')';\n            if (j == 0) {\n                b[i + 1] = '\\0';\n                if (*n >= 10) {\n                    m = 10;\n                    while (m <= *n) {\n                        m *= 2;\n                    }\n                    a = realloc(a, m * sizeof(char *));\n                }\n                a[*n] = strdup(b);\n                (*n)++;\n            }\n        }\n    }\n    free(b);\n    return a;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "char *func0(char *argv[], int argc) {\n    int i, max = 0;\n    char *p = \"\";\n    for (i = 0; i < argc; i++) {\n        if (strlen(argv[i]) > max) {\n            max = strlen(argv[i]);\n            p = argv[i];\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": "char *func0(char *argv[], int argc) {\n    int i, max = 0;\n    char *p = \"\";\n    for (i = 0; i < argc; i++) {\n        if (strlen(argv[i]) > max) {\n            max = strlen(argv[i]);\n            p = argv[i];\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "char *func0(char *argv[], int argc) {\n    int i, max = 0;\n    char *p = \"\";\n    for (i = 0; i < argc; i++) {\n        if (strlen(argv[i]) > max) {\n            max = strlen(argv[i]);\n            p = argv[i];\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": "char *func0(char *argv[], int argc) {\n    int i, max = 0;\n    char *p = \"\";\n    for (i = 0; i < argc; i++) {\n        if (strlen(argv[i]) > max) {\n            max = strlen(argv[i]);\n            p = argv[i];\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char **strings, int count) {\n    char *out = \"\";\n    int longest_length = 0;\n    for (int i = 0; i < count; i++) {\n        int current_length = strlen(strings[i]);\n        if (current_length > longest_length) {\n            out = strings[i];\n            longest_length = current_length;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "char *func0(char **strs, int strsSize) {\n    int i, max = 0;\n    char *res = \"\";\n    for (i = 0; i < strsSize; i++) {\n        int len = strlen(strs[i]);\n        if (len > max) {\n            max = len;\n            res = strs[i];\n        }\n    }\n    return res;\n}",
    "c_func_re_decompile": "char *func0(char **strs, int strsSize) {\n    int i, max = 0;\n    char *res = \"\";\n    for (i = 0; i < strsSize; i++) {\n        int len = strlen(strs[i]);\n        if (len > max) {\n            max = len;\n            res = strs[i];\n        }\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
    "c_func_decompile": "char *func0(char *a, char *b) {\n    int i, len = strlen(a) < strlen(b) ? strlen(a) : strlen(b);\n    char *c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[i] = '\\0';\n    return c;\n}",
    "c_func_re_decompile": "char *func0(char *a, char *b) {\n    int i, len = strlen(a) < strlen(b) ? strlen(a) : strlen(b);\n    char *c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[i] = '\\0';\n    return c;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
    "c_func_decompile": "char *func0(char *a, char *b) {\n    int i, len = strlen(a) < strlen(b) ? strlen(a) : strlen(b);\n    char *c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '1' : '0';\n    c[len] = '\\0';\n    return c;\n}",
    "c_func_re_decompile": "char *func0(char *a, char *b) {\n    int i, len = strlen(a) < strlen(b) ? strlen(a) : strlen(b);\n    char *c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[len] = '\\0';\n    return c;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
    "c_func_decompile": "char *func0(char *a, char *b) {\n    int i, len_a = strlen(a), len_b = strlen(b), len = len_a < len_b ? len_a : len_b;\n    char *c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[len] = '\\0';\n    return c;\n}",
    "c_func_re_decompile": "char *func0(char *a, char *b) {\n    int i, len_a = strlen(a), len_b = strlen(b), len = len_a < len_b ? len_a : len_b;\n    char *c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[len] = '\\0';\n    return c;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int min_len = len_a < len_b ? len_a : len_b;\n    char *output = malloc((min_len + 1) * sizeof(char));\n    if (!output) return NULL;\n\n    for (int i = 0; i < min_len; i++) {\n        output[i] = (a[i] == b[i]) ? '0' : '1';\n    }\n    output[min_len] = '\\0';\n    return output;\n}",
    "c_func_decompile": "char *func0(char *a, char *b) {\n    int i, len = strlen(a) < strlen(b) ? strlen(a) : strlen(b);\n    char *c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[len] = '\\0';\n    return c;\n}",
    "c_func_re_decompile": "char *func0(char *a, char *b) {\n    int i, len = strlen(a) < strlen(b) ? strlen(a) : strlen(b);\n    char *c = malloc(len + 1);\n    if (c == NULL)\n        return NULL;\n    for (i = 0; i < len; i++)\n        c[i] = a[i] == b[i] ? '0' : '1';\n    c[len] = '\\0';\n    return c;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
    "c_func_decompile": "char *func0(int n) {\n  int i, len = 2;\n  char *p, *q;\n  for (i = 1; i <= n; i++)\n    len += snprintf(NULL, 0, \"%d\", i);\n  p = malloc(len);\n  if (!p)\n    return NULL;\n  q = p;\n  q += sprintf(q, \"1\");\n  for (i = 1; i <= n; i++)\n    q += sprintf(q, \",%d\", i);\n  return p;\n}",
    "c_func_re_decompile": "char *func0(int n) {\n  int i, j, len = 2;\n  char *p, *q;\n  for (i = 1; i <= n; i++)\n    len += snprintf(NULL, 0, \"%d\", i);\n  p = malloc(len);\n  if (!p)\n    return NULL;\n  q = p;\n  q += sprintf(q, \"1\");\n  for (j = 1; j <= n; j++)\n    q += sprintf(q, \",%d\", j);\n  return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
    "c_func_decompile": "char *func0(int n) {\n  int i, len = 2;\n  char *s;\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk(0, 0, 1, -1, \"%d\", i);\n  s = malloc(len);\n  if (s) {\n    s[0] = '0';\n    char *p = s + 1;\n    for (i = 1; i <= n; i++)\n      p += __sprintf_chk(p, 1, -1, \"%d\", i);\n  }\n  return s;\n}",
    "c_func_re_decompile": "char *func0(int n) {\n  int i, len = 2;\n  char *s;\n  for (i = 1; i <= n; i++)\n    len += __snprintf_chk(0, 0, 1, -1, \"%d\", i);\n  s = malloc(len);\n  if (s) {\n    s[0] = '0';\n    char *p = s + 1;\n    for (i = 1; i <= n; i++)\n      p += __sprintf_chk(p, 1, -1, \"%d\", i);\n  }\n  return s;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = malloc(slen * sizeof(char *));\n    char *tmp = malloc(slen + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        size_t tlen = strlen(tmp);\n        tmp = realloc(tmp, tlen + 2);\n        tmp[tlen] = str[i];\n        tmp[tlen + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        strcpy(ret[i], tmp);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = malloc(slen * sizeof(char *));\n    char *tmp = malloc(slen + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        size_t tlen = strlen(tmp);\n        tmp = realloc(tmp, tlen + 2);\n        tmp[tlen] = str[i];\n        tmp[tlen + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        strcpy(ret[i], tmp);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int len = strlen(str);\n    int i, j, k;\n    char *ret = malloc(len * 2 + 1);\n    if (ret == NULL)\n        return NULL;\n    for (i = 0; i < len; i++) {\n        for (j = 0, k = len - i - 1; j < len - i; j++, k--) {\n            if (str[j] != str[k])\n                break;\n        }\n        if (j == len - i) {\n            ret = strncpy(ret, str, len);\n            for (j = 0; j < i; j++)\n                ret[len + j] = str[len - j - 1];\n            ret[len * 2] = '\\0';\n            return ret;\n        }\n    }\n    ret = strncpy(ret, str, len);\n    for (i = 0; i < len; i++)\n        ret[len + i] = str[len - i - 1];\n    ret[len * 2] = '\\0';\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char *str) {\n    int len = strlen(str);\n    int i, j, k;\n    char *ret = malloc(len * 2 + 1);\n    if (ret == NULL)\n        return NULL;\n    for (i = 0; i < len; i++) {\n        for (j = 0, k = len - i - 1; j < len - i; j++, k--) {\n            if (str[j] != str[k])\n                break;\n        }\n        if (j == len - i) {\n            ret = strncpy(ret, str, len);\n            for (j = 0; j < i; j++)\n                ret[len + j] = str[len - j - 1];\n            ret[len * 2] = '\\0';\n            return ret;\n        }\n    }\n    ret = strncpy(ret, str, len);\n    for (i = 0; i < len; i++)\n        ret[len + i] = str[len - i - 1];\n    ret[len * 2] = '\\0';\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int len = strlen(str);\n    char *ret = (char *)malloc(len * 2 + 1);\n    if (ret == NULL) {\n        return NULL;\n    }\n    int i, j, flag;\n    for (i = 0; i < len; i++) {\n        flag = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag) {\n            strncpy(ret, str, len);\n            for (j = 0; j < i; j++) {\n                ret[len + j] = str[i - 1 - j];\n            }\n            ret[len + i] = '\\0';\n            return ret;\n        }\n    }\n    strncpy(ret, str, len);\n    for (j = 0; j < len; j++) {\n        ret[len + j] = str[len - 1 - j];\n    }\n    ret[len * 2] = '\\0';\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char *str) {\n    int len = strlen(str);\n    char *ret = (char *)malloc(len * 2 + 1);\n    if (ret == NULL) {\n        return NULL;\n    }\n    int i, j, flag;\n    for (i = 0; i < len; i++) {\n        flag = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag) {\n            strncpy(ret, str, len);\n            for (j = 0; j < i; j++) {\n                ret[len + j] = str[i - 1 - j];\n            }\n            ret[len + i] = '\\0';\n            return ret;\n        }\n    }\n    strncpy(ret, str, len);\n    for (j = 0; j < len; j++) {\n        ret[len + j] = str[len - 1 - j];\n    }\n    ret[len * 2] = '\\0';\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int len = strlen(str);\n    int i, j, k;\n    char *ret = malloc(len * 2 + 1);\n    if (ret == NULL)\n        return NULL;\n    for (i = 0; i < len; i++) {\n        for (j = 0, k = len - i - 1; j < len - i; j++, k--) {\n            if (str[j] != str[k])\n                break;\n        }\n        if (j == len - i) {\n            ret = strncpy(ret, str, len);\n            for (j = 0; j < i; j++)\n                ret[len + j] = str[len - j - 1];\n            ret[len * 2] = '\\0';\n            return ret;\n        }\n    }\n    ret = strncpy(ret, str, len);\n    for (i = 0; i < len; i++)\n        ret[len + i] = str[len - i - 1];\n    ret[len * 2] = '\\0';\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char *str) {\n    int len = strlen(str);\n    int i, j, k;\n    char *ret = malloc(len * 2 + 1);\n    if (ret == NULL)\n        return NULL;\n    for (i = 0; i < len; i++) {\n        for (j = 0, k = len - i - 1; j < len - i; j++, k--) {\n            if (str[j] != str[k])\n                break;\n        }\n        if (j == len - i) {\n            ret = strncpy(ret, str, len);\n            for (j = 0; j < i; j++)\n                ret[len + j] = str[len - j - 1];\n            ret[len * 2] = '\\0';\n            return ret;\n        }\n    }\n    ret = strncpy(ret, str, len);\n    for (i = 0; i < len; i++)\n        ret[len + i] = str[len - i - 1];\n    ret[len * 2] = '\\0';\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = malloc(slen * sizeof(char *));\n    char *tmp = malloc(slen + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        tmp = realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        memcpy(ret[i], tmp, strlen(tmp) + 1);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = malloc(slen * sizeof(char *));\n    char *tmp = malloc(slen + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        tmp = realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        memcpy(ret[i], tmp, strlen(tmp) + 1);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = malloc(slen * sizeof(char *));\n    char *tmp = malloc(slen + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        tmp = realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        memcpy(ret[i], tmp, strlen(tmp) + 1);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = malloc(slen * sizeof(char *));\n    char *tmp = malloc(slen + 1);\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        tmp = realloc(tmp, strlen(tmp) + 2);\n        tmp[strlen(tmp)] = str[i];\n        tmp[strlen(tmp) + 1] = '\\0';\n        ret[i] = malloc(strlen(tmp) + 1);\n        memcpy(ret[i], tmp, strlen(tmp) + 1);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
    "c_func_decompile": "char *func0(int n) {\n  int i;\n  char *p;\n  int len = 2;\n  for (i = 1; i <= n; i++) {\n    len += __snprintf_chk(0, 0, 1, -1, \"%d\", i);\n  }\n  p = (char *)malloc(len);\n  if (p == NULL) {\n    return NULL;\n  }\n  p[0] = '0';\n  p[1] = '\\0';\n  for (i = 1; i <= n; i++) {\n    p += __sprintf_chk(p + 1, 1, -1, \"%d\", i);\n  }\n  return p;\n}",
    "c_func_re_decompile": "char *func0(int n) {\n  int i;\n  char *p;\n  int len = 2;\n  for (i = 1; i <= n; i++) {\n    len += __snprintf_chk(0, 0, 1, -1, \"%d\", i);\n  }\n  p = (char *)malloc(len);\n  if (p == NULL) {\n    return NULL;\n  }\n  p[0] = '0';\n  p[1] = '\\0';\n  for (i = 1; i <= n; i++) {\n    p += __sprintf_chk(p + 1, 1, -1, \"%d\", i);\n  }\n  return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(const char *str, int *count) {\n    int len = strlen(str);\n    char **out = malloc(len * sizeof(char *));\n    \n    char *current = malloc(len + 1);\n    current[0] = '\\0';\n\n    for (int i = 0; i < len; ++i) {\n        size_t current_len = strlen(current);\n        current = realloc(current, current_len + 2);\n        current[current_len] = str[i];\n        current[current_len + 1] = '\\0';\n\n        out[i] = malloc(strlen(current) + 1);\n        strcpy(out[i], current);\n    }\n    free(current);\n    \n    *count = len;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = (char **)malloc(slen * sizeof(char *));\n    char *tmp = (char *)malloc((slen + 1) * sizeof(char));\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        size_t tlen = strlen(tmp);\n        tmp = (char *)realloc(tmp, (tlen + 2) * sizeof(char));\n        tmp[tlen] = str[i];\n        tmp[tlen + 1] = '\\0';\n        ret[i] = (char *)malloc((strlen(tmp) + 1) * sizeof(char));\n        strcpy(ret[i], tmp);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *len) {\n    int i, slen = strlen(str);\n    char **ret = (char **)malloc(slen * sizeof(char *));\n    char *tmp = (char *)malloc((slen + 1) * sizeof(char));\n    tmp[0] = '\\0';\n    for (i = 0; i < slen; i++) {\n        size_t tlen = strlen(tmp);\n        tmp = (char *)realloc(tmp, (tlen + 2) * sizeof(char));\n        tmp[tlen] = str[i];\n        tmp[tlen + 1] = '\\0';\n        ret[i] = (char *)malloc((strlen(tmp) + 1) * sizeof(char));\n        strcpy(ret[i], tmp);\n    }\n    free(tmp);\n    *len = slen;\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar *func0(int n) {\n    int len = 2; \n    for (int i = 1; i <= n; ++i) {\n        len += snprintf(NULL, 0, \" %d\", i);\n    }\n\n    char *out = malloc(len);\n    if (!out) {\n        return NULL;\n    }\n    \n    char *ptr = out;\n    ptr += sprintf(ptr, \"0\");\n    for (int i = 1; i <= n; ++i) {\n        ptr += sprintf(ptr, \" %d\", i);\n    }\n    return out;\n}",
    "c_func_decompile": "char *func0(int n) {\n  int i;\n  char *p;\n  int len = 2;\n  for (i = 1; i <= n; i++) {\n    len += __snprintf_chk(0, 0, 1, -1, \"%d\", i);\n  }\n  p = (char *)malloc(len);\n  if (p == NULL) {\n    return NULL;\n  }\n  p[0] = '0';\n  p[1] = '\\0';\n  for (i = 1; i <= n; i++) {\n    p += __sprintf_chk(p + 1, 1, -1, \"%d\", i);\n  }\n  return p;\n}",
    "c_func_re_decompile": "char *func0(int n) {\n  int i;\n  char *p;\n  int len = 2;\n  for (i = 1; i <= n; i++) {\n    len += __snprintf_chk(0, 0, 1, -1, \"%d\", i);\n  }\n  p = (char *)malloc(len);\n  if (p == NULL) {\n    return NULL;\n  }\n  p[0] = '0';\n  p[1] = '\\0';\n  for (i = 1; i <= n; i++) {\n    p += __sprintf_chk(p + 1, 1, -1, \"%d\", i);\n  }\n  return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *func0(const char *str) {\n    int len = strlen(str), i, j;\n    char *result = (char *)malloc(2 * len + 1);\n    if (!result) {\n        return NULL; \n    }\n\n    for (i = 0; i < len; i++) {\n        int is_palindrome = 1;\n        for (j = 0; j < (len - i) / 2; j++) {\n            if (str[i + j] != str[len - 1 - j]) {\n                is_palindrome = 0;\n                break;\n            }\n        }\n        if (is_palindrome) {\n            strncpy(result, str, len);\n            for (j = 0; j < i; j++) {\n                result[len + j] = str[i - j - 1];\n            }\n            result[len + i] = '\\0';\n            return result;\n        }\n    }\n\n    strncpy(result, str, len);\n    for (j = 0; j < len; j++) {\n        result[len + j] = str[len - j - 1];\n    }\n    result[2 * len] = '\\0';\n    return result;\n}",
    "c_func_decompile": "char *func0(char *str)\n{\n int i,j,k,len,flag;\n char *p;\n len=strlen(str);\n p=(char *)malloc(len*2+1);\n if(p==NULL)\n  return NULL;\n for(i=0;i<len;i++)\n {\n  flag=1;\n  for(j=0,k=len-1-i;j<(len-i)/2;j++,k--)\n  {\n   if(str[j]!=str[k])\n   {\n    flag=0;\n    break;\n   }\n  }\n  if(flag)\n  {\n   strncpy(p,str,len);\n   for(j=0;j<i;j++)\n    p[len+j]=str[len-1-j];\n   p[len+i]='\\0';\n   return p;\n  }\n  else\n  {\n   strncpy(p,str,len);\n   for(j=0;j<i;j++)\n    p[len+j]=str[len-1-j];\n   p[len+i]='\\0';\n  }\n }\n return p;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n int i,j,k,len,flag;\n char *p;\n len=strlen(str);\n p=(char *)malloc(len*2+1);\n if(p==NULL)\n  return NULL;\n for(i=0;i<len;i++)\n {\n  flag=1;\n  for(j=0,k=len-1-i;j<(len-i)/2;j++,k--)\n  {\n   if(str[j]!=str[k])\n   {\n    flag=0;\n    break;\n   }\n  }\n  if(flag)\n  {\n   strncpy(p,str,len);\n   for(j=0;j<i;j++)\n    p[len+j]=str[len-1-j];\n   p[len+i]='\\0';\n   return p;\n  }\n  else\n  {\n   strncpy(p,str,len);\n   for(j=0;j<i;j++)\n    p[len+j]=str[len-1-j];\n   p[len+i]='\\0';\n  }\n }\n return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
    "c_func_decompile": "int *func0(char *s, int *n) {\n    static int a[100];\n    int i = 0;\n    char *p, *q;\n    while (*s) {\n        if (!((__ctype_b_loc ()->*((2 +1))[(unsigned char)(*s)] & (0200)) || *s == '-')) {\n            s++;\n            continue;\n        }\n        p = s;\n        long t = strtol(s, &q, 10);\n        if (q == p) {\n            while (*q && *q != ',')\n                q++;\n        }\n        if (*q)\n            s = q + 1;\n        else\n            s = q;\n        if (*q == ',')\n            continue;\n        a[i++] = t;\n    }\n    *n = i;\n    return a;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
    "c_func_decompile": "int *func0(char *s, int *n) {\n  static int a[100];\n  int i = 0;\n  char *p, *q;\n  int x;\n  p = s;\n  while (*p) {\n    while (*p && !((__ctype_get_mb_cur_max() == 1 && (__ascii_egc[(unsigned char)(*p)] & (0x0200))) || *p == '-'))\n      p++;\n    if (!*p)\n      break;\n    x = strtol(p, &q, 10);\n    if (q != p && (*q == ',' || *q == '\\0'))\n      a[i++] = x;\n    else\n      while (*q && *q != ',')\n        q++;\n    p = q;\n  }\n  *n = i;\n  return a;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
    "c_func_decompile": "int *func0(char *s, int *n) {\n  static int a[100];\n  int i = 0;\n  char *p, *q;\n  while (*s) {\n    if (((__ctype_b_loc()->*((int*)1))[(int)(*s)] & (0x08)) != 0) {\n      a[i++] = strtol(s, &p, 10);\n      if (p == s)\n        s = q;\n      else\n        s = p;\n      while (*s && *s != ',')\n        s++;\n    }\n    s++;\n  }\n  *n = i;\n  return a;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "c_func_decompile": "int func0(char *s) {\n    int i, c, count = 0;\n    int map[256] = {0};\n    while (*s) {\n        c = (*__ctype_tolower_loc()[(unsigned char)(*s++)]);\n        if (!map[c] && ((*__ctype_b_loc()[(unsigned char)(c)]) & (0x04))) {\n            map[c] = 1;\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *s) {\n    int i, c, count = 0;\n    int map[256] = {0};\n    while (*s) {\n        c = (*__ctype_tolower_loc()[(unsigned char)(*s++)]);\n        if (!map[c] && ((*__ctype_b_loc()[(unsigned char)(c)]) & (0x04))) {\n            map[c] = 1;\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "c_func_decompile": "int func0(char *s) {\n    int i, c, n = 0;\n    int a[256] = {0};\n    while (*s) {\n        c = (*__ctype_tolower_loc()[(unsigned char)(*s)]);\n        if (a[c] == 0 && ((*__ctype_b_loc()[(unsigned char)(c)]) & (0x04))) {\n            a[c] = 1;\n            n++;\n        }\n        s++;\n    }\n    return n;\n}",
    "c_func_re_decompile": "int func0(char *s) {\n    int i, c, n = 0;\n    int a[256] = {0};\n    while (*s) {\n        c = (*__ctype_tolower_loc()[0][(unsigned char)(*s)]);\n        if (a[c] == 0 && ((*__ctype_b_loc()[0][(unsigned char)(c)]) & (0x04))) {\n            a[c] = 1;\n            n++;\n        }\n        s++;\n    }\n    return n;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint *func0(const char *values, int *size) {\n    static int out[256];\n    int count = 0;\n    const char *start = values;\n    char *end;\n    while (*start) {\n        while (*start && !isdigit(*start) && *start != '-') {\n            start++;\n        }\n        if (!*start) {\n            break;\n        }\n        int val = (int) strtol(start, &end, 10);\n        if (start != end && (*end == ',' || *end == '\\0')) {\n            out[count++] = val;\n        } else {\n            while (*end && *end != ',') {\n                end++;\n            }\n        }\n        start = end;\n    }\n    *size = count;\n    return out;\n}",
    "c_func_decompile": "int *func0(char *s, int *n) {\n  static int a[100];\n  int i = 0;\n  char *p, *q;\n  while (*s) {\n    if (((__ctype_b_loc()->*((int*)1))[(int)(*s)] & (0x08)) != 0) {\n      a[i++] = strtol(s, &p, 10);\n      if (p == s)\n        s = p;\n      else {\n        while (*p && *p != ',')\n          p++;\n        s = p;\n      }\n    } else if (*s == '-')\n      s++;\n    else\n      s++;\n  }\n  *n = i;\n  return a;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *str) {\n    int count = 0;\n    int char_map[256] = {0};\n    int index;\n    \n    for (index = 0; str[index]; index++) {\n        char ch = tolower((unsigned char)str[index]);\n        if (char_map[ch] == 0 && isalpha((unsigned char)ch)) {\n            char_map[ch] = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "c_func_decompile": "int func0(char *s) {\n    int i, c, n = 0;\n    int a[256] = {0};\n    while (*s) {\n        c = (*__ctype_tolower_loc()[(unsigned char)(*s)]);\n        if (a[c] == 0 && ((*__ctype_b_loc()[(unsigned char)(c)]) & (0x04))) {\n            a[c] = 1;\n            n++;\n        }\n        s++;\n    }\n    return n;\n}",
    "c_func_re_decompile": "int func0(char *s) {\n    int i, c, n = 0;\n    int a[256] = {0};\n    while (*s) {\n        c = (*__ctype_tolower_loc()[0][(unsigned char)(*s)]);\n        if (a[c] == 0 && ((*__ctype_b_loc()[0][(unsigned char)(c)]) & (0x04))) {\n            a[c] = 1;\n            n++;\n        }\n        s++;\n    }\n    return n;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(char *str, char *substr) {\n    int i, j, count = 0, len1 = strlen(str), len2 = strlen(substr);\n    for (i = 0; i <= len1 - len2; i++) {\n        for (j = 0; j < len2; j++) {\n            if (str[i + j] != substr[j])\n                break;\n        }\n        if (j == len2)\n            count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str, char *substr) {\n    int i, count = 0, len1 = strlen(str), len2 = strlen(substr);\n    for (i = 0; i <= len1 - len2; i++) {\n        if (!strncmp(str + i, substr, len2))\n            count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(char *str, char *substr) {\n    int count = 0;\n    int len = strlen(str);\n    int sublen = strlen(substr);\n    if (len == 0)\n        return 0;\n    for (int i = 0; i <= len - sublen; i++) {\n        if (!strncmp(str + i, substr, (size_t)sublen))\n            count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str, char *substr) {\n    int count = 0;\n    int len = strlen(str);\n    int sublen = strlen(substr);\n    if (len == 0)\n        return 0;\n    for (int i = 0; i <= len - sublen; i++) {\n        if (!strncmp(str + i, substr, (size_t)sublen))\n            count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(char *str, char *substr) {\n    int i, j, count = 0;\n    int len1 = strlen(str);\n    int len2 = strlen(substr);\n    for (i = 0; i <= len1 - len2; i++) {\n        for (j = 0; j < len2; j++) {\n            if (str[i + j] != substr[j]) {\n                break;\n            }\n        }\n        if (j == len2) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str, char *substr) {\n    int i, count = 0;\n    int len1 = strlen(str);\n    int len2 = strlen(substr);\n    for (i = 0; i <= len1 - len2; i++) {\n        if (strncmp(str + i, substr, len2) == 0) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str, const char *substring) {\n    int out = 0;\n    int str_len = strlen(str);\n    int sub_len = strlen(substring);\n    if (str_len == 0) return 0;\n    for (int i = 0; i <= str_len - sub_len; i++) {\n        if (strncmp(&str[i], substring, sub_len) == 0)\n            out++;\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(char *str, char *substr) {\n    int i, j, count = 0;\n    int len1 = strlen(str);\n    int len2 = strlen(substr);\n    for (i = 0; i <= len1 - len2; i++) {\n        for (j = 0; j < len2; j++) {\n            if (str[i + j] != substr[j]) {\n                break;\n            }\n        }\n        if (j == len2) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str, char *substr) {\n    int i, count = 0;\n    int len1 = strlen(str);\n    int len2 = strlen(substr);\n    for (i = 0; i <= len1 - len2; i++) {\n        if (strncmp(str + i, substr, len2) == 0) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
    "c_func_decompile": "char *func0(char *s) {\n    int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n    char *a[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int b[10] = {0};\n    char c[100];\n    char *d = \"0123456789\";\n    char *e = \"0123456789\";\n    char *f = \"0123456789\";\n    char *g = \"0123456789\";\n    char *h = \"0123456789\";\n    char *i = \"0123456789\";\n    char *j = \"0123456789\";\n    char *k = \"0123456789\";\n    char *l = \"0123456789\";\n    char *m = \"0123456789\";\n    char *n = \"0123456789\";\n    char *o = \"0123456789\";\n    char *p = \"0123456789\";\n    char *q = \"0123456789\";\n    char *r = \"0123456789\";\n    char *s = \"0123456789\";\n    char *t = \"0123456789\";\n    char *u = \"0123456789\";\n    char *v = \"0123456789\";\n    char *w = \"0123456789\";\n    char *x = \"0123456789\";\n    char *y = \"0123456789\";\n    char *z = \"0123456789\";\n    char *A = \"0123456789\";\n    char *B = \"0123456789\";\n    char *C = \"0123456789\";\n    char *D = \"0123456789\";\n    char *E = \"0123456789\";\n    char *F = \"0123456789\";\n    char *G = \"0123456789\";\n    char *H = \"0123456789\";\n    char *I = \"0123456789\";\n    char *J = \"0123456789\";\n    char *K = \"0123456789\";\n    char *L = \"0123456789\";\n    char *M = \"0123456789\";\n    char *N = \"0123456789\";\n    char *O = \"0123456789\";\n    char *P = \"0123456789\";\n    char *Q = \"0123456789\";\n    char *R = \"0123456789\";\n    char *S = \"0123456789\";\n    char *T = \"0123456789\";\n    char *U = \"0123456789\";\n    char *V = \"0123456789\";\n    char *W = \"0123456789\";\n    char *X = \"0123456789\";\n    char *Y = \"0123456789\";\n    char *Z = \"0123456789\";\n    char *a = \"0123456789\";\n    char *b = \"012345",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
    "c_func_decompile": "int *func0(char *str, int *len) {\n    int *arr = NULL;\n    int i, j, k = 0, l = 0;\n    char *tmp;\n    char buf[3] = {0};\n    size_t len_tmp;\n    int len_str = strlen(str) + 1;\n    tmp = (char *)malloc(len_str + 1);\n    strcpy(tmp, str);\n    tmp[strlen(tmp)] = ' ';\n    for (i = 0; i < len_str; i++) {\n        if (tmp[i] == ' ') {\n            if (!strcmp(buf, \"int\")) {\n                if (k == l) {\n                    l = l > 0 ? l * 2 : 4;\n                    arr = (int *)realloc(arr, l * sizeof(int));\n                }\n                arr[k++] = 4;\n            }\n            if (!strcmp(buf, \"char\")) {\n                if (k == l) {\n                    l = l > 0 ? l * 2 : 4;\n                    arr = (int *)realloc(arr, l * sizeof(int));\n                }\n                arr[k++] = 2;\n            }\n            if (!strcmp(buf, \"float\")) {\n                if (k == l) {\n                    l = l > 0 ? l * 2 : 4;\n                    arr = (int *)realloc(arr, l * sizeof(int));\n                }\n                arr[k++] = 1;\n            }\n            buf[0] = '\\0';\n        } else {\n            len_tmp = strlen(buf);\n            if (len_tmp < 2) {\n                buf[len_tmp] = tmp[i];\n                buf[len_tmp + 1] = '\\0';\n            }\n        }\n    }\n    free(tmp);\n    *len = k;\n    return arr;\n}",
    "c_func_re_decompile": "int *func0(char *str, int *len) {\n    int *arr = NULL;\n    int i, j, k = 0, l = 0;\n    char *tmp;\n    char buf[3] = {0};\n    size_t len_tmp;\n    int len_str = strlen(str) + 1;\n    tmp = (char *)malloc(len_str + 1);\n    strcpy(tmp, str);\n    tmp[strlen(tmp)] = ' ';\n    for (i = 0; i < len_str; i++) {\n        if (tmp[i] == ' ') {\n            if (!strcmp(buf, \"int\")) {\n                if (k == l) {\n                    l = l > 0 ? l * 2 : 4;\n                    arr = (int *)realloc(arr, l * sizeof(int));\n                }\n                arr[k++] = 4;\n            }\n            if (!strcmp(buf, \"char\")) {\n                if (k == l) {\n                    l = l > 0 ? l * 2 : 4;\n                    arr = (int *)realloc(arr, l * sizeof(int));\n                }\n                arr[k++] = 2;\n            }\n            if (!strcmp(buf, \"float\")) {\n                if (k == l) {\n                    l = l > 0 ? l * 2 : 4;\n                    arr = (int *)realloc(arr, l * sizeof(int));\n                }\n                arr[k++] = 1;\n            }\n            buf[0] = '\\0';\n        } else {\n            len_tmp = strlen(buf);\n            if (len_tmp < 2) {\n                buf[len_tmp] = tmp[i];\n                buf[len_tmp + 1] = '\\0';\n            }\n        }\n    }\n    free(tmp);\n    *len = k;\n    return arr;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
    "c_func_decompile": "int *func0(char *str, int *len) {\n    int i, j, k, l;\n    char *s, *t;\n    int *a;\n    char buf[3] = {0};\n    s = (char *)malloc(strlen(str) + 2);\n    memcpy(s, str, strlen(str));\n    s[strlen(str) + 1] = ' ';\n    a = NULL;\n    l = 0;\n    for (i = 0, j = 0; i < strlen(str) + 1; i++) {\n        if (s[i] != ' ') {\n            buf[j++] = s[i];\n            buf[j] = 0;\n        } else {\n            if (strcmp(buf, \"o\") == 0 && j == 0) {\n                if (l == k) {\n                    k = 4;\n                    a = (int *)realloc(a, k * sizeof(int));\n                }\n                a[l++] = 4;\n            }\n            if (strcmp(buf, \"o|\") == 0 && j == 2) {\n                if (l == k) {\n                    k = 4;\n                    a = (int *)realloc(a, k * sizeof(int));\n                }\n                a[l++] = 2;\n            }\n            if (strcmp(buf, \".|\") == 0 && j == 2) {\n                if (l == k) {\n                    k = 4;\n                    a = (int *)realloc(a, k * sizeof(int));\n                }\n                a[l++] = 1;\n            }\n            j = 0;\n            buf[0] = 0;\n        }\n    }\n    free(s);\n    *len = l;\n    return a;\n}",
    "c_func_re_decompile": "int *func0(char *str, int *len) {\n    int i, j, k, l;\n    char *s, *t;\n    int *a;\n    char buf[3] = {0};\n    s = (char *)malloc(strlen(str) + 2);\n    memcpy(s, str, strlen(str));\n    s[strlen(str) + 1] = ' ';\n    a = NULL;\n    l = 0;\n    for (i = 0, j = 0; i < strlen(str) + 1; i++) {\n        if (s[i] != ' ') {\n            buf[j++] = s[i];\n            buf[j] = 0;\n        } else {\n            if (strcmp(buf, \"o\") == 0 && j == 0) {\n                if (l == k) {\n                    k = 4;\n                    a = (int *)realloc(a, k * sizeof(int));\n                }\n                a[l++] = 4;\n            }\n            if (strcmp(buf, \"o|\") == 0 && j == 2) {\n                if (l == k) {\n                    k = 4;\n                    a = (int *)realloc(a, k * sizeof(int));\n                }\n                a[l++] = 2;\n            }\n            if (strcmp(buf, \".|\") == 0 && j == 2) {\n                if (l == k) {\n                    k = 4;\n                    a = (int *)realloc(a, k * sizeof(int));\n                }\n                a[l++] = 1;\n            }\n            j = 0;\n            buf[0] = 0;\n        }\n    }\n    free(s);\n    *len = l;\n    return a;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
    "c_func_decompile": "void func0(float *x, int n) {\n  int i;\n  float min, max;\n  min = max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  for (i = 0; i < n; i++) {\n    x[i] = (x[i] - min) / (max - min);\n  }\n}",
    "c_func_re_decompile": "void func0(float *x, int n) {\n  int i;\n  float min, max;\n  min = max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  for (i = 0; i < n; i++) {\n    x[i] = (x[i] - min) / (max - min);\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
    "c_func_decompile": "void func0(float *x, int n) {\n  int i, j;\n  float min, max;\n  min = x[0];\n  max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  for (j = 0; j < n; j++) {\n    x[j] = (x[j] - min) / (max - min);\n  }\n}",
    "c_func_re_decompile": "void func0(float *x, int n) {\n  int i, j;\n  float min, max;\n  min = x[0];\n  max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  for (j = 0; j < n; j++) {\n    x[j] = (x[j] - min) / (max - min);\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
    "c_func_decompile": "int *func0(char *str, int *len) {\n    int i, j, k, l;\n    char *s, *t;\n    int *a;\n    char buf[3] = {0};\n    s = (char *)malloc(strlen(str) + 2);\n    memcpy(s, str, strlen(str));\n    s[strlen(str) + 1] = ' ';\n    a = NULL;\n    l = 0;\n    for (i = 0; i < (int)strlen(str) + 1; i++) {\n        if (s[i] != ' ') {\n            buf[strlen(buf)] = s[i];\n            buf[strlen(buf) + 1] = '\\0';\n        } else {\n            if (strcmp(buf, \"o\") == 0 && strlen(buf) == 1) {\n                if (l == k) {\n                    k = k * 2;\n                    a = (int *)realloc(a, k * sizeof(int));\n                }\n                a[l++] = 4;\n            }\n            if (strcmp(buf, \"o|\") == 0 && strlen(buf) == 2) {\n                if (l == k) {\n                    k = k * 2;\n                    a = (int *)realloc(a, k * sizeof(int));\n                }\n                a[l++] = 2;\n            }\n            if (strcmp(buf, \".|\") == 0 && strlen(buf) == 2) {\n                if (l == k) {\n                    k = k * 2;\n                    a = (int *)realloc(a, k * sizeof(int));\n                }\n                a[l++] = 1;\n            }\n            buf[0] = '\\0';\n        }\n    }\n    free(s);\n    *len = l;\n    return a;\n}",
    "c_func_re_decompile": "int *func0(char *str, int *len) {\n    int i, j, k, l;\n    char *s, *t;\n    int *a;\n    char buf[3] = {0};\n    s = (char *)malloc(strlen(str) + 2);\n    memcpy(s, str, strlen(str));\n    s[strlen(str) + 1] = ' ';\n    a = NULL;\n    l = 0;\n    for (i = 0; i < (int)strlen(str) + 1; i++) {\n        if (s[i] != ' ') {\n            buf[strlen(buf)] = s[i];\n            buf[strlen(buf) + 1] = '\\0';\n        } else {\n            if (strcmp(buf, \"o\") == 0 && strlen(buf) == 1) {\n                if (l == k) {\n                    k = k * 2;\n                    a = (int *)realloc(a, k * sizeof(int));\n                }\n                a[l++] = 4;\n            }\n            if (strcmp(buf, \"o|\") == 0 && strlen(buf) == 2) {\n                if (l == k) {\n                    k = k * 2;\n                    a = (int *)realloc(a, k * sizeof(int));\n                }\n                a[l++] = 2;\n            }\n            if (strcmp(buf, \".|\") == 0 && strlen(buf) == 2) {\n                if (l == k) {\n                    k = k * 2;\n                    a = (int *)realloc(a, k * sizeof(int));\n                }\n                a[l++] = 1;\n            }\n            buf[0] = '\\0';\n        }\n    }\n    free(s);\n    *len = l;\n    return a;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i = 0;\n    while (str[i] != '\\0') {\n        i++;\n    }\n    return i;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i = 0;\n    while (str[i] != '\\0') {\n        i++;\n    }\n    return i;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
    "c_func_decompile": "void func0(float *x, int n) {\n  int i;\n  float min, max;\n  min = max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  for (i = 0; i < n; i++) {\n    x[i] = (x[i] - min) / (max - min);\n  }\n}",
    "c_func_re_decompile": "void func0(float *x, int n) {\n  int i;\n  float min, max;\n  min = max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  for (i = 0; i < n; i++) {\n    x[i] = (x[i] - min) / (max - min);\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nvoid func0(float *numbers, int size) {\n    float min = numbers[0], max = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n}",
    "c_func_decompile": "void func0(float *x, int n) {\n  int i;\n  float min, max, range;\n  min = max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  range = max - min;\n  for (i = 0; i < n; i++) {\n    x[i] = (x[i] - min) / range;\n  }\n}",
    "c_func_re_decompile": "void func0(float *x, int n) {\n  int i;\n  float min, max, range;\n  min = max = x[0];\n  for (i = 1; i < n; i++) {\n    if (x[i] < min) min = x[i];\n    if (x[i] > max) max = x[i];\n  }\n  range = max - min;\n  for (i = 0; i < n; i++) {\n    x[i] = (x[i] - min) / range;\n  }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint *func0(const char *music_string, int *count) {\n    int *out = NULL;\n    int size = 0;\n    int capacity = 0;\n\n    char current[3] = \"\";\n    int music_string_length = strlen(music_string) + 1;\n    char *temp_music_string = malloc(music_string_length + 1);\n    strcpy(temp_music_string, music_string);\n    strcat(temp_music_string, \" \");\n\n    for (int i = 0; i < music_string_length; i++) {\n        if (temp_music_string[i] == ' ') {\n            if (strcmp(current, \"o\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 4;\n            }\n            if (strcmp(current, \"o|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 2;\n            }\n            if (strcmp(current, \".|\") == 0) {\n                if (size == capacity) {\n                    capacity = capacity > 0 ? 2 * capacity : 4;\n                    out = realloc(out, capacity * sizeof(int));\n                }\n                out[size++] = 1;\n            }\n            strcpy(current, \"\");\n        } else {\n            size_t len = strlen(current);\n            if (len < sizeof(current) - 1) {\n                current[len] = temp_music_string[i];\n                current[len + 1] = '\\0';\n            }\n        }\n    }\n    free(temp_music_string);\n    *count = size;\n    return out;\n}",
    "c_func_decompile": "int *func0(char *str, int *len) {\n    int i, j, k, l, m;\n    char *s, *t;\n    int *a;\n    char buf[3] = {0};\n    s = (char *)malloc(strlen(str) + 2);\n    t = s;\n    strcpy(s, str);\n    s = s + strlen(s);\n    *s = ' ';\n    s++;\n    a = NULL;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(t) + 1; i++) {\n        if (t[i] == ' ') {\n            if (!strcmp(buf, \"int\")) {\n                if (k != l) {\n                    a[l] = 4;\n                    l++;\n                } else {\n                    l = 4;\n                    a = (int *)realloc(a, l * sizeof(int));\n                }\n            }\n            if (!strcmp(buf, \"char\")) {\n                if (k != l) {\n                    a[l] = 2;\n                    l++;\n                } else {\n                    l = 4;\n                    a = (int *)realloc(a, l * sizeof(int));\n                }\n            }\n            if (!strcmp(buf, \"float\")) {\n                if (k != l) {\n                    a[l] = 1;\n                    l++;\n                } else {\n                    l = 4;\n                    a = (int *)realloc(a, l * sizeof(int));\n                }\n            }\n            buf[0] = 0;\n        } else {\n            j = strlen(buf);\n            if (j < 2) {\n                buf[j] = t[i];\n                buf[j + 1] = 0;\n            }\n        }\n    }\n    a = NULL;\n    free(t);\n    *len = l;\n    return a;\n}",
    "c_func_re_decompile": "int *func0(char *str, int *len) {\n    int i, j, k, l, m;\n    char *s, *t;\n    int *a;\n    char buf[3] = {0};\n    s = (char *)malloc(strlen(str) + 2);\n    t = s;\n    strcpy(s, str);\n    s = s + strlen(s);\n    *s = ' ';\n    s++;\n    a = NULL;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(t) + 1; i++) {\n        if (t[i] == ' ') {\n            if (!strcmp(buf, \"int\")) {\n                if (k != l) {\n                    a[l] = 4;\n                    l++;\n                } else {\n                    if (l > 0) {\n                        l = l * 2;\n                    } else {\n                        l = 4;\n                    }\n                    a = (int *)realloc(a, l * sizeof(int));\n                }\n            }\n            if (!strcmp(buf, \"char\")) {\n                if (k != l) {\n                    a[l] = 2;\n                    l++;\n                } else {\n                    if (l > 0) {\n                        l = l * 2;\n                    } else {\n                        l = 4;\n                    }\n                    a = (int *)realloc(a, l * sizeof(int));\n                }\n            }\n            if (!strcmp(buf, \"float\")) {\n                if (k != l) {\n                    a[l] = 1;\n                    l++;\n                } else {\n                    if (l > 0) {\n                        l = l * 2;\n                    } else {\n                        l = 4;\n                    }\n                    a = (int *)realloc(a, l * sizeof(int));\n                }\n            }\n            buf[0] = 0;\n        } else {\n            j = strlen(buf);\n            if (j < 2) {\n                buf[j] = t[i];\n                buf[j + 1] = 0;\n            }\n        }\n    }\n    a = NULL;\n    free(t);\n    *len = l;\n    return a;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i = 0;\n    while (str[i] != '\\0') {\n        i++;\n    }\n    return i;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i = 0;\n    while (str[i] != '\\0') {\n        i++;\n    }\n    return i;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i = 0;\n    while (str[i] != '\\0') {\n        i++;\n    }\n    return i;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i = 0;\n    while (str[i] != '\\0') {\n        i++;\n    }\n    return i;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i = 0;\n    while (str[i] != '\\0') {\n        i++;\n    }\n    return i;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i = 0;\n    while (str[i] != '\\0') {\n        i++;\n    }\n    return i;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
    "c_func_decompile": "void func0(float *x, int n, float *y) {\n  int i, j;\n  float min, tmp;\n  min = 1.0e30;\n  y[0] = x[0];\n  y[1] = x[1];\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      tmp = fabsf(x[i] - x[j]);\n      if (tmp < min) {\n        min = tmp;\n        y[0] = x[i];\n        y[1] = x[j];\n      }\n    }\n  }\n  if (y[0] > y[1]) {\n    tmp = y[0];\n    y[0] = y[1];\n    y[1] = tmp;\n  }\n}",
    "c_func_re_decompile": "void func0(float *x, int n, float *y) {\n  int i, j;\n  float min, tmp;\n  min = 1.0e30;\n  y[0] = x[0];\n  y[1] = x[1];\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      tmp = fabsf(x[i] - x[j]);\n      if (tmp < min) {\n        min = tmp;\n        y[0] = x[i];\n        y[1] = x[j];\n      }\n    }\n  }\n  if (y[0] > y[1]) {\n    tmp = y[0];\n    y[0] = y[1];\n    y[1] = tmp;\n  }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
    "c_func_decompile": "void func0(float *x, int n, float *y) {\n  int i, j;\n  float d, dmin;\n  y[0] = x[0];\n  y[1] = x[1];\n  dmin = 1.0e30;\n  for (i = 1; i < n; i++) {\n    for (j = 0; j < i; j++) {\n      d = fabs(x[i] - x[j]);\n      if (d < dmin) {\n        dmin = d;\n        y[0] = x[i];\n        y[1] = x[j];\n      }\n    }\n  }\n  if (y[0] > y[1]) {\n    d = y[0];\n    y[0] = y[1];\n    y[1] = d;\n  }\n}",
    "c_func_re_decompile": "void func0(float *x, int n, float *y) {\n  int i, j;\n  float d, dmin;\n  y[0] = x[0];\n  y[1] = x[1];\n  dmin = 1.0e30;\n  for (i = 1; i < n; i++) {\n    for (j = 0; j < i; j++) {\n      d = fabs(x[i] - x[j]);\n      if (d < dmin) {\n        dmin = d;\n        y[0] = x[i];\n        y[1] = x[j];\n      }\n    }\n  }\n  if (y[0] > y[1]) {\n    d = y[0];\n    y[0] = y[1];\n    y[1] = d;\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
    "c_func_decompile": "void func0(float *x, int n, float *res) {\n  int i, j;\n  float diff, min;\n  res[0] = x[0];\n  res[1] = x[1];\n  min = fabsf(res[0] - res[1]);\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      diff = fabsf(x[i] - x[j]);\n      if (diff < min) {\n        res[0] = x[i];\n        res[1] = x[j];\n        min = diff;\n      }\n    }\n  }\n  if (res[0] > res[1]) {\n    float tmp = res[0];\n    res[0] = res[1];\n    res[1] = tmp;\n  }\n}",
    "c_func_re_decompile": "void func0(float *x, int n, float *res) {\n  int i, j;\n  float diff, min;\n  res[0] = x[0];\n  res[1] = x[1];\n  min = fabsf(res[0] - res[1]);\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      diff = fabsf(x[i] - x[j]);\n      if (diff < min) {\n        res[0] = x[i];\n        res[1] = x[j];\n        min = diff;\n      }\n    }\n  }\n  if (res[0] > res[1]) {\n    float tmp = res[0];\n    res[0] = res[1];\n    res[1] = tmp;\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <float.h>\n\nvoid func0(float numbers[], int size, float out[2]) {\n    float min_diff = FLT_MAX;\n    int i, j;\n\n    out[0] = numbers[0];\n    out[1] = numbers[1];\n\n    for (i = 0; i < size; i++) {\n        for (j = i + 1; j < size; j++) {\n            float diff = fabs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                out[0] = numbers[i];\n                out[1] = numbers[j];\n            }\n        }\n    }\n\n    if (out[0] > out[1]) {\n        float temp = out[0];\n        out[0] = out[1];\n        out[1] = temp;\n    }\n}",
    "c_func_decompile": "void func0(float *a, int n, float *b) {\n  int i, j;\n  float diff;\n  b[0] = a[0];\n  b[1] = a[1];\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      diff = fabsf(a[i] - a[j]);\n      if (diff < fabsf(b[0] - b[1])) {\n        b[0] = a[i];\n        b[1] = a[j];\n      }\n    }\n  }\n  if (b[0] > b[1]) {\n    b[0] = b[1];\n    b[1] = b[0];\n  }\n}",
    "c_func_re_decompile": "void func0(float *a, int n, float *b) {\n  int i, j;\n  float diff, min;\n  b[0] = a[0];\n  b[1] = a[1];\n  min = fabsf(a[0] - a[1]);\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      diff = fabsf(a[i] - a[j]);\n      if (diff < min) {\n        b[0] = a[i];\n        b[1] = a[j];\n        min = diff;\n      }\n    }\n  }\n  if (b[0] > b[1]) {\n    b[0] = b[1];\n    b[1] = b[0];\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return n / i;\n    return 1;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
    "c_func_decompile": "char * func0(char *s) {\n    int i, j, k, l;\n    int count[10] = {0};\n    char *word[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    char temp[10];\n    static char result[1000];\n    l = 0;\n    while (*s != '\\0') {\n        for (i = 0; s[i] != ' ' && s[i] != '\\0'; i++)\n            temp[i] = s[i];\n        temp[i] = '\\0';\n        for (j = 0; j < 10; j++)\n            if (!strcmp(temp, word[j])) {\n                count[j]++;\n                break;\n            }\n        s += i + 1;\n    }\n    for (i = 0; i < 10; i++)\n        for (j = 0; j < count[i]; j++) {\n            for (k = 0; word[i][k] != '\\0'; k++, l++)\n                result[l] = word[i][k];\n            result[l++] = ' ';\n        }\n    if (l > 0)\n        result[l - 1] = '\\0';\n    else\n        result[0] = '\\0';\n    return result;\n}",
    "c_func_re_decompile": "char * func0(char *s) {\n    int i, j, k, l;\n    int count[10] = {0};\n    char *word[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    char temp[10];\n    static char result[1000];\n    l = 0;\n    while (*s != '\\0') {\n        for (i = 0; s[i] != ' ' && s[i] != '\\0'; i++)\n            temp[i] = s[i];\n        temp[i] = '\\0';\n        for (j = 0; j < 10; j++)\n            if (!strcmp(temp, word[j])) {\n                count[j]++;\n                break;\n            }\n        s += i + 1;\n    }\n    for (i = 0; i < 10; i++)\n        for (j = 0; j < count[i]; j++) {\n            for (k = 0; word[i][k] != '\\0'; k++, l++)\n                result[l] = word[i][k];\n            result[l++] = ' ';\n        }\n    if (l > 0)\n        result[l - 1] = '\\0';\n    else\n        result[0] = '\\0';\n    return result;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n, int *len) {\n    int *arr = malloc(256);\n    *len = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            arr[(*len)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        arr[(*len)++] = n;\n    }\n    return arr;\n}",
    "c_func_re_decompile": "int *func0(int n, int *len) {\n    int *arr = malloc(256);\n    *len = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            arr[(*len)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        arr[(*len)++] = n;\n    }\n    return arr;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
    "c_func_decompile": "char *func0(char *s) {\n    int i, j, k, l, m, n, o;\n    int a[10] = {0};\n    char *b[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    char c[10], d[100];\n    for (i = 0; s[i] != '\\0'; i++) {\n        for (j = 0; s[i] != ' ' && s[i] != '\\0'; i++, j++) {\n            c[j] = s[i];\n        }\n        c[j] = '\\0';\n        for (k = 0; k < 10; k++) {\n            if (strcmp(c, b[k]) == 0) {\n                a[k]++;\n                break;\n            }\n        }\n    }\n    for (l = 0, m = 0; l < 10; l++) {\n        for (n = 0; n < a[l]; n++) {\n            for (o = 0; b[l][o] != '\\0'; o++) {\n                d[m++] = b[l][o];\n            }\n            d[m++] = ' ';\n        }\n    }\n    if (m != 0) {\n        d[m - 1] = '\\0';\n    } else {\n        d[0] = '\\0';\n    }\n    return d;\n}",
    "c_func_re_decompile": "char *func0(char *s) {\n    int i, j, k, l, m, n, o;\n    int a[10] = {0};\n    char *b[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    char c[10], d[100];\n    for (i = 0; s[i] != '\\0'; i++) {\n        for (j = 0; s[i] != ' ' && s[i] != '\\0'; i++, j++) {\n            c[j] = s[i];\n        }\n        c[j] = '\\0';\n        for (k = 0; k < 10; k++) {\n            if (strcmp(c, b[k]) == 0) {\n                a[k]++;\n                break;\n            }\n        }\n    }\n    for (l = 0, m = 0; l < 10; l++) {\n        for (n = 0; n < a[l]; n++) {\n            for (o = 0; b[l][o] != '\\0'; o++) {\n                d[m++] = b[l][o];\n            }\n            d[m++] = ' ';\n        }\n    }\n    if (m != 0) {\n        d[m - 1] = '\\0';\n    } else {\n        d[0] = '\\0';\n    }\n    return d;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n, int *len) {\n    int *arr = malloc(sizeof(int) * 64);\n    *len = 0;\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n            arr[(*len)++] = i;\n        }\n    }\n    if (n > 1) {\n        arr[(*len)++] = n;\n    }\n    return arr;\n}",
    "c_func_re_decompile": "int *func0(int n, int *len) {\n    int *arr = malloc(sizeof(int) * 64);\n    *len = 0;\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n            arr[(*len)++] = i;\n        }\n    }\n    if (n > 1) {\n        arr[(*len)++] = n;\n    }\n    return arr;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n, int *len) {\n    int *arr = malloc(256);\n    *len = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            arr[(*len)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        arr[(*len)++] = n;\n    }\n    return arr;\n}",
    "c_func_re_decompile": "int *func0(int n, int *len) {\n    int *arr = malloc(256);\n    *len = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            arr[(*len)++] = i;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        arr[(*len)++] = n;\n    }\n    return arr;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n, int* size) {\n    int* out = malloc(sizeof(int) * 64);\n    *size = 0;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n = n / i;\n            out[(*size)++] = i;\n        }\n    }\n    if (n > 1) {\n        out[(*size)++] = n;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n, int *len) {\n    int *arr = malloc(256 * sizeof(int));\n    int i = 2;\n    *len = 0;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            arr[(*len)++] = i;\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        arr[(*len)++] = n;\n    }\n    return arr;\n}",
    "c_func_re_decompile": "int *func0(int n, int *len) {\n    int *arr = malloc(64 * sizeof(int));\n    int i = 2;\n    *len = 0;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            arr[(*len)++] = i;\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        arr[(*len)++] = n;\n    }\n    return arr;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
    "c_func_decompile": "void func0(char *str, char *str1) {\n    int i, len;\n    char c;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        c = str[i];\n        if (c >= 'a' && c <= 'z') {\n            c -= 32;\n        } else if (c >= 'A' && c <= 'Z') {\n            c += 32;\n        }\n        str1[i] = c;\n    }\n    str1[len] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1) {\n    int i, len;\n    char c;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        c = str[i];\n        if (c >= 'a' && c <= 'z') {\n            c -= 32;\n        } else if (c >= 'A' && c <= 'Z') {\n            c += 32;\n        }\n        str1[i] = c;\n    }\n    str1[len] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* numbers) {\n    int count[10] = {0};\n    const char* numto[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int index, i, j, k;\n    static char out[1000]; \n    char current[6]; \n\n    index = 0;\n    if (*numbers) {\n        do {\n            for (i = 0; numbers[i] != ' ' && numbers[i] != '\\0'; ++i) {\n                current[i] = numbers[i];\n            }\n            current[i] = '\\0';\n            for (j = 0; j < 10; ++j) {\n                if (strcmp(current, numto[j]) == 0) {\n                    count[j]++;\n                    break;\n                }\n            }\n            numbers += i + 1;\n        } while (numbers[-1]);\n    }\n\n    for (i = 0; i < 10; ++i) {\n        for (j = 0; j < count[i]; ++j) {\n            for (k = 0; numto[i][k] != '\\0'; ++k, ++index) {\n                out[index] = numto[i][k];\n            }\n            out[index++] = ' '; \n        }\n    }\n\n    if (index > 0) {\n        out[index - 1] = '\\0'; \n    } else {\n        out[0] = '\\0';\n    }\n\n    return out;\n}",
    "c_func_decompile": "char* func0(char* str) {\n    int i, j, k, l, m, n, o;\n    int count[10] = {0};\n    char *s[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    char temp[100], temp1[100];\n    i = 0;\n    while (str[i] != '\\0') {\n        j = 0;\n        while (str[i] != ' ' && str[i] != '\\0') {\n            temp[j] = str[i];\n            j++;\n            i++;\n        }\n        temp[j] = '\\0';\n        for (k = 0; k < 10; k++) {\n            if (strcmp(temp, s[k]) == 0) {\n                count[k]++;\n                break;\n            }\n        }\n        i++;\n    }\n    o = 0;\n    for (i = 0; i < 10; i++) {\n        for (j = 0; j < count[i]; j++) {\n            for (k = 0; s[i][k] != '\\0'; k++) {\n                temp1[o] = s[i][k];\n                o++;\n            }\n            temp1[o] = ' ';\n            o++;\n        }\n    }\n    if (o > 0) {\n        temp1[o - 1] = '\\0';\n    } else {\n        temp1[0] = '\\0';\n    }\n    return temp1;\n}",
    "c_func_re_decompile": "char* func0(char* str) {\n    int i, j, k, l, m, n, o;\n    int count[10] = {0};\n    char *s[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    char temp[100], temp1[100];\n    i = 0;\n    while (str[i] != '\\0') {\n        j = 0;\n        while (str[i] != ' ' && str[i] != '\\0') {\n            temp[j] = str[i];\n            j++;\n            i++;\n        }\n        temp[j] = '\\0';\n        for (k = 0; k < 10; k++) {\n            if (strcmp(temp, s[k]) == 0) {\n                count[k]++;\n                break;\n            }\n        }\n        i++;\n    }\n    o = 0;\n    for (i = 0; i < 10; i++) {\n        for (j = 0; j < count[i]; j++) {\n            for (k = 0; s[i][k] != '\\0'; k++) {\n                temp1[o] = s[i][k];\n                o++;\n            }\n            temp1[o] = ' ';\n            o++;\n        }\n    }\n    if (o > 0) {\n        temp1[o - 1] = '\\0';\n    } else {\n        temp1[0] = '\\0';\n    }\n    return temp1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
    "c_func_decompile": "char *func0(char *argv[], int argc) {\n    int i, len = 0;\n    for (i = 0; i < argc; i++) {\n        len += strlen(argv[i]);\n    }\n    char *ret = malloc(len + 1);\n    if (ret == NULL) {\n        return NULL;\n    }\n    ret[0] = '\\0';\n    for (i = 0; i < argc; i++) {\n        strcat(ret, argv[i]);\n    }\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char *argv[], int argc) {\n    int i, len = 0;\n    for (i = 0; i < argc; i++) {\n        len += strlen(argv[i]);\n    }\n    char *ret = malloc(len + 1);\n    if (ret == NULL) {\n        return NULL;\n    }\n    ret[0] = '\\0';\n    for (i = 0; i < argc; i++) {\n        strcat(ret, argv[i]);\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
    "c_func_decompile": "void func0(char *str, char *str1) {\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (str[i] >= 'a' && str[i] <= 'z') {\n            str1[i] = str[i] - 32;\n        } else if (str[i] >= 'A' && str[i] <= 'Z') {\n            str1[i] = str[i] + 32;\n        } else {\n            str1[i] = str[i];\n        }\n    }\n    str1[len] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1) {\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (str[i] >= 'a' && str[i] <= 'z') {\n            str1[i] = str[i] - 32;\n        } else if (str[i] >= 'A' && str[i] <= 'Z') {\n            str1[i] = str[i] + 32;\n        } else {\n            str1[i] = str[i];\n        }\n    }\n    str1[len] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
    "c_func_decompile": "void func0(char *str, char *str1) {\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (str[i] >= 'a' && str[i] <= 'z') {\n            str1[i] = str[i] - 32;\n        } else if (str[i] >= 'A' && str[i] <= 'Z') {\n            str1[i] = str[i] + 32;\n        } else {\n            str1[i] = str[i];\n        }\n    }\n    str1[i] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1) {\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (str[i] >= 'a' && str[i] <= 'z') {\n            str1[i] = str[i] - 32;\n        } else if (str[i] >= 'A' && str[i] <= 'Z') {\n            str1[i] = str[i] + 32;\n        } else {\n            str1[i] = str[i];\n        }\n    }\n    str1[i] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
    "c_func_decompile": "char *func0(char **argv, int argc) {\n    int i, len = 0;\n    char *ret;\n    for (i = 0; i < argc; i++) {\n        len += strlen(argv[i]);\n    }\n    ret = malloc(len + 1);\n    if (ret == NULL) {\n        return NULL;\n    }\n    ret[0] = '\\0';\n    for (i = 0; i < argc; i++) {\n        ret = strcat(ret, argv[i]);\n    }\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char **argv, int argc) {\n    int i, len = 0;\n    char *ret;\n    for (i = 0; i < argc; i++) {\n        len += strlen(argv[i]);\n    }\n    ret = malloc(len + 1);\n    if (ret == NULL) {\n        return NULL;\n    }\n    ret[0] = '\\0';\n    for (i = 0; i < argc; i++) {\n        ret = strcat(ret, argv[i]);\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
    "c_func_decompile": "char *func0(char **argv, int argc) {\n    int i, len = 0;\n    char *ret;\n    for (i = 0; i < argc; i++) {\n        len += strlen(argv[i]);\n    }\n    ret = malloc(len + 1);\n    if (ret == NULL) {\n        return NULL;\n    }\n    ret[0] = '\\0';\n    for (i = 0; i < argc; i++) {\n        ret = strcat(ret, argv[i]);\n    }\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char **argv, int argc) {\n    int i, len = 0;\n    char *ret;\n    for (i = 0; i < argc; i++) {\n        len += strlen(argv[i]);\n    }\n    ret = malloc(len + 1);\n    if (ret == NULL) {\n        return NULL;\n    }\n    ret[0] = '\\0';\n    for (i = 0; i < argc; i++) {\n        ret = strcat(ret, argv[i]);\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* str, char* out) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w -= 32;\n        } else if (w >= 'A' && w <= 'Z') {\n            w += 32;\n        }\n        out[i] = w;\n    }\n    out[length] = '\\0';\n}",
    "c_func_decompile": "void func0(char *str, char *str1) {\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (str[i] >= 'a' && str[i] <= 'z') {\n            str1[i] = str[i] - 32;\n        } else if (str[i] >= 'A' && str[i] <= 'Z') {\n            str1[i] = str[i] + 32;\n        } else {\n            str1[i] = str[i];\n        }\n    }\n    str1[len] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1) {\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (str[i] >= 'a' && str[i] <= 'z') {\n            str1[i] = str[i] - 32;\n        } else if (str[i] >= 'A' && str[i] <= 'Z') {\n            str1[i] = str[i] + 32;\n        } else {\n            str1[i] = str[i];\n        }\n    }\n    str1[len] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
    "c_func_decompile": "int func0(char *str[], int n, char *s, char ***p) {\n    int i, j, len = strlen(s);\n    *p = (char **)malloc(n * sizeof(char *));\n    for (i = 0, j = 0; i < n; i++)\n        if (!strncmp(str[i], s, len))\n            (*p)[j++] = str[i];\n    return j;\n}",
    "c_func_re_decompile": "int func0(char *str[], int n, char *s, char ***p) {\n    int i, j, len = strlen(s);\n    *p = (char **)malloc(n * sizeof(char *));\n    for (i = 0, j = 0; i < n; i++)\n        if (!strncmp(str[i], s, len))\n            (*p)[j++] = str[i];\n    return j;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(char** strings, int count) {\n    int length = 0;\n    for (int i = 0; i < count; i++) {\n        length += strlen(strings[i]);\n    }\n    \n    char* out = (char*)malloc(length + 1);\n    if (!out) {\n        return NULL; \n    }\n    \n    out[0] = '\\0';\n\n    for (int i = 0; i < count; i++) {\n        strcat(out, strings[i]);\n    }\n    \n    return out;\n}",
    "c_func_decompile": "char *func0(char **argv, int argc) {\n    int i, len = 0;\n    char *ret;\n    for (i = 0; i < argc; i++) {\n        len += strlen(argv[i]);\n    }\n    ret = (char *)malloc(len + 1);\n    if (ret == NULL) {\n        return NULL;\n    }\n    ret[0] = '\\0';\n    for (i = 0; i < argc; i++) {\n        strcat(ret, argv[i]);\n    }\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char **argv, int argc) {\n    int i, len = 0;\n    char *ret;\n    for (i = 0; i < argc; i++) {\n        len += strlen(argv[i]);\n    }\n    ret = (char *)malloc(len + 1);\n    if (ret == NULL) {\n        return NULL;\n    }\n    ret[0] = '\\0';\n    for (i = 0; i < argc; i++) {\n        strcat(ret, argv[i]);\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
    "c_func_decompile": "float *func0(float *a, int n, int *m) {\n  int i;\n  float *b = (float *)malloc(n * sizeof(float));\n  *m = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] > 0)\n      b[(*m)++] = a[i];\n  return b;\n}",
    "c_func_re_decompile": "float *func0(float *a, int n, int *m) {\n  int i;\n  float *b = (float *)malloc(n * sizeof(float));\n  *m = 0;\n  for (i = 0; i < n; i++)\n    if (a[i] > 0)\n      b[(*m)++] = a[i];\n  return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
    "c_func_decompile": "int func0(char *str[], int n, char *s, char ***p) {\n    int i, j, len;\n    len = strlen(s);\n    *p = (char **)malloc(n * sizeof(char *));\n    for (i = 0, j = 0; i < n; i++) {\n        if (!strncmp(str[i], s, (size_t)len)) {\n            (*p)[j++] = str[i];\n        }\n    }\n    return j;\n}",
    "c_func_re_decompile": "int func0(char *str[], int n, char *s, char ***p) {\n    int i, j, len;\n    len = strlen(s);\n    *p = (char **)malloc(n * sizeof(char *));\n    for (i = 0, j = 0; i < n; i++) {\n        if (!strncmp(str[i], s, (size_t)len)) {\n            (*p)[j++] = str[i];\n        }\n    }\n    return j;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
    "c_func_decompile": "int func0(char **p, int n, char *s, char ***q) {\n    int i, j = 0;\n    size_t len = strlen(s);\n    *q = malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        if (!strncmp(p[i], s, len)) {\n            (*q)[j++] = p[i];\n        }\n    }\n    return j;\n}",
    "c_func_re_decompile": "int func0(char **p, int n, char *s, char ***q) {\n    int i, j = 0;\n    size_t len = strlen(s);\n    *q = malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        if (!strncmp(p[i], s, len)) {\n            (*q)[j++] = p[i];\n        }\n    }\n    return j;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
    "c_func_decompile": "float * func0(float *a,int n,int *m) {\n  int i;\n  float *b;\n  b=(float *)malloc(n*sizeof(float));\n  *m=0;\n  for(i=0;i<n;i++)\n    if(a[i]>0)\n      b[(*m)++]=a[i];\n  return b;\n}",
    "c_func_re_decompile": "float * func0(float *a,int n,int *m) {\n  int i;\n  float *b;\n  b=(float *)malloc(n*sizeof(float));\n  *m=0;\n  for(i=0;i<n;i++)\n    if(a[i]>0)\n      b[(*m)++]=a[i];\n  return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(char** strings, int count, const char* prefix, char*** out) {\n    int prefix_length = strlen(prefix);\n    *out = (char**)malloc(count * sizeof(char*));\n    int out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (strncmp(strings[i], prefix, prefix_length) == 0) {\n            (*out)[out_count++] = strings[i];\n        }\n    }\n\n    return out_count;\n}",
    "c_func_decompile": "int func0(char **p, int n, char *s, char ***q) {\n    int i, j, len;\n    len = strlen(s);\n    *q = (char **)malloc(n * sizeof(char *));\n    for (i = 0, j = 0; i < n; i++)\n        if (!strncmp(p[i], s, len))\n            (*q)[j++] = p[i];\n    return j;\n}",
    "c_func_re_decompile": "int func0(char **p, int n, char *s, char ***q) {\n    int i, j, len;\n    len = strlen(s);\n    *q = (char **)malloc(n * sizeof(char *));\n    for (i = 0, j = 0; i < n; i++)\n        if (!strncmp(p[i], s, len))\n            (*q)[j++] = p[i];\n    return j;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
    "c_func_decompile": "int* func0(int* a, int n, int* m) {\n    int i, j, k, l, flag;\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    k = 0;\n    l = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == c[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            c[k] = a[i];\n            k++;\n        }\n        flag = 0;\n        for (j = 0; j < l; j++) {\n            if (a[i] == d[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            d[l] = a[i];\n            l++;\n        }\n    }\n    *m = k;\n    free(c);\n    free(d);\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* m) {\n    int i, j, k, l, flag;\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    k = 0;\n    l = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == c[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            c[k] = a[i];\n            k++;\n        }\n        flag = 0;\n        for (j = 0; j < l; j++) {\n            if (a[i] == d[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            d[l] = a[i];\n            l++;\n        }\n    }\n    *m = k;\n    free(c);\n    free(d);\n    return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
    "c_func_decompile": "int* func0(int* a, int n, int* m) {\n    int i, j, k, l, flag;\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    k = 0;\n    l = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == c[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            c[k] = a[i];\n            k++;\n        }\n        flag = 0;\n        for (j = 0; j < l; j++) {\n            if (a[i] == d[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            d[l] = a[i];\n            l++;\n        }\n    }\n    *m = k;\n    free(c);\n    free(d);\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* m) {\n    int i, j, k, l, flag;\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    k = 0;\n    l = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == c[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            c[k] = a[i];\n            k++;\n        }\n        flag = 0;\n        for (j = 0; j < l; j++) {\n            if (a[i] == d[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            d[l] = a[i];\n            l++;\n        }\n    }\n    *m = k;\n    free(c);\n    free(d);\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(long n) {\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(long n) {\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(long n) {\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(long n) {\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(long n) {\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(long n) {\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
    "c_func_decompile": "float * func0(float *a,int n,int *m) {\n  int i;\n  float *b;\n  b = (float *) malloc(n*sizeof(float));\n  *m = 0;\n  for (i=0; i<n; i++)\n    if (a[i] > 0) {\n      b[*m] = a[i];\n      (*m)++;\n    }\n  return b;\n}",
    "c_func_re_decompile": "float * func0(float *a,int n,int *m) {\n  int i;\n  float *b;\n  b = (float *) malloc(n*sizeof(float));\n  *m = 0;\n  for (i=0; i<n; i++)\n    if (a[i] > 0) {\n      b[*m] = a[i];\n      (*m)++;\n    }\n  return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdbool.h>\n\nbool func0(long long n) {\n    if (n < 2) return false;\n    for (long long i = 2; i * i <= n; i++)\n        if (n % i == 0) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(long n) {\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(long n) {\n    long i;\n    if (n <= 1)\n        return 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nfloat* func0(const float* l, int count, int* out_count) {\n    float* out = (float*)malloc(count * sizeof(float));\n    *out_count = 0;\n\n    for (int i = 0; i < count; i++) {\n        if (l[i] > 0) {\n            out[(*out_count)++] = l[i];\n        }\n    }\n\n    return out;\n}",
    "c_func_decompile": "float * func0(float *a,int n,int *m) {\n  int i;\n  float *b;\n  b = (float *) malloc(n*sizeof(float));\n  *m = 0;\n  for (i=0; i<n; i++)\n    if (a[i] > 0) {\n      b[*m] = a[i];\n      (*m)++;\n    }\n  return b;\n}",
    "c_func_re_decompile": "float * func0(float *a,int n,int *m) {\n  int i;\n  float *b;\n  b = (float *) malloc(n*sizeof(float));\n  *m = 0;\n  for (i=0; i<n; i++)\n    if (a[i] > 0) {\n      b[*m] = a[i];\n      (*m)++;\n    }\n  return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
    "c_func_decompile": "int* func0(int* a, int n, int* returnSize) {\n    int* ret = (int*)malloc(n * sizeof(int));\n    int* stack1 = (int*)calloc(n, sizeof(int));\n    int* stack2 = (int*)calloc(n, sizeof(int));\n    int top1 = 0, top2 = 0;\n    int i, j;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < top1; j++) {\n            if (stack1[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == top1) {\n            stack1[top1++] = a[i];\n        }\n        for (j = 0; j < top2; j++) {\n            if (stack2[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == top2) {\n            stack2[top2++] = a[i];\n        }\n    }\n    *returnSize = top1;\n    for (i = 0; i < top1; i++) {\n        for (j = 0; j < top2; j++) {\n            if (stack1[i] == stack2[j]) {\n                ret[i] = stack1[i];\n                break;\n            }\n        }\n    }\n    free(stack1);\n    free(stack2);\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* returnSize) {\n    int* ret = (int*)malloc(n * sizeof(int));\n    int* stack1 = (int*)calloc(n, sizeof(int));\n    int* stack2 = (int*)calloc(n, sizeof(int));\n    int top1 = 0, top2 = 0;\n    int i, j;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < top1; j++) {\n            if (stack1[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == top1) {\n            stack1[top1++] = a[i];\n        }\n        for (j = 0; j < top2; j++) {\n            if (stack2[j] == a[i]) {\n                break;\n            }\n        }\n        if (j == top2) {\n            stack2[top2++] = a[i];\n        }\n    }\n    *returnSize = top1;\n    for (i = 0; i < top1; i++) {\n        for (j = 0; j < top2; j++) {\n            if (stack1[i] == stack2[j]) {\n                ret[i] = stack1[i];\n                break;\n            }\n        }\n    }\n    free(stack1);\n    free(stack2);\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
    "c_func_decompile": "double func0(double *x, int N) {\n  int i, j;\n  double f, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90, f91, f92, f93, f94, f95, f96, f97, f98, f99, f100, f101, f102, f103, f104, f105, f106, f107, f108, f109, f110, f111, f112, f113, f114, f115, f116, f117, f118, f119, f120, f121, f122, f123, f124, f125, f126, f127, f128, f129, f130, f131, f132, f133, f134, f135, f136, f137, f138, f139, f140, f141, f142, f143, f144, f145, f146, f147, f148, f149, f150, f151, f152, f153, f154, f155, f156, f157, f158, f159, f160, f161, f162, f163, f164, f165, f166, f167, f168, f169, f170, f171, f172, f173, f174, f175, f176, f177, f178, f179, f180, f181, f182, f183, f184, f185, f186, f187, f188, f189, f190, f191, f192, f193, f194, f195, f196, f197, f198, f199, f200, f201, f202, f203, f204, f205, f206, f207, f208, f209, f210, f211, f212, f213, f214, f215, f216, f217, f218, f219, f220, f221, f22",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
    "c_func_decompile": "double func0(double *x, int N) {\n  double f, f1, f2, h, h1, h2, h3, h4, h5, h6, h7, h8, h9, h10, h11, h12, h13, h14, h15, h16, h17, h18, h19, h20, h21, h22, h23, h24, h25, h26, h27, h28, h29, h30, h31, h32, h33, h34, h35, h36, h37, h38, h39, h40, h41, h42, h43, h44, h45, h46, h47, h48, h49, h50, h51, h52, h53, h54, h55, h56, h57, h58, h59, h60, h61, h62, h63, h64, h65, h66, h67, h68, h69, h70, h71, h72, h73, h74, h75, h76, h77, h78, h79, h80, h81, h82, h83, h84, h85, h86, h87, h88, h89, h90, h91, h92, h93, h94, h95, h96, h97, h98, h99, h100, h101, h102, h103, h104, h105, h106, h107, h108, h109, h110, h111, h112, h113, h114, h115, h116, h117, h118, h119, h120, h121, h122, h123, h124, h125, h126, h127, h128, h129, h130, h131, h132, h133, h134, h135, h136, h137, h138, h139, h140, h141, h142, h143, h144, h145, h146, h147, h148, h149, h150, h151, h152, h153, h154, h155, h156, h157, h158, h159, h160, h161, h162, h163, h164, h165, h166, h167, h168, h169, h170, h171, h172, h173, h174, h175, h176, h177, h178, h179, h180, h181, h182, h183, h184, h185, h186, h187, h188, h189, h190, h191, h192, h193, h194, h195, h196, h197, h198, h199, h200, h201, h202, h203, h204, h205, h206, h207, h208, h209, h210, h211, h212, h213, h214, h215, h216, h217, h218, h219, h220, h221, h2",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int* numbers, int size, int* new_size) {\n    int* out = (int*)malloc(size * sizeof(int));\n    int* has1 = (int*)calloc(size, sizeof(int));\n    int* has2 = (int*)calloc(size, sizeof(int));\n    int has1_count = 0;\n    int has2_count = 0;\n    int out_count = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (in_has2) continue;\n\n        int in_has1 = 0;\n        for (int j = 0; j < has1_count; j++) {\n            if (has1[j] == num) {\n                in_has1 = 1;\n                break;\n            }\n        }\n        if (in_has1) {\n            has2[has2_count++] = num;\n        } else {\n            has1[has1_count++] = num;\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        int num = numbers[i];\n        int in_has2 = 0;\n        for (int j = 0; j < has2_count; j++) {\n            if (has2[j] == num) {\n                in_has2 = 1;\n                break;\n            }\n        }\n        if (!in_has2) {\n            out[out_count++] = num;\n        }\n    }\n\n    *new_size = out_count;\n    free(has1);\n    free(has2);\n    return out;\n}",
    "c_func_decompile": "int* func0(int* a, int n, int* m) {\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    int i, j, k, l, m1 = 0, m2 = 0, m3 = 0;\n    for (i = 0; i < n; i++) {\n        int x = a[i];\n        int flag = 0;\n        for (j = 0; j < m2; j++) {\n            if (d[j] == x) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag) continue;\n        int flag2 = 0;\n        for (k = 0; k < m1; k++) {\n            if (c[k] == x) {\n                flag2 = 1;\n                break;\n            }\n        }\n        if (flag2) {\n            d[m2++] = x;\n        } else {\n            c[m1++] = x;\n        }\n    }\n    for (l = 0; l < n; l++) {\n        int x = a[l];\n        int flag = 0;\n        for (j = 0; j < m2; j++) {\n            if (d[j] == x) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            b[m3++] = x;\n        }\n    }\n    *m = m3;\n    free(c);\n    free(d);\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* m) {\n    int* b = (int*)malloc(n * sizeof(int));\n    int* c = (int*)calloc(n, sizeof(int));\n    int* d = (int*)calloc(n, sizeof(int));\n    int i, j, k, l, m1 = 0, m2 = 0, m3 = 0;\n    for (i = 0; i < n; i++) {\n        int x = a[i];\n        int flag = 0;\n        for (j = 0; j < m2; j++) {\n            if (d[j] == x) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag) continue;\n        int flag2 = 0;\n        for (k = 0; k < m1; k++) {\n            if (c[k] == x) {\n                flag2 = 1;\n                break;\n            }\n        }\n        if (flag2) {\n            d[m2++] = x;\n        } else {\n            c[m1++] = x;\n        }\n    }\n    for (l = 0; l < n; l++) {\n        int x = a[l];\n        int flag = 0;\n        for (j = 0; j < m2; j++) {\n            if (d[j] == x) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            b[m3++] = x;\n        }\n    }\n    *m = m3;\n    free(c);\n    free(d);\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
    "c_func_decompile": "double func0(double *x, int N) {\n    int i, j, k;\n    double f, g, h;\n    f = 0.0;\n    g = x[0];\n    for (i = 1; i < N; i++) {\n        h = 1.0;\n        for (j = 0; j < i; j++)\n            h *= f;\n        g += h * x[i];\n    }\n    while (fabs(g) > 0.000001) {\n        f = 0.0;\n        for (i = 1; i < N; i++) {\n            h = 1.0;\n            for (k = 1; k <= i; k++)\n                h *= f;\n            f += i * x[i] * h;\n        }\n        f = f - g / f;\n        g = x[0];\n        for (i = 1; i < N; i++) {\n            h = 1.0;\n            for (j = 0; j < i; j++)\n                h *= f;\n            g += h * x[i];\n        }\n    }\n    return f;\n}",
    "c_func_re_decompile": "double func0(double *x, int N) {\n    int i, j, k;\n    double f, g, h;\n    f = 0.0;\n    g = x[0];\n    for (i = 1; i < N; i++) {\n        h = 1.0;\n        for (j = 0; j < i; j++)\n            h *= f;\n        g += h * x[i];\n    }\n    while (fabs(g) > 0.000001) {\n        f = 0.0;\n        for (i = 1; i < N; i++) {\n            h = 1.0;\n            for (k = 1; k <= i; k++)\n                h *= f;\n            f += i * x[i] * h;\n        }\n        f = f - g / f;\n        g = x[0];\n        for (i = 1; i < N; i++) {\n            h = 1.0;\n            for (j = 0; j < i; j++)\n                h *= f;\n            g += h * x[i];\n        }\n    }\n    return f;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\ndouble func0(const double *xs, int size) {\n    double ans = 0.0;\n    double value, driv, x_pow;\n    int i;\n\n    value = xs[0];\n    for (i = 1; i < size; i++) {\n        x_pow = 1.0;\n        for (int j = 0; j < i; j++) {\n            x_pow *= ans;\n        }\n        value += xs[i] * x_pow;\n    }\n\n    while (fabs(value) > 1e-6) {\n        driv = 0.0;\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 1; j < i; j++) {\n                x_pow *= ans;\n            }\n            driv += i * xs[i] * x_pow;\n        }\n        ans = ans - value / driv;\n\n        value = xs[0];\n        for (i = 1; i < size; i++) {\n            x_pow = 1.0;\n            for (int j = 0; j < i; j++) {\n                x_pow *= ans;\n            }\n            value += xs[i] * x_pow;\n        }\n    }\n\n    return ans;\n}",
    "c_func_decompile": "double func0(double *x, int N) {\n    double sum = 0.0;\n    double sum1 = 0.0;\n    double sum2 = 0.0;\n    double prod = 1.0;\n    int i, j;\n    for (i = 1; i < N; i++) {\n        prod = 1.0;\n        for (j = 0; j < i; j++) {\n            prod *= x[j];\n        }\n        sum1 += prod * x[i];\n    }\n    sum = sum1;\n    if (fabs(sum) > 0.000001) {\n        sum -= sum1 / 2.0;\n        for (i = 1; i < N; i++) {\n            prod = 1.0;\n            for (j = 0; j < i; j++) {\n                prod *= x[j];\n            }\n            sum2 += prod * i * x[i];\n        }\n        sum -= sum2 / 3.0;\n    }\n    return sum;\n}",
    "c_func_re_decompile": "double func0(double *x, int N) {\n    double sum = 0.0;\n    double sum1 = 0.0;\n    double sum2 = 0.0;\n    double prod = 1.0;\n    int i, j;\n    for (i = 1; i < N; i++) {\n        prod = 1.0;\n        for (j = 0; j < i; j++) {\n            prod *= x[j];\n        }\n        sum1 += prod * x[i];\n    }\n    sum = sum1;\n    if (fabs(sum) > 0.000001) {\n        sum -= sum1 / 2.0;\n        for (i = 1; i < N; i++) {\n            prod = 1.0;\n            for (j = 0; j < i; j++) {\n                prod *= x[j];\n            }\n            sum2 += prod * i * x[i];\n        }\n        sum -= sum2 / 3.0;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n    int i, j, k, t;\n    int *c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    for (i = 0; i < n; i += 3)\n        c[i / 3] = a[i];\n    for (i = 0; i < n / 3; i++) {\n        k = i;\n        for (j = i + 1; j < n / 3; j++)\n            if (c[j] < c[k])\n                k = j;\n        if (k != i) {\n            t = c[i];\n            c[i] = c[k];\n            c[k] = t;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0)\n            b[i] = c[i / 3];\n        else\n            b[i] = a[i];\n    }\n    free(c);\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n    int i, j, k, t;\n    int *c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    for (i = 0; i < n; i += 3)\n        c[i / 3] = a[i];\n    for (i = 0; i < n / 3; i++) {\n        k = i;\n        for (j = i + 1; j < n / 3; j++)\n            if (c[j] < c[k])\n                k = j;\n        if (k != i) {\n            t = c[i];\n            c[i] = c[k];\n            c[k] = t;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0)\n            b[i] = c[i / 3];\n        else\n            b[i] = a[i];\n    }\n    free(c);\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n  int i, j, k, *c, t;\n  c = (int *)malloc((n / 3 + 1) * sizeof(int));\n  j = 0;\n  k = 0;\n  for (i = 0; i * 3 < n; i++) {\n    c[i] = a[i * 3];\n    k++;\n  }\n  for (i = 0; i < k - 1; i++) {\n    t = i;\n    for (j = i + 1; j < k; j++) {\n      if (c[j] < c[t]) {\n        t = j;\n      }\n    }\n    if (t != i) {\n      int tmp = c[i];\n      c[i] = c[t];\n      c[t] = tmp;\n    }\n  }\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      b[i] = c[i / 3];\n    } else {\n      b[i] = a[i];\n    }\n  }\n  free(c);\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n  int i, j, k, *c, t;\n  c = (int *)malloc((n / 3 + 1) * sizeof(int));\n  j = 0;\n  k = 0;\n  for (i = 0; i * 3 < n; i++) {\n    c[i] = a[i * 3];\n    k++;\n  }\n  for (i = 0; i < k - 1; i++) {\n    t = i;\n    for (j = i + 1; j < k; j++) {\n      if (c[j] < c[t]) {\n        t = j;\n      }\n    }\n    if (t != i) {\n      int tmp = c[i];\n      c[i] = c[t];\n      c[t] = tmp;\n    }\n  }\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      b[i] = c[i / 3];\n    } else {\n      b[i] = a[i];\n    }\n  }\n  free(c);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n    int i, j, k, t;\n    int *c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    for (i = 0; i < n; i += 3) {\n        c[i / 3] = a[i];\n    }\n    for (i = 0; i < n / 3; i++) {\n        k = i;\n        for (j = i + 1; j < n / 3; j++) {\n            if (c[j] < c[k]) {\n                k = j;\n            }\n        }\n        if (k != i) {\n            t = c[i];\n            c[i] = c[k];\n            c[k] = t;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            b[i] = c[i / 3];\n        } else {\n            b[i] = a[i];\n        }\n    }\n    free(c);\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n    int i, j, k, t;\n    int *c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    for (i = 0; i < n; i += 3) {\n        c[i / 3] = a[i];\n    }\n    for (i = 0; i < n / 3; i++) {\n        k = i;\n        for (j = i + 1; j < n / 3; j++) {\n            if (c[j] < c[k]) {\n                k = j;\n            }\n        }\n        if (k != i) {\n            t = c[i];\n            c[i] = c[k];\n            c[k] = t;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            b[i] = c[i / 3];\n        } else {\n            b[i] = a[i];\n        }\n    }\n    free(c);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *l, int size, int *out) {\n    int *third = malloc((size / 3 + 1) * sizeof(int));\n    int i, k = 0, third_size = 0;\n\n    for (i = 0; i * 3 < size; i++) {\n        third[i] = l[i * 3];\n        third_size++;\n    }\n\n    for (i = 0; i < third_size - 1; i++) {\n        int min_idx = i;\n        for (k = i + 1; k < third_size; k++) {\n            if (third[k] < third[min_idx])\n                min_idx = k;\n        }\n        if (min_idx != i) {\n            int temp = third[i];\n            third[i] = third[min_idx];\n            third[min_idx] = temp;\n        }\n    }\n\n    for (i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(third);\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n    int i, j, k, t;\n    int *c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    for (i = 0; i < n; i++)\n        c[i / 3] = a[i];\n    for (i = 0; i < n; i++) {\n        k = i;\n        for (j = i + 1; j < n; j++)\n            if (c[j / 3] < c[k / 3])\n                k = j;\n        if (k != i) {\n            t = c[i / 3];\n            c[i / 3] = c[k / 3];\n            c[k / 3] = t;\n        }\n    }\n    for (i = 0; i < n; i++)\n        if (i % 3 == 0)\n            b[i / 3] = c[i / 3];\n    free(c);\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n    int i, j, k, t;\n    int *c = (int *)malloc((n / 3 + 1) * sizeof(int));\n    for (i = 0; i < n; i++)\n        c[i / 3] = a[i];\n    for (i = 0; i < n; i++) {\n        k = i;\n        for (j = i + 1; j < n; j++)\n            if (c[j / 3] < c[k / 3])\n                k = j;\n        if (k != i) {\n            t = c[i / 3];\n            c[i / 3] = c[k / 3];\n            c[k / 3] = t;\n        }\n    }\n    for (i = 0; i < n; i++)\n        if (i % 3 == 0)\n            b[i / 3] = c[i / 3];\n    free(c);\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
    "c_func_decompile": "int *func0(int *a, int n, int *m) {\n    int i, j, k, *b;\n    b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j]) {\n                break;\n            }\n        }\n        if (j == k) {\n            b[k] = a[i];\n            k++;\n        }\n    }\n    for (i = 0; i < k; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                int t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n, int *m) {\n    int i, j, k, *b;\n    b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j]) {\n                break;\n            }\n        }\n        if (j == k) {\n            b[k] = a[i];\n            k++;\n        }\n    }\n    for (i = 0; i < k; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                int t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
    "c_func_decompile": "int* func0(int* a, int n, int* m) {\n    int* b = (int*)malloc(n * sizeof(int));\n    int i, j, k, flag;\n    k = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            b[k++] = a[i];\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                int t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* m) {\n    int* b = (int*)malloc(n * sizeof(int));\n    int i, j, k, flag;\n    k = 0;\n    for (i = 0; i < n; i++) {\n        flag = 0;\n        for (j = 0; j < k; j++) {\n            if (a[i] == b[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            b[k++] = a[i];\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                int t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i, j, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (j = i; j > 0; j /= 10) {\n                if (j % 10 == 7) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i, j, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (j = i; j > 0; j /= 10) {\n                if (j % 10 == 7) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
    "c_func_decompile": "float func0(float *x, int n) {\n    int i;\n    float max
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i, j, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0 || i % 5 == 0) {\n            j = i;\n            while (j > 0) {\n                if (j % 10 == 7) {\n                    count++;\n                }\n                j /= 10;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i, j, count = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0 || i % 5 == 0) {\n            j = i;\n            while (j > 0) {\n                if (j % 10 == 7) {\n                    count++;\n                }\n                j /= 10;\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i, j, k;\n    k = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 7 == 0) {\n            j = i;\n            while (j != 0) {\n                if (j % 10 == 7) {\n                    k++;\n                }\n                j = j / 10;\n            }\n        }\n    }\n    return k;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i, j, k;\n    k = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 7 == 0) {\n            j = i;\n            while (j != 0) {\n                if (j % 10 == 7) {\n                    k++;\n                }\n                j = j / 10;\n            }\n        }\n    }\n    return k;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++)\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) count += 1;\n                q = q / 10;\n            }\n        }\n    return count;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i, j, k;\n    k = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 7 == 0) {\n            j = i;\n            while (j != 0) {\n                if (j % 10 == 7) {\n                    k++;\n                }\n                j = j / 10;\n            }\n        }\n    }\n    return k;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i, j, k;\n    k = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 7 == 0) {\n            j = i;\n            while (j != 0) {\n                if (j % 10 == 7) {\n                    k++;\n                }\n                j = j / 10;\n            }\n        }\n    }\n    return k;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
    "c_func_decompile": "float func0(float *a, int n) {\n    float max
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
    "c_func_decompile": "float func0(float *a, int n) {\n    float max
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
    "c_func_decompile": "int *func0(int *a, int n, int *m) {\n    int i, j, k, t;\n    int *b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (b[j] == a[i])\n                break;\n        }\n        if (j == k)\n            b[k++] = a[i];\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n, int *m) {\n    int i, j, k, t;\n    int *b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (b[j] == a[i])\n                break;\n        }\n        if (j == k)\n            b[k++] = a[i];\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i, j, sum = 1;\n    for (i = 2; i <= n; i++) {\n        for (j = 2; j < i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j >= i) {\n            sum += i;\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i, j, sum = 1;\n    for (i = 2; i <= n; i++) {\n        for (j = 2; j < i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j >= i) {\n            sum += i;\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l, int size, int *out_size) {\n    int *out = malloc(size * sizeof(int));\n    int found, out_count = 0, i, j;\n    for (i = 0; i < size; i++) {\n        found = 0;\n        for (j = 0; j < out_count; j++) {\n            if (l[i] == out[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            out[out_count++] = l[i];\n        }\n    }\n\n    for (i = 0; i < out_count - 1; i++) {\n        for (j = i + 1; j < out_count; j++) {\n            if (out[i] > out[j]) {\n                int temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n            }\n        }\n    }\n\n    *out_size = out_count;\n    return out;\n}",
    "c_func_decompile": "int *func0(int *a, int n, int *m) {\n    int i, j, k, t;\n    int *b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (b[j] == a[i])\n                break;\n        }\n        if (j == k)\n            b[k++] = a[i];\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n, int *m) {\n    int i, j, k, t;\n    int *b = (int *)malloc(n * sizeof(int));\n    k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < k; j++) {\n            if (b[j] == a[i])\n                break;\n        }\n        if (j == k)\n            b[k++] = a[i];\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = i + 1; j < k; j++) {\n            if (b[i] > b[j]) {\n                t = b[i];\n                b[i] = b[j];\n                b[j] = t;\n            }\n        }\n    }\n    *m = k;\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
    "c_func_decompile": "int func0(int x) {\n  return x * x;\n}",
    "c_func_re_decompile": "int func0(int x) {\n  return x * x;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
    "c_func_decompile": "int func0(int x) {\n  return x * x;\n}",
    "c_func_re_decompile": "int func0(int x) {\n  return x * x;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
    "c_func_decompile": "int func0(int x) {\n  return x * x;\n}",
    "c_func_re_decompile": "int func0(int x) {\n  return x * x;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
    "c_func_decompile": "void func0(float *a, int n, float *b) {\n  int i, j;\n  float *tmp = (float *)malloc((n/2+1)*sizeof(float));\n  for (i = 0; i < n; i++)\n    tmp[i] = a[i];\n  for (i = 0; i < n-1; i++)\n    for (j = 0; j < n-1-i; j++)\n      if (tmp[j] > tmp[j+1]) {\n        float t = tmp[j];\n        tmp[j] = tmp[j+1];\n        tmp[j+1] = t;\n      }\n  for (i = 0; i < n; i++)\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = a[i];\n  free(tmp);\n}",
    "c_func_re_decompile": "void func0(float *a, int n, float *b) {\n  int i, j;\n  float *tmp = (float *)malloc((n/2+1)*sizeof(float));\n  for (i = 0; i < n; i+=2)\n    tmp[i/2] = a[i];\n  for (i = 0; i < n-1; i++)\n    for (j = 0; j < n-1-i; j++)\n      if (tmp[j] > tmp[j+1]) {\n        float t = tmp[j];\n        tmp[j] = tmp[j+1];\n        tmp[j+1] = t;\n      }\n  for (i = 0; i < n; i++)\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = a[i];\n  free(tmp);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
    "c_func_decompile": "void func0(float *a, int n, float *b) {\n  int i, j;\n  float *tmp = (float *)malloc((n/2+1)*sizeof(float));\n  for (i = 0; i < n; i++)\n    tmp[i] = a[i];\n  for (i = 0; i < n-1; i+=2) {\n    if (tmp[i] > tmp[i+1]) {\n      float t = tmp[i];\n      tmp[i] = tmp[i+1];\n      tmp[i+1] = t;\n    }\n  }\n  for (i = 0; i < n; i++) {\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = a[i];\n  }\n  free(tmp);\n}",
    "c_func_re_decompile": "void func0(float *a, int n, float *b) {\n  int i, j;\n  float *tmp = (float *)malloc((n/2+1)*sizeof(float));\n  for (i = 0; i < n; i+=2)\n    tmp[i/2] = a[i];\n  for (i = 0; i < n-1; i+=2) {\n    if (tmp[i] > tmp[i+1]) {\n      float t = tmp[i];\n      tmp[i] = tmp[i+1];\n      tmp[i+1] = t;\n    }\n  }\n  for (i = 0; i < n; i++) {\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = a[i];\n  }\n  free(tmp);\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
    "c_func_decompile": "void func0(float *a, int n, float *b) {\n  int i, j;\n  float *c;\n  c = (float *)malloc((n/2+1)*sizeof(float));\n  int k = 0;\n  for (i = 0; i < n; i += 2) {\n    c[k++] = a[i];\n  }\n  for (i = 0; i < k-1; i++) {\n    for (j = 0; j < k-i-1; j++) {\n      if (c[j] > c[j+1]) {\n        float tmp = c[j];\n        c[j] = c[j+1];\n        c[j+1] = tmp;\n      }\n    }\n  }\n  for (i = 0; i < n; i++) {\n    if (i%2 == 0) {\n      b[i] = c[i/2];\n    } else {\n      b[i] = a[i];\n    }\n  }\n  free(c);\n}",
    "c_func_re_decompile": "void func0(float *a, int n, float *b) {\n  int i, j;\n  float *c;\n  c = (float *)malloc((n/2+1)*sizeof(float));\n  int k = 0;\n  for (i = 0; i < n; i += 2) {\n    c[k++] = a[i];\n  }\n  for (i = 0; i < k-1; i++) {\n    for (j = 0; j < k-i-1; j++) {\n      if (c[j] > c[j+1]) {\n        float tmp = c[j];\n        c[j] = c[j+1];\n        c[j+1] = tmp;\n      }\n    }\n  }\n  for (i = 0; i < n; i++) {\n    if (i%2 == 0) {\n      b[i] = c[i/2];\n    } else {\n      b[i] = a[i];\n    }\n  }\n  free(c);\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * n;\n}",
    "c_func_decompile": "int func0(int x) {\n  return x * x;\n}",
    "c_func_re_decompile": "int func0(int x) {\n  return x * x;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nvoid func0(float *l, int size, float *out) {\n    float *even = malloc((size / 2 + 1) * sizeof(float));\n    int i, j, even_count = 0;\n\n    for (i = 0; i < size; i += 2) {\n        even[even_count++] = l[i];\n    }\n\n    for (i = 0; i < even_count - 1; i++) {\n        for (j = 0; j < even_count - i - 1; j++) {\n            if (even[j] > even[j + 1]) {\n                float temp = even[j];\n                even[j] = even[j + 1];\n                even[j + 1] = temp;\n            }\n        }\n    }\n\n    // Merging even-indexed sorted and odd-indexed as they are\n    for (i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    free(even);\n}",
    "c_func_decompile": "void func0(float *a, int n, float *b) {\n  int i, j;\n  float *tmp = (float *)malloc((n/2+1)*sizeof(float));\n  for (i = 0; i < n; i++)\n    tmp[i] = a[i];\n  for (i = 0; i < n/2; i++) {\n    for (j = 0; j < n/2-i; j++) {\n      if (tmp[j] < tmp[j+1]) {\n        float t = tmp[j];\n        tmp[j] = tmp[j+1];\n        tmp[j+1] = t;\n      }\n    }\n  }\n  for (i = 0; i < n; i++) {\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = a[i];\n  }\n  free(tmp);\n}",
    "c_func_re_decompile": "void func0(float *a, int n, float *b) {\n  int i, j;\n  float *tmp = (float *)malloc((n/2+1)*sizeof(float));\n  for (i = 0; i < n; i++)\n    tmp[i] = a[i];\n  for (i = 0; i < n/2; i++) {\n    for (j = 0; j < n/2-i; j++) {\n      if (tmp[j] < tmp[j+1]) {\n        float t = tmp[j];\n        tmp[j] = tmp[j+1];\n        tmp[j+1] = t;\n      }\n    }\n  }\n  for (i = 0; i < n; i++) {\n    if (i%2 == 0)\n      b[i] = tmp[i/2];\n    else\n      b[i] = a[i];\n  }\n  free(tmp);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                break;\n            }\n        }\n        if (j * j > i) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
    "c_func_decompile": "void func0(int *a, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    a[i]++;\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    a[i]++;\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
    "c_func_decompile": "void func0(int *a, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    a[i] = a[i] + 1;\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    a[i] = a[i] + 1;\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n  int i, j, k;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      for (k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] == 0) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n  int i, j, k;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      for (k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] == 0) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] + a[j] + a[i] == a[j]) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, j;\n    for (i = 0; i < n; i++) {\n        for (j = i + 2; j < n; j++) {\n            if (a[i] + a[i + 1] + a[j] == 0) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j, k;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = i + 1; k < j; k++) {\n                if (a[i] + a[j] + a[k] == 0) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, j, k;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = i + 1; k < j; k++) {\n                if (a[i] + a[j] + a[k] == 0) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
    "c_func_decompile": "void func0(int *a, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    a[i]++;\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    a[i]++;\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
    "c_func_decompile": "void func0(char *str, int flag) {\n    int len = strlen(str);\n    int i, j, k, n = (len + 2) / 3;\n    char tmp[4];\n    for (i = 0; i < n; i++) {\n        j = (i + 1) * 3 > len ? 3 : len - i * 3;\n        strncpy(tmp, str + i * 3, j);\n        tmp[j] = '\\0';\n        if (j == 3) {\n            if (flag) {\n                char t = tmp[0];\n                tmp[0] = tmp[2];\n                tmp[2] = t;\n            } else {\n                char t = tmp[0];\n                tmp[0] = tmp[2];\n                tmp[2] = tmp[1];\n                tmp[1] = t;\n            }\n        }\n        strncpy(str + i * 3, tmp, j);\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, int flag) {\n    int len = strlen(str);\n    int i, j, k, n = (len + 2) / 3;\n    char tmp[4];\n    for (i = 0; i < n; i++) {\n        j = (i + 1) * 3 > len ? 3 : len - i * 3;\n        strncpy(tmp, str + i * 3, j);\n        tmp[j] = '\\0';\n        if (j == 3) {\n            if (flag) {\n                char t = tmp[1];\n                tmp[1] = tmp[2];\n                tmp[2] = tmp[0];\n                tmp[0] = t;\n            } else {\n                char t = tmp[0];\n                tmp[0] = tmp[2];\n                tmp[2] = tmp[1];\n                tmp[1] = t;\n            }\n        }\n        strncpy(str + i * 3, tmp, j);\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f1 = 1, f2 = 2, m;\n    int count = 0;\n    while (count < n) {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        int isprime = 1;\n        for (int w = 2; w * w <= f1; w++) {\n            if (f1 % w == 0) {\n                isprime = 0; break;\n            }\n        }\n        if (isprime) count += 1;\n        if (count == n) return f1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(int n) {\n    int a = 1;\n    int b = 2;\n    int c = 0;\n    while (c < n) {\n        int t = a + b;\n        a = b;\n        b = t;\n        int i = 1;\n        int j = 2;\n        while (j * j <= a) {\n            if (a % j == 0) {\n                i = 0;\n                break;\n            }\n            j++;\n        }\n        if (i) {\n            c++;\n        }\n        if (c == n) {\n            return a;\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int a = 1;\n    int b = 2;\n    int c = 0;\n    while (c < n) {\n        a += b;\n        int t = a;\n        a = b;\n        b = t;\n        int i = 1;\n        int j = 2;\n        while (j * j <= a) {\n            if (a % j == 0) {\n                i = 0;\n                break;\n            }\n            j++;\n        }\n        if (i) {\n            c++;\n        }\n        if (c == n) {\n            return a;\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        l[i] += 1;\n}",
    "c_func_decompile": "void func0(int *a, int n) {\n  int i;\n  for (i=0; i<n; i++) {\n    a[i] = a[i] + 1;\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int n) {\n  int i;\n  for (i=0; i<n; i++) {\n    a[i] = a[i] + 1;\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            for (int k = j + 1; k < size; k++)\n                if (l[i] + l[j] + l[k] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j, k;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = i + 1; k < j; k++) {\n                if (a[i] + a[j] == a[k]) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, j, k;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = i + 1; k < j; k++) {\n                if (a[i] + a[j] == a[k]) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
    "c_func_decompile": "void func0(char *str, int flag) {\n    int len = strlen(str);\n    int i, j;\n    char tmp[4];\n    for (i = 0; i < (len + 2) / 3; i++) {\n        if (3 * (i + 1) <= len) {\n            strncpy(tmp, str + 3 * i, 3);\n            tmp[3] = '\\0';\n        } else {\n            strncpy(tmp, str + 3 * i, len - 3 * i);\n            tmp[len - 3 * i] = '\\0';\n        }\n        if (flag) {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n        } else {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n        }\n        strncpy(str + 3 * i, tmp, len - 3 * i);\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, int flag) {\n    int len = strlen(str);\n    int i, j;\n    char tmp[4];\n    for (i = 0; i < (len + 2) / 3; i++) {\n        if (3 * (i + 1) <= len) {\n            strncpy(tmp, str + 3 * i, 3);\n            tmp[3] = '\\0';\n        } else {\n            strncpy(tmp, str + 3 * i, len - 3 * i);\n            tmp[len - 3 * i] = '\\0';\n        }\n        if (flag) {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n        } else {\n            tmp[0] ^= tmp[2];\n            tmp[2] ^= tmp[0];\n            tmp[0] ^= tmp[2];\n        }\n        if (len - 3 * i == 3) {\n            strncpy(str + 3 * i, tmp, len - 3 * i);\n        } else {\n            strncpy(str + 3 * i, tmp, len - 3 * i);\n        }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size) {\n    for (int i = 0; i < size; i++)\n        for (int j = i + 1; j < size; j++)\n            if (l[i] + l[j] == 0) return true;\n    return false;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] + a[j] == 0) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
    "c_func_decompile": "void func0(int n, int b, char *s) {\n    char buf[32];\n    int i = 0;\n    while (n > 0) {\n        buf[i++] = '0' + n % b;\n        n /= b;\n    }\n    int j = 0;\n    while (i > 0) {\n        s[j++] = buf[--i];\n    }\n    s[j] = '\\0';\n}",
    "c_func_re_decompile": "void func0(int n, int b, char *s) {\n    char buf[32];\n    int i = 0;\n    while (n > 0) {\n        buf[i++] = '0' + n % b;\n        n /= b;\n    }\n    int j = 0;\n    while (i > 0) {\n        s[j++] = buf[--i];\n    }\n    s[j] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
    "c_func_decompile": "void func0(int num, int base, char *str) {\n    char buf[32];\n    int i = 0;\n    while (num > 0) {\n        buf[i++] = num % base + '0';\n        num /= base;\n    }\n    for (int j = 0; j < i; j++) {\n        str[j] = buf[i - j - 1];\n    }\n    str[i] = '\\0';\n}",
    "c_func_re_decompile": "void func0(int num, int base, char *str) {\n    char buf[32];\n    int i = 0;\n    while (num > 0) {\n        buf[i++] = num % base + '0';\n        num /= base;\n    }\n    for (int j = 0; j < i; j++) {\n        str[j] = buf[i - j - 1];\n    }\n    str[i] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
    "c_func_decompile": "void func0(int n, int b, char *s) {\n    char buf[32];\n    int i = 0;\n    while (n > 0) {\n        buf[i++] = n % b + '0';\n        n /= b;\n    }\n    while (i > 0) {\n        *s++ = buf[--i];\n    }\n    *s = '\\0';\n}",
    "c_func_re_decompile": "void func0(int n, int b, char *s) {\n    char buf[32];\n    int i = 0;\n    while (n > 0) {\n        buf[i++] = n % b + '0';\n        n /= b;\n    }\n    while (i > 0) {\n        *s++ = buf[--i];\n    }\n    *s = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int x, int base, char *out) {\n    int index = 0;\n    char temp[33];\n    while (x > 0) {\n        temp[index++] = (x % base) + '0';\n        x = x / base;\n    }\n    int j = 0;\n    while(index > 0) {\n        out[j++] = temp[--index];\n    }\n    out[j] = '\\0';\n}",
    "c_func_decompile": "void func0(int n, int b, char *s) {\n    char buf[32];\n    int i = 0;\n    while (n > 0) {\n        buf[i++] = n % b + '0';\n        n /= b;\n    }\n    for (i--; i >= 0; i--) {\n        *s++ = buf[i];\n    }\n    *s = '\\0';\n}",
    "c_func_re_decompile": "void func0(int n, int b, char *s) {\n    char buf[32];\n    int i = 0;\n    while (n > 0) {\n        buf[i++] = n % b + '0';\n        n /= b;\n    }\n    for (i--; i >= 0; i--) {\n        *s++ = buf[i];\n    }\n    *s = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
    "c_func_decompile": "int func0(int n) {\n  int a[100];\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 2;\n  a[3] = 0;\n  int i;\n  for (i = 4; i <= n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": "int func0(int n) {\n  int a[100];\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 2;\n  a[3] = 0;\n  int i;\n  for (i = 4; i <= n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
    "c_func_decompile": "void func0(char *str, int flag) {\n    int len = strlen(str);\n    int i, j;\n    char tmp[4];\n    for (i = 0, j = 0; i < len; i++, j++) {\n        if (j * 3 + 3 > len) {\n            strncpy(tmp, str + i, len - i);\n            tmp[len - i] = '\\0';\n            while (len - i < 3) {\n                tmp[len - i] = '\\0';\n                i++;\n            }\n        } else {\n            strncpy(tmp, str + i, 3);\n            tmp[3] = '\\0';\n        }\n        if (flag) {\n            char tmp1 = tmp[0];\n            tmp[0] = tmp[2];\n            tmp[2] = tmp1;\n        } else {\n            char tmp1 = tmp[0];\n            tmp[0] = tmp[1];\n            tmp[1] = tmp[2];\n            tmp[2] = tmp1;\n        }\n        strncpy(str + i, tmp, 3);\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, int flag) {\n    int len = strlen(str);\n    int i, j;\n    char tmp[4];\n    for (i = 0, j = 0; i < len; i++, j++) {\n        if (j * 3 + 3 > len) {\n            strncpy(tmp, str + i, len - i);\n            tmp[len - i] = '\\0';\n            while (len - i < 3) {\n                tmp[len - i] = '\\0';\n                i++;\n            }\n        } else {\n            strncpy(tmp, str + i, 3);\n            tmp[3] = '\\0';\n        }\n        if (flag) {\n            char tmp1 = tmp[0];\n            tmp[0] = tmp[2];\n            tmp[2] = tmp1;\n        } else {\n            char tmp1 = tmp[0];\n            tmp[0] = tmp[1];\n            tmp[1] = tmp[2];\n            tmp[2] = tmp1;\n        }\n        strncpy(str + i, tmp, 3);\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
    "c_func_decompile": "int func0(int n) {\n  int a[100];\n  int i;\n  a[0] = 0;\n  a[1] = 2;\n  for (i = 2; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": "int func0(int n) {\n  int a[100];\n  int i;\n  a[0] = 0;\n  a[1] = 2;\n  for (i = 2; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(char *s, int encode) {\n    int l = strlen(s);\n    int num = (l + 2) / 3;\n    char x[4];\n\n    for (int i = 0; i < num; ++i) {\n        int len = (i * 3 + 3 <= l) ? 3 : l - i * 3;\n        strncpy(x, s + i * 3, len);\n        x[len] = '\\0';\n\n        if (len == 3) {\n            if (encode) {\n                char temp = x[2];\n                x[2] = x[1];\n                x[1] = x[0];\n                x[0] = temp;\n            } else {\n                char temp = x[0];\n                x[0] = x[1];\n                x[1] = x[2];\n                x[2] = temp;\n            }\n        }\n        strncpy(s + i * 3, x, len);\n    }\n}",
    "c_func_decompile": "void func0(char *str, int flag) {\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < len / 3; i++) {\n        char tmp[4];\n        if (3 * (i + 1) > len) {\n            __strncpy_chk(tmp, str + 3 * i, len - 3 * i, __builtin_object_size(tmp, 0));\n            tmp[len - 3 * i] = '\\0';\n        } else {\n            strncpy(tmp, str + 3 * i, 3);\n            tmp[3] = '\\0';\n        }\n        if (flag) {\n            char tmp2[4];\n            tmp2[0] = tmp[1];\n            tmp2[1] = tmp[2];\n            tmp2[2] = tmp[0];\n            tmp2[3] = '\\0';\n            strncpy(str + 3 * i, tmp2, 3);\n        } else {\n            char tmp2[4];\n            tmp2[0] = tmp[2];\n            tmp2[1] = tmp[0];\n            tmp2[2] = tmp[1];\n            tmp2[3] = '\\0';\n            strncpy(str + 3 * i, tmp2, 3);\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, int flag) {\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < len / 3; i++) {\n        char tmp[4];\n        if (3 * (i + 1) > len) {\n            __strncpy_chk(tmp, str + 3 * i, len - 3 * i, __builtin_object_size(tmp, 0));\n            tmp[len - 3 * i] = '\\0';\n        } else {\n            strncpy(tmp, str + 3 * i, 3);\n            tmp[3] = '\\0';\n        }\n        if (flag) {\n            char tmp2[4];\n            tmp2[0] = tmp[1];\n            tmp2[1] = tmp[2];\n            tmp2[2] = tmp[0];\n            tmp2[3] = '\\0';\n            strncpy(str + 3 * i, tmp2, 3);\n        } else {\n            char tmp2[4];\n            tmp2[0] = tmp[2];\n            tmp2[1] = tmp[0];\n            tmp2[2] = tmp[1];\n            tmp2[3] = '\\0';\n            strncpy(str + 3 * i, tmp2, 3);\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
    "c_func_decompile": "float func0(float a, float b) {\n  return a * b * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
    "c_func_decompile": "int func0(int n) {\n  int i, a[100];\n  a[0] = 0;\n  a[1] = 1;\n  a[2] = 2;\n  a[3] = 3;\n  for (i = 4; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": "int func0(int n) {\n  int i, a[100];\n  a[0] = 0;\n  a[1] = 1;\n  a[2] = 2;\n  a[3] = 3;\n  for (i = 4; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[100];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n    }\n    return f[n];\n}",
    "c_func_decompile": "int func0(int n) {\n  int a[100];\n  int i;\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 2;\n  a[3] = 0;\n  for (i = 4; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": "int func0(int n) {\n  int a[100];\n  int i;\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 2;\n  a[3] = 0;\n  for (i = 4; i < n; i++) {\n    a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
    "c_func_decompile": "float func0(float a, float b) {\n  return a * b * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
    "c_func_decompile": "float func0(float a, float b) {\n  return a * b * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float h) {\n    return (a * h) * 0.5;\n}",
    "c_func_decompile": "float func0(float a, float b) {\n  return a * b * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
    "c_func_decompile": "float func0(float *a, int n) {\n  int i, j;\n  float tmp;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        tmp = a[i];\n        a[i] = a[j];\n        a[j] = tmp;\n      }\n  if (n % 2 == 1)\n    return a[n / 2];\n  else\n    return (a[n / 2] + a[n / 2 - 1]) / 2.0;\n}",
    "c_func_re_decompile": "float func0(float *a, int n) {\n  int i, j;\n  float tmp;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        tmp = a[i];\n        a[i] = a[j];\n        a[j] = tmp;\n      }\n  if (n % 2 == 1)\n    return a[n / 2];\n  else\n    return (a[n / 2] + a[n / 2 - 1]) / 2.0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - 1 - i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - 1 - i]) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
    "c_func_decompile": "float func0(float *a, int n) {\n  int i, j;\n  float t;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  if (n % 2 == 1)\n    return a[n / 2];\n  else\n    return (a[n / 2] + a[n / 2 - 1]) / 2.0;\n}",
    "c_func_re_decompile": "float func0(float *a, int n) {\n  int i, j;\n  float t;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  if (n % 2 == 1)\n    return a[n / 2];\n  else\n    return (a[n / 2] + a[n / 2 - 1]) / 2.0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
    "c_func_decompile": "float func0(float *a, int n) {\n  int i, j;\n  float t;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  if (n % 2 == 1)\n    return a[n / 2];\n  else\n    return (a[n / 2] + a[n / 2 - 1]) / 2.0;\n}",
    "c_func_re_decompile": "float func0(float *a, int n) {\n  int i, j;\n  float t;\n  for (i = 0; i < n; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  if (n % 2 == 1)\n    return a[n / 2];\n  else\n    return (a[n / 2] + a[n / 2 - 1]) / 2.0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - i - 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - i - 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - i - 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int len = strlen(str);\n    int i;\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - i - 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n\nfloat func0(float *l, int size) {\n    float max = -10000;\n    for (int i = 0; i < size; i++)\n        if (max < l[i]) max = l[i];\n    return max;\n}",
    "c_func_decompile": "float func0(float *a, int n) {\n  int i;\n  float max = a[0];\n  for (i = 0; i < n; i++) {\n    if (a[i] > max) {\n      max = a[i];\n    }\n  }\n  return max;\n}",
    "c_func_re_decompile": "float func0(float *a, int n) {\n  int i;\n  float max
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nfloat func0(float *l, int size) {\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (l[i] > l[j]) {\n                float temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    if (size % 2 == 1) return l[size / 2];\n    return 0.5 * (l[size / 2] + l[size / 2 - 1]);\n}",
    "c_func_decompile": "float func0(float *a,int n)\n{\n int i,j;\n float t;\n for(i=0;i<n-1;i++)\n  for(j=i+1;j<n;j++)\n   if(a[i]>a[j])\n   {\n    t=a[i];\n    a[i]=a[j];\n    a[j]=t;\n   }\n if(n%2==1)\n  return a[n/2];\n else\n  return (a[n/2]+a[n/2-1])/2.0;\n}",
    "c_func_re_decompile": "float func0(float *a,int n)\n{\n int i,j;\n float t;\n for(i=0;i<n-1;i++)\n  for(j=i+1;j<n;j++)\n   if(a[i]>a[j])\n   {\n    t=a[i];\n    a[i]=a[j];\n    a[j]=t;\n   }\n if(n%2==1)\n  return a[n/2];\n else\n  return (a[n/2]+a[n/2-1])/2.0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *text) {\n    int len = strlen(text);\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - i - 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, len;\n    len = strlen(str);\n    for (i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - i - 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
    "c_func_decompile": "int func0(int n, int m) {\n    int i, j;\n    j = 1;\n    for (i = 0; i < n; i++) {\n        j = (2 * j) % m;\n    }\n    return j;\n}",
    "c_func_re_decompile": "int func0(int n, int m) {\n    int i, j;\n    j = 1;\n    for (i = 0; i < n; i++) {\n        j = (2 * j) % m;\n    }\n    return j;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
    "c_func_decompile": "int func0(int n, int m) {\n    int i, r = 1;\n    for (i = 0; i < n; i++) {\n        r = (r * 2) % m;\n    }\n    return r;\n}",
    "c_func_re_decompile": "int func0(int n, int m) {\n    int i, r = 1;\n    for (i = 0; i < n; i++) {\n        r = (r * 2) % m;\n    }\n    return r;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
    "c_func_decompile": "int func0(int n, int m) {\n    int i, r = 1;\n    for (i = 0; i < n; i++) {\n        r = (r * 2) % m;\n    }\n    return r;\n}",
    "c_func_re_decompile": "int func0(int n, int m) {\n    int i, r = 1;\n    for (i = 0; i < n; i++) {\n        r = (r * 2) % m;\n    }\n    return r;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++)\n        out = (out * 2) % p;\n    return out;\n}",
    "c_func_decompile": "int func0(int n, int m) {\n    int i, r = 1;\n    for (i = 0; i < n; i++) {\n        r = (r * 2) % m;\n    }\n    return r;\n}",
    "c_func_re_decompile": "int func0(int n, int m) {\n    int i, r = 1;\n    for (i = 0; i < n; i++) {\n        r = (r * 2) % m;\n    }\n    return r;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
    "c_func_decompile": "void func0(char *str, int flag) {\n    int i, j, k;\n    size_t len;\n    k = flag ? 5 : 21;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        j = (str[i] - 'a' + k) % 26 + 'a';\n        str[i] = j;\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, int flag) {\n    int i, j, k;\n    size_t len;\n    k = flag ? 5 : 21;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        j = (str[i] - 'a' + k) % 26 + 'a';\n        str[i] = j;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
    "c_func_decompile": "void func0(char *str, int flag) {\n    int i, offset = flag ? 5 : 21;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++) {\n        str[i] = (str[i] - 'a' + offset) % 26 + 'a';\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, int flag) {\n    int i, offset = flag ? 5 : 21;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++) {\n        str[i] = (str[i] - 'a' + offset) % 26 + 'a';\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
    "c_func_decompile": "void func0(char *str, int flag) {\n    int i, base = flag ? 5 : 21;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++) {\n        str[i] = (str[i] - 'a' + base) % 26 + 'a';\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, int flag) {\n    int i, base = flag ? 5 : 21;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++) {\n        str[i] = (str[i] - 'a' + base) % 26 + 'a';\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n  return a + b;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n  return a + b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n  return a + b;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n  return a + b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n  return a + b;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n  return a + b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *s, int encode) {\n    int shift = encode ? 5 : 21;\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) {\n        int w = ((s[i] - 'a' + shift) % 26) + 'a';\n        s[i] = (char)w;\n    }\n}",
    "c_func_decompile": "void func0(char *str, int flag) {\n    int i, len, key;\n    key = flag ? 5 : 1;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        str[i] = (str[i] - 'a' + key) % 26 + 'a';\n    }\n}",
    "c_func_re_decompile": "void func0(char *str, int flag) {\n    int i, len, key;\n    key = flag ? 5 : 1;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        str[i] = (str[i] - 'a' + key) % 26 + 'a';\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
    "c_func_decompile": "void func0(char *s) {\n    char *p, *q;\n    char *delim = \" \\t\\n\";\n    for (p = q = s; *s; s++)\n        if (strchr(delim, *s) == NULL)\n            *p++ = *s;\n    *p = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s) {\n    char *p, *q;\n    char *delim = \" \\t\\n\";\n    for (p = q = s; *s; s++)\n        if (strchr(delim, *s) == NULL)\n            *p++ = *s;\n    *p = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
    "c_func_decompile": "void func0(char *s) {\n    char *p = s;\n    while (*p) {\n        if (strchr(\"aeiou\", *p)) {\n            p++;\n        } else {\n            *s++ = *p++;\n        }\n    }\n    *s = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s) {\n    char *p = s;\n    while (*p) {\n        if (strchr(\"aeiou\", *p)) {\n            p++;\n        } else {\n            *s++ = *p++;\n        }\n    }\n    *s = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    return x + y;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n  return a + b;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n  return a + b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(int *a, int n, int m) {\n    int i;\n    for (i = 0; i < n; i++) {\n        if (a[i] >= m) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int *a, int n, int m) {\n    int i;\n    for (i = 0; i < n; i++) {\n        if (a[i] >= m) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(int *a, int n, int x) {\n    int i;\n    for (i = 0; i < n; i++) {\n        if (a[i] >= x) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int *a, int n, int x) {\n    int i;\n    for (i = 0; i < n; i++) {\n        if (a[i] >= x) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(int *a, int n, int x) {\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= x) {\n      return 0;\n    }\n  }\n  return 1;\n}",
    "c_func_re_decompile": "int func0(int *a, int n, int x) {\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= x) {\n      return 0;\n    }\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *l, int size, int t) {\n    for (int i = 0; i < size; i++)\n        if (l[i] >= t) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(int *a, int n, int x) {\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= x) {\n      return 0;\n    }\n  }\n  return 1;\n}",
    "c_func_re_decompile": "int func0(int *a, int n, int x) {\n  int i;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= x) {\n      return 0;\n    }\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
    "c_func_decompile": "void func0(char *str) {\n    char *p = str;\n    char *q = str;\n    while (*p) {\n        if (strchr(\" \\t\\n\", *p) == NULL) {\n            *q++ = *p;\n        }\n        p++;\n    }\n    *q = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str) {\n    char *p = str;\n    char *q = str;\n    while (*p) {\n        if (strchr(\" \\t\\n\", *p) == NULL) {\n            *q++ = *p;\n        }\n        p++;\n    }\n    *q = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func0(char *text) {\n    const char *vowels = \"AEIOUaeiou\";\n    char *out = text;\n    while (*text != '\\0') {\n        if (strchr(vowels, *text) == NULL) {\n            *out++ = *text;\n        }\n        text++;\n    }\n    *out = '\\0';\n}",
    "c_func_decompile": "void func0(char *str) {\n    char *p = str;\n    char *q = str;\n    while (*p != '\\0') {\n        if (strchr(\" \\t\\n\", *p) == NULL) {\n            *q = *p;\n            q++;\n        }\n        p++;\n    }\n    *q = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str) {\n    char *p = str;\n    char *q = str;\n    while (*p != '\\0') {\n        if (strchr(\" \\t\\n\", *p) == NULL) {\n            *q = *p;\n            q++;\n        }\n        p++;\n    }\n    *q = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
    "c_func_decompile": "int func0(int n) {\n    int a[500] = {0};\n    a[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int a[500] = {0};\n    a[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
    "c_func_decompile": "int func0(int n) {\n    int a[500] = {0};\n    a[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int a[500] = {0};\n    a[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
    "c_func_decompile": "int func0(int n) {\n    int a[1000] = {0};\n    a[1] = 1;\n    int i;\n    for (i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int a[1000] = {0};\n    a[1] = 1;\n    int i;\n    for (i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int f[1000] = {0};\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i <= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}",
    "c_func_decompile": "int func0(int n) {\n    int a[1000] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int a[1000] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, cnt = 0;\n    for (i = 0; str[i]; i++) {\n        if (str[i] == '<')\n            cnt++;\n        if (str[i] == '>')\n            cnt--;\n        if (cnt < 0)\n            return 0;\n    }\n    if (cnt != 0)\n        return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, cnt = 0;\n    for (i = 0; str[i]; i++) {\n        if (str[i] == '<')\n            cnt++;\n        if (str[i] == '>')\n            cnt--;\n        if (cnt < 0)\n            return 0;\n    }\n    if (cnt != 0)\n        return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0 && n > i) {\n            n /= i;\n        }\n    }\n    return n;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(float *arr, int n) {\n  int i, asc = 0, desc = 0;\n  for (i = 1; i < n; i++) {\n    if (arr[i] > arr[i-1])\n      asc = 1;\n    if (arr[i] < arr[i-1])\n      desc = 1;\n  }\n  if (asc + desc == 2)\n    return 0;\n  return 1;\n}",
    "c_func_re_decompile": "int func0(float *arr, int n) {\n  int i, asc = 0, desc = 0;\n  for (i = 1; i < n; i++) {\n    if (arr[i] > arr[i-1])\n      asc = 1;\n    if (arr[i] < arr[i-1])\n      desc = 1;\n  }\n  if (asc + desc == 2)\n    return 0;\n  return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
    "c_func_decompile": "int func0(int n) {\n  return n * (n + 1) / 2;\n}",
    "c_func_re_decompile": "int func0(int n) {\n  return n * (n + 1) / 2;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
    "c_func_decompile": "bool func0(float *arr, int n) {\n    int i, c1 = 0, c2 = 0;\n    for (i = 1; i < n; i++) {\n        if (arr[i] > arr[i - 1])\n            c1 = 1;\n        if (arr[i] < arr[i - 1])\n            c2 = 1;\n    }\n    return (c1 + c2) != 2;\n}",
    "c_func_re_decompile": "bool func0(float *arr, int n) {\n    int i, c1 = 0, c2 = 0;\n    for (i = 1; i < n; i++) {\n        if (arr[i] > arr[i - 1])\n            c1 = 1;\n        if (arr[i] < arr[i - 1])\n            c2 = 1;\n    }\n    return (c1 + c2) != 2;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
    "c_func_decompile": "bool func0(float *arr, int size) {\n    int i, c1 = 0, c2 = 0;\n    for (i = 1; i < size; i++) {\n        if (arr[i] > arr[i - 1])\n            c1 = 1;\n        if (arr[i] < arr[i - 1])\n            c2 = 1;\n    }\n    return (c1 + c2) != 2;\n}",
    "c_func_re_decompile": "bool func0(float *arr, int size) {\n    int i, c1 = 0, c2 = 0;\n    for (i = 1; i < size; i++) {\n        if (arr[i] > arr[i - 1])\n            c1 = 1;\n        if (arr[i] < arr[i - 1])\n            c2 = 1;\n    }\n    return (c1 + c2) != 2;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
    "c_func_decompile": "bool func0(char *str) {\n    int i = 0;\n    while (*str != '\\0') {\n        if (*str == '<') {\n            i++;\n        } else if (*str == '>') {\n            i--;\n        }\n        if (i < 0) {\n            return false;\n        }\n        str++;\n    }\n    if (i != 0) {\n        return false;\n    }\n    return true;\n}",
    "c_func_re_decompile": "bool func0(char *str) {\n    int i = 0;\n    while (*str != '\\0') {\n        if (*str == '<') {\n            i++;\n        } else if (*str == '>') {\n            i--;\n        }\n        if (i < 0) {\n            return false;\n        }\n        str++;\n    }\n    if (i != 0) {\n        return false;\n    }\n    return true;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
    "c_func_decompile": "bool func0(char *str) {\n    int i = 0;\n    while (*str != '\\0') {\n        if (*str == '<') {\n            i++;\n        } else if (*str == '>') {\n            i--;\n        }\n        if (i < 0) {\n            return false;\n        }\n        str++;\n    }\n    if (i != 0) {\n        return false;\n    }\n    return true;\n}",
    "c_func_re_decompile": "bool func0(char *str) {\n    int i = 0;\n    while (*str != '\\0') {\n        if (*str == '<') {\n            i++;\n        } else if (*str == '>') {\n            i--;\n        }\n        if (i < 0) {\n            return false;\n        }\n        str++;\n    }\n    if (i != 0) {\n        return false;\n    }\n    return true;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    int i = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') level++;\n        if (brackets[i] == '>') level--;\n        if (level < 0) return false;\n        i++;\n    }\n    if (level != 0) return false;\n    return true;\n}",
    "c_func_decompile": "bool func0(char *str) {\n    int i = 0;\n    int count = 0;\n    while (str[i] != '\\0') {\n        if (str[i] == '<') {\n            count++;\n        } else if (str[i] == '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n        i++;\n    }\n    if (count == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}",
    "c_func_re_decompile": "bool func0(char *str) {\n    int i = 0;\n    int count = 0;\n    while (str[i] != '\\0') {\n        if (str[i] == '<') {\n            count++;\n        } else if (str[i] == '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n        i++;\n    }\n    if (count == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
    "c_func_decompile": "int func0(int n) {\n  return n * (n + 1) / 2;\n}",
    "c_func_re_decompile": "int func0(int n) {\n  return n * (n + 1) / 2;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
    "c_func_decompile": "int func0(int n) {\n  return n * (n + 1) / 2;\n}",
    "c_func_re_decompile": "int func0(int n) {\n  return n * (n + 1) / 2;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    return n * (n + 1) / 2;\n}",
    "c_func_decompile": "int func0(int n) {\n  return n * (n + 1) / 2;\n}",
    "c_func_re_decompile": "int func0(int n) {\n  return n * (n + 1) / 2;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(float *l, int size) {\n    int incr, decr;\n    incr = decr = 0;\n    \n    for (int i = 1; i < size; i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return false;\n    return true;\n}",
    "c_func_decompile": "bool func0(float *arr, int n) {\n    int i, j, c1 = 0, c2 = 0;\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (arr[i] < arr[j])\n                c1++;\n            if (arr[j] < arr[i])\n                c2++;\n        }\n    }\n    return c1 != 2 && c2 != 2;\n}",
    "c_func_re_decompile": "bool func0(float *arr, int n) {\n    int i, j, c1 = 0, c2 = 0;\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (arr[i] < arr[j])\n                c1++;\n            if (arr[j] < arr[i])\n                c2++;\n        }\n    }\n    return c1 != 2 && c2 != 2;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
    "c_func_decompile": "void func0(float *x, int n, float *y) {\n  int i;\n  for (i = 1; i < n; i++)\n    y[i-1] = i * x[i];\n}",
    "c_func_re_decompile": "void func0(float *x, int n, float *y) {\n  int i;\n  for (i = 1; i < n; i++)\n    y[i-1] = i * x[i];\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
    "c_func_decompile": "void func0(float *x, int n, float *y) {\n  int i;\n  for (i = 1; i < n; i++) {\n    y[i-1] = i * x[i];\n  }\n}",
    "c_func_re_decompile": "void func0(float *x, int n, float *y) {\n  int i;\n  for (i = 1; i < n; i++) {\n    y[i-1] = i * x[i];\n  }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
    "c_func_decompile": "void func0(float *x, int n, float *y) {\n  int i;\n  for (i = 1; i < n; i++) {\n    y[i-1] = i * x[i];\n  }\n}",
    "c_func_re_decompile": "void func0(float *x, int n, float *y) {\n  int i;\n  for (i = 1; i < n; i++) {\n    y[i-1] = i * x[i];\n  }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(char *str1, char *str2) {\n    int i, j, k, l;\n    int len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (str1[i] == str2[j]) {\n                for (k = i + 1; k < len1; k++) {\n                    for (l = j + 1; l < len2; l++) {\n                        if (str1[k] == str2[l]) {\n                            return 1;\n                        }\n                    }\n                }\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str1, char *str2) {\n    int i, j, k, l;\n    int len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (str1[i] == str2[j]) {\n                for (k = i + 1; k < len1; k++) {\n                    for (l = j + 1; l < len2; l++) {\n                        if (str1[k] == str2[l]) {\n                            return 1;\n                        }\n                    }\n                }\n                return 0;\n            }\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    for (int i = 2; i * i <= n; i++)\n        while (n % i == 0 && n > i) n = n / i;\n    return n;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            if (i < n) {\n                int j = n / i;\n                if (j % i == 0) {\n                    if (j < i) {\n                        return j;\n                    }\n                } else {\n                    return i;\n                }\n            }\n        }\n    }\n    return n;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            if (i < n) {\n                int j = n / i;\n                if (j % i == 0) {\n                    if (j < i) {\n                        return j;\n                    }\n                } else {\n                    return i;\n                }\n            }\n        }\n    }\n    return n;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
    "c_func_decompile": "bool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}",
    "c_func_re_decompile": "bool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(')\n            count++;\n        if (str[i] == ')')\n            count--;\n        if (count < 0)\n            return false;\n    }\n    return count == 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(char *str1, char *str2) {\n    int i, j, len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (str1[i] == str2[j]) {\n                break;\n            }\n        }\n        if (j >= len2) {\n            return 0;\n        }\n    }\n    for (j = 0; j < len2; j++) {\n        for (i = 0; i < len1; i++) {\n            if (str2[j] == str1[i]) {\n                break;\n            }\n        }\n        if (i >= len1) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str1, char *str2) {\n    int i, j, len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (str1[i] == str2[j]) {\n                break;\n            }\n        }\n        if (j >= len2) {\n            return 0;\n        }\n    }\n    for (j = 0; j < len2; j++) {\n        for (i = 0; i < len1; i++) {\n            if (str2[j] == str1[i]) {\n                break;\n            }\n        }\n        if (i >= len1) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
    "c_func_decompile": "bool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(') {\n            count++;\n        } else if (str[i] == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}",
    "c_func_re_decompile": "bool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(') {\n            count++;\n        } else if (str[i] == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
    "c_func_decompile": "bool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(') {\n            count++;\n        } else if (str[i] == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}",
    "c_func_re_decompile": "bool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(') {\n            count++;\n        } else if (str[i] == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(char *str1, char *str2) {\n    int i, j, len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (str1[i] == str2[j]) {\n                break;\n            }\n        }\n        if (j >= len2) {\n            return 0;\n        }\n    }\n    for (j = 0; j < len2; j++) {\n        for (i = 0; i < len1; i++) {\n            if (str2[j] == str1[i]) {\n                break;\n            }\n        }\n        if (i >= len1) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str1, char *str2) {\n    int i, j, len1, len2;\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (str1[i] == str2[j]) {\n                break;\n            }\n        }\n        if (j >= len2) {\n            return 0;\n        }\n    }\n    for (j = 0; j < len2; j++) {\n        for (i = 0; i < len1; i++) {\n            if (str2[j] == str1[i]) {\n                break;\n            }\n        }\n        if (i >= len1) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool func0(const char *brackets) {\n    int level = 0;\n    for (int i = 0; i < strlen(brackets); i++) {\n        if (brackets[i] == '(') level += 1;\n        if (brackets[i] == ')') level -= 1;\n        if (level < 0) return false;\n    }\n    return level == 0;\n}",
    "c_func_decompile": "bool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(') {\n            count++;\n        } else if (str[i] == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}",
    "c_func_re_decompile": "bool func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '(') {\n            count++;\n        } else if (str[i] == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char *s0, const char *s1) {\n    int len0 = strlen(s0), len1 = strlen(s1);\n    for (int i = 0; i < len0; i++) {\n        bool found = false;\n        for (int j = 0; j < len1; j++) {\n            if (s0[i] == s1[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    for (int i = 0; i < len1; i++) {\n        bool found = false;\n        for (int j = 0; j < len0; j++) {\n            if (s1[i] == s0[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(char *str1, char *str2) {\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    for (int i = 0; i < len1; i++) {\n        bool flag = false;\n        for (int j = 0; j < len2; j++) {\n            if (str1[i] == str2[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag) {\n            return 0;\n        }\n    }\n    for (int i = 0; i < len2; i++) {\n        bool flag = false;\n        for (int j = 0; j < len1; j++) {\n            if (str2[i] == str1[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str1, char *str2) {\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    for (int i = 0; i < len1; i++) {\n        bool flag = false;\n        for (int j = 0; j < len2; j++) {\n            if (str1[i] == str2[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag) {\n            return 0;\n        }\n    }\n    for (int i = 0; i < len2; i++) {\n        bool flag = false;\n        for (int j = 0; j < len1; j++) {\n            if (str2[i] == str1[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const float *xs, int xs_size, float *out) {\n    for (int i = 1; i < xs_size; i++) {\n        out[i - 1] = i * xs[i];\n    }\n}",
    "c_func_decompile": "void func0(float *a, int n, float *b) {\n  int i;\n  for (i = 1; i < n; i++) {\n    b[i-1] = i * a[i];\n  }\n}",
    "c_func_re_decompile": "void func0(float *a, int n, float *b) {\n  int i;\n  for (i = 1; i < n; i++) {\n    b[i-1] = i * a[i];\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_decompile": "int func0(char *str, int n) {\n    char num1[10] = {0};\n    char num2[10] = {0};\n    int i, j, flag = 0;\n    for (i = 0, j = 0; str[i] != '\\0'; i++) {\n        if (__ctype_b_loc()[(int)str[i]] & 0x0800) {\n            if (flag == 0) {\n                num1[j++] = str[i];\n            } else {\n                num2[j++] = str[i];\n            }\n        } else {\n            if (flag == 0 && j > 0) {\n                flag = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
    "c_func_decompile": "int func0(int n) {\n    int a[100] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    for (int i = 3; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int a[100] = {0};\n    a[0] = 0;\n    a[1] = 1;\n    for (int i = 3; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a[n];\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
    "c_func_decompile": "int *func0(int *a, int na, int *b, int nb, int *n) {\n    int i, j, k, *c;\n    c = (int *)malloc(na * sizeof(int));\n    k = 0;\n    for (i = 0; i < na; i++) {\n        for (j = 0; j < nb; j++) {\n            if (a[i] == b[j]) {\n                c[k] = a[i];\n                k++;\n                break;\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                int t = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = t;\n            }\n        }\n    }\n    *n = k;\n    return c;\n}",
    "c_func_re_decompile": "int *func0(int *a, int na, int *b, int nb, int *n) {\n    int i, j, k, *c;\n    c = (int *)malloc(na * sizeof(int));\n    k = 0;\n    for (i = 0; i < na; i++) {\n        for (j = 0; j < nb; j++) {\n            if (a[i] == b[j]) {\n                c[k] = a[i];\n                k++;\n                break;\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                int t = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = t;\n            }\n        }\n    }\n    *n = k;\n    return c;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_decompile": "int func0(char *s, int n) {\n    int i = 0, j = 0, flag = 0;\n    char num1[10] = {0}, num2[10] = {0};\n    while (*s) {\n        if (__ctype_b_loc()[*s + 1] & 0x08) {\n            if (flag == 0) {\n                num1[i++] = *s;\n            } else {\n                num2[j++] = *s;\n            }\n        } else {\n            if (flag == 0 && i > 0) {\n                flag = 1;\n            }\n        }\n        s++;\n    }\n    return n - (int)strtol(num1, NULL, 10) - (int)strtol(num2, NULL, 10);\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_decompile": "int func0(char *s, int n) {\n    char *p = s;\n    char num[10] = {0};\n    char op[10] = {0};\n    int i = 0, j = 0;\n    int flag = 0;\n    while (*p != '\\0') {\n        if (__ctype_b_loc()[*p + 1] & 0x08) {\n            if (flag == 0) {\n                num[i++] = *p;\n            } else {\n                op[j++] = *p;\n            }\n        } else {\n            if (flag == 0) {\n                if (i > 0) {\n                    n -= strtol(num, NULL, 10);\n                    i = 0;\n                }\n                flag = 1;\n            }\n        }\n        p++;\n    }\n    if (i > 0) {\n        n -= strtol(num, NULL, 10);\n    }\n    n -= strtol(op, NULL, 10);\n    return n;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint func0(const char *s, int n) {\n    char num1[10] = \"\";\n    char num2[10] = \"\";\n    int is12 = 0, j = 0;\n\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (isdigit(s[i])) {\n            if (is12 == 0) {\n                num1[j++] = s[i];\n            } else {\n                num2[j++] = s[i];\n            }\n        } else {\n            if (is12 == 0 && j > 0) {\n                is12 = 1;\n                j = 0;\n            }\n        }\n    }\n    return n - atoi(num1) - atoi(num2);\n}",
    "c_func_decompile": "int func0(char *s, int n) {\n    int i = 0, j = 0, flag = 0;\n    char num1[10] = {0}, num2[10] = {0};\n    while (*s) {\n        if (__ctype_b_loc()[*s + 1] & 0x08) {\n            if (flag == 0) {\n                num1[i++] = *s;\n            } else {\n                num2[j++] = *s;\n            }\n        } else {\n            if (flag == 0 && i > 0) {\n                flag = 1;\n            }\n        }\n        s++;\n    }\n    return n - (int)strtol(num1, NULL, 10) - (int)strtol(num2, NULL, 10);\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
    "c_func_decompile": "int *func0(int *a, int n) {\n    int i, max = -1, max_i = -1, min = 0x7fffffff, min_i = -1;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (min_i == -1 || a[i] < min) {\n                min = a[i];\n                min_i = i;\n            }\n        } else {\n            if (max_i == -1 || a[i] > max) {\n                max = a[i];\n                max_i = i;\n            }\n        }\n    }\n    if (min_i == -1) {\n        return NULL;\n    }\n    int *ret = (int *)malloc(2 * sizeof(int));\n    ret[0] = min;\n    ret[1] = max_i;\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
    "c_func_decompile": "int *func0(int *a, int na, int *b, int nb, int *n) {\n    int i, j, k, *c;\n    c = (int *)malloc(na * sizeof(int));\n    k = 0;\n    for (i = 0; i < na; i++) {\n        for (j = 0; j < k; j++) {\n            if (c[j] == a[i])\n                break;\n        }\n        if (j == k) {\n            for (j = 0; j < nb; j++) {\n                if (a[i] == b[j]) {\n                    c[k++] = a[i];\n                    break;\n                }\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                int t = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = t;\n            }\n        }\n    }\n    *n = k;\n    return c;\n}",
    "c_func_re_decompile": "int *func0(int *a, int na, int *b, int nb, int *n) {\n    int i, j, k, *c;\n    c = (int *)malloc(na * sizeof(int));\n    k = 0;\n    for (i = 0; i < na; i++) {\n        for (j = 0; j < k; j++) {\n            if (c[j] == a[i])\n                break;\n        }\n        if (j == k) {\n            for (j = 0; j < nb; j++) {\n                if (a[i] == b[j]) {\n                    c[k++] = a[i];\n                    break;\n                }\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                int t = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = t;\n            }\n        }\n    }\n    *n = k;\n    return c;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
    "c_func_decompile": "int func0(int n) {\n    int a[100] = {0};\n    a[1] = 1;\n    for (int i = 2; i < n; i++) {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int a[100] = {0};\n    a[2] = 1;\n    for (int i = 3; i < n; i++) {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a[n];\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
    "c_func_decompile": "int func0(int n) {\n    int a[100] = {0};\n    a[1] = 1;\n    for (int i = 2; i < n; i++) {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a[n];\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int a[100] = {0};\n    a[2] = 1;\n    for (int i = 3; i < n; i++) {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a[n];\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
    "c_func_decompile": "int* func0(int* a, int n, int* b, int m, int* returnSize) {\n    int* c = (int*)malloc(n * sizeof(int));\n    int i, j, k, l, t;\n    for (i = 0, k = 0; i < n; i++) {\n        t = 0;\n        for (j = 0; j < k; j++) {\n            if (c[j] == a[i]) {\n                t = 1;\n                break;\n            }\n        }\n        if (t == 0) {\n            for (l = 0; l < m; l++) {\n                if (a[i] == b[l]) {\n                    c[k++] = a[i];\n                    break;\n                }\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                t = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = t;\n            }\n        }\n    }\n    *returnSize = k;\n    return c;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* b, int m, int* returnSize) {\n    int* c = (int*)malloc(n * sizeof(int));\n    int i, j, k, l, t;\n    for (i = 0, k = 0; i < n; i++) {\n        t = 0;\n        for (j = 0; j < k; j++) {\n            if (c[j] == a[i]) {\n                t = 1;\n                break;\n            }\n        }\n        if (t == 0) {\n            for (l = 0; l < m; l++) {\n                if (a[i] == b[l]) {\n                    c[k++] = a[i];\n                    break;\n                }\n            }\n        }\n    }\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (c[j] > c[j + 1]) {\n                t = c[j];\n                c[j] = c[j + 1];\n                c[j + 1] = t;\n            }\n        }\n    }\n    *returnSize = k;\n    return c;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int *l1, int size1, int *l2, int size2, int *out_size) {\n    int *out = malloc(size1 * sizeof(int));\n    int k = 0, i, j, m;\n\n    for (i = 0; i < size1; i++) {\n        int exists_in_out = 0;\n        for (m = 0; m < k; m++) {\n            if (out[m] == l1[i]) {\n                exists_in_out = 1;\n                break;\n            }\n        }\n        if (!exists_in_out) {\n            for (j = 0; j < size2; j++) {\n                if (l1[i] == l2[j]) {\n                    out[k++] = l1[i];\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < k - 1; i++) {\n        for (j = 0; j < k - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                int temp = out[j];\n                out[j] = out[j + 1];\n                out[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = k;\n    return out;\n}",
    "c_func_decompile": "int* func0(int* a, int a_len, int* b, int b_len, int* ret_len) {\n    int* ret = (int*)malloc(a_len * sizeof(int));\n    int ret_i = 0;\n    for (int i = 0; i < a_len; i++) {\n        int found = 0;\n        for (int j = 0; j < b_len; j++) {\n            if (a[i] == b[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (found) {\n            ret[ret_i] = a[i];\n            ret_i++;\n        }\n    }\n    for (int i = 0; i < ret_i - 1; i++) {\n        for (int j = 0; j < ret_i - 1 - i; j++) {\n            if (ret[j] > ret[j + 1]) {\n                int tmp = ret[j];\n                ret[j] = ret[j + 1];\n                ret[j + 1] = tmp;\n            }\n        }\n    }\n    *ret_len = ret_i;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int* a, int a_len, int* b, int b_len, int* ret_len) {\n    int* ret = (int*)malloc(a_len * sizeof(int));\n    int ret_i = 0;\n    for (int i = 0; i < a_len; i++) {\n        int found = 0;\n        for (int j = 0; j < b_len; j++) {\n            if (a[i] == b[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (found) {\n            ret[ret_i] = a[i];\n            ret_i++;\n        }\n    }\n    for (int i = 0; i < ret_i - 1; i++) {\n        for (int j = 0; j < ret_i - 1 - i; j++) {\n            if (ret[j] > ret[j + 1]) {\n                int tmp = ret[j];\n                ret[j] = ret[j + 1];\n                ret[j + 1] = tmp;\n            }\n        }\n    }\n    *ret_len = ret_i;\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, len, count = 0;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiouAEIOU\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    if (str[len - 1] == 'y' || str[len - 1] == 'Y') {\n        count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, len, count = 0;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiouAEIOU\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    if (str[len - 1] == 'y' || str[len - 1] == 'Y') {\n        count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, len, count = 0;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiou\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    if (str[len - 1] == 'y' || str[len - 1] == 'Y') {\n        count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, len, count = 0;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiou\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    if (str[len - 1] == 'y' || str[len - 1] == 'Y') {\n        count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
    "c_func_decompile": "int func0(char *str) {\n    char *vowels = \"aeiou\";\n    int count = 0;\n    int len = strlen(str);\n    for (int i = 0; i < len; i++) {\n        if (strchr(vowels, str[i]) != NULL) {\n            count++;\n        }\n    }\n    if (len > 0 && (str[len - 1] == 'y' || str[len - 1] == 'Y')) {\n        count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    char *vowels = \"aeiou\";\n    int count = 0;\n    int len = strlen(str);\n    for (int i = 0; i < len; i++) {\n        if (strchr(vowels, str[i]) != NULL) {\n            count++;\n        }\n    }\n    if (len > 0 && (str[len - 1] == 'y' || str[len - 1] == 'Y')) {\n        count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int ff[100] = {0};\n    ff[1] = 0;\n    ff[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    return ff[n];\n}",
    "c_func_decompile": "int func0(int n) {\n  int i, a[100] = {0};\n  a[1] = 1;\n  for (i = 3; i <= n; i += 4) {\n    a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    a[i + 1] = a[i] + a[i - 1] + a[i - 2];\n    a[i + 2] = a[i + 1] + a[i] + a[i - 1];\n    a[i + 3] = a[i + 2] + a[i + 1] + a[i];\n  }\n  return a[n];\n}",
    "c_func_re_decompile": "int func0(int n) {\n  int i, a[100] = {0};\n  a[2] = 1;\n  for (i = 3; i <= n; i++) {\n    a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n  }\n  for (i = 3; i <= n; i++) {\n    a[i] += a[i - 1] + a[i - 2] + a[i - 3];\n  }\n  return a[n];\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int sum = 0;\n    while (*str != '\\0') {\n        if (*str >= 'A' && *str <= 'Z') {\n            sum += *str;\n        }\n        str++;\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int sum = 0;\n    while (*str != '\\0') {\n        if (*str >= 'A' && *str <= 'Z') {\n            sum += *str;\n        }\n        str++;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *s) {\n    const char *vowels = \"aeiouAEIOU\";\n    int count = 0;\n    int length = strlen(s);\n    \n    for (int i = 0; i < length; i++) {\n        if (strchr(vowels, s[i])) {\n            count++;\n        }\n    }\n    \n    if (length > 0 && (s[length - 1] == 'y' || s[length - 1] == 'Y')) {\n        count++;\n    }\n    \n    return count;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, len, count = 0;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiou\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    if (str[len - 1] == 'y' || str[len - 1] == 'Y') {\n        count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, len, count = 0;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiou\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    if (str[len - 1] == 'y' || str[len - 1] == 'Y') {\n        count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, sum = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z') {\n            sum += str[i];\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, sum = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z') {\n            sum += str[i];\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, sum = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z') {\n            sum += str[i];\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, sum = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z') {\n            sum += str[i];\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    int sum = 0;\n    for (int i = 0; s[i] != '\\0'; i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int sum = 0;\n    while (*str != '\\0') {\n        if (*str >= 'A' && *str <= 'Z') {\n            sum += *str;\n        }\n        str++;\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int sum = 0;\n    while (*str != '\\0') {\n        if (*str >= 'A' && *str <= 'Z') {\n            sum += *str;\n        }\n        str++;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
    "c_func_decompile": "int* func0(int* a, int n, int* ret) {\n    int min = 0x7fffffff;\n    int index = -1;\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (a[i] < min || index == -1) {\n                min = a[i];\n                index = i;\n            }\n        }\n    }\n    if (index == -1) {\n        return NULL;\n    }\n    ret[0] = min;\n    ret[1] = index;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* ret) {\n    int min = 0x7fffffff;\n    int index = -1;\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (a[i] < min || index == -1) {\n                min = a[i];\n                index = i;\n            }\n        }\n    }\n    if (index == -1) {\n        return NULL;\n    }\n    ret[0] = min;\n    ret[1] = index;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
    "c_func_decompile": "char *func0(int i, int j)\n{\n    static char buf[100];\n    char tmp;\n    int len;\n    char tmpbuf[50];\n    sprintf(buf, \"abcdefghijklmnopqrstuvwxyz0123456789\", i);\n    len = strlen(buf);\n    if (len < j) {\n        int k;\n        for (k = 0; k < len / 2; k++) {\n            tmp = buf[k];\n            buf[k] = buf[len - 1 - k];\n            buf[len - 1 - k] = tmp;\n        }\n    } else {\n        strcpy(tmpbuf, buf + len - j);\n        tmpbuf[j] = '\\0';\n        strncat(tmpbuf, buf, len - j);\n        strcpy(buf, tmpbuf);\n    }\n    return buf;\n}",
    "c_func_re_decompile": "char *func0(int i, int j)\n{\n    static char buf[100];\n    char tmp;\n    int len;\n    char tmpbuf[50];\n    sprintf(buf, \"abcdefghijklmnopqrstuvwxyz0123456789\", i);\n    len = strlen(buf);\n    if (len < j) {\n        int k;\n        for (k = 0; k < len / 2; k++) {\n            tmp = buf[k];\n            buf[k] = buf[len - 1 - k];\n            buf[len - 1 - k] = tmp;\n        }\n    } else {\n        strcpy(tmpbuf, buf + len - j);\n        tmpbuf[j] = '\\0';\n        strncat(tmpbuf, buf, len - j);\n        strcpy(buf, tmpbuf);\n    }\n    return buf;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
    "c_func_decompile": "char *func0(int a, int b) {\n  static char buf[50];\n  int i, j;\n  char tmp;\n  __sprintf_chk(buf, 1, 50, \"%d\", a);\n  for (i = strlen(buf), j = 0; i < b; i--, j++) {\n    tmp = buf[j];\n    buf[j] = buf[i];\n    buf[i] = tmp;\n  }\n  if (i > b) {\n    char tmp[50];\n    __strcpy_chk(tmp, buf + i - b, 50);\n    tmp[b] = '\\0';\n    __strncat_chk(tmp, buf, i - b, 50);\n    __strcpy_chk(buf, tmp, 50);\n  }\n  return buf;\n}",
    "c_func_re_decompile": "char *func0(int a, int b) {\n  static char buf[50];\n  int i, j;\n  char tmp;\n  __sprintf_chk(buf, 1, 50, \"%d\", a);\n  for (i = strlen(buf), j = 0; i < b; i--, j++) {\n    tmp = buf[j];\n    buf[j] = buf[i];\n    buf[i] = tmp;\n  }\n  if (i > b) {\n    char tmp[50];\n    __strcpy_chk(tmp, buf + i - b, 50);\n    tmp[b] = '\\0';\n    __strncat_chk(tmp, buf, i - b, 50);\n    __strcpy_chk(buf, tmp, 50);\n  }\n  return buf;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, max = -1, *b;\n    b = (int *)calloc(n + 1, sizeof(int));\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] > b[max])\n            max = a[i];\n        if (a[i] > max)\n            max = a[i];\n    }\n    free(b);\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, max = -1, *b;\n    b = (int *)calloc(n + 1, sizeof(int));\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] > b[max])\n            max = a[i];\n        if (a[i] > max)\n            max = a[i];\n    }\n    free(b);\n    return max;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
    "c_func_decompile": "char *func0(int a, int b) {\n  char buf[50];\n  char *p = buf;\n  int i, j;\n  __sprintf_chk(buf, 1, 50, \"%s%d\", \"func0\", a);\n  for (i = j = strlen(buf); i < b; i++, j--) {\n    char tmp = buf[i];\n    buf[i] = buf[j];\n    buf[j] = tmp;\n  }\n  if (i > b) {\n    char tmp[50];\n    p = __strcpy_chk(tmp, buf + i - b, 50);\n    tmp[b] = '\\0';\n    p = __strncat_chk(p, buf, 50, b);\n    p = __strcpy_chk(buf, p, 50);\n  }\n  return buf;\n}",
    "c_func_re_decompile": "char *func0(int a, int b) {\n  char buf[50];\n  char *p = buf;\n  int i, j;\n  __sprintf_chk(buf, 1, 50, \"%s%d\", \"func0\", a);\n  for (i = j = strlen(buf); i < b; i++, j--) {\n    char tmp = buf[i];\n    buf[i] = buf[j];\n    buf[j] = tmp;\n  }\n  if (i > b) {\n    char tmp[50];\n    p = __strcpy_chk(tmp, buf + i - b, 50);\n    tmp[b] = '\\0';\n    p = __strncat_chk(p, buf, 50, b);\n    p = __strcpy_chk(buf, p, 50);\n  }\n  return buf;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int x, int shift) {\n    static char xs[50];\n    sprintf(xs, \"%d\", x);\n    int len = strlen(xs);\n\n    if (len < shift) {\n        for (int i = 0; i < len / 2; i++) {\n            char temp = xs[i];\n            xs[i] = xs[len - 1 - i];\n            xs[len - 1 - i] = temp;\n        }\n    } else {\n        char temp[50];\n        strcpy(temp, xs + len - shift);\n        temp[shift] = '\\0';\n        strncat(temp, xs, len - shift);\n        strcpy(xs, temp);\n    }\n\n    return xs;\n}",
    "c_func_decompile": "char *func0(int a, int b) {\n  char buf[50];\n  char *p = buf;\n  int i, j;\n  __sprintf_chk(buf, 1, 50, \"%s%d\", \"func0\", a);\n  for (i = j = strlen(buf); i < b; i++, j--) {\n    char tmp = buf[i];\n    buf[i] = buf[j];\n    buf[j] = tmp;\n  }\n  if (i > b) {\n    char tmp[50];\n    p = __strcpy_chk(tmp, buf + i - b, 50);\n    tmp[b] = '\\0';\n    p = __strncat_chk(p, buf, 50, b);\n    p = __strcpy_chk(buf, p, 50);\n  }\n  return buf;\n}",
    "c_func_re_decompile": "char *func0(int a, int b) {\n  char buf[50];\n  char *p = buf;\n  int i, j;\n  __sprintf_chk(buf, 1, 50, \"%s%d\", \"func0\", a);\n  for (i = j = strlen(buf); i < b; i++, j--) {\n    char tmp = buf[i];\n    buf[i] = buf[j];\n    buf[j] = tmp;\n  }\n  if (i > b) {\n    char tmp[50];\n    p = __strcpy_chk(tmp, buf + i - b, 50);\n    tmp[b] = '\\0';\n    p = __strncat_chk(p, buf, 50, b);\n    p = __strcpy_chk(buf, p, 50);\n  }\n  return buf;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int *b = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] > b[max])\n            max = a[i];\n    }\n    free(b);\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int *b = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] > b[max])\n            max = a[i];\n        else if (b[a[i]] == b[max])\n            max = max > a[i] ? a[i] : max;\n    }\n    free(b);\n    return max;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
    "c_func_decompile": "int* func0(int* a, int n, int* ret) {\n    int max = -1;\n    int max_i = -1;\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (max_i == -1 || a[i] > max) {\n                max = a[i];\n                max_i = i;\n            }\n        }\n    }\n    if (max_i == -1) {\n        return NULL;\n    }\n    ret[0] = max;\n    ret[1] = max_i;\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n, int* ret) {\n    int min = 0x7fffffff;\n    int min_i = -1;\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (min_i == -1 || a[i] < min) {\n                min = a[i];\n                min_i = i;\n            }\n        }\n    }\n    if (min_i == -1) {\n        return NULL;\n    }\n    ret[0] = min;\n    ret[1] = min_i;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int *b = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] >= a[i] && a[i] > max)\n            max = a[i];\n    }\n    free(b);\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int *b = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] >= a[i] && a[i] > max)\n            max = a[i];\n    }\n    free(b);\n    return max;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *lst, int size) {\n    int *freq = (int *)calloc(size + 1, sizeof(int));\n    int max = -1;\n\n    for (int i = 0; i < size; i++) {\n        freq[lst[i]]++;\n        if ((freq[lst[i]] >= lst[i]) && (lst[i] > max)) {\n            max = lst[i];\n        }\n    }\n\n    free(freq);\n    return max;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int *b = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] > b[max])\n            max = a[i];\n    }\n    free(b);\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int *b = calloc(n + 1, sizeof(int));\n    int i, max = -1;\n    for (i = 0; i < n; i++) {\n        b[a[i]]++;\n        if (b[a[i]] > b[max])\n            max = a[i];\n        else if (b[a[i]] == b[max])\n            max = max > a[i] ? a[i] : max;\n    }\n    free(b);\n    return max;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
    "c_func_decompile": "float func0(float a, float b, float c) {\n    float s, area;\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    s = (a + b + c) / 2;\n    area = sqrtf(s * (s - a) * (s - b) * (s - c));\n    return roundf(area * 100) / 100;\n}",
    "c_func_re_decompile": "float func0(float a, float b, float c) {\n    float s, area;\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    s = (a + b + c) / 2;\n    area = sqrtf(s * (s - a) * (s - b) * (s - c));\n    return roundf(area * 100) / 100;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
    "c_func_decompile": "float func0(float a, float b, float c) {\n float p = (a + b + c) / 2;\n if (a + b <= c || a + c <= b || b + c <= a)\n  return -1;\n return roundf(sqrtf(p * (p - a) * (p - b) * (p - c)) * 100) / 100;\n}",
    "c_func_re_decompile": "float func0(float a, float b, float c) {\n float p = (a + b + c) / 2;\n if (a + b <= c || a + c <= b || b + c <= a)\n  return -1;\n return roundf(sqrtf(p * (p - a) * (p - b) * (p - c)) * 100) / 100;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint *func0(int arr[], int length, int output[2]) {\n    int smallestEven = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < length; ++i) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallestEven || index == -1)) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    \n    if (index == -1) {\n        return NULL;\n    }\n\n    output[0] = smallestEven;\n    output[1] = index;\n    return output;\n}",
    "c_func_decompile": "int *func0(int *a, int n, int *b) {\n    int i, max = -1, max_i = -1;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (max_i == -1 || a[i] > max) {\n                max = a[i];\n                max_i = i;\n            }\n        }\n    }\n    if (max_i == -1) {\n        return NULL;\n    }\n    b[0] = max;\n    b[1] = max_i;\n    return b;\n}",
    "c_func_re_decompile": "int *func0(int *a, int n, int *b) {\n    int i, min = 0x7fffffff, min_i = -1;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            if (min_i == -1 || a[i] < min) {\n                min = a[i];\n                min_i = i;\n            }\n        }\n    }\n    if (min_i == -1) {\n        return NULL;\n    }\n    b[0] = min;\n    b[1] = min_i;\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
    "c_func_decompile": "float func0(float a, float b, float c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    float p = (a + b + c) / 2;\n    return roundf(sqrtf(p * (p - a) * (p - b) * (p - c)) * 100) / 100;\n}",
    "c_func_re_decompile": "float func0(float a, float b, float c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    float p = (a + b + c) / 2;\n    return roundf(sqrtf(p * (p - a) * (p - b) * (p - c)) * 100) / 100;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n  int i, j;\n  for (i = 0; i < n-1; i++) {\n    for (j = i+1; j < n; j++) {\n      if (a[i] > a[j]) {\n        int t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n  for (i = 0; i < n; i++) {\n    b[2*i] = a[i];\n    b[2*i+1] = a[n-1-i];\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n  int i, j;\n  for (i = 0; i < n-1; i++) {\n    for (j = i+1; j < n; j++) {\n      if (a[i] > a[j]) {\n        int t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n  for (i = 0; i < n; i++) {\n    b[2*i] = a[i];\n    b[2*i+1] = a[n-1-i];\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nfloat func0(float a, float b, float c) {\nif (a + b <= c || a + c <= b || b + c <= a) return -1;\nfloat s = (a + b + c) / 2;\nfloat area = sqrtf(s * (s - a) * (s - b) * (s - c));\nreturn roundf(area * 100) / 100;\n}",
    "c_func_decompile": "float func0(float a, float b, float c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    float p = (a + b + c) / 2;\n    return roundf(sqrtf(p * (p - a) * (p - b) * (p - c)) * 100) / 100;\n}",
    "c_func_re_decompile": "float func0(float a, float b, float c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    float p = (a + b + c) / 2;\n    return roundf(sqrtf(p * (p - a) * (p - b) * (p - c)) * 100) / 100;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n  int i, j, t;\n  for (i = 0; i < n - 1; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n  int k = 0;\n  int l = n - 1;\n  int m = 0;\n  while (k <= l) {\n    if (k == l) {\n      b[m++] = a[k++];\n    } else {\n      b[m++] = a[k++];\n      b[m++] = a[l--];\n    }\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n  int i, j, t;\n  for (i = 0; i < n - 1; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n  int k = 0;\n  int l = n - 1;\n  int m = 0;\n  while (k <= l) {\n    if (k == l) {\n      b[m++] = a[k++];\n    } else {\n      b[m++] = a[k++];\n      b[m++] = a[l--];\n    }\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
    "c_func_decompile": "bool func0(int *arr, int len, int k) {\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] * 2;\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}",
    "c_func_re_decompile": "bool func0(int *arr, int len, int k) {\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] * 2;\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
    "c_func_decompile": "bool func0(int *arr, int len, int k) {\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] * 2;\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}",
    "c_func_re_decompile": "bool func0(int *arr, int len, int k) {\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] * 2;\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, count = 0;\n    for (i = 0; i < n/2; i++) {\n        if (a[i] != a[n-1-i]) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, count = 0;\n    for (i = 0; i < n/2; i++) {\n        if (a[i] != a[n-1-i]) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n    int i, j, t;\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n    for (i = 0, j = n - 1; i <= j; i++, j--) {\n        b[2 * i] = a[i];\n        if (i != j) {\n            b[2 * i + 1] = a[j];\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n    int i, j, t;\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n    for (i = 0, j = n - 1; i <= j; i++, j--) {\n        b[2 * i] = a[i];\n        if (i != j) {\n            b[2 * i + 1] = a[j];\n        }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
    "c_func_decompile": "bool func0(int *arr, int len, int k) {\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] + arr[len - i - 1];\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}",
    "c_func_re_decompile": "bool func0(int *arr, int len, int k) {\n    int i, sum = 0;\n    for (i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n        sum += arr[i] + arr[len - i - 1];\n    }\n    if (len % 2 == 1) {\n        sum += arr[i];\n    }\n    return sum <= k;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int q[], int size, int w) {\n    int sum = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (q[i] != q[size - 1 - i]) return false;\n        sum += q[i] + q[size - 1 - i];\n    }\n    if (size % 2 == 1) sum += q[size / 2];\n    return sum <= w;\n}",
    "c_func_decompile": "bool func0(int *arr, int len, int k) {\n    int sum = 0;\n    for (int i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - 1 - i]) {\n            return false;\n        }\n        sum += arr[i] + arr[len - 1 - i];\n    }\n    if (len % 2 == 1) {\n        sum += arr[len / 2];\n    }\n    return sum <= k;\n}",
    "c_func_re_decompile": "bool func0(int *arr, int len, int k) {\n    int sum = 0;\n    for (int i = 0; i < len / 2; i++) {\n        if (arr[i] != arr[len - 1 - i]) {\n            return false;\n        }\n        sum += arr[i] + arr[len - 1 - i];\n    }\n    if (len % 2 == 1) {\n        sum += arr[len / 2];\n    }\n    return sum <= k;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j, count = 0;\n    for (i = 0, j = n - 1; i < n / 2; i++, j--) {\n        if (a[i] != a[j]) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, j, count = 0;\n    for (i = 0, j = n - 1; i < n / 2; i++, j--) {\n        if (a[i] != a[j]) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *lst, int size, int *out) {\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (lst[i] > lst[j]) {\n                int temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    int l = 0, r = size - 1;\n    int index = 0;\n\n    while (l <= r) {\n        if (l == r) {\n            out[index++] = lst[l++];\n        } else {\n            out[index++] = lst[l++];\n            out[index++] = lst[r--];\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n  int i, j, t;\n  for (i = 0; i < n - 1; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  for (i = 0, j = 0; i < n; i++) {\n    b[j++] = a[i];\n    if (i != n - 1)\n      b[j++] = a[n - 1];\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n  int i, j, t;\n  for (i = 0; i < n - 1; i++)\n    for (j = i + 1; j < n; j++)\n      if (a[i] > a[j]) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n  for (i = 0, j = 0; i < n; i++) {\n    b[j++] = a[i];\n    if (i != n - 1)\n      b[j++] = a[n - 1];\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j, count = 0;\n    for (i = 0, j = n - 1; i < n / 2; i++, j--) {\n        if (a[i] != a[j])\n            count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, j, count = 0;\n    for (i = 0, j = n - 1; i < n / 2; i++, j--) {\n        if (a[i] != a[j])\n            count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int size) {\n    int out = 0;\n    for (int i = 0; i < size / 2; i++) {\n        if (arr[i] != arr[size - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j, count = 0;\n    for (i = 0, j = n - 1; i < n / 2; i++, j--) {\n        if (a[i] != a[j]) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, j, count = 0;\n    for (i = 0, j = n - 1; i < n / 2; i++, j--) {\n        if (a[i] != a[j]) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
    "c_func_decompile": "char **func0(char **a, int n, char **b, int m) {\n    int i, sum1 = 0, sum2 = 0;\n    for (i = 0; i < n; i++)\n        sum1 += strlen(a[i]);\n    for (i = 0; i < m; i++)\n        sum2 += strlen(b[i]);\n    return sum1 > sum2 ? a : b;\n}",
    "c_func_re_decompile": "char **func0(char **a, int n, char **b, int m) {\n    int i, sum1 = 0, sum2 = 0;\n    for (i = 0; i < n; i++)\n        sum1 += strlen(a[i]);\n    for (i = 0; i < m; i++)\n        sum2 += strlen(b[i]);\n    return sum1 > sum2 ? a : b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
    "c_func_decompile": "char **func0(char **s1, int n1, char **s2, int n2) {\n    int i, len1 = 0, len2 = 0;\n    for (i = 0; i < n1; i++)\n        len1 += strlen(s1[i]);\n    for (i = 0; i < n2; i++)\n        len2 += strlen(s2[i]);\n    return len1 > len2 ? s1 : s2;\n}",
    "c_func_re_decompile": "char **func0(char **s1, int n1, char **s2, int n2) {\n    int i, len1 = 0, len2 = 0;\n    for (i = 0; i < n1; i++)\n        len1 += strlen(s1[i]);\n    for (i = 0; i < n2; i++)\n        len2 += strlen(s2[i]);\n    return len1 > len2 ? s1 : s2;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
    "c_func_decompile": "void func0(float *a, int n) {\n  int i;\n  char **b = (char **)malloc(n * sizeof(char *));\n  for (i = 0; i < n; i++) {\n    if (a[i] >= 1.0) {\n      b[i] = \"A\";\n    } else if (a[i] >= 0.9) {\n      b[i] = \"A-\";\n    } else if (a[i] >= 0.8) {\n      b[i] = \"B+\";\n    } else if (a[i] >= 0.7) {\n      b[i] = \"B\";\n    } else if (a[i] >= 0.6) {\n      b[i] = \"B-\";\n    } else if (a[i] >= 0.5) {\n      b[i] = \"C+\";\n    } else if (a[i] >= 0.4) {\n      b[i] = \"C\";\n    } else if (a[i] >= 0.3) {\n      b[i] = \"C-\";\n    } else if (a[i] >= 0.2) {\n      b[i] = \"D\";\n    } else if (a[i] >= 0.1) {\n      b[i] = \"D-\";\n    } else {\n      b[i] = \"F\";\n    }\n  }\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i, cnt = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            cnt++;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        cnt++;\n    }\n    return cnt == 3;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i, cnt = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            cnt++;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        cnt++;\n    }\n    return cnt == 3;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
    "c_func_decompile": "int func0(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int count = 0;\n    int i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            n /= i;\n            count++;\n        }\n        i++;\n    }\n    if (n > 1) {\n        count++;\n    }\n    return count == 3;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int count = 0;\n    int i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            n /= i;\n            count++;\n        }\n        i++;\n    }\n    if (n > 1) {\n        count++;\n    }\n    return count == 3;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(int n, int m) {\n    int i, j;\n    j = 1;\n    for (i = 0; j <= n && i < 100; i++) {\n        if (j == n) {\n            return 1;\n        }\n        j = j * m;\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n, int m) {\n    int i, j;\n    j = 1;\n    for (i = 0; j <= n && i < 100; i++) {\n        if (j == n) {\n            return 1;\n        }\n        j = j * m;\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
    "c_func_decompile": "char **func0(char **a, int n, char **b, int m) {\n    int i, sum1 = 0, sum2 = 0;\n    for (i = 0; i < n; i++)\n        sum1 += strlen(a[i]);\n    for (i = 0; i < m; i++)\n        sum2 += strlen(b[i]);\n    if (sum1 < sum2)\n        return a;\n    else if (sum1 > sum2)\n        return b;\n    else\n        return a;\n}",
    "c_func_re_decompile": "char **func0(char **a, int n, char **b, int m) {\n    int i, sum1 = 0, sum2 = 0;\n    for (i = 0; i < n; i++)\n        sum1 += strlen(a[i]);\n    for (i = 0; i < m; i++)\n        sum2 += strlen(b[i]);\n    if (sum1 < sum2)\n        return a;\n    else if (sum1 > sum2)\n        return b;\n    else\n        return a;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char** arr1, int n1, char** arr2, int n2){\n\n  int i, sum1 = 0, sum2 = 0;\n\n  for(i=0; i<n1; i++){\n    sum1 += strlen(arr1[i]);\n  }\n  \n  for(i=0; i<n2; i++){\n    sum2 += strlen(arr2[i]); \n  }\n\n  if(sum1 < sum2){\n    return arr1;\n  }\n  else if(sum1 > sum2){\n    return arr2;\n  }\n  else{\n    return arr1;\n  }\n\n}",
    "c_func_decompile": "char **func0(char **s1, int n1, char **s2, int n2) {\n    int i, len1 = 0, len2 = 0;\n    for (i = 0; i < n1; i++)\n        len1 += strlen(s1[i]);\n    for (i = 0; i < n2; i++)\n        len2 += strlen(s2[i]);\n    return len1 > len2 ? s1 : s2;\n}",
    "c_func_re_decompile": "char **func0(char **s1, int n1, char **s2, int n2) {\n    int i, len1 = 0, len2 = 0;\n    for (i = 0; i < n1; i++)\n        len1 += strlen(s1[i]);\n    for (i = 0; i < n2; i++)\n        len2 += strlen(s2[i]);\n    return len1 > len2 ? s1 : s2;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i, j, k;\n    for (i = 0; i < 3; i++) {\n        for (j = 2; j * j <= n; j++) {\n            while (n % j == 0) {\n                n /= j;\n                k++;\n            }\n        }\n        if (n > 1) {\n            k++;\n        }\n    }\n    return k == 3;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i, j, k;\n    for (i = 0; i < 3; i++) {\n        for (j = 2; j * j <= n; j++) {\n            while (n % j == 0) {\n                n /= j;\n                k++;\n            }\n        }\n        if (n > 1) {\n            k++;\n        }\n    }\n    return k == 3;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    if (a < 2) return 0;\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0) {\n            a = a / i;\n            num++;\n        }\n    }\n    if (a > 1) num++;\n    return num == 3;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i, cnt = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            cnt++;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        cnt++;\n    }\n    return cnt == 3;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i, cnt = 0;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            cnt++;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        cnt++;\n    }\n    return cnt == 3;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(int n, int m) {\n    int i, j;\n    i = 0;\n    j = 1;\n    while (i < n && j < 100) {\n        i = i * m;\n        j = j + 1;\n    }\n    if (i == n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "c_func_re_decompile": "int func0(int n, int m) {\n    int i, j;\n    i = 0;\n    j = 1;\n    while (i < n && j < 100) {\n        i = i * m;\n        j = j + 1;\n    }\n    if (i == n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i;\n    for (i = 0; i*i*i <= (n > 0 ? n : -n); i++) {\n        if (i*i*i == (n > 0 ? n : -n)) {\n            return 1;\n        }\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i;\n    for (i = 0; i*i*i <= (n > 0 ? n : -n); i++) {\n        if (i*i*i == (n > 0 ? n : -n)) {\n            return 1;\n        }\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i = 1;\n    int m = n > 0 ? n : -n;\n    while (i * i * i <= m) {\n        if (i * i * i == m) {\n            return 1;\n        }\n        i++;\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i = 1;\n    int m = n > 0 ? n : -n;\n    while (i * i * i <= m) {\n        if (i * i * i == m) {\n            return 1;\n        }\n        i++;\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(int n, int m) {\n    int i, j;\n    i = 0;\n    j = 1;\n    while (i < n && j < 100) {\n        i = i * m;\n        j = j + 1;\n    }\n    if (i == n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "c_func_re_decompile": "int func0(int n, int m) {\n    int i, j;\n    i = 0;\n    j = 1;\n    while (i < n && j < 100) {\n        i = i * m;\n        j = j + 1;\n    }\n    if (i == n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) return 1;\n        p = p * n; count += 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(int n, int m) {\n    int i = 0;\n    int result = 1;\n    if (n <= 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    while (result < n && i < 100) {\n        result *= m;\n        i++;\n    }\n    if (result == n) {\n        return 1;\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n, int m) {\n    int i = 0;\n    int result = 1;\n    if (n <= 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    while (result < n && i < 100) {\n        result *= m;\n        i++;\n    }\n    if (result == n) {\n        return 1;\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i = 1;\n    int m = n > 0 ? n : -n;\n    while (i * i * i <= m) {\n        if (i * i * i == m) {\n            return i;\n        }\n        i++;\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i = 1;\n    int m = n > 0 ? n : -n;\n    while (i * i * i <= m) {\n        if (i * i * i == m) {\n            return i;\n        }\n        i++;\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\nint func0(int a) {\n    for (int i = 0; i * i * i <= abs(a); i++)\n        if (i * i * i == abs(a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i = 1;\n    int m = n > 0 ? n : -n;\n    while (i * i * i <= m) {\n        if (i * i * i == m) {\n            return i;\n        }\n        i++;\n    }\n    return 0;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i = 1;\n    int m = n > 0 ? n : -n;\n    while (i * i * i <= m) {\n        if (i * i * i == m) {\n            return i;\n        }\n        i++;\n    }\n    return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (strchr(\"aeiou\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (strchr(\"aeiou\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (strchr(\"aeiou\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, count = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (strchr(\"aeiou\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(char *str) {\n    char *chars = \"aeiou\";\n    int count = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (strchr(chars, str[i])) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    char *chars = \"aeiou\";\n    int count = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (strchr(chars, str[i])) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char* num) {\n    const char* key = \"2357BD\";\n    int out = 0;\n    for (int i = 0; i < strlen(num); i++) {\n        if (strchr(key, num[i])) out += 1;\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, count = 0;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiou\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, count = 0;\n    size_t len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (strchr(\"aeiou\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(char *str) {\n    if (strlen(str) < 3) {\n        return 0;\n    }\n    for (int i = 2; i < strlen(str); i++) {\n        if (str[i] == str[i - 1] || str[i] == str[i - 2]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    if (strlen(str) < 3) {\n        return 0;\n    }\n    for (int i = 2; i < strlen(str); i++) {\n        if (str[i] == str[i - 1] || str[i] == str[i - 2]) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(char *str) {\n    size_t len = strlen(str);\n    for (size_t i = 0; i < len - 2; i++) {\n        if (str[i] == str[i + 2]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    size_t len = strlen(str);\n    for (size_t i = 0; i < len - 2; i++) {\n        if (str[i] == str[i + 2]) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(char *str) {\n    size_t len = strlen(str);\n    for (size_t i = 2; i < len; i++) {\n        if (str[i] == str[i - 1] || str[i] == str[i - 2]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    size_t len = strlen(str);\n    for (size_t i = 2; i < len; i++) {\n        if (str[i] == str[i - 1] || str[i] == str[i - 2]) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* s) {\n    if (strlen(s) < 3) return false;\n    for (int i = 2; i < strlen(s); i++)\n        if (s[i] == s[i-1] || s[i] == s[i-2]) return false;\n    return true;\n}",
    "c_func_decompile": "int func0(char *str) {\n    size_t len = strlen(str);\n    for (size_t i = 0; i < len - 2; i++) {\n        if (str[i] == str[i + 2]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    size_t len = strlen(str);\n    for (size_t i = 0; i < len - 2; i++) {\n        if (str[i] == str[i + 2] || str[i + 1] == str[i + 2]) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
    "c_func_decompile": "char *func0(int n) {\n    char *s = malloc(64);\n    if (s == NULL) {\n        return NULL;\n    }\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0) {\n        s[i--] = '0';\n    }\n    while (n > 0) {\n        s[i--] = n % 2 + '0';\n        n /= 2;\n    }\n    s[i--] = 'b';\n    s[i] = 'd';\n    char *t = malloc(64 - i);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    strcpy(t, s + i);\n    strcpy(t + strlen(t), \"bd\");\n    free(s);\n    return t;\n}",
    "c_func_re_decompile": "char *func0(int n) {\n    char *s = malloc(64);\n    if (s == NULL) {\n        return NULL;\n    }\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0) {\n        s[i--] = '0';\n    }\n    while (n > 0) {\n        s[i--] = n % 2 + '0';\n        n /= 2;\n    }\n    s[i--] = 'b';\n    s[i] = 'd';\n    char *t = malloc(64 - i);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    strcpy(t, s + i);\n    strcpy(t + strlen(t), \"bd\");\n    free(s);\n    return t;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
    "c_func_decompile": "char *func0(int n) {\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    int i = 62;\n    s[63] = '\\0';\n    if (n == 0)\n        s[i--] = '0';\n    else\n        while (n > 0) {\n            s[i--] = (n % 2) + '0';\n            n /= 2;\n        }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    int j = i + 1;\n    int k = 62 - j;\n    char *t = malloc(k + 3);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    strcpy(t, s + j);\n    strcpy(t + strlen(t), \"bd\");\n    free(s);\n    return t;\n}",
    "c_func_re_decompile": "char *func0(int n) {\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    int i = 62;\n    s[63] = '\\0';\n    if (n == 0)\n        s[i--] = '0';\n    else\n        while (n > 0) {\n            s[i--] = (n % 2) + '0';\n            n /= 2;\n        }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    int j = i + 1;\n    int k = 62 - j;\n    char *t = malloc(k + 3);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    strcpy(t, s + j);\n    strcpy(t + strlen(t), \"bd\");\n    free(s);\n    return t;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
    "c_func_decompile": "char *func0(int n) {\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0) {\n        s[i--] = '0';\n    } else {\n        while (n != 0) {\n            s[i--] = (n & 1) + '0';\n            n >>= 1;\n        }\n    }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    char *t = malloc(5);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    t = stpcpy(t, s + i);\n    t[0] = 'b';\n    t[1] = 'd';\n    t[2] = '\\0';\n    free(s);\n    return t;\n}",
    "c_func_re_decompile": "char *func0(int n) {\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0) {\n        s[i--] = '0';\n    } else {\n        while (n != 0) {\n            s[i--] = (n & 1) + '0';\n            n >>= 1;\n        }\n    }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    char *t = malloc(5);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    t = stpcpy(t, s + i);\n    t[0] = 'b';\n    t[1] = 'd';\n    t[2] = '\\0';\n    free(s);\n    return t;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(int decimal) {\n    char* out = malloc(64);\n    if (!out) {\n        return NULL;\n    }\n    int index = 62;\n    out[63] = '\\0';\n\n    if (decimal == 0) {\n        out[index--] = '0';\n    } else {\n        while (decimal > 0) {\n            out[index--] = '0' + (decimal % 2);\n            decimal /= 2;\n        }\n    }\n\n    out[index--] = 'b';\n    out[index--] = 'd';\n\n    int start = index + 1;\n    int len = 62 - start;\n    char* formatted_out = malloc(len + 3);\n    if (!formatted_out) {\n        free(out);\n        return NULL;\n    }\n\n    strcpy(formatted_out, &out[start]);\n\n    strcat(formatted_out, \"db\");\n\n    free(out);\n\n    return formatted_out;\n}",
    "c_func_decompile": "char *func0(int n) {\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0) {\n        s[i--] = '0';\n    } else {\n        while (n != 0) {\n            s[i--] = (n & 1) + '0';\n            n >>= 1;\n        }\n    }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    char *t = malloc(5);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    t = stpcpy(t, s + i);\n    t[0] = 'b';\n    t[1] = 'd';\n    t[2] = '\\0';\n    free(s);\n    return t;\n}",
    "c_func_re_decompile": "char *func0(int n) {\n    char *s = malloc(64);\n    if (s == NULL)\n        return NULL;\n    s[63] = '\\0';\n    int i = 62;\n    if (n == 0) {\n        s[i--] = '0';\n    } else {\n        while (n != 0) {\n            s[i--] = (n & 1) + '0';\n            n >>= 1;\n        }\n    }\n    s[i--] = 'b';\n    s[i--] = 'd';\n    char *t = malloc(5);\n    if (t == NULL) {\n        free(s);\n        return NULL;\n    }\n    t = stpcpy(t, s + i);\n    t[0] = 'b';\n    t[1] = 'd';\n    t[2] = '\\0';\n    free(s);\n    return t;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int len = strlen(str);\n    int i;\n    if (len < 2)\n        return 0;\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int len = strlen(str);\n    int i;\n    if (len < 2)\n        return 0;\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, len;\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, len;\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int len = strlen(str);\n    if (len < 2)\n        return 0;\n    int i;\n    for (i = 2; i * i <= len; i++) {\n        if (len % i == 0)\n            return 0;\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int len = strlen(str);\n    if (len < 2)\n        return 0;\n    int i;\n    for (i = 2; i * i <= len; i++) {\n        if (len % i == 0)\n            return 0;\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nbool func0(const char* str) {\n    int l = strlen(str);\n    if (l < 2) return false;\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, len;\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, len;\n    len = strlen(str);\n    if (len < 2)\n        return 0;\n    for (i = 2; i * i <= len; i++)\n        if (len % i == 0)\n            return 0;\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
    "c_func_decompile": "void func0(float *x, int n) {\n  int i;\n  char **y = (char **)malloc(n * sizeof(char *));\n  for (i = 0; i < n; i++) {\n    if (x[i
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i, result;\n    result = 1;\n    for (i = 2; i <= n; i++) {\n        result *= 10;\n    }\n    return result;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i, result;\n    result = 1;\n    for (i = 2; i <= n; i++) {\n        result *= 10;\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i, result;\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    result = 18;\n    for (i = 2; i < n; i++)\n        result = result * 10;\n    return result;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i, result;\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    result = 18;\n    for (i = 2; i < n; i++)\n        result = result * 10;\n    return result;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "int func0(char *s) {\n    int i = 0;\n    int count = 0;\n    int flag = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == 'I' && (__ctype_b_loc()[(unsigned char)s[i]] & (0x20))) {\n            if (flag == 0) {\n                flag = 1;\n            } else {\n                count++;\n                flag = 0;\n            }\n        } else {\n            flag = 0;\n        }\n        if (s[i] == '?' || s[i] == '!' || s[i] == '.') {\n            if (flag == 1) {\n                count++;\n            }\n            flag = 0;\n        }\n        i++;\n    }\n    return count;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
    "c_func_decompile": "void func0(float *x, int n) {\n  int i;\n  char **y = (char **)malloc(n * sizeof(char *));\n  for (i = 0; i < n; i++) {\n    if (x[i
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
    "c_func_decompile": "int func0(int n) {\n  int i, result = 1;\n  for (i = 0; i < n; i++) {\n    result *= 10;\n  }\n  return result;\n}",
    "c_func_re_decompile": "int func0(int n) {\n  int i, result = 1;\n  for (i = 0; i < n; i++) {\n    result *= 10;\n  }\n  return result;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "int func0(char *s) {\n    int i, cnt = 0;\n    int flag = 0;\n    for (i = 0; s[i] != '\\0'; i++) {\n        if (s[i] == 'I' && (__ctype_b_loc()[(unsigned char)s[i] + 1] & (0x20))) {\n            if (flag == 0) {\n                flag = 1;\n            } else {\n                cnt++;\n                flag = 0;\n            }\n        } else if (s[i] == 'I' && (__ctype_b_loc()[(unsigned char)s[i] + 1] & (0x20)) == 0) {\n            flag = 0;\n        } else if (s[i] == '?' || s[i] == '!' || s[i] == '.') {\n            if (flag == 1) {\n                cnt++;\n            }\n            flag = 0;\n        } else {\n            flag = 1;\n        }\n    }\n    return cnt;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n < 1) return 0;\n    if (n == 1) return 1;\n    int out = 18;\n    for (int i = 2; i < n; i++)\n        out = out * 10;\n    return out;\n}",
    "c_func_decompile": "int func0(int n) {\n    int i, result = 18;\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 18;\n    for (i = 2; i <= n; i++)\n        result *= 10;\n    return result;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int i, result = 18;\n    if (n <= 0)\n        return 0;\n    if (n == 1)\n        return 18;\n    for (i = 2; i <= n; i++)\n        result *= 10;\n    return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "void func0(char *s, char *t) {\n    int i, j;\n    char c;\n    char *p = \"0123456789\";\n    for (i = 0; s[i] != '\\0'; i++) {\n        c = s[i];\n        if (__ctype_b_loc()[c] & 0x0200)\n            c = toupper(c);\n        else if (__ctype_b_loc()[c] & 0x0100)\n            c = tolower(c);\n        for (j = 0; p[j] != '\\0'; j++) {\n            if (c == p[j]) {\n                if (j < 10)\n                    c += 2;\n                break;\n            }\n        }\n        t[i] = c;\n    }\n    t[i] = '\\0';\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "int func0(char *s) {\n  int i = 0;\n  int count = 0;\n  int in_word = 0;\n  int in_sentence = 1;\n  while (s[i] != '\\0') {\n    if (((__ctype_b_loc()->_B[s[i] & 0xff] & 0x2000) != 0) && in_word) {\n      count++;\n      in_word = 0;\n    }\n    if (((__ctype_b_loc()->_B[s[i] & 0xff] & 0x2000) == 0) && !in_word) {\n      in_word = 1;\n    }\n    if (s[i] == 'I' && ((__ctype_b_loc()->_B[s[i] & 0xff] & 0x2000) == 0)) {\n      in_sentence = 1;\n    }\n    if (s[i] == '.' || s[i] == '?' || s[i] == '!') {\n      in_sentence = 0;\n    }\n    if (in_sentence && ((__ctype_b_loc()->_B[s[i] & 0xff] & 0x2000) == 0)) {\n      in_word = 1;\n    }\n    i++;\n  }\n  return count;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "void func0(char *s, char *t) {\n    int i, j;\n    char c;\n    static char *lowers = \"abcdefghijklmnopqrstuvwxyz\";\n    for (i = 0; (c = s[i]) != '\\0'; i++) {\n        if (__ctype_b_loc()->_b[c] & (0x0200))\n            c = __ctype_toupper_loc()->_b[c];\n        else if (__ctype_b_loc()->_b[c] & (0x0100))\n            c = __ctype_tolower_loc()->_b[c];\n        for (j = 0; lowers[j] != '\\0'; j++)\n            if (lowers[j] == c)\n                break;\n        if (j < 10)\n            c += 2;\n        t[i] = c;\n    }\n    t[i] = '\\0';\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n  if (b == 0) {\n    return 0;\n  }\n  return func1(a, b);\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 1; i < n; i += 2) {\n        if (a[i] % 2 == 0)\n            sum += a[i];\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 1; i < n; i += 2) {\n        if (a[i] % 2 == 0)\n            sum += a[i];\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "void func0(char *s, char *t) {\n    int i, j;\n    char c;\n    static char *lowers = \"abcdefghijklmnopqrstuvwxyz\";\n    for (i = 0; (c = s[i]) != '\\0'; i++) {\n        if (__ctype_b_loc()->_b[c] & (0x0200))\n            c = __ctype_toupper_loc()->_b[c];\n        else if (__ctype_b_loc()->_b[c] & (0x0100))\n            c = __ctype_tolower_loc()->_b[c];\n        for (j = 0; lowers[j] != '\\0'; j++)\n            if (lowers[j] == c)\n                break;\n        if (j < 10)\n            c += 2;\n        t[i] = c;\n    }\n    t[i] = '\\0';\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < 2*i+1; i++) {\n    if (a[2*i+1] % 2 == 0) {\n      sum += a[2*i+1];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < 2*i+1; i++) {\n    if (a[2*i+1] % 2 == 0) {\n      sum += a[2*i+1];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid func0(const char* message, char* out) {\n    const char* vowels = \"aeiouAEIOU\";\n    int i, j;\n    \n    for (i = 0; message[i] != '\\0'; ++i) {\n        char w = message[i];\n        if (islower(w)) {\n            w = toupper(w);\n        } else if (isupper(w)) {\n            w = tolower(w);\n        }\n        \n        for (j = 0; vowels[j] != '\\0'; ++j) {\n            if (w == vowels[j]) {\n                if (j < 10) {\n                    w = w + 2;\n                }\n                break;\n            }\n        }\n        out[i] = w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "void func0(char *s, char *t) {\n    int i, j;\n    char c;\n    char *p = \"abcdefghijklmnopqrstuvwxyz\";\n    for (i = 0; s[i] != '\\0'; i++) {\n        c = s[i];\n        if (((*(const _Ctype_t *)__ctype_b_loc())->_Bits[c] & 0x0200) != 0) {\n            c = (*(const _Ctype_t *)__ctype_toupper_loc())->_Bits[c];\n        }\n        if (((*(const _Ctype_t *)__ctype_b_loc())->_Bits[c] & 0x0100) != 0) {\n            c = (*(const _Ctype_t *)__ctype_tolower_loc())->_Bits[c];\n        }\n        for (j = 0; p[j] != '\\0'; j++) {\n            if (c == p[j]) {\n                c = p[j] + 2;\n                break;\n            }\n        }\n        if (j >= 10) {\n            c = p[j - 10];\n        }\n        t[i] = c;\n    }\n    t[i] = '\\0';\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 1; i < n; i++) {\n        if (a[i] % 2 == 0)\n            sum += a[i];\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 1; i < n; i += 2) {\n        if (a[i] % 2 == 0)\n            sum += a[i];\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 + 1 < size; i++)\n        if (lst[i * 2 + 1] % 2 == 0) sum += lst[i * 2 + 1];\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 1; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            sum += a[i];\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 1; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            sum += a[i];\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_decompile": "int func0(char *argv[], int argc) {\n  int i, j, k, l, m, n;\n  char *p;\n  for (i = 0; i < argc; i++) {\n    p = argv[i];\n    while (*p) {\n      if (__ctype_b_loc()->_B[*p & 0xff] & 0x0400) {\n        if (__ctype_b_loc()->_B[*p & 0xff] & 0x0100) {\n          return 0;\n        }\n        if (__ctype_b_loc()->_B[*p & 0xff] & 0x0200) {\n          j = 1;\n        } else {\n          j = 0;\n        }\n      } else {\n        j = 0;\n      }\n      if (j + k == 2) {\n        return 0;\n      }\n      k = j;\n      p++;\n    }\n  }\n  return 1;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar** func0(float* grades, int size) {\n    char** out = malloc(size * sizeof(char*));\n    for (int i = 0; i < size; ++i) {\n        if (grades[i] >= 3.9999) out[i] = \"A+\";\n        else if (grades[i] > 3.7001) out[i] = \"A\";\n        else if (grades[i] > 3.3001) out[i] = \"A-\";\n        else if (grades[i] > 3.0001) out[i] = \"B+\";\n        else if (grades[i] > 2.7001) out[i] = \"B\";\n        else if (grades[i] > 2.3001) out[i] = \"B-\";\n        else if (grades[i] > 2.0001) out[i] = \"C+\";\n        else if (grades[i] > 1.7001) out[i] = \"C\";\n        else if (grades[i] > 1.3001) out[i] = \"C-\";\n        else if (grades[i] > 1.0001) out[i] = \"D+\";\n        else if (grades[i] > 0.7001) out[i] = \"D\";\n        else if (grades[i] > 0.0001) out[i] = \"D-\";\n        else out[i] = \"E\";\n    }\n    return out;\n}",
    "c_func_decompile": "char **func0(float *x, int n) {\n    int i;\n    char **y = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        if (x[i] >= 0.9) {\n            y[i] = \"A\";\n        } else if (x[i] >= 0.8) {\n            y[i] = \"B\";\n        } else if (x[i] >= 0.7) {\n            y[i] = \"C\";\n        } else if (x[i] >= 0.6) {\n            y[i] = \"D\";\n        } else if (x[i] >= 0.5) {\n            y[i] = \"E\";\n        } else if (x[i] >= 0.4) {\n            y[i] = \"F\";\n        } else if (x[i] >= 0.3) {\n            y[i] = \"G\";\n        } else if (x[i] >= 0.2) {\n            y[i] = \"H\";\n        } else if (x[i] >= 0.1) {\n            y[i] = \"I\";\n        } else if (x[i] >= 0.05) {\n            y[i] = \"J\";\n        } else if (x[i] >= 0.01) {\n            y[i] = \"K\";\n        } else if (x[i] >= 0.001) {\n            y[i] = \"L\";\n        } else if (x[i] >= 0.0001) {\n            y[i] = \"M\";\n        } else {\n            y[i] = \"N\";\n        }\n    }\n    return y;\n}",
    "c_func_re_decompile": "char **func0(float *x, int n) {\n    int i;\n    char **y = (char **)malloc(n * sizeof(char *));\n    for (i = 0; i < n; i++) {\n        if (x[i] >= 0.9) {\n            y[i] = \"A\";\n        } else if (x[i] >= 0.8) {\n            y[i] = \"B\";\n        } else if (x[i] >= 0.7) {\n            y[i] = \"C\";\n        } else if (x[i] >= 0.6) {\n            y[i] = \"D\";\n        } else if (x[i] >= 0.5) {\n            y[i] = \"E\";\n        } else if (x[i] >= 0.4) {\n            y[i] = \"F\";\n        } else if (x[i] >= 0.3) {\n            y[i] = \"G\";\n        } else if (x[i] >= 0.2) {\n            y[i] = \"H\";\n        } else if (x[i] >= 0.1) {\n            y[i] = \"I\";\n        } else if (x[i] >= 0.05) {\n            y[i] = \"J\";\n        } else if (x[i] >= 0.01) {\n            y[i] = \"K\";\n        } else if (x[i] >= 0.001) {\n            y[i] = \"L\";\n        } else if (x[i] >= 0.0001) {\n            y[i] = \"M\";\n        } else if (x[i] >= 0.00001) {\n            y[i] = \"N\";\n        } else if (x[i] >= 0.000001) {\n            y[i] = \"O\";\n        } else if (x[i] >= 0.0000001) {\n            y[i] = \"P\";\n        } else {\n            y[i] = \"Q\";\n        }\n    }\n    return y;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int b, int *c, int *d) {\n  *d = b;\n  if (b) {\n    *c = 0;\n  } else {\n    *c = 0;\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int b, int *c, int *d) {\n  *d = b;\n  if (b) {\n    *c = 0;\n  } else {\n    *c = 0;\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int b, int *c, int *d) {\n  *d = b;\n  if (b) {\n    *c = 0;\n  } else {\n    *c = 0;\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int b, int *c, int *d) {\n  *d = b;\n  if (b) {\n    *c = 0;\n  } else {\n    *c = 0;\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
    "c_func_decompile": "char* func0(int n) {\n    char str[10];\n    sprintf(str, \"%d\", n);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++) {\n        sum += str[i] - '0';\n    }\n    char* result = (char*)malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        result[index++] = '0';\n    } else {\n        while (sum > 0) {\n            result[index++] = sum % 2 + '0';\n            sum /= 2;\n        }\n    }\n    result[index] = '\\0';\n    for (int i = 0; i < index / 2; i++) {\n        char temp = result[i];\n        result[i] = result[index - i - 1];\n        result[index - i - 1] = temp;\n    }\n    return result;\n}",
    "c_func_re_decompile": "char* func0(int n) {\n    char str[10];\n    sprintf(str, \"%d\", n);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++) {\n        sum += str[i] - '0';\n    }\n    char* result = (char*)malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        result[index++] = '0';\n    } else {\n        while (sum > 0) {\n            result[index++] = sum % 2 + '0';\n            sum /= 2;\n        }\n    }\n    result[index] = '\\0';\n    for (int i = 0; i < index / 2; i++) {\n        char temp = result[i];\n        result[i] = result[index - i - 1];\n        result[index - i - 1] = temp;\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "void func0(char *s, char *t) {\n    int i = 0;\n    while (s[i] != '\\0') {\n        t[i] = s[i] - 'a' + 'A';\n        i++;\n    }\n    t[i] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, char *t) {\n    int i = 0;\n    while (s[i] != '\\0') {\n        t[i] = (s[i] - 'a' + 3) % 26 + 'a';\n        i++;\n    }\n    t[i] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "void func0(char *a, char *b) {\n    int i, j;\n    for (i = 0; a[i] != '\\0'; i++) {\n        j = (a[i] - ']' + 26) % 26 + 'a';\n        b[i] = j;\n    }\n    b[i] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *a, char *b) {\n    int i, j;\n    for (i = 0; a[i] != '\\0'; i++) {\n        j = (a[i] - ']' + 26) % 26 + 'a';\n        b[i] = j;\n    }\n    b[i] = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
    "c_func_decompile": "char *func0(int n) {\n    char buf[6];\n    __sprintf_chk(buf, 1, 6, \"%d\", n);\n    int i = 0;\n    int sum = 0;\n    while (buf[i] != '\\0') {\n        sum += buf[i] - '0';\n        i++;\n    }\n    char *ret = (char *)malloc(33);\n    int j = 0;\n    while (sum != 0) {\n        ret[j] = sum % 2 + '0';\n        sum /= 2;\n        j++;\n    }\n    ret[j] = '\\0';\n    int k = 0;\n    while (k < j / 2) {\n        char tmp = ret[k];\n        ret[k] = ret[j - k - 1];\n        ret[j - k - 1] = tmp;\n        k++;\n    }\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(int n) {\n    char buf[6];\n    __sprintf_chk(buf, 1, 6, \"%d\", n);\n    int i = 0;\n    int sum = 0;\n    while (buf[i] != '\\0') {\n        sum += buf[i] - '0';\n        i++;\n    }\n    char *ret = (char *)malloc(33);\n    int j = 0;\n    while (sum != 0) {\n        ret[j] = sum % 2 + '0';\n        sum /= 2;\n        j++;\n    }\n    ret[j] = '\\0';\n    int k = 0;\n    while (k < j / 2) {\n        char tmp = ret[k];\n        ret[k] = ret[j - k - 1];\n        ret[j - k - 1] = tmp;\n        k++;\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
    "c_func_decompile": "char* func0(int n) {\n    char s[6];\n    __sprintf_chk(s, 1, sizeof(s), \"%d\", n);\n    int i = 0, j = 0;\n    int sum = 0;\n    while (s[i] != '\\0') {\n        sum += s[i] - '0';\n        i++;\n    }\n    char* result = (char*)malloc(33);\n    i = 0;\n    while (sum > 0) {\n        result[i] = sum % 2 + '0';\n        sum /= 2;\n        i++;\n    }\n    result[i] = '\\0';\n    for (j = 0; j < i / 2; j++) {\n        char temp = result[j];\n        result[j] = result[i - 1 - j];\n        result[i - 1 - j] = temp;\n    }\n    return result;\n}",
    "c_func_re_decompile": "char* func0(int n) {\n    char s[6];\n    __sprintf_chk(s, 1, sizeof(s), \"%d\", n);\n    int i = 0, j = 0;\n    int sum = 0;\n    while (s[i] != '\\0') {\n        sum += s[i] - '0';\n        i++;\n    }\n    char* result = (char*)malloc(33);\n    i = 0;\n    while (sum > 0) {\n        result[i] = sum % 2 + '0';\n        sum /= 2;\n        i++;\n    }\n    if (i == 0) {\n        result[i] = '0';\n        i++;\n    }\n    result[i] = '\\0';\n    for (j = 0; j < i / 2; j++) {\n        char temp = result[j];\n        result[j] = result[i - 1 - j];\n        result[i - 1 - j] = temp;\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "void func0(char *s, char *t) {\n    int i = 0;\n    while (s[i] != '\\0') {\n        t[i] = s[i] - ']' + 'a';\n        i++;\n    }\n    t[i] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, char *t) {\n    int i = 0;\n    while (s[i] != '\\0') {\n        t[i] = s[i] - ']' + 'a';\n        i++;\n    }\n    t[i] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int N) {\n    char str[6];\n    sprintf(str, \"%d\", N);\n    int sum = 0;\n    for (int i = 0; str[i] != '\\0'; i++)\n        sum += str[i] - '0';\n\n    char* bi = malloc(33);\n    int index = 0;\n    if (sum == 0) {\n        bi[index++] = '0';\n    } else {\n        while (sum > 0) {\n            bi[index++] = (sum % 2) + '0';\n            sum /= 2;\n        }\n    }\n    bi[index] = '\\0';\n\n    for (int i = 0; i < index / 2; i++) {\n        char temp = bi[i];\n        bi[i] = bi[index - i - 1];\n        bi[index - i - 1] = temp;\n    }\n\n    return bi;\n}",
    "c_func_decompile": "char *func0(int n) {\n    char buf[6];\n    __sprintf_chk(buf, 1, 6, \"%d\", n);\n    int i = 0, j = 0, k = 0;\n    while (buf[i] != '\\0') {\n        k = k * 10 + (buf[i] - '0');\n        i++;\n    }\n    char *res = (char *)malloc(33);\n    while (k != 0) {\n        res[j] = k % 2 + '0';\n        k /= 2;\n        j++;\n    }\n    res[j] = '\\0';\n    for (i = 0; i < j / 2; i++) {\n        char tmp = res[i];\n        res[i] = res[j - i - 1];\n        res[j - i - 1] = tmp;\n    }\n    return res;\n}",
    "c_func_re_decompile": "char *func0(int n) {\n    char buf[6];\n    __sprintf_chk(buf, 1, 6, \"%d\", n);\n    int i = 0, j = 0, k = 0;\n    while (buf[i] != '\\0') {\n        k = k * 10 + (buf[i] - '0');\n        i++;\n    }\n    char *res = (char *)malloc(33);\n    while (k != 0) {\n        res[j] = k % 2 + '0';\n        k /= 2;\n        j++;\n    }\n    res[j] = '\\0';\n    for (i = 0; i < j / 2; i++) {\n        char tmp = res[i];\n        res[i] = res[j - i - 1];\n        res[j - i - 1] = tmp;\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *s, char *out) {\n    int i;\n    for (i = 0; s[i] != '\\0'; i++) {\n        int w = ((int)s[i] - 'a' + 4) % 26 + 'a';\n        out[i] = (char)w;\n    }\n    out[i] = '\\0';\n}",
    "c_func_decompile": "void func0(char *s, char *t) {\n    int i = 0;\n    while (*s != '\\0') {\n        *t = *s - ']' + 'a';\n        t++;\n        s++;\n        i++;\n    }\n    *t = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, char *t) {\n    int i = 0;\n    while (*s != '\\0') {\n        *t = *s - ']' + 'a';\n        t++;\n        s++;\n        i++;\n    }\n    *t = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
    "c_func_decompile": "int **func0(int **a, int n, int *m, int x, int *k) {\n    int i, j, l = 0;\n    int **b = (int **)malloc(100 * sizeof(int *));\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (a[i][j] == x) {\n                b[l] = (int *)malloc(2 * sizeof(int));\n                b[l][0] = i;\n                b[l][1] = j;\n                l++;\n            }\n        }\n    }\n    *k = l;\n    return b;\n}",
    "c_func_re_decompile": "int **func0(int **a, int n, int *m, int x, int *k) {\n    int i, j, l = 0;\n    int **b = (int **)malloc(100 * sizeof(int *));\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (a[i][j] == x) {\n                b[l] = (int *)malloc(2 * sizeof(int));\n                b[l][0] = i;\n                b[l][1] = j;\n                l++;\n            }\n        }\n    }\n    *k = l;\n    return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
    "c_func_decompile": "int **func0(int **a, int n, int *m, int x, int *k) {\n    int i, j, l;\n    int **b = (int **)malloc(100 * sizeof(int *));\n    l = 0;\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (a[i][j] == x) {\n                b[l] = (int *)malloc(2 * sizeof(int));\n                b[l][0] = i;\n                b[l][1] = j;\n                l++;\n            }\n        }\n    }\n    *k = l;\n    return b;\n}",
    "c_func_re_decompile": "int **func0(int **a, int n, int *m, int x, int *k) {\n    int i, j, l;\n    int **b = (int **)malloc(100 * sizeof(int *));\n    l = 0;\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (a[i][j] == x) {\n                b[l] = (int *)malloc(2 * sizeof(int));\n                b[l][0] = i;\n                b[l][1] = j;\n                l++;\n            }\n        }\n    }\n    *k = l;\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
    "c_func_decompile": "int **func0(int **a, int n, int *m, int x, int *k) {\n    int i, j, l, *p;\n    int **b = (int **)malloc(100 * sizeof(int *));\n    l = 0;\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (a[i][j] == x) {\n                p = (int *)malloc(2 * sizeof(int));\n                p[0] = i;\n                p[1] = j;\n                b[l++] = p;\n            }\n        }\n    }\n    *k = l;\n    return b;\n}",
    "c_func_re_decompile": "int **func0(int **a, int n, int *m, int x, int *k) {\n    int i, j, l, *p;\n    int **b = (int **)malloc(100 * sizeof(int *));\n    l = 0;\n    for (i = 0; i < n; i++) {\n        for (j = m[i] - 1; j >= 0; j--) {\n            if (a[i][j] == x) {\n                p = (int *)malloc(2 * sizeof(int));\n                p[0] = i;\n                p[1] = j;\n                b[l++] = p;\n            }\n        }\n    }\n    *k = l;\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint **func0(int **lst, int lst_size, int *row_sizes, int x, int *return_size) {\n    int **out = (int **)malloc(100 * sizeof(int *));\n    int count = 0;\n    for (int i = 0; i < lst_size; i++) {\n        for (int j = row_sizes[i] - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out[count] = (int *)malloc(2 * sizeof(int));\n                out[count][0] = i;\n                out[count][1] = j;\n                count++;\n            }\n        }\n    }\n    *return_size = count;\n    return out;\n}",
    "c_func_decompile": "int **func0(int **arr, int n, int *len, int val, int *ret_len) {\n    int **ret = (int **)malloc(sizeof(int *) * 100);\n    int i, j, k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = len[i] - 1; j >= 0; j--) {\n            if (arr[i][j] == val) {\n                ret[k] = (int *)malloc(sizeof(int) * 2);\n                ret[k][0] = i;\n                ret[k][1] = len[i];\n                k++;\n            }\n        }\n    }\n    *ret_len = k;\n    return ret;\n}",
    "c_func_re_decompile": "int **func0(int **arr, int n, int *len, int val, int *ret_len) {\n    int **ret = (int **)malloc(sizeof(int *) * 100);\n    int i, j, k = 0;\n    for (i = 0; i < n; i++) {\n        for (j = len[i] - 1; j >= 0; j--) {\n            if (arr[i][j] == val) {\n                ret[k] = (int *)malloc(sizeof(int) * 2);\n                ret[k][0] = i;\n                ret[k][1] = len[i];\n                k++;\n            }\n        }\n    }\n    *ret_len = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *S) {\n    int isstart = 1;\n    int isi = 0;\n    int sum = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (isspace(S[i]) && isi) {\n            isi = 0;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = 1;\n        } else if (!isspace(S[i])) {\n            isi = 0;\n        }\n        if (!isspace(S[i])) {\n            isstart = 0;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = 1;\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int flag = 1;\n    int flag2 = 0;\n    int count = 0;\n    int i = 0;\n    while (str[i] != '\\0') {\n        if (((__ctype_b_loc ()->*((int
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int len = strlen(str);\n    char *ret = (char *)malloc(len + 2);\n    char tmp[50];\n    int i, j, k, l, m;\n    i = 0;\n    m = 0;\n    for (j = 0; j <= len; j++) {\n        if (str[j] == ' ' || str[j] == '\\0') {\n            for (k = 0; k < m - 1; k++) {\n                for (l = k + 1; l < m; l++) {\n                    if (tmp[k] > tmp[l]) {\n                        char t = tmp[k];\n                        tmp[k] = tmp[l];\n                        tmp[l] = t;\n                    }\n                }\n            }\n            if (i > 0) {\n                ret[i++] = ' ';\n            }\n            for (k = 0; k < m; k++) {\n                ret[i++] = tmp[k];\n            }\n            m = 0;\n        } else {\n            tmp[m++] = str[j];\n        }\n    }\n    ret[i] = '\\0';\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char *str) {\n    int len = strlen(str);\n    char *ret = (char *)malloc(len + 2);\n    char tmp[50];\n    int i, j, k, l, m;\n    i = 0;\n    m = 0;\n    for (j = 0; j <= len; j++) {\n        if (str[j] == ' ' || str[j] == '\\0') {\n            for (k = 0; k < m - 1; k++) {\n                for (l = k + 1; l < m; l++) {\n                    if (tmp[k] > tmp[l]) {\n                        char t = tmp[k];\n                        tmp[k] = tmp[l];\n                        tmp[l] = t;\n                    }\n                }\n            }\n            if (i > 0) {\n                ret[i++] = ' ';\n            }\n            for (k = 0; k < m; k++) {\n                ret[i++] = tmp[k];\n            }\n            m = 0;\n        } else {\n            tmp[m++] = str[j];\n        }\n    }\n    ret[i] = '\\0';\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int i, j, k, len, count = 0, index = 0;\n    char *p, *q, temp, str1[50];\n    len = strlen(str);\n    p = (char *)malloc((len + 2) * sizeof(char));\n    for (i = 0; i <= len; i++) {\n        if (str[i] == ' ' || str[i] == '\\0') {\n            for (j = 0; j < count - 1; j++) {\n                for (k = j + 1; k < count; k++) {\n                    if (str1[j] > str1[k]) {\n                        temp = str1[j];\n                        str1[j] = str1[k];\n                        str1[k] = temp;\n                    }\n                }\n            }\n            if (index > 0) {\n                p[index++] = ' ';\n            }\n            for (j = 0; j < count; j++) {\n                p[index++] = str1[j];\n            }\n            count = 0;\n        } else {\n            str1[count++] = str[i];\n        }\n    }\n    p[index] = '\\0';\n    return p;\n}",
    "c_func_re_decompile": "char *func0(char *str) {\n    int i, j, k, len, count = 0, index = 0;\n    char *p, *q, temp, str1[50];\n    len = strlen(str);\n    p = (char *)malloc((len + 2) * sizeof(char));\n    for (i = 0; i <= len; i++) {\n        if (str[i] == ' ' || str[i] == '\\0') {\n            for (j = 0; j < count - 1; j++) {\n                for (k = j + 1; k < count; k++) {\n                    if (str1[j] > str1[k]) {\n                        temp = str1[j];\n                        str1[j] = str1[k];\n                        str1[k] = temp;\n                    }\n                }\n            }\n            if (index > 0) {\n                p[index++] = ' ';\n            }\n            for (j = 0; j < count; j++) {\n                p[index++] = str1[j];\n            }\n            count = 0;\n        } else {\n            str1[count++] = str[i];\n        }\n    }\n    p[index] = '\\0';\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, max, second;\n    max = 0x7fffffff;\n    second = 0x7fffffff;\n    for (i = 0; i < n; i++) {\n        if (a[i] >= max) {\n            if (a[i] == max)\n                continue;\n            second = max;\n            max = a[i];\n        } else if (a[i] > second)\n            second = a[i];\n    }\n    if (second == 0x7fffffff)\n        return -1;\n    return second;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, max, second;\n    max = 0x7fffffff;\n    second = 0x7fffffff;\n    for (i = 0; i < n; i++) {\n        if (a[i] >= max) {\n            if (a[i] == max)\n                continue;\n            second = max;\n            max = a[i];\n        } else if (a[i] > second)\n            second = a[i];\n    }\n    if (second == 0x7fffffff)\n        return -1;\n    return second;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, max1, max2;\n    max1 = max2 = 0x7fffffff;\n    for (i = 0; i < n; i++) {\n        if (a[i] < max1) {\n            max2 = max1;\n            max1 = a[i];\n        } else if (a[i] < max2) {\n            max2 = a[i];\n        }\n    }\n    if (max2 == 0x7fffffff)\n        return -1;\n    return max2;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, max1, max2, max3;\n    max1 = max2 = max3 = 0x7fffffff;\n    for (i = 0; i < n; i++) {\n        if (a[i] < max1) {\n            max3 = max2;\n            max2 = max1;\n            max1 = a[i];\n        } else if (a[i] < max2) {\n            max3 = max2;\n            max2 = a[i];\n        } else if (a[i] < max3) {\n            max3 = a[i];\n        }\n    }\n    if (max3 == 0x7fffffff)\n        return -1;\n    return max3;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, max, second_max;\n    max = second_max = 0x7fffffff;\n    for (i = 0; i < n; i++) {\n        if (a[i] < second_max) {\n            if (a[i] < max) {\n                second_max = max;\n                max = a[i];\n            } else if (a[i] == max) {\n                second_max = max;\n            }\n        }\n    }\n    if (second_max == 0x7fffffff) {\n        return -1;\n    }\n    return second_max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, max, second_max;\n    max = second_max = 0x7fffffff;\n    for (i = 0; i < n; i++) {\n        if (a[i] < second_max) {\n            if (a[i] < max) {\n                second_max = max;\n                max = a[i];\n            } else if (a[i] == max) {\n                second_max = max;\n            }\n        }\n    }\n    if (second_max == 0x7fffffff) {\n        return -1;\n    }\n    return second_max;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int i, j, k, len, count = 0;\n    char *p, *q, temp, str1[50];\n    len = strlen(str);\n    p = (char *)malloc((len + 2) * sizeof(char));\n    for (i = 0; i <= len; i++) {\n        if (str[i] == ' ' || str[i] == '\\0') {\n            for (j = 0; j < count - 1; j++) {\n                for (k = j + 1; k < count; k++) {\n                    if (str1[j] > str1[k]) {\n                        temp = str1[j];\n                        str1[j] = str1[k];\n                        str1[k] = temp;\n                    }\n                }\n            }\n            if (count != 0) {\n                p[count] = ' ';\n                count++;\n            }\n            for (j = 0; j < count; j++) {\n                p[count] = str1[j];\n            }\n            count = 0;\n        } else {\n            str1[count] = str[i];\n            count++;\n        }\n    }\n    p[count] = '\\0';\n    return p;\n}",
    "c_func_re_decompile": "char *func0(char *str) {\n    int i, j, k, len, count = 0;\n    char *p, *q, temp, str1[50];\n    len = strlen(str);\n    p = (char *)malloc((len + 2) * sizeof(char));\n    for (i = 0; i <= len; i++) {\n        if (str[i] == ' ' || str[i] == '\\0') {\n            for (j = 0; j < count - 1; j++) {\n                for (k = j + 1; k < count; k++) {\n                    if (str1[j] > str1[k]) {\n                        temp = str1[j];\n                        str1[j] = str1[k];\n                        str1[k] = temp;\n                    }\n                }\n            }\n            if (count != 0) {\n                p[count] = ' ';\n                count++;\n            }\n            for (j = 0; j < count; j++) {\n                p[count] = str1[j];\n            }\n            count = 0;\n        } else {\n            str1[count] = str[i];\n            count++;\n        }\n    }\n    p[count] = '\\0';\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* func0(const char* s) {\n    int len = strlen(s);\n    char* out = malloc(len + 2); \n    char current[51];\n    int out_index = 0, current_index = 0;\n\n    for (int i = 0; i <= len; i++) {\n        if (s[i] == ' ' || s[i] == '\\0') {\n            for (int j = 0; j < current_index - 1; j++) {\n                for (int k = j + 1; k < current_index; k++) {\n                    if (current[j] > current[k]) {\n                        char temp = current[j];\n                        current[j] = current[k];\n                        current[k] = temp;\n                    }\n                }\n            }\n            if (out_index > 0) out[out_index++] = ' ';\n            for (int j = 0; j < current_index; j++) {\n                out[out_index++] = current[j];\n            }\n            current_index = 0;\n        } else {\n            current[current_index++] = s[i];\n        }\n    }\n\n    out[out_index] = '\\0';\n    return out;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int i, j, k, len, count = 0;\n    char *p, *q, temp, str1[50];\n    len = strlen(str);\n    p = (char *)malloc((len + 2) * sizeof(char));\n    for (i = 0; i <= len; i++) {\n        if (str[i] == ' ' || str[i] == '\\0') {\n            for (j = 0; j < count - 1; j++) {\n                for (k = j + 1; k < count; k++) {\n                    if (str1[j] > str1[k]) {\n                        temp = str1[j];\n                        str1[j] = str1[k];\n                        str1[k] = temp;\n                    }\n                }\n            }\n            if (count != 0) {\n                p[count] = ' ';\n                count++;\n            }\n            for (j = 0; j < count; j++) {\n                p[count] = str1[j];\n            }\n            count = 0;\n        } else {\n            str1[count] = str[i];\n            count++;\n        }\n    }\n    p[count] = '\\0';\n    return p;\n}",
    "c_func_re_decompile": "char *func0(char *str) {\n    int i, j, k, len, count = 0;\n    char *p, *q, temp, str1[50];\n    len = strlen(str);\n    p = (char *)malloc((len + 2) * sizeof(char));\n    for (i = 0; i <= len; i++) {\n        if (str[i] == ' ' || str[i] == '\\0') {\n            for (j = 0; j < count - 1; j++) {\n                for (k = j + 1; k < count; k++) {\n                    if (str1[j] > str1[k]) {\n                        temp = str1[j];\n                        str1[j] = str1[k];\n                        str1[k] = temp;\n                    }\n                }\n            }\n            if (count != 0) {\n                p[count] = ' ';\n                count++;\n            }\n            for (j = 0; j < count; j++) {\n                p[count] = str1[j];\n            }\n            count = 0;\n        } else {\n            str1[count] = str[i];\n            count++;\n        }\n    }\n    p[count] = '\\0';\n    return p;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(float a, float b, float c) {\n  if (roundf(a) != a)\n    return 0;\n  if (roundf(b) != b)\n    return 0;\n  if (roundf(c) != c)\n    return 0;\n  if (a + b == c || a + c == b || b + c == a)\n    return 1;\n  return 0;\n}",
    "c_func_re_decompile": "int func0(float a, float b, float c) {\n  if (roundf(a) != a)\n    return 0;\n  if (roundf(b) != b)\n    return 0;\n  if (roundf(c) != c)\n    return 0;\n  if (a + b == c || a + c == b || b + c == a)\n    return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, int **b, int *m) {\n    *m = n;\n    if (n == 0) {\n        *b = NULL;\n        return;\n    }\n    *b = (int *)malloc(n * sizeof(int));\n    if (*b == NULL) {\n        exit(1);\n    }\n    for (int i = 0; i < n; i++) {\n        (*b)[i] = a[i];\n    }\n    int flag = (a[0] + a[n - 1]) % 2 == 1;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (flag) {\n                if ((*b)[i] > (*b)[j]) {\n                    int tmp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = tmp;\n                }\n            } else {\n                if ((*b)[i] < (*b)[j]) {\n                    int tmp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = tmp;\n                }\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int **b, int *m) {\n    *m = n;\n    if (n == 0) {\n        *b = NULL;\n        return;\n    }\n    *b = (int *)malloc(n * sizeof(int));\n    if (*b == NULL) {\n        exit(1);\n    }\n    for (int i = 0; i < n; i++) {\n        (*b)[i] = a[i];\n    }\n    int flag = (a[0] + a[n - 1]) % 2 == 1;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (flag) {\n                if ((*b)[i] > (*b)[j]) {\n                    int tmp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = tmp;\n                }\n            } else {\n                if ((*b)[i] < (*b)[j]) {\n                    int tmp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = tmp;\n                }\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(float a, float b, float c) {\n  if (roundf(a) != a)\n    return 0;\n  if (roundf(b) != b)\n    return 0;\n  if (roundf(c) != c)\n    return 0;\n  if (a + b == c)\n    return 1;\n  if (a + c == b)\n    return 1;\n  if (b + c == a)\n    return 1;\n  return 0;\n}",
    "c_func_re_decompile": "int func0(float a, float b, float c) {\n  if (roundf(a) != a)\n    return 0;\n  if (roundf(b) != b)\n    return 0;\n  if (roundf(c) != c)\n    return 0;\n  if (a + b == c)\n    return 1;\n  if (a + c == b)\n    return 1;\n  if (b + c == a)\n    return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <limits.h>\n\nint func0(int *lst, int size) {\n    if (size < 2) return -1;\n\n    int first = INT_MAX, second = INT_MAX;\n    for (int i = 0; i < size; ++i) {\n        if (lst[i] < first) {\n            second = first;\n            first = lst[i];\n        } else if (lst[i] < second && lst[i] != first) {\n            second = lst[i];\n        }\n    }\n\n    if (second == INT_MAX) return -1;\n    return second;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    if (n < 2) {\n        return -1;\n    }\n    int max = (1 << 31) - 1;\n    int second_max = (1 << 31) - 1;\n    for (int i = 0; i < n; i++) {\n        if (a[i] > max) {\n            second_max = max;\n            max = a[i];\n        } else if (a[i] < second_max && a[i] != max) {\n            second_max = a[i];\n        }\n    }\n    if (second_max == (1 << 31) - 1) {\n        return -1;\n    }\n    return second_max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    if (n < 2) {\n        return -1;\n    }\n    int max = (1 << 31) - 1;\n    int second_max = (1 << 31) - 1;\n    for (int i = 0; i < n; i++) {\n        if (a[i] > max) {\n            second_max = max;\n            max = a[i];\n        } else if (a[i] < second_max && a[i] != max) {\n            second_max = a[i];\n        }\n    }\n    if (second_max == (1 << 31) - 1) {\n        return -1;\n    }\n    return second_max;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(float a, float b, float c) {\n  if (roundf(a) != a)\n    return 0;\n  if (roundf(b) != b)\n    return 0;\n  if (roundf(c) != c)\n    return 0;\n  if (a + b == c)\n    return 1;\n  if (a + c == b)\n    return 1;\n  if (b + c == a)\n    return 1;\n  return 0;\n}",
    "c_func_re_decompile": "int func0(float a, float b, float c) {\n  if (roundf(a) != a)\n    return 0;\n  if (roundf(b) != b)\n    return 0;\n  if (roundf(c) != c)\n    return 0;\n  if (a + b == c)\n    return 1;\n  if (a + c == b)\n    return 1;\n  if (b + c == a)\n    return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
    "c_func_decompile": "void func0(int n) {\n  int *p = (int *)malloc(n * sizeof(int));\n  p[0] = n;\n  for (int i = 1; i < n; i++) {\n    p[i] = p[i - 1] + 2;\n  }\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
    "c_func_decompile": "void func0(int n) {\n  int i;\n  int *p = (int *)malloc(n * sizeof(int));\n  p[0] = n;\n  for (i = 1; i < n; i++) {\n    p[i] = p[i - 1] + 2;\n  }\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (roundf(a) != a) return 0;\n    if (roundf(b) != b) return 0;\n    if (roundf(c) != c) return 0;\n    if ((a + b == c) || (a + c == b) || (b + c == a)) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(float a, float b, float c) {\n  if (roundf(a) != a)\n    return 0;\n  if (roundf(b) != b)\n    return 0;\n  if (roundf(c) != c)\n    return 0;\n  if (a + b == c)\n    return 1;\n  if (a + c == b)\n    return 1;\n  if (b + c == a)\n    return 1;\n  return 0;\n}",
    "c_func_re_decompile": "int func0(float a, float b, float c) {\n  if (roundf(a) != a)\n    return 0;\n  if (roundf(b) != b)\n    return 0;\n  if (roundf(c) != c)\n    return 0;\n  if (a + b == c)\n    return 1;\n  if (a + c == b)\n    return 1;\n  if (b + c == a)\n    return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *array, int size, int **out_array, int *out_size) {\n    *out_size = size;\n    if (size == 0) {\n        *out_array = NULL;\n        return;\n    }\n\n    *out_array = (int *)malloc(sizeof(int) * size);\n    if (*out_array == NULL) {\n        exit(1);\n    }\n\n    for (int i = 0; i < size; i++) {\n        (*out_array)[i] = array[i];\n    }\n\n    int shouldSortAscending = (array[0] + array[size - 1]) % 2 == 1;\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n            if (shouldSortAscending) {\n                if ((*out_array)[i] > (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            } else {\n                if ((*out_array)[i] < (*out_array)[j]) {\n                    int temp = (*out_array)[i];\n                    (*out_array)[i] = (*out_array)[j];\n                    (*out_array)[j] = temp;\n                }\n            }\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, int **b, int *m) {\n    *m = n;\n    if (n == 0) {\n        *b = NULL;\n        return;\n    }\n    *b = (int *)malloc(n * sizeof(int));\n    if (*b == NULL) {\n        exit(1);\n    }\n    for (int i = 0; i < n; i++) {\n        (*b)[i] = a[i];\n    }\n    int sum = a[0] + a[n - 1];\n    int flag = sum % 2;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (flag == 1) {\n                if ((*b)[i] > (*b)[j]) {\n                    int tmp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = tmp;\n                }\n            } else {\n                if ((*b)[i] < (*b)[j]) {\n                    int tmp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = tmp;\n                }\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int **b, int *m) {\n    *m = n;\n    if (n == 0) {\n        *b = NULL;\n        return;\n    }\n    *b = (int *)malloc(n * sizeof(int));\n    if (*b == NULL) {\n        exit(1);\n    }\n    for (int i = 0; i < n; i++) {\n        (*b)[i] = a[i];\n    }\n    int sum = a[0] + a[n - 1];\n    int flag = sum % 2;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (flag == 1) {\n                if ((*b)[i] > (*b)[j]) {\n                    int tmp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = tmp;\n                }\n            } else {\n                if ((*b)[i] < (*b)[j]) {\n                    int tmp = (*b)[i];\n                    (*b)[i] = (*b)[j];\n                    (*b)[j] = tmp;\n                }\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        int x = a[i];\n        if (x > 1) {\n            int flag = 1;\n            for (j = 2; j * j <= x; j++) {\n                if (x % j == 0) {\n                    flag = 0;\n                    break;\n                }\n            }\n            if (flag) {\n                max = max > x ? max : x;\n            }\n        }\n    }\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        int x = a[i];\n        if (x > 1) {\n            int flag = 1;\n            for (j = 2; j * j <= x; j++) {\n                if (x % j == 0) {\n                    flag = 0;\n                    break;\n                }\n            }\n            if (flag) {\n                max = max > x ? max : x;\n            }\n        }\n    }\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j, k, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 1) {\n            for (j = 2; j * j <= a[i]; j++) {\n                if (a[i] % j == 0) {\n                    break;\n                }\n            }\n            if (j * j > a[i]) {\n                k = a[i];\n                while (k > 0) {\n                    sum += k % 10;\n                    k /= 10;\n                }\n                if (sum > max) {\n                    max = sum;\n                }\n                sum = 0;\n            }\n        }\n    }\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, j, k, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 1) {\n            for (j = 2; j * j <= a[i]; j++) {\n                if (a[i] % j == 0) {\n                    break;\n                }\n            }\n            if (j * j > a[i]) {\n                k = a[i];\n                while (k > 0) {\n                    sum += k % 10;\n                    k /= 10;\n                }\n                if (sum > max) {\n                    max = sum;\n                }\n                sum = 0;\n            }\n        }\n    }\n    return max;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] <= 1)\n            continue;\n        if (a[i] <= 3) {\n            max = a[i] > max ? a[i] : max;\n            continue;\n        }\n        if (a[i] % 2 == 0)\n            continue;\n        for (j = 2; j * j <= a[i]; j++) {\n            if (a[i] % j == 0)\n                break;\n        }\n        if (j * j > a[i])\n            max = a[i] > max ? a[i] : max;\n    }\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] <= 1)\n            continue;\n        if (a[i] <= 3) {\n            max = a[i] > max ? a[i] : max;\n            continue;\n        }\n        if (a[i] % 2 == 0)\n            continue;\n        for (j = 2; j * j <= a[i]; j++) {\n            if (a[i] % j == 0)\n                break;\n        }\n        if (j * j > a[i])\n            max = a[i] > max ? a[i] : max;\n    }\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
    "c_func_decompile": "int func0(int x, int y) {\n  return (((x) < 0 ? -(x) : (x)) % 10) * (((y) < 0 ? -(y) : (y)) % 10);\n}",
    "c_func_re_decompile": "int func0(int x, int y) {\n  return (((x) < 0 ? -(x) : (x)) % 10) * (((y) < 0 ? -(y) : (y)) % 10);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int lst[], int size) {\n    int largest = 0, sum = 0, num, temp;\n\n    for (int i = 0; i < size; ++i) {\n        num = lst[i];\n        if (num > 1) {\n            int prime = 1;\n            for (int j = 2; j * j <= num; ++j) {\n                if (num % j == 0) {\n                    prime = 0;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = num > largest ? num : largest;\n            }\n        }\n    }\n\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] <= 1)\n            continue;\n        if (a[i] <= 3) {\n            sum += a[i];\n            continue;\n        }\n        if (a[i] % 2 == 0)\n            continue;\n        for (j = 2; j * j <= a[i]; j++) {\n            if (a[i] % j == 0)\n                goto next;\n        }\n        sum += a[i];\n        next:\n            if (a[i] > max)\n                max = a[i];\n    }\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, j, max = 0, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] <= 1)\n            continue;\n        if (a[i] <= 3) {\n            sum += a[i];\n            continue;\n        }\n        if (a[i] % 2 == 0)\n            continue;\n        for (j = 2; j * j <= a[i]; j++) {\n            if (a[i] % j == 0)\n                goto next;\n        }\n        sum += a[i];\n        next:\n            if (a[i] > max)\n                max = a[i];\n    }\n    while (max) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n, int *len) {\n    int i, j, flag;\n    int *a = (int *)malloc(n * sizeof(int));\n    *len = 0;\n    for (i = 2; i < n; i++) {\n        flag = 1;\n        for (j = 0; j < *len; j++) {\n            int k = a[j];\n            if (k * k > i)\n                break;\n            if (i % k == 0) {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag) {\n            a[*len] = i;\n            (*len)++;\n        }\n    }\n    return a;\n}",
    "c_func_re_decompile": "int *func0(int n, int *len) {\n    int i, j, flag;\n    int *a = (int *)malloc(n * sizeof(int));\n    *len = 0;\n    for (i = 2; i < n; i++) {\n        flag = 1;\n        for (j = 0; j < *len; j++) {\n            int k = a[j];\n            if (k * k > i)\n                break;\n            if (i % k == 0) {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag) {\n            a[*len] = i;\n            (*len)++;\n        }\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n, int *len) {\n    int *arr = (int *)malloc(n * sizeof(int));\n    int i, j;\n    *len = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *len; j++) {\n            if (i < arr[j] * arr[j])\n                break;\n            if (i % arr[j] == 0)\n                break;\n        }\n        if (j == *len)\n            arr[(*len)++] = i;\n    }\n    return arr;\n}",
    "c_func_re_decompile": "int *func0(int n, int *len) {\n    int *arr = (int *)malloc(n * sizeof(int));\n    int i, j;\n    *len = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *len; j++) {\n            if (i < arr[j] * arr[j])\n                break;\n            if (i % arr[j] == 0)\n                break;\n        }\n        if (j == *len)\n            arr[(*len)++] = i;\n    }\n    return arr;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_decompile": "int func0(char **argv, int argc) {\n  int i, j, k, l, m;\n  char *p;\n  if (argc == 0)\n    return 0;\n  l = 0;\n  m = 0;\n  for (i = 0; i < argc; i++) {\n    p = argv[i];\n    for (j = 0; p[j] != '\\0'; j++) {\n      if (!((*(const unsigned short*)((const unsigned short*)__ctype_b_loc()+(unsigned int) (p[j]))) & (02000)))\n return 0;\n      if (((*(const unsigned short*)((const unsigned short*)__ctype_b_loc()+(unsigned int) (p[j]))) & (01000)))\n m = 1;\n      if (((*(const unsigned short*)((const unsigned short*)__ctype_b_loc()+(unsigned int) (p[j]))) & (04000)))\n l = 1;\n      if (l + m == 2)\n return 0;\n    }\n  }\n  return 1;\n}",
    "c_func_re_decompile": "int func0(struct s0 *argv, int argc) {\n  int i, j, k, l, m;\n  char *p;\n  if (argc == 0)\n    return 0;\n  l = 0;\n  m = 0;\n  for (i = 0; i < argc; i++) {\n    p = argv[i].f0;\n    for (j = 0; p[j] != '\\0'; j++) {\n      if (!((*(const unsigned short*)((const unsigned short*)__ctype_b_loc()+(unsigned int) (p[j]))) & (02000)))\n return 0;\n      if (((*(const unsigned short*)((const unsigned short*)__ctype_b_loc()+(unsigned int) (p[j]))) & (01000)))\n m = 1;\n      if (((*(const unsigned short*)((const unsigned short*)__ctype_b_loc()+(unsigned int) (p[j]))) & (04000)))\n l = 1;\n      if (l + m == 2)\n return 0;\n    }\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(char* dict[][2], int size) {\n    if (size == 0) return 0;\n    int has_lower = 0, has_upper = 0;\n    for (int i = 0; i < size; ++i) {\n        char* key = dict[i][0];\n        for (int j = 0; key[j]; ++j) {\n            if (!isalpha((unsigned char)key[j])) return 0;\n            if (isupper((unsigned char)key[j])) has_upper = 1;\n            if (islower((unsigned char)key[j])) has_lower = 1;\n            if (has_upper + has_lower == 2) return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_decompile": "int func0(char *argv[], int argc) {\n  int i, j, k, l, m, n, o, p;\n  if (argc == 0) return 0;\n  for (i = 0; i < argc; i++) {\n    char *s = argv[i];\n    for (j = 0; s[j]; j++) {\n      unsigned short c = (*__ctype_b_loc())[(unsigned char)s[j]];\n      if (!(c & (0x0004 | 0x0200))) break;\n      if ((c & 0x0100) && (c & 0x0200)) break;\n      if (c & 0x0100) k = 1; else k = 0;\n      if (c & 0x0200) l = 1; else l = 0;\n      if (k + l == 2) break;\n    }\n    if (s[j]) return 0;\n  }\n  return 1;\n}",
    "c_func_re_decompile": "int func0(char *argv[], int argc) {\n  int i, j, k, l, m, n, o, p;\n  if (argc == 0) return 0;\n  for (i = 0; i < argc; i++) {\n    char *s = argv[i];\n    for (j = 0; s[j]; j++) {\n      unsigned short c = (*__ctype_b_loc())[(unsigned char)s[j]];\n      if (!(c & 0x0400)) break;\n      if ((c & 0x0100) && (c & 0x0200)) break;\n      if (c & 0x0100) k = 1; else k = 0;\n      if (c & 0x0200) l = 1; else l = 0;\n      if (k + l == 2) break;\n    }\n    if (s[j]) return 0;\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
    "c_func_decompile": "int func0(int a, int b) {\n  return (a < 0 ? -a : a) % 10 * (b < 0 ? -b : b) % 10;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n  return (a < 0 ? -a : a) % 10 * (b < 0 ? -b : b) % 10;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
    "c_func_decompile": "int func0(int x, int y) {\n  return (((x) < 0) ? -(x) : (x) % 10) * (((y) < 0) ? -(y) : (y) % 10);\n}",
    "c_func_re_decompile": "int func0(int x, int y) {\n  return (((x) < 0) ? -(x) : (x) % 10) * (((y) < 0) ? -(y) : (y) % 10);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n, int *len) {\n    int i, j, k;\n    int *a = (int *)malloc(n * sizeof(int));\n    *len = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *len; j++) {\n            if (a[j] * a[j] > i || i % a[j] == 0)\n                break;\n        }\n        if (j == *len) {\n            a[*len] = i;\n            (*len)++;\n        }\n    }\n    return a;\n}",
    "c_func_re_decompile": "int *func0(int n, int *len) {\n    int i, j, k;\n    int *a = (int *)malloc(n * sizeof(int));\n    *len = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *len; j++) {\n            if (a[j] * a[j] > i || i % a[j] == 0)\n                break;\n        }\n        if (j == *len) {\n            a[*len] = i;\n            (*len)++;\n        }\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int n, int *count) {\n    int *out = malloc(n * sizeof(int));\n    *count = 0;\n    int i, j, isp, k;\n\n    for (i = 2; i < n; i++) {\n        isp = 1;\n        for (j = 0; j < *count; j++) {\n            k = out[j];\n            if (k * k > i) break;\n            if (i % k == 0) {\n                isp = 0;\n                break;\n            }\n        }\n        if (isp) {\n            out[*count] = i;\n            (*count)++;\n        }\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n, int *m) {\n    int i, j, k;\n    int *a = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            if (i < a[j] * a[j] || i % a[j] == 0)\n                break;\n        }\n        if (j == *m) {\n            a[*m] = i;\n            (*m)++;\n        }\n    }\n    return a;\n}",
    "c_func_re_decompile": "int *func0(int n, int *m) {\n    int i, j, k;\n    int *a = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 2; i < n; i++) {\n        for (j = 0; j < *m; j++) {\n            if (i < a[j] * a[j] || i % a[j] == 0)\n                break;\n        }\n        if (j == *m) {\n            a[*m] = i;\n            (*m)++;\n        }\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
    "c_func_decompile": "int func0(int a, int b) {\n  return (a < 0 ? -a : a) % 10 * (b < 0 ? -b : b) % 10;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n  return (a < 0 ? -a : a) % 10 * (b < 0 ? -b : b) % 10;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, count = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (strchr(\"aeiouAEIOU\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, count = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (strchr(\"aeiouAEIOU\", str[i]) != NULL) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
    "c_func_decompile": "int func0(char *str) {\n    char *vowels = \"aeiou\";\n    int count = 0;\n    for (int i = 0; str[i] != '\\0' && 2 * i < strlen(str); i++) {\n        if (strchr(vowels, str[2 * i]) != NULL) {\n            count++;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    char *vowels = \"aeiou\";\n    int count = 0;\n    for (int i = 0; str[i] != '\\0' && 2 * i < strlen(str); i++) {\n        if (strchr(vowels, str[2 * i]) != NULL) {\n            count++;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
    "c_func_decompile": "int func0(char *s) {\n  double d = atof(s);\n  if (d < 0)\n    return (int)ceil(d - 0.5);\n  else\n    return (int)floor(d + 0.5);\n}",
    "c_func_re_decompile": "int func0(char *s) {\n  double d = atof(s);\n  if (d < 0)\n    return (int)ceil(d - 0.5);\n  else\n    return (int)floor(d + 0.5);\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, count = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (i >= strlen(str) / 2)\n            break;\n        if (strchr(\"aeiouAEIOU\", str[i]) != NULL)\n            count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, count = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (i >= (strlen(str) + 1) / 2)\n            break;\n        if (strchr(\"aeiouAEIOU\", str[i]) != NULL)\n            count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
    "c_func_decompile": "int func0(char *s) {\n  double d = strtod(s, NULL);\n  if (d < 0)\n    return (int)(d - 0.5);\n  else\n    return (int)(d + 0.5);\n}",
    "c_func_re_decompile": "int func0(char *s) {\n  double d = strtod(s, NULL);\n  if (d < 0)\n    return (int)(d - 0.5);\n  else\n    return (int)(d + 0.5);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
    "c_func_decompile": "int func0(char *s) {\n  double d = strtod(s, NULL);\n  if (d < 0)\n    return (int)(d - floor(d));\n  else\n    return (int)(d + ceil(d));\n}",
    "c_func_re_decompile": "int func0(char *s) {\n  double d = strtod(s, NULL);\n  if (d < 0)\n    return (int)(d - floor(d));\n  else\n    return (int)(d + ceil(d));\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *s) {\n    const char *uvowel = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; s[i] != '\\0' && i * 2 < strlen(s); i++) {\n        if (strchr(uvowel, s[i * 2]) != NULL) {\n            count += 1;\n        }\n    }\n    return count;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, count = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (i == strlen(str) / 2)\n            break;\n        if (strchr(\"aeiouAEIOU\", str[i]) != NULL)\n            count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    int i, count = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (i == (strlen(str) + 1) / 2)\n            break;\n        if (strchr(\"aeiouAEIOU\", str[i * 2]) != NULL)\n            count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint func0(const char *value) {\n    double w;\n    w = atof(value);\n    return (int)(w < 0 ? ceil(w - 0.5) : floor(w + 0.5));\n}",
    "c_func_decompile": "int func0(char *s) {\n  double d = strtod(s, NULL);\n  if (d < 0)\n    return (int)(d - floor(d));\n  else\n    return (int)(d + ceil(d));\n}",
    "c_func_re_decompile": "int func0(char *s) {\n  double d = strtod(s, NULL);\n  if (d < 0)\n    return (int)(d - floor(d));\n  else\n    return (int)(d + ceil(d));\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n  if (b < a) {\n    return -1;\n  }\n  if (b % 2 == 1) {\n    if (b == a) {\n      return -1;\n    }\n    return b - 1;\n  }\n  return b;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n  if (b < a) {\n    return -1;\n  }\n  if (b % 2 == 1) {\n    if (b == a) {\n      return -1;\n    }\n    return b - 1;\n  }\n  return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
    "c_func_decompile": "int *func0(int n) {\n  int i;\n  int *a = (int *)malloc(n * sizeof(int));\n  a[0] = n;\n  for (i = 1; i < n; i++)\n    a[i] = a[i - 1] + 2;\n  return a;\n}",
    "c_func_re_decompile": "int *func0(int n) {\n  int i;\n  int *a = (int *)malloc(n * sizeof(int));\n  a[0] = n;\n  for (i = 1; i < n; i++)\n    a[i] = a[i - 1] + 2;\n  return a;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n  if (b < a) {\n    return -1;\n  }\n  if (b == a && b % 2 == 1) {\n    return -1;\n  }\n  if (b % 2 == 1) {\n    return b - 1;\n  }\n  return b;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n  if (b < a) {\n    return -1;\n  }\n  if (b == a && b % 2 == 1) {\n    return -1;\n  }\n  if (b % 2 == 1) {\n    return b - 1;\n  }\n  return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    *out = n;\n    for (int i = 1; i < n; i++)\n        *(out + i) = *(out + i - 1) + 2;\n    return out;\n}",
    "c_func_decompile": "int *func0(int n) {\n  int *p = (int *)malloc(n * sizeof(int));\n  int i;\n  p[0] = n;\n  for (i = 1; i < n; i++) {\n    p[i] = i * 2;\n  }\n  return p;\n}",
    "c_func_re_decompile": "int *func0(int n) {\n  int *p = (int *)malloc(n * sizeof(int));\n  int i;\n  p[0] = n;\n  for (i = 1; i < n; i++) {\n    p[i] = i * 2 + 2;\n  }\n  return p;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n  if (b < a) {\n    return -1;\n  }\n  if (b % 2 == 1) {\n    if (b == a) {\n      return -1;\n    }\n    return b - 1;\n  }\n  return b;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n  if (b < a) {\n    return -1;\n  }\n  if (b % 2 == 1) {\n    if (b == a) {\n      return -1;\n    }\n    return b - 1;\n  }\n  return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return y - 1;\n    return y;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n  if (b < a) {\n    return -1;\n  }\n  if (b == a) {\n    if (b % 2 == 1) {\n      return -1;\n    }\n    return b;\n  }\n  if (b % 2 == 1) {\n    return b - 1;\n  }\n  return b;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n  if (b < a) {\n    return -1;\n  }\n  if (b == a) {\n    if (b % 2 == 1) {\n      return -1;\n    }\n    return b;\n  }\n  if (b % 2 == 1) {\n    return b - 1;\n  }\n  return b;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
    "c_func_decompile": "char *func0(int a, int b) {\n    if (a > b) {\n        return \"a > b\";\n    }\n    int c = (a + b) / 2;\n    char *str = (char *)malloc(33);\n    str[0] = '\\0';\n    int i = 32;\n    do {\n        str[i--] = '\\0';\n        str[i--] = '0' + c % 2;\n        c /= 2;\n    } while (c > 0);\n    return str + i + 1;\n}",
    "c_func_re_decompile": "char *func0(int a, int b) {\n    if (a > b) {\n        return \"a > b\";\n    }\n    int c = (a + b) / 2;\n    char *str = (char *)malloc(33);\n    str[0] = '\\0';\n    int i = 32;\n    do {\n        str[i--] = '\\0';\n        str[i--] = '0' + c % 2;\n        c /= 2;\n    } while (c > 0);\n    return str + i + 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int *n) {\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0;\n    while (str[i] != '\\0') {\n        if (str[i] != ' ' && str[i] != ',') {\n            tmp[j++] = str[i];\n        } else {\n            if (j != 0) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n            }\n        }\n        if (k >= 10) {\n            ret = realloc(ret, (k + 10) * sizeof(char *));\n        }\n        i++;\n    }\n    if (j != 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = k;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *n) {\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0, size = 10;\n    while (str[i] != '\\0') {\n        if (str[i] != ' ' && str[i] != ',') {\n            tmp[j++] = str[i];\n        } else {\n            if (j != 0) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n            }\n        }\n        if (k >= size) {\n            size *= 2;\n            ret = realloc(ret, size * sizeof(char *));\n        }\n        i++;\n    }\n    if (j != 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
    "c_func_decompile": "char *func0(int a, int b) {\n    if (a > b) {\n        return \"a > b\";\n    }\n    int c = (a + b) / 2;\n    char *s = malloc(33);\n    s[32] = '\\0';\n    s[31] = '\\0';\n    int i = 31;\n    while (c > 0) {\n        s[i] = '0' + c % 2;\n        c /= 2;\n        i--;\n    }\n    return s;\n}",
    "c_func_re_decompile": "char *func0(int a, int b) {\n    if (a > b) {\n        return \"a > b\";\n    }\n    int c = (a + b) / 2;\n    char *s = malloc(33);\n    s[0] = '\\0';\n    s[32] = '\\0';\n    int i = 31;\n    while (c > 0) {\n        s[i] = '0' + c % 2;\n        c /= 2;\n        i--;\n    }\n    return s;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
    "c_func_decompile": "char *func0(int a, int b) {\n    if (a > b) {\n        return \"a > b\";\n    }\n    int c = a + b;\n    char *s = malloc(33);\n    s[32] = s[33] = 0;\n    int i = 31;\n    while (c > 1) {\n        s[i--] = '0' + c % 2;\n        c /= 2;\n    }\n    return s;\n}",
    "c_func_re_decompile": "char *func0(int a, int b) {\n    if (a > b) {\n        return \"a > b\";\n    }\n    int c = a + b;\n    char *s = malloc(33);\n    s[32] = s[33] = 0;\n    int i = 31;\n    while (c > 1) {\n        s[i--] = '0' + c % 2;\n        c /= 2;\n    }\n    return s;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nchar* func0(int n, int m) {\n    if (n > m) return \"-1\";\n    int num = (m + n) / 2;\n    char* out = (char*)malloc(33);\n    out[0] = '\\0';\n\n    int index = 32;\n    out[index--] = '\\0';\n\n    do {\n        out[index--] = '0' + num % 2;\n        num /= 2;\n    } while (num > 0);\n\n    return &out[index + 1]; \n}",
    "c_func_decompile": "char *func0(int a, int b) {\n    if (a > b) {\n        return \"a > b\";\n    }\n    int c = a + b;\n    char *s = malloc(33);\n    s[32] = s[33] = 0;\n    int i = 31;\n    while (c > 1) {\n        s[i--] = '0' + c % 2;\n        c /= 2;\n    }\n    return s;\n}",
    "c_func_re_decompile": "char *func0(int a, int b) {\n    if (a > b) {\n        return \"a > b\";\n    }\n    int c = a + b;\n    char *s = malloc(33);\n    s[32] = s[33] = 0;\n    int i = 31;\n    while (c > 1) {\n        s[i--] = '0' + c % 2;\n        c /= 2;\n    }\n    return s;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int *n) {\n    int i, j, k, len;\n    char **ret;\n    char *tmp;\n    len = 10;\n    ret = (char **)malloc(len * sizeof(char *));\n    tmp = (char *)malloc(strlen(str) + 1);\n    k = 0;\n    j = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (j > 0) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n                if (k >= len) {\n                    len *= 2;\n                    ret = (char **)realloc(ret, len * sizeof(char *));\n                }\n            }\n            continue;\n        }\n        tmp[j++] = str[i];\n    }\n    if (j > 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = k;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *n) {\n    int i, j, k, len;\n    char **ret;\n    char *tmp;\n    len = 10;\n    ret = (char **)malloc(len * sizeof(char *));\n    tmp = (char *)malloc(strlen(str) + 1);\n    k = 0;\n    j = 0;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (j > 0) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n                if (k >= len) {\n                    len *= 2;\n                    ret = (char **)realloc(ret, len * sizeof(char *));\n                }\n            }\n            continue;\n        }\n        tmp[j++] = str[i];\n    }\n    if (j > 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int *n) {\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0;\n    while (str[i] != '\\0') {\n        if (str[i] != ' ' && str[i] != ',') {\n            tmp[j++] = str[i];\n        } else {\n            if (j != 0) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n            }\n        }\n        if (k >= 10) {\n            ret = realloc(ret, (k + 10) * sizeof(char *));\n        }\n        i++;\n    }\n    if (j != 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = k;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *n) {\n    char **ret = malloc(10 * sizeof(char *));\n    char *tmp = malloc(strlen(str) + 1);\n    int i = 0, j = 0, k = 0, size = 10;\n    while (str[i] != '\\0') {\n        if (str[i] != ' ' && str[i] != ',') {\n            tmp[j++] = str[i];\n        } else {\n            if (j != 0) {\n                tmp[j] = '\\0';\n                ret[k++] = strdup(tmp);\n                j = 0;\n            }\n        }\n        if (k >= size) {\n            size *= 2;\n            ret = realloc(ret, size * sizeof(char *));\n        }\n        i++;\n    }\n    if (j != 0) {\n        tmp[j] = '\\0';\n        ret[k++] = strdup(tmp);\n    }\n    free(tmp);\n    *n = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(const char* s, int* count) {\n    int capacity = 10;\n    char** out = malloc(capacity * sizeof(char*));\n    char* current = malloc(strlen(s) + 1);\n    int word_count = 0;\n    int current_length = 0;\n\n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current_length > 0) {\n                current[current_length] = '\\0';\n                out[word_count++] = strdup(current);\n                current_length = 0;\n\n                if (word_count >= capacity) {\n                    capacity *= 2;\n                    out = realloc(out, capacity * sizeof(char*));\n                }\n            }\n        } else {\n            current[current_length++] = s[i];\n        }\n    }\n\n    if (current_length > 0) {\n        current[current_length] = '\\0';\n        out[word_count++] = strdup(current);\n    }\n\n    free(current);\n    *count = word_count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int *n) {\n    char **ret = malloc(10 * sizeof(char *));\n    int ret_size = 10;\n    int ret_n = 0;\n    char *buf = malloc(strlen(str) + 1);\n    int buf_size = 0;\n    int i;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (buf_size > 0) {\n                buf[buf_size] = '\\0';\n                ret[ret_n++] = strdup(buf);\n                if (ret_n >= ret_size) {\n                    ret_size *= 2;\n                    ret = realloc(ret, ret_size * sizeof(char *));\n                }\n                buf_size = 0;\n            }\n        } else {\n            buf[buf_size++] = str[i];\n        }\n    }\n    if (buf_size > 0) {\n        buf[buf_size] = '\\0';\n        ret[ret_n++] = strdup(buf);\n    }\n    free(buf);\n    *n = ret_n;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int *n) {\n    char **ret = malloc(10 * sizeof(char *));\n    int ret_size = 10;\n    int ret_n = 0;\n    char *buf = malloc(strlen(str) + 1);\n    int buf_size = 0;\n    int i;\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == ' ' || str[i] == ',') {\n            if (buf_size > 0) {\n                buf[buf_size] = '\\0';\n                ret[ret_n++] = strdup(buf);\n                if (ret_n >= ret_size) {\n                    ret_size *= 2;\n                    ret = realloc(ret, ret_size * sizeof(char *));\n                }\n                buf_size = 0;\n            }\n        } else {\n            buf[buf_size++] = str[i];\n        }\n    }\n    if (buf_size > 0) {\n        buf[buf_size] = '\\0';\n        ret[ret_n++] = strdup(buf);\n    }\n    free(buf);\n    *n = ret_n;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n) {\n  int *a = (int *)malloc(n * sizeof(int));\n  int i, s = 0, p = 1;\n  for (i = 1; i <= n; i++) {\n    s += i;\n    p *= i;\n    if (i % 2 == 0)\n      a[i - 1] = p;\n    else\n      a[i - 1] = s;\n  }\n  return a;\n}",
    "c_func_re_decompile": "int *func0(int n) {\n  int *a = (int *)malloc(n * sizeof(int));\n  int i, s = 0, p = 1;\n  for (i = 1; i <= n; i++) {\n    s += i;\n    p *= i;\n    if (i % 2 == 0)\n      a[i - 1] = p;\n    else\n      a[i - 1] = s;\n  }\n  return a;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n) {\n    int *p = (int *)malloc(n * sizeof(int));\n    int i, j;\n    for (i = 0, j = 1; i < n; i++, j++) {\n        if (j % 2)\n            p[i] = j;\n        else\n            p[i] = j * j;\n    }\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n) {\n    int *p = (int *)malloc(n * sizeof(int));\n    int i, j, sum;\n    for (i = 0, j = 1, sum = 0; i < n; i++, j++) {\n        if (j % 2)\n            sum += j;\n        else\n            p[i] = j * j;\n        p[i] = sum;\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int i, sum = 0;\n    for (i = 1; i <= n; i++) {\n        if (i % 2)\n            sum += i;\n        else\n            sum *= i;\n        a[i - 1] = sum;\n    }\n    return a;\n}",
    "c_func_re_decompile": "int *func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int i, sum = 0, mul = 1;\n    for (i = 1; i <= n; i++) {\n        if (i % 2)\n            sum += i;\n        else\n            mul *= i;\n        a[i - 1] = i % 2 ? sum : mul;\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc(n * sizeof(int));\n    int sum = 0, prod = 1;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) out[i - 1] = prod;\n        else out[i - 1] = sum;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n) {\n    int *p = malloc(n * sizeof(int));\n    int i, j = 0;\n    for (i = 1; i <= n; i++) {\n        if (i % 2) {\n            p[i - 1] = j;\n            j += i;\n        } else {\n            p[i - 1] = i;\n        }\n    }\n    return p;\n}",
    "c_func_re_decompile": "int *func0(int n) {\n    int *p = malloc(n * sizeof(int));\n    int i, j = 0, k = 1;\n    for (i = 1; i <= n; i++) {\n        k *= i;\n        j += i;\n        if (i % 2) {\n            p[i - 1] = j;\n        } else {\n            p[i - 1] = k;\n        }\n    }\n    return p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, int **b, int *m) {\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (int i = 0; i < n; i++) {\n        int x = a[i];\n        while (x > 0) {\n            if (x % 10 % 2 == 0) {\n                if (x != 0) {\n                    (*b)[*m] = x;\n                    (*m)++;\n                }\n                break;\n            }\n            x /= 10;\n        }\n    }\n    for (int i = 0; i < *m - 1; i++) {\n        for (int j = 0; j < *m - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                int t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int **b, int *m) {\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (int i = 0; i < n; i++) {\n        int x = a[i];\n        while (x > 0) {\n            if (x % 10 % 2 == 0) {\n                if (x != 0) {\n                    (*b)[*m] = x;\n                    (*m)++;\n                }\n                break;\n            }\n            x /= 10;\n        }\n    }\n    for (int i = 0; i < *m - 1; i++) {\n        for (int j = 0; j < *m - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                int t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, int **b, int *m) {\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] == 0)\n            continue;\n        for (j = a[i], k = 0; j > 0; j /= 10) {\n            if (j % 10 == 1) {\n                k++;\n            }\n        }\n        if (k == 0) {\n            (*b)[(*m)] = a[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < (*m) - 1; i++) {\n        for (j = 0; j < (*m) - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int **b, int *m) {\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] == 0)\n            continue;\n        for (j = a[i], k = 0; j > 0; j /= 10) {\n            if (j % 10 == 1) {\n                k++;\n            }\n        }\n        if (k == 0) {\n            (*b)[(*m)] = a[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < (*m) - 1; i++) {\n        for (j = 0; j < (*m) - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n  if (b == 0) {\n    return 1;\n  }\n  return func0(a, b - 1) * a;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n  if (b == 0) {\n    return 1;\n  }\n  return func0(a, b - 1) * a;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, int **b, int *m) {\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (int i = 0; i < n; i++) {\n        int x = a[i];\n        bool flag = false;\n        if (x == 0) {\n            flag = true;\n        } else {\n            while (x > 0 && !flag) {\n                if (x % 10 == 0) {\n                    flag = true;\n                }\n                x /= 10;\n            }\n        }\n        if (!flag) {\n            (*b)[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (int i = 0; i < *m - 1; i++) {\n        for (int j = 0; j < *m - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                int t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int **b, int *m) {\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (int i = 0; i < n; i++) {\n        int x = a[i];\n        bool flag = false;\n        if (x == 0) {\n            flag = true;\n        } else {\n            while (x > 0 && !flag) {\n                if (x % 2 == 0) {\n                    flag = true;\n                }\n                x /= 10;\n            }\n        }\n        if (!flag) {\n            (*b)[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (int i = 0; i < *m - 1; i++) {\n        for (int j = 0; j < *m - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                int t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nvoid func0(int *x, int size, int **out, int *out_size) {\n    *out = malloc(size * sizeof(int));\n    *out_size = 0;\n\n    for (int i = 0; i < size; i++) {\n        int num = x[i];\n        bool has_even_digit = false;\n        if (num == 0) has_even_digit = true;\n\n        while (num > 0 && !has_even_digit) {\n            if (num % 2 == 0) has_even_digit = true;\n            num = num / 10;\n        }\n\n        if (!has_even_digit) {\n            (*out)[*out_size] = x[i];\n            (*out_size)++;\n        }\n    }\n\n    for (int i = 0; i < *out_size - 1; i++) {\n        for (int j = 0; j < *out_size - i - 1; j++) {\n            if ((*out)[j] > (*out)[j + 1]) {\n                int temp = (*out)[j];\n                (*out)[j] = (*out)[j + 1];\n                (*out)[j + 1] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, int **b, int *m) {\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] == 0)\n            continue;\n        for (j = a[i], k = 0; j > 0; j /= 10) {\n            if (j % 10 == 1) {\n                k++;\n            }\n        }\n        if (k == 0) {\n            (*b)[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int **b, int *m) {\n    int i, j, k, t;\n    *b = (int *)malloc(n * sizeof(int));\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] == 0)\n            continue;\n        for (j = a[i], k = 0; j > 0; j /= 10) {\n            if (j % 2 == 0) {\n                k++;\n            }\n        }\n        if (k == 0) {\n            (*b)[*m] = a[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            if ((*b)[j] > (*b)[j + 1]) {\n                t = (*b)[j];\n                (*b)[j] = (*b)[j + 1];\n                (*b)[j + 1] = t;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, cnt = 0;\n    if (n == 0)\n        return 1;\n    for (i = 1; i < n; i++)\n        if (a[i] < a[i - 1])\n            cnt++;\n    if (a[n - 1] > a[0])\n        cnt++;\n    if (cnt <= 1)\n        return 1;\n    else\n        return 0;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, cnt = 0;\n    if (n == 0)\n        return 1;\n    for (i = 1; i < n; i++)\n        if (a[i] < a[i - 1])\n            cnt++;\n    if (a[n - 1] > a[0])\n        cnt++;\n    if (cnt <= 1)\n        return 1;\n    else\n        return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, char ***p, int *m) {\n    int i, j, t;\n    char *s[] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    *m = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*m)++;\n    *p = (char **) malloc(sizeof(char *) * (*m));\n    for (i = n - 1, j = 0; i >= 0 && j < *m; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*p)[j++] = s[a[i]];\n}",
    "c_func_re_decompile": "void func0(int *a, int n, char ***p, int *m) {\n    int i, j, t;\n    char *s[] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    *m = 0;\n    for (i = n - 1; i >= 0; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*m)++;\n    *p = (char **) malloc(sizeof(char *) * (*m));\n    for (i = n - 1, j = 0; i >= 0 && j < *m; i--)\n        if (a[i] > 0 && a[i] < 10)\n            (*p)[j++] = s[a[i]];\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
    "c_func_decompile": "int* func0(int n) {\n    int i, j, k, t;\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (i = 1; i <= n; i++) {\n        j = 0;\n        k = i;\n        t = i;\n        while (t) {\n            j = j * 10 + t % 10;\n            t /= 10;\n        }\n        if (k == j) {\n            if (k % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": "int* func0(int n) {\n    int i, j, k, t;\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (i = 1; i <= n; i++) {\n        j = 0;\n        k = i;\n        t = i;\n        while (t) {\n            j = j * 10 + t % 10;\n            t /= 10;\n        }\n        if (k == j) {\n            if (k % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, char ***p, int *m) {\n    int i, j;\n    char *s[] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                int t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    for (i = 0; i < n; i++)\n        if (a[i] < 0 || a[i] > 9) {\n            *m = 0;\n            return;\n        } else\n            (*m)++;\n    *p = (char **) malloc(sizeof(char *) * (*m));\n    for (i = 0, j = 0; i < n; i++)\n        if (a[i] < 0 || a[i] > 9)\n            continue;\n        else\n            (*p)[j++] = s[a[i]];\n}",
    "c_func_re_decompile": "void func0(int *a, int n, char ***p, int *m) {\n    int i, j;\n    char *s[] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                int t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    for (i = 0; i < n; i++)\n        if (a[i] < 1 || a[i] > 9) {\n            *m = 0;\n            return;\n        } else\n            (*m)++;\n    *p = (char **) malloc(sizeof(char *) * (*m));\n    for (i = 0, j = 0; i < n; i++)\n        if (a[i] < 1 || a[i] > 9)\n            continue;\n        else\n            (*p)[j++] = s[a[i]];\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
    "c_func_decompile": "bool func0(int *arr, int len) {\n    if (len == 0) {\n        return true;\n    }\n    int count = 0;\n    for (int i = 1; i < len; i++) {\n        if (arr[i] < arr[i - 1]) {\n            count++;\n        }\n    }\n    if (arr[len - 1] > arr[0]) {\n        count++;\n    }\n    return count <= 1;\n}",
    "c_func_re_decompile": "bool func0(int *arr, int len) {\n    if (len == 0) {\n        return true;\n    }\n    int count = 0;\n    for (int i = 1; i < len; i++) {\n        if (arr[i] < arr[i - 1]) {\n            count++;\n        }\n    }\n    if (arr[len - 1] > arr[0]) {\n        count++;\n    }\n    return count <= 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] <= 0) {\n            sum = 0;\n            for (a[i] = -a[i]; a[i] > 0; a[i] /= 10)\n                sum += a[i] % 10;\n            if (sum > a[i])\n                count++;\n        } else\n            count++;\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] <= 0) {\n            sum = 0;\n            for (a[i] = -a[i]; a[i] > 0; a[i] /= 10)\n                sum += a[i] % 10;\n            if (sum > a[i])\n                count++;\n        } else\n            count++;\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, char ***p, int *m) {\n    int i, j;\n    char *s[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                int t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    for (*m = 0; n--; (*m)++)\n        if (a[n] > 0 && a[n] < 10)\n            *p = (char **) malloc(sizeof(char *) * (*m));\n        else\n            break;\n    for (i = 0; i < *m && n >= 0; i++)\n        if (a[n] > 0 && a[n] < 10)\n            (*p)[i] = s[a[n]];\n        else\n            break;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, char ***p, int *m) {\n    int i, j;\n    char *s[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    for (i = 0; i < n - 1; i++)\n        for (j = 0; j < n - i - 1; j++)\n            if (a[j] > a[j + 1]) {\n                int t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n    for (*m = 0; n--; (*m)++)\n        if (a[n] > 0 && a[n] < 10)\n            *p = (char **) malloc(sizeof(char *) * (*m));\n        else\n            break;\n    for (i = 0; i < *m && n >= 0; i++)\n        if (a[n] > 0 && a[n] < 10)\n            (*p)[i] = s[a[n]];\n        else\n            break;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
    "c_func_decompile": "int* func0(int n) {\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    int i;\n    for (i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2) {\n                result[1]++;\n            } else {\n                result[0]++;\n            }\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": "int* func0(int n) {\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    int i;\n    for (i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2) {\n                result[1]++;\n            } else {\n                result[0]++;\n            }\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n        } else {\n            sum = 0;\n            a[i] = -a[i];\n            while (a[i] > 0) {\n                sum += a[i] % 10;\n                a[i] /= 10;\n            }\n            if (sum > a[i]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n        } else {\n            sum = 0;\n            a[i] = -a[i];\n            while (a[i] > 0) {\n                sum += a[i] % 10;\n                a[i] /= 10;\n            }\n            if (sum > a[i]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
    "c_func_decompile": "int* func0(int n) {\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (int i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": "int* func0(int n) {\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (int i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j, k, sum;\n    for (i = 0, j = 0; i < n; i++) {\n        if (a[i] > 0) {\n            j++;\n        } else {\n            sum = 0;\n            for (k = (a[i] > 0 ? a[i] : -a[i]); k >= 10; k /= 10) {\n                sum += k % 10;\n            }\n            sum -= k;\n            if (sum > 0) {\n                j++;\n            }\n        }\n    }\n    return j;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, j, k, sum;\n    for (i = 0, j = 0; i < n; i++) {\n        if (a[i] > 0) {\n            j++;\n        } else {\n            sum = 0;\n            for (k = (a[i] > 0 ? a[i] : -a[i]); k >= 10; k /= 10) {\n                sum += k % 10;\n            }\n            sum -= k;\n            if (sum > 0) {\n                j++;\n            }\n        }\n    }\n    return j;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* counts = (int*)malloc(2 * sizeof(int));\n    counts[0] = 0;\n    counts[1] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        int reversed = 0, original = i;\n\n        int number = i;\n        while (number != 0) {\n            reversed = reversed * 10 + number % 10;\n            number /= 10;\n        }\n\n        if (original == reversed) {\n            if (original % 2 == 0) counts[0]++;\n            else counts[1]++;\n        }\n    }\n\n    return counts;\n}",
    "c_func_decompile": "int* func0(int n) {\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (int i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": "int* func0(int n) {\n    int* result = (int*)malloc(sizeof(int) * 2);\n    result[0] = 0;\n    result[1] = 0;\n    for (int i = 1; i <= n; i++) {\n        int sum = 0;\n        int tmp = i;\n        while (tmp) {\n            sum = sum * 10 + tmp % 10;\n            tmp /= 10;\n        }\n        if (sum == i) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *n, int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (n[i] > 0) {\n            num += 1;\n        } else {\n            int sum = 0;\n            int w = abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "int func0(int* a, int n) {\n    int i, j, k, sum, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n            continue;\n        }\n        k = a[i];\n        sum = 0;\n        while (k < 0) {\n            k = k < 0 ? -k : k;\n            if (k < 10) {\n                if (sum > k)\n                    count++;\n                break;\n            }\n            sum += k % 10;\n            k /= 10;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int* a, int n) {\n    int i, j, k, sum, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 0) {\n            count++;\n            continue;\n        }\n        k = a[i];\n        sum = 0;\n        while (k < 0) {\n            k = k < 0 ? -k : k;\n            if (k < 10) {\n                if (sum > k)\n                    count++;\n                break;\n            }\n            sum += k % 10;\n            k /= 10;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(int *arr, int size) {\n    int num = 0;\n    if (size == 0) return true;\n    for (int i = 1; i < size; i++)\n        if (arr[i] < arr[i - 1]) num += 1;\n    if (arr[size - 1] > arr[0]) num += 1;\n    if (num < 2) return true;\n    return false;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j, cnt = 0;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                cnt++;\n            }\n        }\n    }\n    if (cnt <= 1) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, j, cnt = 0;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                cnt++;\n            }\n        }\n    }\n    if (cnt <= 1) {\n        return 1;\n    } else {\n        return 0;\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
    "c_func_decompile": "char * func0(int *a, int na, int *b, int nb) {\n  int i, j, k = 0;\n  for (i = 0; i < na; i++)\n    if (a[i] % 2 == 0)\n      k++;\n  for (j = 0; j < nb; j++)\n    if (b[j] % 2 == 0)\n      k++;\n  if (k >= na)\n    return \"OK\";\n  else\n    return \"NOK\";\n}",
    "c_func_re_decompile": "char * func0(int *a, int na, int *b, int nb) {\n  int i, j, k = 0;\n  for (i = 0; i < na; i++)\n    if (a[i] % 2 == 0)\n      k++;\n  for (j = 0; j < nb; j++)\n    if (b[j] % 2 == 0)\n      k++;\n  if (k >= na)\n    return \"OK\";\n  else\n    return \"NOK\";\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
    "c_func_decompile": "char *func0(int *a, int n, int *b, int m) {\n    int i, cnt = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] % 2 == 0)\n            cnt++;\n    for (i = 0; i < m; i++)\n        if (b[i] % 2 == 0)\n            cnt++;\n    if (cnt > n)\n        return \"YES\";\n    else\n        return \"NO\";\n}",
    "c_func_re_decompile": "char *func0(int *a, int n, int *b, int m) {\n    int i, cnt = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] % 2 == 0)\n            cnt++;\n    for (i = 0; i < m; i++)\n        if (b[i] % 2 == 0)\n            cnt++;\n    if (cnt > n)\n        return \"YES\";\n    else\n        return \"NO\";\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
    "c_func_decompile": "char *func0(int *a, int n, int *b, int m) {\n    int i, cnt = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] % 2 == 0)\n            cnt++;\n    for (i = 0; i < m; i++)\n        if (b[i] % 2 == 0)\n            cnt++;\n    if (cnt > n)\n        return \"YES\";\n    else\n        return \"NO\";\n}",
    "c_func_re_decompile": "char *func0(int *a, int n, int *b, int m) {\n    int i, cnt = 0;\n    for (i = 0; i < n; i++)\n        if (a[i] % 2 == 0)\n            cnt++;\n    for (i = 0; i < m; i++)\n        if (b[i] % 2 == 0)\n            cnt++;\n    if (cnt > n)\n        return \"YES\";\n    else\n        return \"NO\";\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid func0(int *arr, int size, char ***out, int *out_size) {\n    char *names[] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    int i, j;\n\n    for (i = 0; i < size - 1; i++) {\n        for (j = 0; j < size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    *out_size = 0;\n    for (i = size - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out_size)++;\n        }\n    }\n\n    *out = malloc(*out_size * sizeof(char *));\n\n    for (i = size - 1, j = 0; i >= 0 && j < *out_size; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            (*out)[j++] = names[arr[i]];\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, char ***p, int *m) {\n    int i, j;\n    char *s[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (a[j] > a[j + 1]) {\n                int t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n        }\n    }\n    *m = 0;\n    for (i = n - 1; i >= 0; i--) {\n        if (a[i] > 0 && a[i] < 10) {\n            (*m)++;\n        } else {\n            break;\n        }\n    }\n    *p = (char **)malloc(sizeof(char *) * (*m));\n    for (i = n - 1, j = 0; i >= 0 && j < *m; i--) {\n        if (a[i] > 0 && a[i] < 10) {\n            (*p)[j++] = s[a[i]];\n        } else {\n            break;\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, char ***p, int *m) {\n    int i, j;\n    char *s[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (a[j] > a[j + 1]) {\n                int t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n        }\n    }\n    *m = 0;\n    for (i = n - 1; i >= 0; i--) {\n        if (a[i] > 0 && a[i] < 10) {\n            (*m)++;\n        } else {\n            break;\n        }\n    }\n    *p = (char **)malloc(sizeof(char *) * (*m));\n    for (i = n - 1, j = 0; i >= 0 && j < *m; i--) {\n        if (a[i] > 0 && a[i] < 10) {\n            (*p)[j++] = s[a[i]];\n        } else {\n            break;\n        }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int *lst1, int size1, int *lst2, int size2) {\n    int num = 0;\n    for (int i = 0; i < size1; i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < size2; i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num >= size1) return \"YES\";\n    return \"NO\";\n}",
    "c_func_decompile": "char *func0(int *a, int n, int *b, int m) {\n    int i, cnt = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            cnt++;\n        }\n    }\n    for (i = 0; i < m; i++) {\n        if (b[i] % 2 == 0) {\n            cnt++;\n        }\n    }\n    if (cnt > n) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
    "c_func_re_decompile": "char *func0(int *a, int n, int *b, int m) {\n    int i, cnt = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            cnt++;\n        }\n    }\n    for (i = 0; i < m; i++) {\n        if (b[i] % 2 == 0) {\n            cnt++;\n        }\n    }\n    if (cnt > n) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int n, int *m) {\n    int i, j, k, l, len;\n    char *p, *q, *r;\n    char **s;\n    const struct _ctype_t *ct;\n    ct = __ctype_b_loc();\n    len = strlen(str);\n    p = (char *)malloc(len + 1);\n    j = 0;\n    k = 0;\n    l = 0;\n    s = NULL;\n    for (i = 0; i < len; i++) {\n        q = p + i - j;\n        if (!(ct->_mbbtype[str[i]] & 0x0020) && str[i] != '\\0') {\n            *q = str[i];\n            if (strchr(\" \\t\\n\", str[i]) == NULL) {\n                l++;\n            }\n        } else {\n            if (l == n) {\n                *q = '\\0';\n                s = (char **)realloc(s, ++k * sizeof(char *));\n                s[k - 1] = (char *)malloc(strlen(p) + 1);\n                strcpy(s[k - 1], p);\n            }\n            j = i + 1;\n            l = 0;\n        }\n    }\n    free(p);\n    *m = k;\n    return s;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
    "c_func_decompile": "void func0(char *s, int *a, int *max, char *b) {\n    int i, j, k, m[26] = {0}, n = 0, p = 0;\n    for (i = 0; s[i]; i++)\n        if (s[i] != ' ') {\n            j = s[i] - 'a';\n            m[j]++;\n            if (m[j] > n)\n                n = m[j];\n        }\n    for (i = 0; i < 26; i++) {\n        a[i] = m[i];\n        if (m[i] == n)\n            b[p++] = i + 'a';\n    }\n    *max = n;\n    b[p] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, int *a, int *max, char *b) {\n    int i, j, k, m[26] = {0}, n = 0, p = 0;\n    for (i = 0; s[i]; i++)\n        if (s[i] != ' ') {\n            j = s[i] - 'a';\n            m[j]++;\n            if (m[j] > n)\n                n = m[j];\n        }\n    for (i = 0; i < 26; i++) {\n        a[i] = m[i];\n        if (m[i] == n)\n            b[p++] = i + 'a';\n    }\n    *max = n;\n    b[p] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int n, int *m) {\n    char *delim = \" \\t\\n\";\n    char **ret = NULL;\n    int i, j, k, len, count = 0;\n    size_t size;\n    char *tmp;\n    size = strlen(str);\n    tmp = (char *)malloc(size + 1);\n    for (i = 0; i <= size; i++) {\n        if (!(((*(const unsigned short *)&(*(const _Locale_ctype *)__ctype_b_loc())+1)[(unsigned char)str[i]] & 0x2000) || str[i] == '\\0')) {\n            if (count == n) {\n                tmp[i - j] = '\\0';\n                ret = (char **)realloc(ret, (count + 1) * sizeof(char *));\n                ret[count] = (char *)malloc(strlen(tmp) + 1);\n                strcpy(ret[count], tmp);\n                count++;\n                j = i + 1;\n                count = 0;\n            } else {\n                tmp[i - j] = str[i];\n                if (strchr(delim, str[i]) == NULL && ((*(const unsigned short *)&(*(const _Locale_ctype *)__ctype_b_loc())+1)[(unsigned char)str[i]] & 0x0400))\n                    count++;\n            }\n        }\n    }\n    free(tmp);\n    *m = count;\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
    "c_func_decompile": "void func0(char *str, int *arr, int *max, char *ch) {\n    int i, j, k, len, max_len = 0;\n    int count[26] = {0};\n    while (*str != '\\0') {\n        if (*str != ' ') {\n            count[*str - 'a']++;\n            if (count[*str - 'a'] > max_len)\n                max_len = count[*str - 'a'];\n        }\n        str++;\n    }\n    for (i = 0; i < 26; i++) {\n        arr[i] = count[i];\n        if (count[i] == max_len)\n            ch[k++] = i + 'a';\n    }\n    *max = max_len;\n    ch[k] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, int *arr, int *max, char *ch) {\n    int i, j, k, len, max_len = 0;\n    int count[26] = {0};\n    while (*str != '\\0') {\n        if (*str != ' ') {\n            count[*str - 'a']++;\n            if (count[*str - 'a'] > max_len)\n                max_len = count[*str - 'a'];\n        }\n        str++;\n    }\n    for (i = 0; i < 26; i++) {\n        arr[i] = count[i];\n        if (count[i] == max_len)\n            ch[k++] = i + 'a';\n    }\n    *max = max_len;\n    ch[k] = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
    "c_func_decompile": "void func0(char *str, int *arr, int *max, char *ch) {\n    int i, j, k, max_num = 0;\n    int num[26] = {0};\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == ' ') {\n            continue;\n        }\n        j = str[i] - 'a';\n        num[j]++;\n        if (num[j] > max_num) {\n            max_num = num[j];\n        }\n    }\n    for (i = 0; i < 26; i++) {\n        arr[i] = num[i];\n        if (num[i] == max_num) {\n            ch[k++] = i + 'a';\n        }\n    }\n    *max = max_num;\n    ch[k] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, int *arr, int *max, char *ch) {\n    int i, j, k, max_num = 0;\n    int num[26] = {0};\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == ' ') {\n            continue;\n        }\n        j = str[i] - 'a';\n        num[j]++;\n        if (num[j] > max_num) {\n            max_num = num[j];\n        }\n    }\n    for (i = 0; i < 26; i++) {\n        arr[i] = num[i];\n        if (num[i] == max_num) {\n            ch[k++] = i + 'a';\n        }\n    }\n    *max = max_num;\n    ch[k] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* test, int* freq, int* max_count, char* letters) {\n    int local_freq[26] = {0}; // for 'a' to 'z'\n    int local_max = 0;\n    const char* ptr = test;\n    int idx = 0;\n\n    while (*ptr) {\n        if (*ptr != ' ') {\n            int letter_index = *ptr - 'a';\n            local_freq[letter_index]++;\n            if (local_freq[letter_index] > local_max) {\n                local_max = local_freq[letter_index];\n            }\n        }\n        ptr++;\n    }\n\n    for (int i = 0; i < 26; i++) {\n        freq[i] = local_freq[i];\n        if (local_freq[i] == local_max) {\n            letters[idx++] = 'a' + i;\n        }\n    }\n\n    *max_count = local_max;\n    letters[idx] = '\\0';\n}",
    "c_func_decompile": "void func0(char *str, int *arr, int *max, char *res) {\n    int i, j, k, max_count = 0;\n    int count[26] = {0};\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == ' ') {\n            continue;\n        }\n        count[str[i] - 'a']++;\n        if (count[str[i] - 'a'] > max_count) {\n            max_count = count[str[i] - 'a'];\n        }\n    }\n    for (i = 0; i < 26; i++) {\n        arr[i] = count[i];\n        if (count[i] == max_count) {\n            res[k++] = i + 'a';\n        }\n    }\n    *max = max_count;\n    res[k] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, int *arr, int *max, char *res) {\n    int i, j, k, max_count = 0;\n    int count[26] = {0};\n    for (i = 0; str[i] != '\\0'; i++) {\n        if (str[i] == ' ') {\n            continue;\n        }\n        count[str[i] - 'a']++;\n        if (count[str[i] - 'a'] > max_count) {\n            max_count = count[str[i] - 'a'];\n        }\n    }\n    for (i = 0; i < 26; i++) {\n        arr[i] = count[i];\n        if (count[i] == max_count) {\n            res[k++] = i + 'a';\n        }\n    }\n    *max = max_count;\n    res[k] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
    "c_func_decompile": "long func0(long *a, int n) {\n  int i;\n  long min, sum;\n  sum = a[0];\n  min = a[0];\n  for (i = 1; i < n; i++) {\n    sum = (sum < 0) ? sum + a[i] : a[i];\n    if (sum < min) min = sum;\n  }\n  return min;\n}",
    "c_func_re_decompile": "long func0(long *a, int n) {\n  int i;\n  long min, sum;\n  sum = a[0];\n  min = a[0];\n  for (i = 1; i < n; i++) {\n    sum = (sum < 0) ? sum + a[i] : a[i];\n    if (sum < min) min = sum;\n  }\n  return min;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
    "c_func_decompile": "long func0(long *a, int n) {\n  long min = a[0];\n  int i;\n  for (i = 1; i < n; i++) {\n    if (min < 0) {\n      min += a[i];\n    } else {\n      if (a[i] < min) {\n        min = a[i];\n      }\n    }\n  }\n  return min;\n}",
    "c_func_re_decompile": "long func0(long *a, int n) {\n  long min = a[0];\n  int i;\n  for (i = 1; i < n; i++) {\n    if (min < 0) {\n      min += a[i];\n    } else {\n      if (a[i] < min) {\n        min = a[i];\n      }\n    }\n  }\n  return min;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
    "c_func_decompile": "void func0(char *str, char *delim, char *str1, char *str2) {\n    int len = strlen(str);\n    char *str3 = (char *)malloc(len + 1);\n    int i, j = 0, k;\n    for (i = 0; str[i] != '\\0'; i++) {\n        char *p = delim;\n        char flag = 0;\n        while (*p != '\\0') {\n            if (str[i] == *p) {\n                flag = 1;\n                break;\n            }\n            p++;\n        }\n        if (!flag) {\n            str3[j++] = str[i];\n        }\n    }\n    str3[j] = '\\0';\n    int len2 = strlen(str3);\n    char flag2 = 1;\n    for (k = 0; k < len2 / 2; k++) {\n        if (str3[k] != str3[len2 - 1 - k]) {\n            flag2 = 0;\n            break;\n        }\n    }\n    strcpy(str1, str3);\n    strcpy(str2, flag2 ? \"YES\" : \"NO\");\n    free(str3);\n}",
    "c_func_re_decompile": "void func0(char *str, char *delim, char *str1, char *str2) {\n    int len = strlen(str);\n    char *str3 = (char *)malloc(len + 1);\n    int i, j = 0, k;\n    for (i = 0; str[i] != '\\0'; i++) {\n        char *p = delim;\n        char flag = 0;\n        while (*p != '\\0') {\n            if (str[i] == *p) {\n                flag = 1;\n                break;\n            }\n            p++;\n        }\n        if (!flag) {\n            str3[j++] = str[i];\n        }\n    }\n    str3[j] = '\\0';\n    int len2 = strlen(str3);\n    char flag2 = 1;\n    for (k = 0; k < len2 / 2; k++) {\n        if (str3[k] != str3[len2 - 1 - k]) {\n            flag2 = 0;\n            break;\n        }\n    }\n    strcpy(str1, str3);\n    strcpy(str2, flag2 ? \"YES\" : \"NO\");\n    free(str3);\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
    "c_func_decompile": "long func0(long *a, int n) {\n  long sum = a[0];\n  long min = a[0];\n  int i;\n  for (i = 1; i < n; i++) {\n    if (sum < 0)\n      sum += a[i];\n    else\n      sum = a[i];\n    if (sum < min)\n      min = sum;\n  }\n  return min;\n}",
    "c_func_re_decompile": "long func0(long *a, int n) {\n  long sum = a[0];\n  long min = a[0];\n  int i;\n  for (i = 1; i < n; i++) {\n    if (sum < 0)\n      sum += a[i];\n    else\n      sum = a[i];\n    if (sum < min)\n      min = sum;\n  }\n  return min;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
    "c_func_decompile": "char **func0(char **str, int n) {\n    char **res = malloc(n * sizeof(char *));\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j = 0; str[i][j] != '\\0'; j++) {\n            if (str[i][j] >= '0' && str[i][j] <= '9' && (str[i][j] - '0') % 2 == 1) {\n                count++;\n            }\n        }\n        res[i] = malloc(100 * sizeof(char));\n        sprintf(res[i], \"%d %d %d\", count, count, count);\n    }\n    return res;\n}",
    "c_func_re_decompile": "char **func0(char **str, int n) {\n    char **res = malloc(n * sizeof(char *));\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j = 0; str[i][j] != '\\0'; j++) {\n            if (str[i][j] >= '0' && str[i][j] <= '9' && (str[i][j] - '0') % 2 == 1) {\n                count++;\n            }\n        }\n        res[i] = malloc(100 * sizeof(char));\n        sprintf(res[i], \"%d %d %d\", count, count, count);\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(long long *nums, int size) {\n    long long current = nums[0];\n    long long min = nums[0];\n    for (int i = 1; i < size; i++) {\n        current = current < 0 ? current + nums[i] : nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
    "c_func_decompile": "long func0(long *a, int n) {\n  long sum = a[0];\n  long min = sum;\n  for (int i = 1; i < n; i++) {\n    sum += a[i];\n    if (sum < 0 && sum < min) {\n      min = sum;\n    }\n    if (sum >= 0 && sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n}",
    "c_func_re_decompile": "long func0(long *a, int n) {\n  long sum = a[0];\n  long min = sum;\n  for (int i = 1; i < n; i++) {\n    sum += a[i];\n    if (sum < 0 && sum < min) {\n      min = sum;\n    }\n    if (sum >= 0 && sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
    "c_func_decompile": "void func0(char *s1, char *s2, char *s3, char *s4) {\n    int i, j, k, len;\n    char *s;\n    s = (char *)malloc(sizeof(char) * (strlen(s1) + 1));\n    k = 0;\n    for (i = 0; s1[i] != '\\0'; i++) {\n        for (j = 0; s2[j] != '\\0'; j++) {\n            if (s1[i] == s2[j]) {\n                s[k++] = s1[i];\n                break;\n            }\n        }\n    }\n    s[k] = '\\0';\n    len = strlen(s);\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (s[i] != s[j]) {\n            strcpy(s3, s);\n            strcpy(s4, \"No\");\n            break;\n        }\n    }\n    if (i >= len / 2) {\n        strcpy(s3, s);\n        strcpy(s4, \"Yes\");\n    }\n    free(s);\n}",
    "c_func_re_decompile": "void func0(char *s1, char *s2, char *s3, char *s4) {\n    int i, j, k, len;\n    char *s;\n    s = (char *)malloc(sizeof(char) * (strlen(s1) + 1));\n    k = 0;\n    for (i = 0; s1[i] != '\\0'; i++) {\n        for (j = 0; s2[j] != '\\0'; j++) {\n            if (s1[i] == s2[j]) {\n                s[k++] = s1[i];\n                break;\n            }\n        }\n    }\n    s[k] = '\\0';\n    len = strlen(s);\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        if (s[i] != s[j]) {\n            strcpy(s3, s);\n            strcpy(s4, \"No\");\n            break;\n        }\n    }\n    if (i >= len / 2) {\n        strcpy(s3, s);\n        strcpy(s4, \"Yes\");\n    }\n    free(s);\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
    "c_func_decompile": "char **func0(char **str, int n) {\n    char **res = (char **)malloc(n * sizeof(char *));\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        char *p = str[i];\n        while (*p != '\\0') {\n            if (*p >= '0' && *p <= '9') {\n                if ((*p - '0') % 2 == 1) {\n                    count++;\n                }\n            }\n            p++;\n        }\n        res[i] = (char *)malloc(100 * sizeof(char));\n        __sprintf_chk(res[i], 1, 100, \"%d %d %d\", count, count, count);\n    }\n    return res;\n}",
    "c_func_re_decompile": "char **func0(char **str, int n) {\n    char **res = (char **)malloc(n * sizeof(char *));\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        char *p = str[i];\n        while (*p != '\\0') {\n            if (*p >= '0' && *p <= '9') {\n                if ((*p - '0') % 2 == 1) {\n                    count++;\n                }\n            }\n            p++;\n        }\n        res[i] = (char *)malloc(100 * sizeof(char));\n        __sprintf_chk(res[i], 1, 100, \"%d %d %d\", count, count, count);\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
    "c_func_decompile": "void func0(char *s1, char *s2, char *s3, char *s4) {\n    char *p, *q;\n    int i, j, k;\n    p = s1;\n    q = s2;\n    k = 0;\n    s3 = (char *)malloc(sizeof(char) * (strlen(s1) + 1));\n    while (*p != '\\0') {\n        i = 0;\n        while (*q != '\\0') {\n            if (*p == *q) {\n                s3[k] = *p;\n                k++;\n                break;\n            }\n            q++;\n        }\n        q = s2;\n        p++;\n    }\n    s3[k] = '\\0';\n    j = strlen(s3) / 2;\n    for (i = 0; i < j; i++) {\n        if (s3[i] != s3[strlen(s3) - 1 - i]) {\n            memcpy(s3, s3, strlen(s3) + 1);\n            strcpy(s4, \"no\");\n            break;\n        }\n    }\n    if (i == j) {\n        memcpy(s3, s3, strlen(s3) + 1);\n        strcpy(s4, \"yes\");\n    }\n    free(s3);\n}",
    "c_func_re_decompile": "void func0(char *s1, char *s2, char *s3, char *s4) {\n    char *p, *q;\n    int i, j, k;\n    p = s1;\n    q = s2;\n    k = 0;\n    s3 = (char *)malloc(sizeof(char) * (strlen(s1) + 1));\n    while (*p != '\\0') {\n        i = 0;\n        while (*q != '\\0') {\n            if (*p == *q) {\n                s3[k] = *p;\n                k++;\n                break;\n            }\n            q++;\n        }\n        q = s2;\n        p++;\n    }\n    s3[k] = '\\0';\n    j = strlen(s3) / 2;\n    for (i = 0; i < j; i++) {\n        if (s3[i] != s3[strlen(s3) - 1 - i]) {\n            memcpy(s3, s3, strlen(s3) + 1);\n            strcpy(s4, \"no\");\n            break;\n        }\n    }\n    if (i == j) {\n        memcpy(s3, s3, strlen(s3) + 1);\n        strcpy(s4, \"yes\");\n    }\n    free(s3);\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(int **arr, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += arr[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int **arr, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += arr[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
    "c_func_decompile": "char **func0(char **str, int n) {\n    char **res = malloc(n * sizeof(char *));\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j = 0; str[i][j] != '\\0'; j++) {\n            if (str[i][j] >= '0' && str[i][j] <= '9') {\n                if (str[i][j] % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        res[i] = malloc(100 * sizeof(char));\n        __sprintf_chk(res[i], 1, 100, \"%d %d %d\", count, count, count);\n    }\n    return res;\n}",
    "c_func_re_decompile": "char **func0(char **str, int n) {\n    char **res = malloc(n * sizeof(char *));\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j = 0; str[i][j] != '\\0'; j++) {\n            if (str[i][j] >= '0' && str[i][j] <= '9') {\n                if (str[i][j] % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        res[i] = malloc(100 * sizeof(char));\n        __sprintf_chk(res[i], 1, 100, \"%d %d %d\", count, count, count);\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar **func0(char *lst[], int size) {\n    char **out = malloc(size * sizeof(char *));\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n        for (int j = 0; lst[i][j] != '\\0'; j++) {\n            if (lst[i][j] >= '0' && lst[i][j] <= '9' && (lst[i][j] - '0') % 2 == 1)\n                sum += 1;\n        }\n        out[i] = malloc(100); // Assuming the string will not be longer than 99 characters.\n        sprintf(out[i], \"the number of odd elements %d in the string %d of the %d input.\", sum, sum, sum);\n    }\n    return out;\n}",
    "c_func_decompile": "char **func0(char **str, int n) {\n    char **res = malloc(n * sizeof(char *));\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j = 0; str[i][j] != '\\0'; j++) {\n            if (str[i][j] >= '0' && str[i][j] <= '9') {\n                if (str[i][j] % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        res[i] = malloc(100 * sizeof(char));\n        __sprintf_chk(res[i], 1, 100, \"%d %d %d\", count, count, count);\n    }\n    return res;\n}",
    "c_func_re_decompile": "char **func0(char **str, int n) {\n    char **res = malloc(n * sizeof(char *));\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j = 0; str[i][j] != '\\0'; j++) {\n            if (str[i][j] >= '0' && str[i][j] <= '9') {\n                if (str[i][j] % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        res[i] = malloc(100 * sizeof(char));\n        __sprintf_chk(res[i], 1, 100, \"%d %d %d\", count, count, count);\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(int **a, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += a[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int **a, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += a[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char *s, const char *c, char *result, char *palindrome) {\n    int len = strlen(s);\n    char *n = malloc((len + 1) * sizeof(char));\n    int ni = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        const char *temp = c;\n        bool found = false;\n        while (*temp != '\\0') {\n            if (s[i] == *temp) {\n                found = true;\n                break;\n            }\n            temp++;\n        }\n        if (!found) {\n            n[ni++] = s[i];\n        }\n    }\n    n[ni] = '\\0';\n\n    int n_len = strlen(n);\n    bool is_palindrome = true;\n    for (int i = 0; i < n_len / 2; i++) {\n        if (n[i] != n[n_len - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n\n    strcpy(result, n);\n    strcpy(palindrome, is_palindrome ? \"True\" : \"False\");\n\n    free(n);\n}",
    "c_func_decompile": "void func0(char *s1, char *s2, char *s3, char *s4) {\n    char *p, *q;\n    int i, j, k;\n    p = s1;\n    q = s2;\n    k = 0;\n    s3 = (char *)malloc(sizeof(char) * (strlen(s1) + 1));\n    while (*p != '\\0') {\n        i = 0;\n        while (*q != '\\0') {\n            if (*p == *q) {\n                s3[k] = *p;\n                k++;\n                break;\n            }\n            q++;\n        }\n        q = s2;\n        p++;\n    }\n    s3[k] = '\\0';\n    j = strlen(s3) / 2;\n    for (i = 0; i < j; i++) {\n        if (s3[i] != s3[strlen(s3) - 1 - i]) {\n            memcpy(s3, s3, strlen(s3) + 1);\n            strcpy(s4, \"no\");\n            break;\n        }\n    }\n    if (i == j) {\n        memcpy(s3, s3, strlen(s3) + 1);\n        strcpy(s4, \"yes\");\n    }\n    free(s3);\n}",
    "c_func_re_decompile": "void func0(char *s1, char *s2, char *s3, char *s4) {\n    char *p, *q;\n    int i, j, k;\n    p = s1;\n    q = s2;\n    k = 0;\n    s3 = (char *)malloc(sizeof(char) * (strlen(s1) + 1));\n    while (*p != '\\0') {\n        i = 0;\n        while (*q != '\\0') {\n            if (*p == *q) {\n                s3[k] = *p;\n                k++;\n                break;\n            }\n            q++;\n        }\n        q = s2;\n        p++;\n    }\n    s3[k] = '\\0';\n    j = strlen(s3) / 2;\n    for (i = 0; i < j; i++) {\n        if (s3[i] != s3[strlen(s3) - 1 - i]) {\n            memcpy(s3, s3, strlen(s3) + 1);\n            strcpy(s4, \"no\");\n            break;\n        }\n    }\n    if (i == j) {\n        memcpy(s3, s3, strlen(s3) + 1);\n        strcpy(s4, \"yes\");\n    }\n    free(s3);\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(int **arr, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += arr[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int **arr, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += arr[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\nint func0(int **grid, int rows, int cols, int capacity) {\n    int out = 0;\n    for (int i = 0; i < rows; i++) {\n        int sum = 0;\n        for (int j = 0; j < cols; j++)\n            sum += grid[i][j];\n        if (sum > 0) out += (sum + capacity - 1) / capacity;\n    }\n    return out;\n}",
    "c_func_decompile": "int func0(int **arr, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += arr[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int **arr, int m, int n, int k) {\n    int i, j, sum, count = 0;\n    for (i = 0; i < m; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += arr[i][j];\n        }\n        if (sum > 0) {\n            count += (sum + k - 1) / k;\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int *size) {\n    int i, j = 0, count = 0, s = 0;\n    int len = strlen(str);\n    char **ret = NULL;\n    char tmp[100] = {0};\n    if (strchr(str, ' ') || strchr(str, ',')) {\n        ret = (char **)malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; i++) {\n            if (str[i] == ' ' || str[i] == ',' || str[i] == '\\0') {\n                if (j > 0) {\n                    tmp[j] = '\\0';\n                    ret[s] = strdup(tmp);\n                    s++;\n                }\n                j = 0;\n            } else {\n                tmp[j++] = str[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; i++) {\n            if (((__ctype_b_loc()[(int) (str[i])]) & (0200000)) && (str[i] - 'a') % 2 == 1) {\n                count++;\n            }\n        }\n        ret = (char **)malloc(sizeof(char *));\n        ret[0] = (char *)malloc(sizeof(char) * 12);\n        sprintf(ret[0], \"%d\", count);\n        s = 1;\n    }\n    *size = s;\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n) {\n  int i, j, t;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      int c1 = 0, c2 = 0;\n      int x = a[i], y = a[j];\n      while (x > 0) {\n        c1 += x & 1;\n        x >>= 1;\n      }\n      x = c1;\n      c1 = 0;\n      while (y > 0) {\n        c1 += y & 1;\n        y >>= 1;\n      }\n      y = c1;\n      if (y < x || (y == x && a[j] < a[i])) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int n) {\n  int i, j, t;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      int c1 = 0, c2 = 0;\n      int x = a[i], y = a[j];\n      while (x > 0) {\n        c1 += x & 1;\n        x >>= 1;\n      }\n      x = c1;\n      c1 = 0;\n      while (y > 0) {\n        c1 += y & 1;\n        y >>= 1;\n      }\n      y = c1;\n      if (y < x || (y == x && a[j] < a[i])) {\n        t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n      }\n    }\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
    "c_func_decompile": "char* func0(char* s1, char* s2) {\n    int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n    i = strlen(s1);\n    j = strlen(s2);\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            m++;\n        } else if (s1[k] == ')') {\n            m--;\n        }\n        if (m < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            m++;\n        } else if (s2[k] == ')') {\n            m--;\n        }\n        if (m < 0) {\n            return \"NO\";\n        }\n    }\n    if (m != 0) {\n        return \"NO\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            n++;\n        } else if (s1[k] == ')') {\n            n--;\n        }\n        if (n < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            n++;\n        } else if (s2[k] == ')') {\n            n--;\n        }\n        if (n < 0) {\n            return \"NO\";\n        }\n    }\n    if (n != 0) {\n        return \"NO\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            o++;\n        } else if (s1[k] == ')') {\n            o--;\n        }\n        if (o < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            o++;\n        } else if (s2[k] == ')') {\n            o--;\n        }\n        if (o < 0) {\n            return \"NO\";\n        }\n    }\n    if (o != 0) {\n        return \"NO\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            p++;\n        } else if (s1[k] == ')') {\n            p--;\n        }\n        if (p < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            p++;\n        } else if (s2[k] == ')') {\n            p--;\n        }\n        if (p < ",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n) {\n    int i, j, t;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            int c1 = 0, c2 = 0;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 < c2 || (c1 == c2 && a[i] > a[j])) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n) {\n    int i, j, t;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            int c1 = 0, c2 = 0;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 < c2 || (c1 == c2 && a[i] > a[j])) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
    "c_func_decompile": "char* func0(char* s1, char* s2) {\n    int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n    i = strlen(s1);\n    j = strlen(s2);\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            m++;\n        } else if (s1[k] == ')') {\n            m--;\n        }\n        if (m < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            m++;\n        } else if (s2[k] == ')') {\n            m--;\n        }\n        if (m < 0) {\n            return \"NO\";\n        }\n    }\n    if (m != 0) {\n        return \"NO\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            n++;\n        } else if (s1[k] == ')') {\n            n--;\n        }\n        if (n < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            n++;\n        } else if (s2[k] == ')') {\n            n--;\n        }\n        if (n < 0) {\n            return \"NO\";\n        }\n    }\n    if (n != 0) {\n        return \"NO\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            o++;\n        } else if (s1[k] == ')') {\n            o--;\n        }\n        if (o < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            o++;\n        } else if (s2[k] == ')') {\n            o--;\n        }\n        if (o < 0) {\n            return \"NO\";\n        }\n    }\n    if (o != 0) {\n        return \"NO\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            p++;\n        } else if (s1[k] == ')') {\n            p--;\n        }\n        if (p < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            p++;\n        } else if (s2[k] == ')') {\n            p--;\n        }\n        if (p < ",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int *n) {\n    int i, j, k, len, count;\n    char **ret, *p, *q, *r, *s;\n    char buf[100] = {0};\n    len = strlen(str);\n    if (strchr(str, ' ')) {\n        ret = (char **)malloc(sizeof(char *) * (len + 1));\n        for (i = 0, j = 0, k = 0; i <= len; i++) {\n            if (str[i] == ' ' || str[i] == '\\0') {\n                for (p = str + j, q = __ctype_b_loc()->_S_istmp, r = buf, s = buf; k > 0; k--, p++) {\n                    if ((*((q) + *(p)) & (0x02)) && ((*p - 'a') % 2 == 1)) {\n                        count++;\n                    }\n                    *(r++) = *p;\n                }\n                *r = '\\0';\n                ret[i] = strdup(buf);\n                j = i + 1;\n                k = 0;\n            } else {\n                buf[k++] = str[i];\n            }\n        }\n    } else {\n        ret = (char **)malloc(sizeof(char *));\n        ret[0] = (char *)malloc(sizeof(char) * 12);\n        __sprintf_chk(ret[0], 1, 12, \"%d\", count);\n    }\n    *n = 1;\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int *n) {\n    int i, j, k, len, count;\n    char **ret, *p, *q, tmp[80] = {0};\n    len = strlen(str);\n    if (strchr(str, ' ') || strchr(str, ',')) {\n        ret = (char **)malloc(sizeof(char *) * (len + 1));\n        for (i = j = k = 0; i <= len; i++) {\n            if (str[i] == ' ' || str[i] == ',' || str[i] == '\\0') {\n                if (k) {\n                    tmp[k] = '\\0';\n                    ret[j++] = strdup(tmp);\n                    k = 0;\n                }\n            } else {\n                tmp[k++] = str[i];\n            }\n        }\n        *n = j;\n    } else {\n        count = 0;\n        for (i = 0; i < len; i++) {\n            if (((*(const _Locale_ctype_t **)(__ctype_ptr))->_Ccategory[str[i]] & 0x02) && (str[i] - 'a') % 2 == 1) {\n                count++;\n            }\n        }\n        ret = (char **)malloc(sizeof(char *));\n        ret[0] = (char *)malloc(sizeof(char) * 12);\n        __sprintf_chk(ret[0], 1, 12, \"%d\", count);\n        *n = 1;\n    }\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n) {\n    int i, j, k, t;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            int c1 = 0, c2 = 0;\n            for (k = a[i]; k > 0; k >>= 1)\n                c1 += k & 1;\n            for (k = a[j]; k > 0; k >>= 1)\n                c2 += k & 1;\n            if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n) {\n    int i, j, k, t;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            int c1 = 0, c2 = 0;\n            for (k = a[i]; k > 0; k >>= 1)\n                c1 += k & 1;\n            for (k = a[j]; k > 0; k >>= 1)\n                c2 += k & 1;\n            if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
    "c_func_decompile": "char *func0(char *str)\n{\n    static char buf[1024];\n    char *p = \"aeiou\";\n    size_t len = strlen(str);\n    int i;\n    for (i = len - 2; i > 0; i--) {\n        if (strchr(p, str[i]) && !strchr(p, str[i + 1]) && !strchr(p, str[i - 1])) {\n            buf[0] = str[i];\n            return buf;\n        }\n    }\n    buf[0] = '\\0';\n    return buf;\n}",
    "c_func_re_decompile": "char *func0(char *str)\n{\n    static char buf[1024];\n    char *p = \"aeiou\";\n    size_t len = strlen(str);\n    int i;\n    for (i = len - 2; i > 0; i--) {\n        if (strchr(p, str[i]) && !strchr(p, str[i + 1]) && !strchr(p, str[i - 1])) {\n            buf[0] = str[i];\n            return buf;\n        }\n    }\n    buf[0] = '\\0';\n    return buf;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int *arr, int size) {\n    int count_ones, x, y, temp;\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            count_ones = 0;\n            x = arr[i];\n            y = arr[j];\n            while (x > 0) {\n                count_ones += x & 1;\n                x >>= 1;\n            }\n            x = count_ones;\n            count_ones = 0;\n            while (y > 0) {\n                count_ones += y & 1;\n                y >>= 1;\n            }\n            y = count_ones;\n            if (y < x || (y == x && arr[j] < arr[i])) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n) {\n    int i, j, t;\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            int c1 = 0, c2 = 0;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n) {\n    int i, j, t;\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            int c1 = 0, c2 = 0;\n            t = a[i];\n            while (t > 0) {\n                c1 += t & 1;\n                t >>= 1;\n            }\n            t = a[j];\n            while (t > 0) {\n                c2 += t & 1;\n                t >>= 1;\n            }\n            if (c1 > c2 || (c1 == c2 && a[i] > a[j])) {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int i;\n    static char buf[100];\n    for (i = strlen(str) - 2; i > 0; i--) {\n        if (strchr(\"aeiou\", str[i]) && !strchr(\"aeiou\", str[i + 1]) && !strchr(\"aeiou\", str[i - 1])) {\n            buf[0] = str[i];\n            return buf;\n        }\n    }\n    buf[0] = 0;\n    return buf;\n}",
    "c_func_re_decompile": "char *func0(char *str) {\n    int i;\n    static char buf[100];\n    for (i = strlen(str) - 2; i > 0; i--) {\n        if (strchr(\"aeiou\", str[i]) && !strchr(\"aeiou\", str[i + 1]) && !strchr(\"aeiou\", str[i - 1])) {\n            buf[0] = str[i];\n            return buf;\n        }\n    }\n    buf[0] = 0;\n    return buf;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int i;\n    static char buf[1024];\n    for (i = strlen(str) - 2; i > 0; i--) {\n        if (strchr(\"aeiou\", str[i]) && !strchr(\"aeiou\", str[i + 1]) && !strchr(\"aeiou\", str[i - 1])) {\n            buf[0] = str[i];\n            return buf;\n        }\n    }\n    return NULL;\n}",
    "c_func_re_decompile": "char *func0(char *str) {\n    int i;\n    static char buf[1024];\n    for (i = strlen(str) - 2; i > 0; i--) {\n        if (strchr(\"aeiou\", str[i]) && !strchr(\"aeiou\", str[i + 1]) && !strchr(\"aeiou\", str[i - 1])) {\n            buf[0] = str[i];\n            return buf;\n        }\n    }\n    return NULL;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(const char *word) {\n    static char out[2] = {0};\n    const char *vowels = \"AEIOUaeiou\";\n    size_t len = strlen(word);\n    \n    for (int i = len - 2; i >= 1; i--) {\n        if (strchr(vowels, word[i]) && !strchr(vowels, word[i + 1]) && !strchr(vowels, word[i - 1])) {\n            out[0] = word[i];\n            return out;\n        }\n    }\n    out[0] = '\\0';\n    return out;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int i;\n    static char buf[1024];\n    for (i = strlen(str) - 2; i > 0; i--) {\n        if (strchr(\"aeiou\", str[i]) && !strchr(\"aeiou\", str[i + 1]) && !strchr(\"aeiou\", str[i - 1])) {\n            buf[0] = str[i];\n            return buf;\n        }\n    }\n    return NULL;\n}",
    "c_func_re_decompile": "char *func0(char *str) {\n    int i;\n    static char buf[1024];\n    for (i = strlen(str) - 2; i > 0; i--) {\n        if (strchr(\"aeiou\", str[i]) && !strchr(\"aeiou\", str[i + 1]) && !strchr(\"aeiou\", str[i - 1])) {\n            buf[0] = str[i];\n            return buf;\n        }\n    }\n    return NULL;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar **func0(const char *txt, int *returnSize) {\n    int i, j = 0, num = 0, count = 0;\n    int len = strlen(txt);\n    char **out = NULL;\n    char current[101] = {0};\n\n    if (strchr(txt, ' ') || strchr(txt, ',')) {\n        out = malloc(sizeof(char *) * (len + 1));\n        for (i = 0; i <= len; ++i) {\n            if (txt[i] == ' ' || txt[i] == ',' || txt[i] == '\\0') {\n                if (j > 0) {\n                    current[j] = '\\0';\n                    out[count] = strdup(current);\n                    count++;\n                    j = 0;\n                }\n            } else {\n                current[j++] = txt[i];\n            }\n        }\n    } else {\n        for (i = 0; i < len; ++i) {\n            if (islower(txt[i]) && ((txt[i] - 'a') % 2 == 1)) {\n                num++;\n            }\n        }\n\n        out = malloc(sizeof(char *));\n        out[0] = malloc(sizeof(char) * 12);\n        sprintf(out[0], \"%d\", num);\n        count = 1;\n    }\n\n    *returnSize = count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int *n) {\n    int i, j, k, len, count;\n    char **ret, *p, *q, tmp[80] = {0};\n    len = strlen(str);\n    if (strchr(str, ' ') || strchr(str, ',')) {\n        ret = (char **)malloc(sizeof(char *) * (len + 1));\n        for (i = j = k = 0; i <= len; i++) {\n            if (str[i] == ' ' || str[i] == ',' || str[i] == '\\0') {\n                if (k) {\n                    tmp[k] = '\\0';\n                    ret[j++] = strdup(tmp);\n                    k = 0;\n                }\n            } else {\n                tmp[k++] = str[i];\n            }\n        }\n        *n = j;\n    } else {\n        count = 0;\n        for (i = 0; i < len; i++) {\n            if (((*(const _Locale_ctype_t **)(__ctype_ptr))->_Ccategory[str[i]] & 0x02) && (str[i] - 'a') % 2 == 1) {\n                count++;\n            }\n        }\n        ret = (char **)malloc(sizeof(char *));\n        ret[0] = (char *)malloc(sizeof(char) * 12);\n        __sprintf_chk(ret[0], 1, 12, \"%d\", count);\n        *n = 1;\n    }\n    return ret;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int n, int *m) {\n    int i, j, k, len, count;\n    char *tmp, *p;\n    char **ret;\n    const unsigned short *map = __ctype_b_loc() + 256;\n    len = strlen(str);\n    tmp = malloc(len + 1);\n    j = k = count = 0;\n    for (i = 0; i < len + 1; i++) {\n        if (!(map[str[i]] & 0x0020) && str[i] != '\\0') {\n            tmp[i - j] = str[i];\n            if (strchr(\" \\t\\n\\r\", str[i]) || (map[str[i]] & 0x400)) {\n                if (count == n) {\n                    count = 0;\n                    tmp[i - j] = '\\0';\n                    ret = realloc(ret, sizeof(char *) * (++k + 1));\n                    ret[k - 1] = malloc(strlen(tmp) + 1);\n                    memcpy(ret[k - 1], tmp, strlen(tmp) + 1);\n                }\n                j = i + 1;\n                count++;\n            }\n        }\n    }\n    free(tmp);\n    *m = k;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int n, int *m) {\n    int i, j, k, len, count;\n    char *tmp, *p;\n    char **ret;\n    const unsigned short *map = __ctype_b_loc() + 256;\n    len = strlen(str);\n    tmp = malloc(len + 1);\n    j = k = count = 0;\n    for (i = 0; i < len + 1; i++) {\n        if (!(map[str[i]] & 0x0020) && str[i] != '\\0') {\n            tmp[i - j] = str[i];\n            if (strchr(\" \\t\\n\\r\", str[i]) || (map[str[i]] & 0x400)) {\n                if (count == n) {\n                    count = 0;\n                    tmp[i - j] = '\\0';\n                    ret = realloc(ret, sizeof(char *) * (++k + 1));\n                    ret[k - 1] = malloc(strlen(tmp) + 1);\n                    memcpy(ret[k - 1], tmp, strlen(tmp) + 1);\n                }\n                j = i + 1;\n                count++;\n            }\n        }\n    }\n    free(tmp);\n    *m = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\nchar **func0(const char *s, int n, int *returnSize) {\n    const char *vowels = \"aeiouAEIOU\";\n    char **out = NULL;\n    int numc = 0, word_count = 0, begin = 0;\n    size_t length = strlen(s);\n    char *current = (char *)malloc(length + 1);\n\n    for (int i = 0; i <= length; i++) {\n        if (isspace(s[i]) || s[i] == '\\0') {\n            if (numc == n) {\n                current[i - begin] = '\\0';\n                out = (char **)realloc(out, sizeof(char *) * (word_count + 1));\n                out[word_count] = (char *)malloc(strlen(current) + 1);\n                strcpy(out[word_count], current);\n                word_count++;\n            }\n            begin = i + 1;\n            numc = 0;\n        } else {\n            current[i - begin] = s[i];\n            if (strchr(vowels, s[i]) == NULL && isalpha((unsigned char)s[i])) {\n                numc++;\n            }\n        }\n    }\n    free(current);\n\n    *returnSize = word_count;\n    return out;\n}",
    "c_func_decompile": "char **func0(char *str, int n, int *size) {\n    int i, j, k, len, count;\n    char *tmp, *p;\n    char **ret;\n    const unsigned short *map = __ctype_b_loc();\n    len = strlen(str);\n    tmp = (char *)malloc(len + 1);\n    j = k = count = 0;\n    for (i = 0; i < len + 1; i++) {\n        if (!(map[str[i]] & 0x0020) && str[i] != '\\0') {\n            tmp[i - j] = str[i];\n            if (strchr(\" \\t\\n\", str[i]) || (map[str[i]] & 0x0400)) {\n                if (count == n) {\n                    count = 0;\n                    tmp[i - j] = '\\0';\n                    ret = (char **)realloc(ret, sizeof(char *) * (++k + 1));\n                    ret[k - 1] = (char *)malloc(strlen(tmp) + 1);\n                    memcpy(ret[k - 1], tmp, strlen(tmp) + 1);\n                }\n                j = i + 1;\n                count++;\n            }\n        }\n    }\n    free(tmp);\n    *size = k;\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *str, int n, int *size) {\n    int i, j, k, len, count;\n    char *tmp, *p;\n    char **ret;\n    len = strlen(str);\n    tmp = (char *)malloc(len + 1);\n    j = k = count = 0;\n    for (i = 0; i < len + 1; i++) {\n        if (!(__ctype_b_loc()[str[i]] & 0x0020) && str[i] != '\\0') {\n            tmp[i - j] = str[i];\n            if (strchr(\" \\t\\n\", str[i]) || (__ctype_b_loc()[str[i]] & 0x0400)) {\n                if (count == n) {\n                    count = 0;\n                    tmp[i - j] = '\\0';\n                    ret = (char **)realloc(ret, sizeof(char *) * (++k + 1));\n                    ret[k - 1] = (char *)malloc(strlen(tmp) + 1);\n                    memcpy(ret[k - 1], tmp, strlen(tmp) + 1);\n                }\n                j = i + 1;\n                count++;\n            }\n        }\n    }\n    free(tmp);\n    *size = k;\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
    "c_func_decompile": "void func0(int *arr, int n, int k, int *res) {\n    int i, j, tmp;\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    for (i = 0; i < k; i++) {\n        res[i] = arr[n - k + i];\n    }\n}",
    "c_func_re_decompile": "void func0(int *arr, int n, int k, int *res) {\n    int i, j, tmp;\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    for (i = 0; i < k; i++) {\n        res[i] = arr[n - k + i];\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, int m, int *b) {\n  int i, j, t;\n  for (i = 0; i < n - 1; i++)\n    for (j = 0; j < n - i - 1; j++)\n      if (a[j] > a[j + 1]) {\n        t = a[j];\n        a[j] = a[j + 1];\n        a[j + 1] = t;\n      }\n  for (i = 0; i < m; i++)\n    b[i] = a[n - m + i];\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int m, int *b) {\n  int i, j, t;\n  for (i = 0; i < n - 1; i++)\n    for (j = 0; j < n - i - 1; j++)\n      if (a[j] > a[j + 1]) {\n        t = a[j];\n        a[j] = a[j + 1];\n        a[j + 1] = t;\n      }\n  for (i = 0; i < m; i++)\n    b[i] = a[n - m + i];\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, int m, int *b) {\n    int i, j, t;\n    for (i = n - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (a[j] > a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n        }\n    }\n    for (i = 0; i < m; i++) {\n        b[i] = a[n - m + i];\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int m, int *b) {\n    int i, j, t;\n    for (i = n - 1; i > 0; i--) {\n        for (j = 0; j < i; j++) {\n            if (a[j] > a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n        }\n    }\n    for (i = 0; i < m; i++) {\n        b[i] = a[n - m + i];\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            sum += a[i];\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            sum += a[i];\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            sum += a[i];\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            sum += a[i];\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; 2*i < n; i++) {\n    if (a[2*i] % 2 == 1) {\n      sum += a[2*i];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; 2*i < n; i++) {\n    if (a[2*i] % 2 == 1) {\n      sum += a[2*i];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i * 2 < size; i++)\n        if (lst[i * 2] % 2 == 1) sum += lst[i * 2];\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            sum += a[i];\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            sum += a[i];\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
    "c_func_decompile": "void func0(int n) {\n  int i;\n  int *p = (int *)malloc((n+1)*sizeof(int));\n  p[0] = 1;\n  for (i = 1; i <= n; i++) {\n    if (i%2 == 0) {\n      p[i] = p[i-1] + (i/2) + 1;\n    } else {\n      p[i] = p[i-1] + (i/2) + 1;\n    }\n  }\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] + 99 < 199)\n      sum += a[i];\n  }\n  return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] + 99 < 199)\n      sum += a[i];\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
    "c_func_decompile": "void func0(int n) {\n  int i;\n  int *p = (int *)malloc((n + 1) * sizeof(int));\n  p[0] = 1;\n  for (i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      p[i] = p[i - 1] + (i / 2) + 1;\n    } else {\n      p[i] = p[i - 1] + (i / 2) + 1;\n    }\n  }\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= -100 && a[i] <= 99) {\n      sum += a[i];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] >= -100 && a[i] <= 99) {\n      sum += a[i];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] + 99 < 199)\n      sum += a[i];\n  }\n  return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (a[i] + 99 < 199)\n      sum += a[i];\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int arr[], int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n        if (arr[i] >= -99 && arr[i] <= 99)\n            sum += arr[i];\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 99)\n            sum += a[i];\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 99 && a[i] < 200)\n            sum += a[i];\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* arr, int arr_size, int k, int* out) {\n    for (int i = 0; i < arr_size - 1; i++) {\n        for (int j = 0; j < arr_size - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n\n    for (int i = 0; i < k; i++) {\n        out[i] = arr[arr_size - k + i];\n    }\n}",
    "c_func_decompile": "void func0(int *a, int n, int m, int *b) {\n    int i, j, t;\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (a[j] < a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n        }\n    }\n    for (i = 0; i < m; i++) {\n        b[i] = a[n - m + i];\n    }\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int m, int *b) {\n    int i, j, t;\n    for (i = 0; i < n - 1; i++) {\n        for (j = 0; j < n - i - 1; j++) {\n            if (a[j] < a[j + 1]) {\n                t = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = t;\n            }\n        }\n    }\n    for (i = 0; i < m; i++) {\n        b[i] = a[n - m + i];\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(char *str) {\n    int i, max = 0, max_now = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == '[')\n            max++;\n        if (str[i] == ']')\n            max--;\n        if (max < 0)\n            max = 0;\n        if (max > max_now)\n            max_now = max;\n        if (max < max_now - 1)\n            return 1;\n    }\n    return 0;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
    "c_func_decompile": "char* func0(char* a, char* b) {\n    int i, j, k = 0, lena = strlen(a), lenb = strlen(b), flag = 1;\n    for (i = 0; i < lena; i++) {\n        if (a[i] == '(')\n            k++;\n        if (a[i] == ')')\n            k--;\n        if (k < 0)\n            flag = 0;\n    }\n    for (i = 0; i < lenb; i++) {\n        if (b[i] == '(')\n            k++;\n        if (b[i] == ')')\n            k--;\n        if (k < 0)\n            flag = 0;\n    }\n    if (k == 0 && flag)\n        return \"YES\";\n    k = 0;\n    flag = 1;\n    for (i = 0; i < lenb; i++) {\n        if (b[i] == '(')\n            k++;\n        if (b[i] == ')')\n            k--;\n        if (k < 0)\n            flag = 0;\n    }\n    for (i = 0; i < lena; i++) {\n        if (a[i] == '(')\n            k++;\n        if (a[i] == ')')\n            k--;\n        if (k < 0)\n            flag = 0;\n    }\n    if (k == 0 && flag)\n        return \"YES\";\n    return \"NO\";\n}",
    "c_func_re_decompile": "char* func0(char* a, char* b) {\n    int i, j, k = 0, lena = strlen(a), lenb = strlen(b), flag = 1;\n    for (i = 0; i < lena; i++) {\n        if (a[i] == '(')\n            k++;\n        if (a[i] == ')')\n            k--;\n        if (k < 0)\n            flag = 0;\n    }\n    for (i = 0; i < lenb; i++) {\n        if (b[i] == '(')\n            k++;\n        if (b[i] == ')')\n            k--;\n        if (k < 0)\n            flag = 0;\n    }\n    if (k == 0 && flag)\n        return \"YES\";\n    k = 0;\n    flag = 1;\n    for (i = 0; i < lenb; i++) {\n        if (b[i] == '(')\n            k++;\n        if (b[i] == ')')\n            k--;\n        if (k < 0)\n            flag = 0;\n    }\n    for (i = 0; i < lena; i++) {\n        if (a[i] == '(')\n            k++;\n        if (a[i] == ')')\n            k--;\n        if (k < 0)\n            flag = 0;\n    }\n    if (k == 0 && flag)\n        return \"YES\";\n    return \"NO\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(char *s) {\n    int i, j, k, len, max;\n    len = strlen(s);\n    max = j = 0;\n    for (i = 0; i < len; i++) {\n        if (s[i] == '[')\n            j++;\n        else if (s[i] == ']')\n            j--;\n        if (j > max)\n            max = j;\n        if (j < 0)\n            return 0;\n    }\n    if (j != 0)\n        return 0;\n    return 1;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(char *s) {\n    int i, j, k, len;\n    len = strlen(s);\n    for (i = j = k = 0; i < len; i++) {\n        if (s[i] == '[') {\n            k++;\n            if (k > j)\n                j = k;\n        } else if (s[i] == ']') {\n            k--;\n            if (k < 0)\n                return 0;\n        }\n        if (k < j - 1)\n            return 1;\n    }\n    return 0;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
    "c_func_decompile": "void func0(int n, int *a, int *len) {\n    int i, j, k, m = 10;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= m) {\n                m *= 2;\n                a = (int *)realloc(a, m * sizeof(int));\n            }\n            a[(*len)++] = n;\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        for (j = i - 1; j >= 0 && a[j] > k; j--) {\n            a[j + 1] = a[j];\n        }\n        a[j + 1] = k;\n    }\n}",
    "c_func_re_decompile": "void func0(int n, int *a, int *len) {\n    int i, j, k, m = 10;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= m) {\n                m *= 2;\n                a = (int *)realloc(a, m * sizeof(int));\n            }\n            a[(*len)++] = n;\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        for (j = i - 1; j >= 0 && a[j] > k; j--) {\n            a[j + 1] = a[j];\n        }\n        a[j + 1] = k;\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nint func0(const char *str) {\n    int count = 0, maxcount = 0;\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == '[') count += 1;\n        if (str[i] == ']') count -= 1;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count <= maxcount - 2) return 1;\n    }\n    return 0;\n}",
    "c_func_decompile": "int func0(char *s) {\n    int i, j, k, len;\n    len = strlen(s);\n    for (i = j = k = 0; i < len; i++) {\n        if (s[i] == '[') {\n            k++;\n            if (k > j)\n                j = k;\n        } else if (s[i] == ']') {\n            k--;\n            if (k < 0)\n                return 0;\n        }\n        if (k < j - 1)\n            return 1;\n    }\n    return 0;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
    "c_func_decompile": "void func0(int n, int *a, int *len) {\n    int i, j, k, t;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= 10) {\n                a = (int *)realloc(a, sizeof(int) * (*len * 2));\n            }\n            a[(*len)++] = n;\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    for (i = 1; i < *len; i++) {\n        t = a[i];\n        for (j = i - 1; j >= 0; j--) {\n            if (a[j] > t) {\n                a[j + 1] = a[j];\n            } else {\n                break;\n            }\n        }\n        a[j + 1] = t;\n    }\n}",
    "c_func_re_decompile": "void func0(int n, int *a, int *len) {\n    int i, j, k, t;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= 10) {\n                a = (int *)realloc(a, sizeof(int) * (*len * 2));\n            }\n            a[(*len)++] = n;\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    for (i = 1; i < *len; i++) {\n        t = a[i];\n        for (j = i - 1; j >= 0; j--) {\n            if (a[j] > t) {\n                a[j + 1] = a[j];\n            } else {\n                break;\n            }\n        }\n        a[j + 1] = t;\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(int a, int b) {\n  if (b == 0) {\n    return 1;\n  }\n  return func0(a, b - 1) * a;\n}",
    "c_func_re_decompile": "int func0(int a, int b) {\n  if (b == 0) {\n    return 1;\n  }\n  return func0(a, b - 1) * a;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i-1] || (a[i] == a[i-1] && i > 1 && a[i] == a[i-2])) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i-1] || (a[i] == a[i-1] && i > 1 && a[i] == a[i-2])) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i - 1] || (i > 1 && a[i] == a[i - 1] && a[i] == a[i - 2])) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i - 1] || (i > 1 && a[i] == a[i - 1] && a[i] == a[i - 2])) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdbool.h>\n\nbool func0(const int *lst, int lst_size) {\n    if (lst_size == 0) return true;\n\n    for (int i = 1; i < lst_size; i++) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i;\n    if (n == 0)\n        return 1;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i - 1])\n            return 0;\n        if (i > 1 && a[i] == a[i - 1] && a[i] == a[i - 2])\n            return 0;\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i;\n    if (n == 0)\n        return 1;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i - 1])\n            return 0;\n        if (i > 1 && a[i] == a[i - 1] && a[i] == a[i - 2])\n            return 0;\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
    "c_func_decompile": "char *func0(int a, int b, int c, int d) {\n    int x = (a > c) ? a : c;\n    int y = (b < d) ? b : d;\n    int z = y - x;\n    if (z < 2)\n        return \"No\";\n    for (int i = 2; i * i <= z; i++)\n        if (z % i == 0)\n            return \"No\";\n    return \"Yes\";\n}",
    "c_func_re_decompile": "char *func0(int a, int b, int c, int d) {\n    int x = (a > c) ? a : c;\n    int y = (b < d) ? b : d;\n    int z = y - x;\n    if (z < 2)\n        return \"No\";\n    for (int i = 2; i * i <= z; i++)\n        if (z % i == 0)\n            return \"No\";\n    return \"Yes\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
    "c_func_decompile": "char *func0(int a, int b, int c, int d) {\n    int i, j;\n    if (a > c)\n        a = c;\n    if (b < d)\n        b = d;\n    for (i = b - a; i > 1; i--) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0)\n                return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
    "c_func_re_decompile": "char *func0(int a, int b, int c, int d) {\n    int i, j;\n    if (a > c)\n        a = c;\n    if (b < d)\n        b = d;\n    for (i = b - a; i > 1; i--) {\n        for (j = 2; j * j <= i; j++) {\n            if (i % j == 0)\n                return \"NO\";\n        }\n    }\n    return \"YES\";\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
    "c_func_decompile": "int func0(char *str) {\n    if (strlen(str) != 10) {\n        return 0;\n    }\n    for (int i = 0; i < 10; i++) {\n        if ((i == 2 || i == 5) && str[i] != '-') {\n            return 0;\n        }\n        if (str[i] < '0' || str[i] > '9') {\n            return 0;\n        }\n    }\n    char month[3], day[3], year[5];\n    month[0] = str[0];\n    month[1] = str[1];\n    month[2] = '\\0';\n    day[0] = str[3];\n    day[1] = str[4];\n    day[2] = '\\0';\n    year[0] = str[6];\n    year[1] = str[7];\n    year[2] = str[8];\n    year[3] = str[9];\n    year[4] = '\\0';\n    int m = atoi(month);\n    int d = atoi(day);\n    int y = atoi(year);\n    if (m < 1 || m > 12) {\n        return 0;\n    }\n    if (d < 1 || d > 31) {\n        return 0;\n    }\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d == 31) {\n        return 0;\n    }\n    if (m == 2 && d > 29) {\n        return 0;\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *str) {\n    if (strlen(str) != 10) {\n        return 0;\n    }\n    for (int i = 0; i < 10; i++) {\n        if ((i == 2 || i == 5) && str[i] != '-') {\n            return 0;\n        }\n        if (str[i] < '0' || str[i] > '9') {\n            return 0;\n        }\n    }\n    char month[3], day[3], year[5];\n    month[0] = str[0];\n    month[1] = str[1];\n    month[2] = '\\0';\n    day[0] = str[3];\n    day[1] = str[4];\n    day[2] = '\\0';\n    year[0] = str[6];\n    year[1] = str[7];\n    year[2] = str[8];\n    year[3] = str[9];\n    year[4] = '\\0';\n    int m = atoi(month);\n    int d = atoi(day);\n    int y = atoi(year);\n    if (m < 1 || m > 12) {\n        return 0;\n    }\n    if (d < 1 || d > 31) {\n        return 0;\n    }\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d == 31) {\n        return 0;\n    }\n    if (m == 2 && d > 29) {\n        return 0;\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
    "c_func_decompile": "void func0(int n, int *a, int *len) {\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= 10) {\n                a = (int *)realloc(a, sizeof(int) * (*len * 2));\n            }\n            a[(*len)++] = n;\n        }\n        n = n / 2;\n    }\n    for (int i = 1; i < *len; i++) {\n        int tmp = a[i];\n        int j = i - 1;\n        while (j >= 0 && a[j] > tmp) {\n            a[j + 1] = a[j];\n            j--;\n        }\n        a[j + 1] = tmp;\n    }\n}",
    "c_func_re_decompile": "void func0(int n, int *a, int *len) {\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= 10) {\n                a = (int *)realloc(a, sizeof(int) * (*len * 2));\n            }\n            a[(*len)++] = n;\n        }\n        n = n / 2 + 1;\n    }\n    for (int i = 1; i < *len; i++) {\n        int tmp = a[i];\n        int j = i - 1;\n        while (j >= 0 && a[j] > tmp) {\n            a[j + 1] = a[j];\n            j--;\n        }\n        a[j + 1] = tmp;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char *func0(const char *s1, const char *s2) {\n    int count = 0;\n    int len1 = strlen(s1);\n    int len2 = strlen(s2);\n    int i;\n    int can = 1;\n\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    count = 0;\n    can = 1;\n\n    for (i = 0; i < len2; i++) {\n        if (s2[i] == '(') count++;\n        if (s2[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    for (i = 0; i < len1; i++) {\n        if (s1[i] == '(') count++;\n        if (s1[i] == ')') count--;\n        if (count < 0) can = 0;\n    }\n    if (count == 0 && can) return \"Yes\";\n\n    return \"No\";\n}",
    "c_func_decompile": "char* func0(char* s1, char* s2) {\n    int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n    i = strlen(s1);\n    j = strlen(s2);\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    return \"YES\";\n}",
    "c_func_re_decompile": "char* func0(char* s1, char* s2) {\n    int i, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y, z;\n    i = strlen(s1);\n    j = strlen(s2);\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    o = 0;\n    p = 0;\n    q = 0;\n    r = 0;\n    t = 0;\n    u = 0;\n    v = 0;\n    w = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    for (k = 0; k < i; k++) {\n        if (s1[k] == '(') {\n            l++;\n        } else if (s1[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    for (k = 0; k < j; k++) {\n        if (s2[k] == '(') {\n            l++;\n        } else if (s2[k] == ')') {\n            l--;\n        }\n        if (l < 0) {\n            return \"NO\";\n        }\n    }\n    if (l != 0) {\n        return \"NO\";\n    }\n    return \"YES\";\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
    "c_func_decompile": "int func0(char *s) {\n  if (strlen(s) != 10)\n    return 0;\n  for (size_t i = 0; i < 10; i++) {\n    if (i == 0 && s[i] != '-')\n      return 0;\n    if (i != 0 && !(s[i] >= '0' && s[i] <= '9'))\n      return 0;\n  }\n  char month[3];\n  month[0] = s[0];\n  month[1] = s[1];\n  month[2] = '\\0';\n  char day[3];\n  day[0] = s[3];\n  day[1] = s[4];\n  day[2] = '\\0';\n  char year[5];\n  year[0] = s[6];\n  year[1] = s[7];\n  year[2] = s[8];\n  year[3] = s[9];\n  year[4] = '\\0';\n  int m = (int)strtol(month, NULL, 10);\n  int d = (int)strtol(day, NULL, 10);\n  int y = (int)strtol(year, NULL, 10);\n  if (m < 1 || m > 12 || d < 1 || d > 31)\n    return 0;\n  if (m == 2 && d > 28)\n    return 0;\n  if (m == 4 || m == 6 || m == 9 || m == 11) {\n    if (d == 31)\n      return 0;\n  }\n  return 1;\n}",
    "c_func_re_decompile": "int func0(char *s) {\n  if (strlen(s) != 10)\n    return 0;\n  for (size_t i = 0; i < 10; i++) {\n    if (i == 0 && s[i] != '-')\n      return 0;\n    if (i != 0 && !(s[i] >= '0' && s[i] <= '9'))\n      return 0;\n  }\n  char month[3];\n  month[0] = s[0];\n  month[1] = s[1];\n  month[2] = '\\0';\n  char day[3];\n  day[0] = s[3];\n  day[1] = s[4];\n  day[2] = '\\0';\n  char year[5];\n  year[0] = s[6];\n  year[1] = s[7];\n  year[2] = s[8];\n  year[3] = s[9];\n  year[4] = '\\0';\n  int m = (int)strtol(month, NULL, 10);\n  int d = (int)strtol(day, NULL, 10);\n  int y = (int)strtol(year, NULL, 10);\n  if (m < 1 || m > 12 || d < 1 || d > 31)\n    return 0;\n  if (m == 2 && d > 28)\n    return 0;\n  if (m == 4 || m == 6 || m == 9 || m == 11) {\n    if (d == 31)\n      return 0;\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
    "c_func_decompile": "char *func0(int a, int b, int c, int d) {\n    int i, j, k;\n    if (a > c)\n        c = a;\n    if (b > d)\n        d = b;\n    k = d - c;\n    if (k <= 1)\n        return \"No\";\n    if (k <= 3)\n        return \"Yes\";\n    if (k % 2 == 0)\n        return \"No\";\n    for (i = 2; i * i <= k; i++)\n        if (k % i == 0)\n            return \"No\";\n    return \"Yes\";\n}",
    "c_func_re_decompile": "char *func0(int a, int b, int c, int d) {\n    int i, j, k;\n    if (a > c)\n        c = a;\n    if (b > d)\n        d = b;\n    k = d - c;\n    if (k <= 1)\n        return \"No\";\n    if (k <= 3)\n        return \"Yes\";\n    if (k % 2 == 0)\n        return \"No\";\n    for (i = 2; i * i <= k; i++)\n        if (k % i == 0)\n            return \"No\";\n    return \"Yes\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int n, int *out, int *size) {\n    int capacity = 10;\n    *size = 1;\n    out[0] = 1;\n    \n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*size >= capacity) {\n                capacity *= 2;\n                out = (int*)realloc(out, capacity * sizeof(int));\n            }\n            out[(*size)++] = n;\n            n = n * 3 + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n\n    for (int i = 1; i < *size; i++) {\n        int key = out[i];\n        int j = i - 1;\n\n        while (j >= 0 && out[j] > key) {\n            out[j + 1] = out[j];\n            j = j - 1;\n        }\n        out[j + 1] = key;\n    }\n}",
    "c_func_decompile": "void func0(int n, int *a, int *len) {\n    int i, j, k, m = 10;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= m) {\n                m *= 2;\n                a = (int *)realloc(a, m * sizeof(int));\n            }\n            a[(*len)++] = n;\n        }\n        n = n * 3 + 1;\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        for (j = i - 1; j >= 0 && a[j] > k; j--)\n            a[j + 1] = a[j];\n        a[j + 1] = k;\n    }\n}",
    "c_func_re_decompile": "void func0(int n, int *a, int *len) {\n    int i, j, k, m = 10;\n    *len = 1;\n    a[0] = 1;\n    while (n != 1) {\n        if (n % 2 == 1) {\n            if (*len >= m) {\n                m *= 2;\n                a = (int *)realloc(a, m * sizeof(int));\n            }\n            a[(*len)++] = n;\n        }\n        n = n * 3 + 1;\n    }\n    for (i = 1; i < *len; i++) {\n        k = a[i];\n        for (j = i - 1; j >= 0 && a[j] > k; j--)\n            a[j + 1] = a[j];\n        a[j + 1] = k;\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
    "c_func_decompile": "int func0(int *arr, int len) {\n    int i, sum = 0, sign = 1;\n    if (len == 0)\n        return -32768;\n    for (i = 0; i < len; i++) {\n        sum += (arr[i] > 0 ? arr[i] : -arr[i]);\n        if (arr[i] == 0)\n            sign = 0;\n        else if (arr[i] < 0)\n            sign = -sign;\n    }\n    return sum * sign;\n}",
    "c_func_re_decompile": "int func0(int *arr, int len) {\n    int i, sum = 0, sign = 1;\n    if (len == 0)\n        return -32768;\n    for (i = 0; i < len; i++) {\n        sum += (arr[i] > 0 ? arr[i] : -arr[i]);\n        if (arr[i] == 0)\n            sign = 0;\n        else if (arr[i] < 0)\n            sign = -sign;\n    }\n    return sum * sign;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
    "c_func_decompile": "int func0(int *arr, int len) {\n    int i, sum = 0, sign = 1;\n    if (len == 0)\n        return -32768;\n    for (i = 0; i < len; i++) {\n        sum += (arr[i] > 0 ? arr[i] : -arr[i]);\n        if (arr[i] == 0)\n            sign = 0;\n        else if (arr[i] < 0)\n            sign = -sign;\n    }\n    return sum * sign;\n}",
    "c_func_re_decompile": "int func0(int *arr, int len) {\n    int i, sum = 0, sign = 1;\n    if (len == 0)\n        return -32768;\n    for (i = 0; i < len; i++) {\n        sum += (arr[i] > 0 ? arr[i] : -arr[i]);\n        if (arr[i] == 0)\n            sign = 0;\n        else if (arr[i] < 0)\n            sign = -sign;\n    }\n    return sum * sign;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n  int i, s, p;\n  if (n == 0) return -32768;\n  s = 0;\n  p = 1;\n  for (i = 0; i < n; i++) {\n    s += (a[i] >= 0 ? a[i] : -a[i]);\n    if (a[i] == 0) p = 0;\n    if (a[i] < 0) p = -p;\n  }\n  return s * p;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n  int i, s, p;\n  if (n == 0) return -32768;\n  s = 0;\n  p = 1;\n  for (i = 0; i < n; i++) {\n    s += (a[i] >= 0 ? a[i] : -a[i]);\n    if (a[i] == 0) p = 0;\n    if (a[i] < 0) p = -p;\n  }\n  return s * p;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int *arr, int arr_size) {\n    if (arr_size == 0) return -32768;\n    int sum = 0, prods = 1, i;\n    for (i = 0; i < arr_size; i++) {\n        sum += abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n    return sum * prods;\n}",
    "c_func_decompile": "int func0(int *arr, int len) {\n    int i, sum = 0, sign = 1;\n    if (len == 0)\n        return -32768;\n    for (i = 0; i < len; i++) {\n        sum += (arr[i] > 0 ? arr[i] : -arr[i]);\n        if (arr[i] == 0)\n            sign = 1;\n        else if (arr[i] < 0)\n            sign = -sign;\n    }\n    return sum * sign;\n}",
    "c_func_re_decompile": "int func0(int *arr, int len) {\n    int i, sum = 0, sign = 1;\n    if (len == 0)\n        return -32768;\n    for (i = 0; i < len; i++) {\n        sum += (arr[i] > 0 ? arr[i] : -arr[i]);\n        if (arr[i] == 0)\n            sign = 1;\n        else if (arr[i] < 0)\n            sign = -sign;\n    }\n    return sum * sign;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nconst char* func0(int interval1_start, int interval1_end, int interval2_start, int interval2_end) {\n    int inter1, inter2, l, i;\n    inter1 = interval1_start > interval2_start ? interval1_start : interval2_start;\n    inter2 = interval1_end < interval2_end ? interval1_end : interval2_end;\n    l = inter2 - inter1;\n    \n    if (l < 2) return \"NO\";\n    \n    for (i = 2; i * i <= l; i++)\n        if (l % i == 0) return \"NO\";\n    \n    return \"YES\";\n}",
    "c_func_decompile": "char *func0(int a, int b, int c, int d) {\n    int i, j, k;\n    if (a > c)\n        c = a;\n    if (b > d)\n        d = b;\n    k = d - c;\n    if (k <= 1)\n        return \"No\";\n    if (k <= 3)\n        return \"Yes\";\n    if (k % 2 == 0)\n        return \"No\";\n    for (i = 2; i * i <= k; i++)\n        if (k % i == 0)\n            return \"No\";\n    return \"Yes\";\n}",
    "c_func_re_decompile": "char *func0(int a, int b, int c, int d) {\n    int i, j, k;\n    if (a > c)\n        c = a;\n    if (b > d)\n        d = b;\n    k = d - c;\n    if (k <= 1)\n        return \"No\";\n    if (k <= 3)\n        return \"Yes\";\n    if (k % 2 == 0)\n        return \"No\";\n    for (i = 2; i * i <= k; i++)\n        if (k % i == 0)\n            return \"No\";\n    return \"Yes\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
    "c_func_decompile": "int func0(char *s) {\n    if (strlen(s) != 10)\n        return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (s[i] != '-')\n                return 0;\n        } else {\n            if (s[i] < '0' || s[i] > '9')\n                return 0;\n        }\n    }\n    char month[3], day[3], year[5];\n    month[0] = s[0];\n    month[1] = s[1];\n    month[2] = '\\0';\n    day[0] = s[3];\n    day[1] = s[4];\n    day[2] = '\\0';\n    year[0] = s[6];\n    year[1] = s[7];\n    year[2] = s[8];\n    year[3] = s[9];\n    year[4] = '\\0';\n    int m = (int) strtol(month, NULL, 10);\n    int d = (int) strtol(day, NULL, 10);\n    int y = (int) strtol(year, NULL, 10);\n    if (m < 1 || m > 12 || d < 1 || d > 31)\n        return 0;\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        if (d == 31)\n            return 0;\n    }\n    if (m == 2) {\n        if (y % 4 == 0) {\n            if (d > 29)\n                return 0;\n        } else {\n            if (d > 28)\n                return 0;\n        }\n    }\n    return 1;\n}",
    "c_func_re_decompile": "int func0(char *s) {\n    if (strlen(s) != 10)\n        return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (s[i] != '-')\n                return 0;\n        } else {\n            if (s[i] < '0' || s[i] > '9')\n                return 0;\n        }\n    }\n    char month[3], day[3], year[5];\n    month[0] = s[0];\n    month[1] = s[1];\n    month[2] = '\\0';\n    day[0] = s[3];\n    day[1] = s[4];\n    day[2] = '\\0';\n    year[0] = s[6];\n    year[1] = s[7];\n    year[2] = s[8];\n    year[3] = s[9];\n    year[4] = '\\0';\n    int m = (int) strtol(month, NULL, 10);\n    int d = (int) strtol(day, NULL, 10);\n    int y = (int) strtol(year, NULL, 10);\n    if (m < 1 || m > 12 || d < 1 || d > 31)\n        return 0;\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        if (d == 31)\n            return 0;\n    }\n    if (m == 2) {\n        if (y % 4 == 0) {\n            if (d > 29)\n                return 0;\n        } else {\n            if (d > 28)\n                return 0;\n        }\n    }\n    return 1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n) {\n  int i;\n  int *a = (int *)malloc((n+1)*sizeof(int));\n  a[0] = 1;\n  if (n == 0)\n    return a;\n  a[1] = 3;\n  for (i = 2; i <= n; i++) {\n    if (i % 2 == 0)\n      a[i] = i/2 + 1;\n    else\n      a[i] = a[i-1] + a[i-2] + 1;\n  }\n  return a;\n}",
    "c_func_re_decompile": "int *func0(int n) {\n  int i;\n  int *a = (int *)malloc((n+1)*sizeof(int));\n  a[0] = 1;\n  if (n == 0)\n    return a;\n  a[1] = 3;\n  for (i = 2; i <= n; i++) {\n    if (i % 2 == 0)\n      a[i] = i/2 + 1;\n    else\n      a[i] = a[i-1] + a[i-2] + 1 + (i+1)/2;\n  }\n  return a;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint* func0(int n) {\n    int* out = (int*)malloc((n + 1) * sizeof(int));\n    out[0] = 1;\n    if (n == 0) return out;\n    out[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) out[i] = 1 + i / 2;\n        else out[i] = out[i - 1] + out[i - 2] + 1 + (i + 1) / 2;\n    }\n    return out;\n}",
    "c_func_decompile": "int *func0(int n) {\n    int *a = malloc((n + 1) * sizeof(int));\n    a[0] = 1;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            a[i] = i / 2 + 1;\n        } else {\n            a[i] = a[i - 1] + a[i - 2] + (i + 1) / 2;\n        }\n    }\n    return a;\n}",
    "c_func_re_decompile": "int *func0(int n) {\n    int *a = malloc((n + 1) * sizeof(int));\n    a[0] = 1;\n    if (n > 0) {\n        a[1] = 3;\n    }\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            a[i] = i / 2 + 1;\n        } else {\n            a[i] = a[i - 1] + a[i - 2] + (i + 1) / 2;\n        }\n    }\n    return a;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
    "c_func_decompile": "int* func0(int** a, int n, int m, int* mm) {\n    int i, j, min, x, y;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    min = n * n;\n    if (x > 0 && a[x - 1][y] < min) {\n        min = a[x - 1][y];\n    }\n    if (x < n - 1 && a[x + 1][y] < min) {\n        min = a[x + 1][y];\n    }\n    if (y > 0 && a[x][y - 1] < min) {\n        min = a[x][y - 1];\n    }\n    if (y < n - 1 && a[x][y + 1] < min) {\n        min = a[x][y + 1];\n    }\n    *mm = m;\n    int* b = (int*)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            b[i] = 1;\n        } else {\n            b[i] = min;\n        }\n    }\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int** a, int n, int m, int* mm) {\n    int i, j, min, x, y;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    min = n * n;\n    if (x > 0 && a[x - 1][y] < min) {\n        min = a[x - 1][y];\n    }\n    if (x < n - 1 && a[x + 1][y] < min) {\n        min = a[x + 1][y];\n    }\n    if (y > 0 && a[x][y - 1] < min) {\n        min = a[x][y - 1];\n    }\n    if (y < n - 1 && a[x][y + 1] < min) {\n        min = a[x][y + 1];\n    }\n    *mm = m;\n    int* b = (int*)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            b[i] = 1;\n        } else {\n            b[i] = min;\n        }\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
    "c_func_decompile": "int* func0(int** a, int n, int m, int* retSize) {\n    int i, j, min = n * n, x = 0, y = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    if (x != 0) {\n        min = a[x - 1][y];\n    }\n    if (x != n - 1) {\n        min = min > a[x + 1][y] ? a[x + 1][y] : min;\n    }\n    if (y != 0) {\n        min = min > a[x][y - 1] ? a[x][y - 1] : min;\n    }\n    if (y != n - 1) {\n        min = min > a[x][y + 1] ? a[x][y + 1] : min;\n    }\n    *retSize = m;\n    int* ret = (int*)malloc(sizeof(int) * m);\n    for (i = 0; i < m; i++) {\n        ret[i] = i % 2 == 0 ? min : 1;\n    }\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int** a, int n, int m, int* retSize) {\n    int i, j, min = n * n, x = 0, y = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    if (x != 0) {\n        min = a[x - 1][y];\n    }\n    if (x != n - 1) {\n        min = min > a[x + 1][y] ? a[x + 1][y] : min;\n    }\n    if (y != 0) {\n        min = min > a[x][y - 1] ? a[x][y - 1] : min;\n    }\n    if (y != n - 1) {\n        min = min > a[x][y + 1] ? a[x][y + 1] : min;\n    }\n    *retSize = m;\n    int* ret = (int*)malloc(sizeof(int) * m);\n    for (i = 0; i < m; i++) {\n        ret[i] = i % 2 == 0 ? min : 1;\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint func0(const char *date) {\n    int mm, dd, yy;\n\n    if (strlen(date) != 10) return 0;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return 0;\n        } else {\n            if (date[i] < '0' || date[i] > '9') return 0;\n        }\n    }\n\n    char str_month[3] = {date[0], date[1], '\\0'};\n    char str_day[3] = {date[3], date[4], '\\0'};\n    char str_year[5] = {date[6], date[7], date[8], date[9], '\\0'};\n\n    mm = atoi(str_month);\n    dd = atoi(str_day);\n    yy = atoi(str_year);\n\n    if (mm < 1 || mm > 12) return 0;\n    if (dd < 1 || dd > 31) return 0;\n    if ((mm == 4 || mm == 6 || mm == 9 || mm == 11) && dd == 31) return 0;\n    if (mm == 2 && dd > 29) return 0;\n\n    return 1;\n}",
    "c_func_decompile": "int func0(char *s) {\n  if (strlen(s) != 10)\n    return 0;\n  if (s[0] < '0' || s[0] > '9')\n    return 0;\n  if (s[1] < '0' || s[1] > '9')\n    return 0;\n  if (s[2] != '-')\n    return 0;\n  if (s[3] < '0' || s[3] > '9')\n    return 0;\n  if (s[4] < '0' || s[4] > '9')\n    return 0;\n  if (s[5] != '-')\n    return 0;\n  if (s[6] < '0' || s[6] > '9')\n    return 0;\n  if (s[7] < '0' || s[7] > '9')\n    return 0;\n  if (s[8] < '0' || s[8] > '9')\n    return 0;\n  if (s[9] < '0' || s[9] > '9')\n    return 0;\n  char day[3] = {s[0], s[1], '\\0'};\n  char month[3] = {s[3], s[4], '\\0'};\n  char year[5] = {s[6], s[7], s[8], s[9], '\\0'};\n  int d = (int)strtol(day, NULL, 10);\n  int m = (int)strtol(month, NULL, 10);\n  int y = (int)strtol(year, NULL, 10);\n  if (d < 1 || d > 12)\n    return 0;\n  if (m < 1 || m > 31)\n    return 0;\n  if (d == 1 || d == 3 || d == 5 || d == 7 || d == 8 || d == 10 || d == 12) {\n    if (m == 31)\n      return 0;\n  }\n  if (d == 4 || d == 6 || d == 9 || d == 11) {\n    if (m > 30)\n      return 0;\n  }\n  if (d == 2) {\n    if (y % 4 == 0) {\n      if (m > 29)\n        return 0;\n    } else {\n      if (m > 28)\n        return 0;\n    }\n  }\n  return 1;\n}",
    "c_func_re_decompile": "int func0(char *s) {\n  if (strlen(s) != 10)\n    return 0;\n  if (s[0] < '0' || s[0] > '9')\n    return 0;\n  if (s[1] < '0' || s[1] > '9')\n    return 0;\n  if (s[2] != '-')\n    return 0;\n  if (s[3] < '0' || s[3] > '9')\n    return 0;\n  if (s[4] < '0' || s[4] > '9')\n    return 0;\n  if (s[5] != '-')\n    return 0;\n  if (s[6] < '0' || s[6] > '9')\n    return 0;\n  if (s[7] < '0' || s[7] > '9')\n    return 0;\n  if (s[8] < '0' || s[8] > '9')\n    return 0;\n  if (s[9] < '0' || s[9] > '9')\n    return 0;\n  char day[3] = {s[0], s[1], '\\0'};\n  char month[3] = {s[3], s[4], '\\0'};\n  char year[5] = {s[6], s[7], s[8], s[9], '\\0'};\n  int d = (int)strtol(day, NULL, 10);\n  int m = (int)strtol(month, NULL, 10);\n  int y = (int)strtol(year, NULL, 10);\n  if (d < 1 || d > 12)\n    return 0;\n  if (m < 1 || m > 31)\n    return 0;\n  if (d == 1 || d == 3 || d == 5 || d == 7 || d == 8 || d == 10 || d == 12) {\n    if (m == 31)\n      return 0;\n  }\n  if (d == 4 || d == 6 || d == 9 || d == 11) {\n    if (m > 30)\n      return 0;\n  }\n  if (d == 2) {\n    if (y % 4 == 0) {\n      if (m > 29)\n        return 0;\n    } else {\n      if (m > 28)\n        return 0;\n    }\n  }\n  return 1;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
    "c_func_decompile": "int* func0(int** a, int n, int m, int* len) {\n    int i, j, min = n * n, x = 0, y = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    if (x > 0) {\n        if (a[x - 1][y] < min) {\n            min = a[x - 1][y];\n        }\n    }\n    if (x < n - 1) {\n        if (a[x + 1][y] < min) {\n            min = a[x + 1][y];\n        }\n    }\n    if (y > 0) {\n        if (a[x][y - 1] < min) {\n            min = a[x][y - 1];\n        }\n    }\n    if (y < n - 1) {\n        if (a[x][y + 1] < min) {\n            min = a[x][y + 1];\n        }\n    }\n    *len = m;\n    int* b = (int*)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            b[i] = min;\n        } else {\n            b[i] = 1;\n        }\n    }\n    return b;\n}",
    "c_func_re_decompile": "int* func0(int** a, int n, int m, int* len) {\n    int i, j, min = n * n, x = 0, y = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    if (x > 0) {\n        if (a[x - 1][y] < min) {\n            min = a[x - 1][y];\n        }\n    }\n    if (x < n - 1) {\n        if (a[x + 1][y] < min) {\n            min = a[x + 1][y];\n        }\n    }\n    if (y > 0) {\n        if (a[x][y - 1] < min) {\n            min = a[x][y - 1];\n        }\n    }\n    if (y < n - 1) {\n        if (a[x][y + 1] < min) {\n            min = a[x][y + 1];\n        }\n    }\n    *len = m;\n    int* b = (int*)malloc(m * sizeof(int));\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            b[i] = min;\n        } else {\n            b[i] = 1;\n        }\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
    "c_func_decompile": "int func0(int n) {\n    int m = 1;\n    int flag = 0;\n    while (n > 0) {\n        int t = n % 10;\n        if (t % 2 == 1) {\n            m *= t;\n            flag = 1;\n        }\n        n /= 10;\n    }\n    if (flag == 0) {\n        m = 0;\n    }\n    return m;\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int m = 1;\n    int flag = 0;\n    while (n > 0) {\n        int t = n % 10;\n        if (t % 2 == 1) {\n            m *= t;\n            flag = 1;\n        }\n        n /= 10;\n    }\n    if (flag == 0) {\n        m = 0;\n    }\n    return m;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
    "c_func_decompile": "int func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    sum += ceil(a[i]) * ceil(a[i]);\n  return sum;\n}",
    "c_func_re_decompile": "int func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++)\n    sum += ceil(a[i]) * ceil(a[i]);\n  return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
    "c_func_decompile": "int func0(int n) {\n    int ret = 1;\n    int flag = 0;\n    while (n > 0) {\n        int m = n % 10;\n        if (m % 2 != 0) {\n            ret *= m;\n            flag = 1;\n        }\n        n /= 10;\n    }\n    if (flag) {\n        return ret;\n    } else {\n        return 0;\n    }\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int ret = 1;\n    int flag = 0;\n    while (n > 0) {\n        int m = n % 10;\n        if (m % 2 != 0) {\n            ret *= m;\n            flag = 1;\n        }\n        n /= 10;\n    }\n    if (flag) {\n        return ret;\n    } else {\n        return 0;\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
    "c_func_decompile": "int func0(int n) {\n    int result = 1;\n    int flag = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 1) {\n            flag = 1;\n            result *= digit;\n        }\n        n /= 10;\n    }\n    if (flag) {\n        return result;\n    } else {\n        return 0;\n    }\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int result = 1;\n    int flag = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 1) {\n            flag = 1;\n            result *= digit;\n        }\n        n /= 10;\n    }\n    if (flag) {\n        return result;\n    } else {\n        return 0;\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    int prod = 1, has_odd = 0, digit;\n    while (n > 0) {\n        digit = n % 10;\n        if (digit % 2 == 1) {\n            has_odd = 1;\n            prod *= digit;\n        }\n        n /= 10;\n    }\n    return has_odd ? prod : 0;\n}",
    "c_func_decompile": "int func0(int n) {\n    int result = 1;\n    int flag = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 != 0) {\n            result *= digit;\n            flag = 1;\n        }\n        n /= 10;\n    }\n    if (flag) {\n        return result;\n    } else {\n        return 0;\n    }\n}",
    "c_func_re_decompile": "int func0(int n) {\n    int result = 1;\n    int flag = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 != 0) {\n            result *= digit;\n            flag = 1;\n        }\n        n /= 10;\n    }\n    if (flag) {\n        return result;\n    } else {\n        return 0;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
    "c_func_decompile": "int func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    sum += (int)a[i] * (int)a[i];\n  }\n  return sum;\n}",
    "c_func_re_decompile": "int func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    sum += (int)a[i] * (int)a[i];\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
    "c_func_decompile": "int func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    float x = a[i];\n    int y = (int)x;\n    sum += y * y;\n  }\n  return sum;\n}",
    "c_func_re_decompile": "int func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    float x = a[i];\n    int y = (int)x;\n    sum += y * y;\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint *func0(int **grid, int N, int k, int *returnSize) {\n    int i, j, x, y, min;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = N * N;\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < N - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < N - 1 && grid[x][y + 1] < min) min = grid[x][y + 1];\n    \n    *returnSize = k;\n    int *out = (int *)malloc(k * sizeof(int));\n    for (i = 0; i < k; i++)\n        if (i % 2 == 0) out[i] = 1;\n        else out[i] = min;\n    return out;\n}",
    "c_func_decompile": "int* func0(int** a, int n, int m, int* len) {\n    int i, j, min, min_i, min_j;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                min_i = i;\n                min_j = j;\n                goto L1;\n            }\n        }\n    }\nL1: min = n * n;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] < min) {\n                min = a[i][j];\n                min_i = i;\n                min_j = j;\n            }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                a[i][j] = min;\n            }\n        }\n    }\n    *len = m;\n    int* ret = (int*)malloc(sizeof(int) * m);\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            ret[i] = 1;\n        } else {\n            ret[i] = min;\n        }\n    }\n    return ret;\n}",
    "c_func_re_decompile": "int* func0(int** a, int n, int m, int* len) {\n    int i, j, min, min_i, min_j;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                min_i = i;\n                min_j = j;\n                goto L1;\n            }\n        }\n    }\nL1: min = n * n;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] < min) {\n                min = a[i][j];\n                min_i = i;\n                min_j = j;\n            }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i][j] == 1) {\n                a[i][j] = min;\n            }\n        }\n    }\n    *len = m;\n    int* ret = (int*)malloc(sizeof(int) * m);\n    for (i = 0; i < m; i++) {\n        if (i % 2 == 0) {\n            ret[i] = 1;\n        } else {\n            ret[i] = min;\n        }\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float *lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n    }\n    return sum;\n}",
    "c_func_decompile": "int func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    float x = a[i];\n    int y = (int)x;\n    sum += y * y;\n  }\n  return sum;\n}",
    "c_func_re_decompile": "int func0(float *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    float x = a[i];\n    int y = (int)x;\n    sum += y * y;\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, max = -1;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i-1]) {\n            max = i;\n        }\n    }\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, max = -1;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i-1]) {\n            max = i;\n        }\n    }\n    return max;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
    "c_func_decompile": "int func0(char *s) {\n    int len = strlen(s);\n    if (len == 0)\n        return 0;\n    const unsigned short *ctype = __ctype_b_loc();\n    if (!(ctype[(unsigned char)s[len - 1]] & (0x04)))\n        return 0;\n    if (len == 1)\n        return 1;\n    if (ctype[(unsigned char)s[len - 2]] & (0x4000))\n        return 1;\n    return 0;\n}",
    "c_func_re_decompile": "int func0(char *s) {\n    int len = strlen(s);\n    if (len == 0)\n        return 0;\n    const unsigned short *ctype = __ctype_b_loc();\n    if (!(ctype[1][(unsigned char)s[len - 1]] & (0x04)))\n        return 0;\n    if (len == 1)\n        return 1;\n    if (ctype[1][(unsigned char)s[len - 2]] & (0x400))\n        return 1;\n    return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
    "c_func_decompile": "int func0(char *s) {\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  char c = s[len - 1];\n  if (!((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 2 * (unsigned int)(c))) & (02000)))\n    return 0;\n  if (len == 1)\n    return 1;\n  char c2 = s[len - 2];\n  if (((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 2 * (unsigned int)(c2))) & (02000)))\n    return 0;\n  return 1;\n}",
    "c_func_re_decompile": "int func0(char *s) {\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  char c = s[len - 1];\n  if (!((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1 * (unsigned int)(c))) & (02000)))\n    return 0;\n  if (len == 1)\n    return 1;\n  char c2 = s[len - 2];\n  if (((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1 * (unsigned int)(c2))) & (02000)))\n    return 0;\n  return 1;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, max = -1;\n    for (i = 1; i < n; i++) {\n        if (a[i] > a[i-1]) {\n            max = i;\n        }\n    }\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, min = -1;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i-1]) {\n            min = i;\n        }\n    }\n    return min;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, max = -1;\n    for (i = 1; i < n; i++) {\n        if (a[i] > a[i-1]) {\n            max = i;\n        }\n    }\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, min = -1;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i-1]) {\n            min = i;\n        }\n    }\n    return min;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
    "c_func_decompile": "int func0(char *s) {\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  if (!((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 1]) & (0x04)))\n    return 0;\n  if (len == 1)\n    return 0;\n  if (((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 2]) & (0x0200)))\n    return 0;\n  return 1;\n}",
    "c_func_re_decompile": "int func0(char *s) {\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  if (!((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 1]) & (0x04)))\n    return 0;\n  if (len == 1)\n    return 0;\n  if (((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 2]) & (0x0200)))\n    return 0;\n  return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint func0(const char *txt) {\n    int len = strlen(txt);\n    if (len == 0) return 0;\n    char last_char = txt[len - 1];\n    if (!isalpha((unsigned char)last_char)) return 0;\n    if (len == 1) return 1;\n    char second_last_char = txt[len - 2];\n    if (isalpha((unsigned char)second_last_char)) return 0;\n    return 1;\n}",
    "c_func_decompile": "int func0(char *s) {\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  if (!((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 1]) & (0x04)))\n    return 0;\n  if (len == 1)\n    return 0;\n  if (((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 2]) & (0x0200)))\n    return 0;\n  return 1;\n}",
    "c_func_re_decompile": "int func0(char *s) {\n  int len = strlen(s);\n  if (len == 0)\n    return 0;\n  if (!((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 1]) & (0x04)))\n    return 0;\n  if (len == 1)\n    return 0;\n  if (((*(const unsigned short *)((const unsigned short *)__ctype_b_loc() + 1) + (unsigned char)s[len - 2]) & (0x0200)))\n    return 0;\n  return 1;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int *arr, int size) {\n    int max = -1;\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] < arr[i - 1]) max = i;\n    }\n    return max;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j, max = -1;\n    for (i = 1; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (a[i] > a[i - 1] && a[i] > a[j]) {\n                max = i;\n            }\n        }\n    }\n    return max;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, max = -1;\n    for (i = 1; i < n; i++) {\n        if (a[i] > a[i - 1]) {\n            max = i;\n        }\n    }\n    return max;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n    int i, min = 0, max = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0 && (min == 0 || a[i] < min))\n            min = a[i];\n        if (a[i] > 0 && (max == 0 || a[i] > max))\n            max = a[i];\n    }\n    b[0] = min;\n    b[1] = max;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n    int i, min = 0, max = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0 && (min == 0 || a[i] < min))\n            min = a[i];\n        if (a[i] > 0 && (max == 0 || a[i] > max))\n            max = a[i];\n    }\n    b[0] = min;\n    b[1] = max;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(int x) {\n  return (x ^ 1) & (x > 7);\n}",
    "c_func_re_decompile": "int func0(int x) {\n  return (x ^ 1) & (x > 7);\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(int x) {\n  if (x % 2 == 0 && x > 7) {\n    return 1;\n  } else {\n    return 0;\n  }\n}",
    "c_func_re_decompile": "int func0(int x) {\n  if (x % 2 == 0 && x > 7) {\n    return 1;\n  } else {\n    return 0;\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n    int i, max = 0, min = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (a[i] > max || max == 0) {\n                max = a[i];\n            }\n        } else if (a[i] > 0) {\n            if (a[i] < min || min == 0) {\n                min = a[i];\n            }\n        }\n    }\n    b[0] = max;\n    b[1] = min;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n    int i, max = 0, min = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (a[i] > max || max == 0) {\n                max = a[i];\n            }\n        } else if (a[i] > 0) {\n            if (a[i] < min || min == 0) {\n                min = a[i];\n            }\n        }\n    }\n    b[0] = max;\n    b[1] = min;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n    int i, max = 0, min = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (a[i] > max || max == 0) {\n                max = a[i];\n            }\n        } else if (a[i] > 0) {\n            if (a[i] < min || min == 0) {\n                min = a[i];\n            }\n        }\n    }\n    b[0] = max;\n    b[1] = min;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n    int i, max = 0, min = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (a[i] > max || max == 0) {\n                max = a[i];\n            }\n        } else if (a[i] > 0) {\n            if (a[i] < min || min == 0) {\n                min = a[i];\n            }\n        }\n    }\n    b[0] = max;\n    b[1] = min;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(int x) {\n  return (x < 8) && (x >= 0);\n}",
    "c_func_re_decompile": "int func0(int x) {\n  return (x < 8) && (x >= 0);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n) {\n    if (n % 2 == 0 && n >= 8) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(int x) {\n  return (x < 8) && (x >= 0);\n}",
    "c_func_re_decompile": "int func0(int x) {\n  return (x < 8) && (x >= 0);\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(const int *lst, int size, int result[2]) {\n    int maxneg = 0;\n    int minpos = 0;\n    for (int i = 0; i < size; i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    result[0] = maxneg;\n    result[1] = minpos;\n}",
    "c_func_decompile": "void func0(int *a, int n, int *b) {\n    int i, max1 = 0, max2 = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (max1 < a[i]) {\n                max2 = max1;\n                max1 = a[i];\n            } else if (max2 < a[i]) {\n                max2 = a[i];\n            }\n        } else if (a[i] > 0) {\n            if (max2 < a[i] || max2 == 0) {\n                max2 = a[i];\n            }\n        }\n    }\n    b[0] = max1;\n    b[1] = max2;\n}",
    "c_func_re_decompile": "void func0(int *a, int n, int *b) {\n    int i, max1 = 0, max2 = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] < 0) {\n            if (max1 < a[i]) {\n                max2 = max1;\n                max1 = a[i];\n            } else if (max2 < a[i]) {\n                max2 = a[i];\n            }\n        } else if (a[i] > 0) {\n            if (max2 < a[i] || max2 == 0) {\n                max2 = a[i];\n            }\n        }\n    }\n    b[0] = max1;\n    b[1] = max2;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
    "c_func_decompile": "long func0(int n) {\n    int i;\n    long result = 1;\n    for (i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}",
    "c_func_re_decompile": "long func0(int n) {\n    int i;\n    long result = 1;\n    for (i = 1; i <= n; i++) {\n        result *= i;\n        result *= i;\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
    "c_func_decompile": "long func0(int n) {\n    int i;\n    long a = 1;\n    long b = 1;\n    for (i = 1; i <= n; i++) {\n        a *= i;\n        b *= a;\n    }\n    return b;\n}",
    "c_func_re_decompile": "long func0(int n) {\n    int i;\n    long a = 1;\n    long b = 1;\n    for (i = 1; i <= n; i++) {\n        a *= i;\n        b *= a;\n    }\n    return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
    "c_func_decompile": "long func0(int n) {\n    int i;\n    long result = 1;\n    for (i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}",
    "c_func_re_decompile": "long func0(int n) {\n    int i;\n    long result = 1;\n    for (i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nlong long func0(int n) {\n    long long fact = 1, bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        bfact = bfact * fact;\n    }\n    return bfact;\n}",
    "c_func_decompile": "long func0(int n) {\n    int i;\n    long result = 1;\n    for (i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}",
    "c_func_re_decompile": "long func0(int n) {\n    int i;\n    long result = 1;\n    for (i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
    "c_func_decompile": "char *func0(char *a, char *b) {\n  char *a1 = strdup(a);\n  char *b1 = strdup(b);\n  int i;\n  for (i = 0; a1[i]; i++) {\n    if (a1[i] == ',') {\n      a1[i] = '.';\n    }\n  }\n  int j;\n  for (j = 0; b1[j]; j++) {\n    if (b1[j] == ',') {\n      b1[j] = '.';\n    }\n  }\n  char *end;\n  double a2 = strtod(a1, &end);\n  if (*end) {\n    free(a1);\n    free(b1);\n    return \"error\";\n  }\n  double b2 = strtod(b1, &end);\n  if (*end) {\n    free(a1);\n    free(b1);\n    return \"error\";\n  }\n  free(a1);\n  free(b1);\n  if (a2 == b2) {\n    return \"equal\";\n  }\n  return a2 > b2 ? a : b;\n}",
    "c_func_re_decompile": "char *func0(char *a, char *b) {\n  char *a1 = strdup(a);\n  char *b1 = strdup(b);\n  int i;\n  for (i = 0; a1[i]; i++) {\n    if (a1[i] == ',') {\n      a1[i] = '.';\n    }\n  }\n  int j;\n  for (j = 0; b1[j]; j++) {\n    if (b1[j] == ',') {\n      b1[j] = '.';\n    }\n  }\n  char *end;\n  double a2 = strtod(a1, &end);\n  if (*end) {\n    free(a1);\n    free(b1);\n    return \"error\";\n  }\n  double b2 = strtod(b1, &end);\n  if (*end) {\n    free(a1);\n    free(b1);\n    return \"error\";\n  }\n  free(a1);\n  free(b1);\n  if (a2 == b2) {\n    return \"equal\";\n  }\n  return a2 > b2 ? a : b;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
    "c_func_decompile": "char *func0(char *s1, char *s2) {\n    char *s1_copy = strdup(s1);\n    char *s2_copy = strdup(s2);\n    char *p;\n    double d1, d2;\n    char *endptr;\n    for (p = s1_copy; *p; p++) {\n        if (*p == ',') {\n            *p = '.';\n        }\n    }\n    for (p = s2_copy; *p; p++) {\n        if (*p == ',') {\n            *p = '.';\n        }\n    }\n    d1 = strtod(s1_copy, &endptr);\n    if (*endptr) {\n        free(s1_copy);\n        free(s2_copy);\n        return \"error\";\n    }\n    d2 = strtod(s2_copy, &endptr);\n    if (*endptr) {\n        free(s1_copy);\n        free(s2_copy);\n        return \"error\";\n    }\n    free(s1_copy);\n    free(s2_copy);\n    if (d1 == d2) {\n        return \"equal\";\n    }\n    return d1 > d2 ? s1 : s2;\n}",
    "c_func_re_decompile": "char *func0(char *s1, char *s2) {\n    char *s1_copy = strdup(s1);\n    char *s2_copy = strdup(s2);\n    char *p;\n    double d1, d2;\n    char *endptr;\n    for (p = s1_copy; *p; p++) {\n        if (*p == ',') {\n            *p = '.';\n        }\n    }\n    for (p = s2_copy; *p; p++) {\n        if (*p == ',') {\n            *p = '.';\n        }\n    }\n    d1 = strtod(s1_copy, &endptr);\n    if (*endptr) {\n        free(s1_copy);\n        free(s2_copy);\n        return \"error\";\n    }\n    d2 = strtod(s2_copy, &endptr);\n    if (*endptr) {\n        free(s1_copy);\n        free(s2_copy);\n        return \"error\";\n    }\n    free(s1_copy);\n    free(s2_copy);\n    if (d1 == d2) {\n        return \"equal\";\n    }\n    return d1 > d2 ? s1 : s2;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
    "c_func_decompile": "char *func0(char *s1, char *s2) {\n    char *s1_copy = strdup(s1);\n    char *s2_copy = strdup(s2);\n    char *p;\n    char *endptr;\n    double d1, d2;\n\n    for (p = s1_copy; *p; p++) {\n        if (*p == ',') {\n            *p = '.';\n        }\n    }\n    for (p = s2_copy; *p; p++) {\n        if (*p == ',') {\n            *p = '.';\n        }\n    }\n\n    d1 = strtod(s1_copy, &endptr);\n    if (*endptr) {\n        free(s1_copy);\n        free(s2_copy);\n        return \"error\";\n    }\n    d2 = strtod(s2_copy, &endptr);\n    if (*endptr) {\n        free(s1_copy);\n        free(s2_copy);\n        return \"error\";\n    }\n    free(s1_copy);\n    free(s2_copy);\n    if (d1 == d2) {\n        return s1;\n    }\n    return d1 > d2 ? s1 : s2;\n}",
    "c_func_re_decompile": "char *func0(char *s1, char *s2) {\n    char *s1_copy = strdup(s1);\n    char *s2_copy = strdup(s2);\n    char *p;\n    char *endptr;\n    double d1, d2;\n\n    for (p = s1_copy; *p; p++) {\n        if (*p == ',') {\n            *p = '.';\n        }\n    }\n    for (p = s2_copy; *p; p++) {\n        if (*p == ',') {\n            *p = '.';\n        }\n    }\n\n    d1 = strtod(s1_copy, &endptr);\n    if (*endptr) {\n        free(s1_copy);\n        free(s2_copy);\n        return \"error\";\n    }\n    d2 = strtod(s2_copy, &endptr);\n    if (*endptr) {\n        free(s1_copy);\n        free(s2_copy);\n        return \"error\";\n    }\n    free(s1_copy);\n    free(s2_copy);\n    if (d1 == d2) {\n        return s1;\n    }\n    return d1 > d2 ? s1 : s2;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* func0(const char* a, const char* b) {\n    char *end;\n    char *a_modified = strdup(a);\n    char *b_modified = strdup(b);\n\n    // Replace ',' with '.' if present for atof conversion\n    for (int i = 0; a_modified[i]; ++i) if (a_modified[i] == ',') a_modified[i] = '.';\n    for (int i = 0; b_modified[i]; ++i) if (b_modified[i] == ',') b_modified[i] = '.';\n\n    double numa = strtod(a_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n    double numb = strtod(b_modified, &end);\n    if (*end) { free(a_modified); free(b_modified); return \"Invalid input\"; } // Not a valid number\n\n    free(a_modified);\n    free(b_modified);\n\n    if (numa == numb) return \"None\";\n    return numa > numb ? (char*)a : (char*)b;\n}",
    "c_func_decompile": "char *func0(char *s1, char *s2) {\n    char *s1_copy = strdup(s1);\n    char *s2_copy = strdup(s2);\n    char *endptr;\n    double d1, d2;\n    int i;\n\n    for (i = 0; s1_copy[i] != '\\0'; i++) {\n        if (s1_copy[i] == ',') {\n            s1_copy[i] = '.';\n        }\n    }\n    for (i = 0; s2_copy[i] != '\\0'; i++) {\n        if (s2_copy[i] == ',') {\n            s2_copy[i] = '.';\n        }\n    }\n\n    d1 = strtod(s1_copy, &endptr);\n    if (*endptr != '\\0') {\n        free(s1_copy);\n        free(s2_copy);\n        return \"error\";\n    }\n    d2 = strtod(s2_copy, &endptr);\n    if (*endptr != '\\0') {\n        free(s1_copy);\n        free(s2_copy);\n        return \"error\";\n    }\n    free(s1_copy);\n    free(s2_copy);\n    if (d1 == d2) {\n        return \"equal\";\n    } else if (d1 > d2) {\n        return s1;\n    } else {\n        return s2;\n    }\n}",
    "c_func_re_decompile": "char *func0(char *s1, char *s2) {\n    char *s1_copy = strdup(s1);\n    char *s2_copy = strdup(s2);\n    char *endptr;\n    double d1, d2;\n    int i;\n\n    for (i = 0; s1_copy[i] != '\\0'; i++) {\n        if (s1_copy[i] == ',') {\n            s1_copy[i] = '.';\n        }\n    }\n    for (i = 0; s2_copy[i] != '\\0'; i++) {\n        if (s2_copy[i] == ',') {\n            s2_copy[i] = '.';\n        }\n    }\n\n    d1 = strtod(s1_copy, &endptr);\n    if (*endptr != '\\0') {\n        free(s1_copy);\n        free(s2_copy);\n        return \"error\";\n    }\n    d2 = strtod(s2_copy, &endptr);\n    if (*endptr != '\\0') {\n        free(s1_copy);\n        free(s2_copy);\n        return \"error\";\n    }\n    free(s1_copy);\n    free(s2_copy);\n    if (d1 == d2) {\n        return \"equal\";\n    } else if (d1 > d2) {\n        return s1;\n    } else {\n        return s2;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
    "c_func_decompile": "int func0(int n) {\n  int i, j, k, l, m, o;\n  int *p, **q, ***r;\n  p = (int *)malloc(n * sizeof(int));\n  q = (int **)malloc((n + 1) * sizeof(int *));\n  r = (int ***)malloc((n + 1) * sizeof(int **));\n  for (i = 0; i <= n; i++) {\n    q[i] = (int *)calloc(3, sizeof(int));\n    r[i] = (int **)calloc(3, sizeof(int *));\n  }\n  q[0][0] = q[0][1] = q[0][2] = 0;\n  r[0][0][0] = r[0][0][1] = r[0][0][2] = 0;\n  for (i = 1; i <= n; i++) {\n    p[i - 1] = (i * i - i + 1) % 3;\n    q[i][0] = q[i - 1][0];\n    q[i][1] = q[i - 1][1];\n    q[i][2] = q[i - 1][2];\n    q[i][p[i - 1]]++;\n  }\n  for (i = 1; i <= 2; i++) {\n    for (j = 0; j < n; j++) {\n      r[j + 1][0] = r[j][0];\n      r[j + 1][1] = r[j][1];\n      r[j + 1][2] = r[j][2];\n      for (k = 0; k < 3; k++) {\n        r[j + 1][(j + p[j]) % 3] += r[j][k];\n      }\n    }\n    for (j = 0; j <= n; j++) {\n      r[j][0] = r[j][1];\n      r[j][1] = r[j][2];\n      r[j][2] = 0;\n    }\n  }\n  o = q[n][0];\n  for (i = 0; i <= n; i++) {\n    free(q[i]);\n    free(r[i]);\n  }\n  free(q);\n  free(r);\n  free(p);\n  return o;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      sum += a[i] * a[i];\n    } else if (i % 4 == 0) {\n      sum += a[i] * a[i] * a[i];\n    } else {\n      sum += a[i];\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n  int i, sum = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 3 == 0) {\n      sum += a[i] * a[i];\n    } else if (i % 4 == 0) {\n      sum += a[i] * a[i] * a[i];\n    } else {\n      sum += a[i];\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            sum += a[i] * a[i] * a[i];\n        } else if (i % 4 == 0) {\n            sum += a[i] * a[i];\n        } else {\n            sum += a[i];\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            sum += a[i] * a[i] * a[i];\n        } else if (i % 4 == 0) {\n            sum += a[i] * a[i];\n        } else {\n            sum += a[i];\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
    "c_func_decompile": "void func0(char *str, char *str1) {\n    int i = 0, j = 0, k = 0;\n    while (i < strlen(str)) {\n        if (str[i] == ' ') {\n            str1[j++] = '_';\n            k = 0;\n        } else if (k == 1) {\n            str1[j++] = '-';\n            str1[j++] = str[i];\n            k = 0;\n        } else if (k == 2) {\n            str1[j++] = '_';\n            str1[j++] = '_';\n        } else {\n            str1[j++] = str[i];\n        }\n        i++;\n    }\n    if (k == 1) {\n        str1[j++] = '-';\n    } else if (k == 2) {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    if (j > 0 && str1[j - 1] == '_') {\n        j--;\n    }\n    str1[j] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1) {\n    int i = 0, j = 0, k = 0;\n    while (i < strlen(str)) {\n        if (str[i] == ' ') {\n            k++;\n        } else {\n            if (k == 1) {\n                str1[j++] = '_';\n            } else if (k == 2) {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            str1[j++] = str[i];\n            k = 0;\n        }\n        i++;\n    }\n    if (k == 1) {\n        str1[j++] = '_';\n    } else if (k == 2) {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    if (j > 0 && str1[j - 1] == '_') {\n        j--;\n    }\n    str1[j] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            sum += a[i] * a[i] * a[i];\n        } else if (i % 3 == 1) {\n            sum += a[i] * a[i];\n        } else {\n            sum += a[i];\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            sum += a[i] * a[i] * a[i];\n        } else if (i % 3 == 1) {\n            sum += a[i] * a[i];\n        } else {\n            sum += a[i];\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int* lst, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            sum += a[i] * a[i] * a[i];\n        } else if (i % 4 == 0) {\n            sum += a[i] * a[i];\n        } else {\n            sum += a[i];\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            sum += a[i] * a[i] * a[i];\n        } else if (i % 4 == 0) {\n            sum += a[i] * a[i];\n        } else {\n            sum += a[i];\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
    "c_func_decompile": "void func0(char *str, char *str1) {\n    int i, j, k;\n    k = 0;\n    j = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == ' ') {\n            k++;\n        } else {\n            if (k == 1) {\n                str1[j++] = '_';\n            }\n            if (k == 2) {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            if (k > 2) {\n                str1[j++] = '-';\n            }\n            k = 0;\n            str1[j++] = str[i];\n        }\n    }\n    if (k == 1) {\n        str1[j++] = '_';\n    }\n    if (k == 2) {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    if (k > 2) {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1) {\n    int i, j, k;\n    k = 0;\n    j = 0;\n    for (i = 0; i < strlen(str); i++) {\n        if (str[i] == ' ') {\n            k++;\n        } else {\n            if (k == 1) {\n                str1[j++] = '_';\n            }\n            if (k == 2) {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            if (k > 2) {\n                str1[j++] = '-';\n            }\n            k = 0;\n            str1[j++] = str[i];\n        }\n    }\n    if (k == 1) {\n        str1[j++] = '_';\n    }\n    if (k == 2) {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    if (k > 2) {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
    "c_func_decompile": "void func0(char *str, char *str1)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            if (l == 1)\n            {\n                str1[j++] = '_';\n            }\n            else if (l == 2)\n            {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            else if (l > 2)\n            {\n                str1[j++] = '-';\n            }\n            str1[j++] = str[i];\n            l = 0;\n        }\n    }\n    if (l == 1)\n    {\n        str1[j++] = '_';\n    }\n    else if (l == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    else if (l > 2)\n    {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            if (l == 1)\n            {\n                str1[j++] = '_';\n            }\n            else if (l == 2)\n            {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            else if (l > 2)\n            {\n                str1[j++] = '-';\n            }\n            str1[j++] = str[i];\n            l = 0;\n        }\n    }\n    if (l == 1)\n    {\n        str1[j++] = '_';\n    }\n    else if (l == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    else if (l > 2)\n    {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char *text, char *out) {\n    int space_len = 0;\n    int j = 0;\n    for (int i = 0; i < strlen(text); i++) {\n        if (text[i] == ' ') {\n            space_len++;\n        } else {\n            if (space_len == 1) out[j++] = '_';\n            if (space_len == 2) out[j++] = '_', out[j++] = '_';\n            if (space_len > 2) out[j++] = '-';\n            space_len = 0;\n            out[j++] = text[i];\n        }\n    }\n    if (space_len == 1) out[j++] = '_';\n    if (space_len == 2) out[j++] = '_', out[j++] = '_';\n    if (space_len > 2) out[j++] = '-';\n    out[j] = '\\0';\n}",
    "c_func_decompile": "void func0(char *str, char *str1)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            if (l == 1)\n            {\n                str1[j++] = '_';\n            }\n            else if (l == 2)\n            {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            else if (l > 2)\n            {\n                str1[j++] = '-';\n            }\n            str1[j++] = str[i];\n            l = 0;\n        }\n    }\n    if (l == 1)\n    {\n        str1[j++] = '_';\n    }\n    else if (l == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    else if (l > 2)\n    {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *str, char *str1)\n{\n    int i, j, k, l;\n    j = 0;\n    k = 0;\n    l = 0;\n    for (i = 0; i < strlen(str); i++)\n    {\n        if (str[i] == ' ')\n        {\n            l++;\n        }\n        else\n        {\n            if (l == 1)\n            {\n                str1[j++] = '_';\n            }\n            else if (l == 2)\n            {\n                str1[j++] = '_';\n                str1[j++] = '_';\n            }\n            else if (l > 2)\n            {\n                str1[j++] = '-';\n            }\n            str1[j++] = str[i];\n            l = 0;\n        }\n    }\n    if (l == 1)\n    {\n        str1[j++] = '_';\n    }\n    else if (l == 2)\n    {\n        str1[j++] = '_';\n        str1[j++] = '_';\n    }\n    else if (l > 2)\n    {\n        str1[j++] = '-';\n    }\n    str1[j] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
    "c_func_decompile": "char *func0(char *s) {\n    int i, len, num_digits = 0, num_dots = 0;\n    char *p, c;\n    len = strlen(s);\n    if (len < 5)\n        return \"ERROR\";\n    c = s[0];\n    if (!((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')))\n        return \"ERROR\";\n    p = s + len - 4;\n    if (strcmp(p, \"@ru.is\") != 0 && strcmp(p, \"@ru.ac.za\") != 0 &&\n        strcmp(p, \"@student.ru.ac.za\") != 0)\n        return \"ERROR\";\n    for (i = 0; i < len; i++) {\n        if (s[i] >= '0' && s[i] <= '9')\n            num_digits++;\n        if (s[i] == '.')\n            num_dots++;\n    }\n    if (num_digits < 4 || num_dots != 1)\n        return \"ERROR\";\n    return \"OK\";\n}",
    "c_func_re_decompile": "char *func0(char *s) {\n    int i, len, num_digits = 0, num_dots = 0;\n    char *p, c;\n    len = strlen(s);\n    if (len < 5)\n        return \"ERROR\";\n    c = s[0];\n    if (!((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')))\n        return \"ERROR\";\n    p = s + len - 4;\n    if (strcmp(p, \"@ru.is\") != 0 && strcmp(p, \"@ru.ac.za\") != 0 &&\n        strcmp(p, \"@student.ru.ac.za\") != 0)\n        return \"ERROR\";\n    for (i = 0; i < len; i++) {\n        if (s[i] >= '0' && s[i] <= '9')\n            num_digits++;\n        if (s[i] == '.')\n            num_dots++;\n    }\n    if (num_digits < 4 || num_dots != 1)\n        return \"ERROR\";\n    return \"OK\";\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
    "c_func_decompile": "char *func0(char *s) {\n    int i, len, num, dot;\n    char *ret = \"unknown\";\n    len = strlen(s);\n    if (len < 5)\n        return ret;\n    if (s[0] < 'A' || s[0] > 'Z')\n        return ret;\n    if (s[len - 1] < '0' || s[len - 1] > '9')\n        return ret;\n    if (strcmp(s + len - 4, \"e-05\") && strcmp(s + len - 4, \"e+05\") && strcmp(s + len - 4, \"e05\"))\n        return ret;\n    num = dot = 0;\n    for (i = 0; i < len - 1; i++) {\n        if (s[i] >= '0' && s[i] <= '9')\n            num++;\n        else if (s[i] == '.')\n            dot++;\n    }\n    if (num > 3 || dot != 1)\n        return ret;\n    return \"scientific\";\n}",
    "c_func_re_decompile": "char *func0(char *s) {\n    int i, len, num, dot;\n    char *ret = \"unknown\";\n    len = strlen(s);\n    if (len < 5)\n        return ret;\n    if (s[0] >= '[' && s[0] <= '`')\n        return ret;\n    if (s[0] < 'A' || s[0] > 'Z')\n        return ret;\n    if (s[len - 1] < '0' || s[len - 1] > '9')\n        return ret;\n    if (strcmp(s + len - 4, \"e-05\") && strcmp(s + len - 4, \"e+05\") && strcmp(s + len - 4, \"e05\"))\n        return ret;\n    num = dot = 0;\n    for (i = 0; i < len - 1; i++) {\n        if (s[i] >= '0' && s[i] <= '9')\n            num++;\n        else if (s[i] == '.')\n            dot++;\n    }\n    if (num > 3 || dot != 1)\n        return ret;\n    return \"scientific\";\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
    "c_func_decompile": "char *func0(char *s) {\n    int i, len, num, dot;\n    len = strlen(s);\n    if (len < 5)\n        return \"IPv6\";\n    if (s[0] >= '0' && s[0] <= '9')\n        return \"IPv6\";\n    if (s[0] >= 'A' && s[0] <= 'Z')\n        return \"IPv6\";\n    if (s[0] >= 'a' && s[0] <= 'z')\n        return \"IPv6\";\n    if (s[0] == '[')\n        return \"IPv6\";\n    if (s[len - 1] == ']')\n        return \"IPv6\";\n    if (strcmp(s + len - 4, \":0:0\") == 0)\n        return \"IPv4\";\n    if (strcmp(s + len - 4, \":0:0:0\") == 0)\n        return \"IPv4\";\n    if (strcmp(s + len - 4, \":0:0:0:0\") == 0)\n        return \"IPv4\";\n    num = dot = 0;\n    for (i = 0; i < len; i++) {\n        if (s[i] >= '0' && s[i] <= '9')\n            num++;\n        if (s[i] == '.')\n            dot++;\n    }\n    if (num < 4)\n        return \"IPv4\";\n    if (dot == 1)\n        return \"IPv4\";\n    return \"Neither\";\n}",
    "c_func_re_decompile": "char *func0(char *s) {\n    int i, len, num, dot;\n    len = strlen(s);\n    if (len < 5)\n        return \"IPv6\";\n    if (s[0] >= '[' && s[0] <= '`')\n        return \"IPv6\";\n    if (s[0] >= 'A' && s[0] <= 'z')\n        return \"IPv6\";\n    if (strcmp(s + len - 4, \":0:0\") == 0)\n        return \"IPv4\";\n    if (strcmp(s + len - 4, \":0:0:0\") == 0)\n        return \"IPv4\";\n    if (strcmp(s + len - 4, \":0:0:0:0\") == 0)\n        return \"IPv4\";\n    num = dot = 0;\n    for (i = 0; i < len; i++) {\n        if (s[i] >= '0' && s[i] <= '9')\n            num++;\n        if (s[i] == '.')\n            dot++;\n    }\n    if (num < 4)\n        return \"IPv4\";\n    if (dot == 1)\n        return \"IPv4\";\n    return \"Neither\";\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nconst char* func0(const char* file_name) {\n    int num_digit = 0, num_dot = 0;\n    int length = strlen(file_name);\n    if (length < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 'A' || (w > 'Z' && w < 'a') || w > 'z') return \"No\";\n    const char* last = file_name + length - 4;\n    if (strcmp(last, \".txt\") != 0 && strcmp(last, \".exe\") != 0 && strcmp(last, \".dll\") != 0) return \"No\";\n    for (int i = 0; i < length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') num_digit++;\n        if (file_name[i] == '.') num_dot++;\n    }\n    if (num_digit > 3 || num_dot != 1) return \"No\";\n    return \"Yes\";\n}",
    "c_func_decompile": "char *func0(char *s) {\n  int i, len, num, dot;\n  char *ret;\n  len = strlen(s);\n  if (len < 5) {\n    return \"error\";\n  }\n  if (s[0] >= '0' && s[0] <= '9') {\n    ret = \"integer\";\n  } else if (s[0] >= 'A' && s[0] <= 'Z') {\n    ret = \"identifier\";\n  } else if (s[0] == '[' && s[len - 1] == ']') {\n    ret = \"array\";\n  } else if (s[0] == '(' && s[len - 1] == ')') {\n    ret = \"function\";\n  } else if (s[0] == '{' && s[len - 1] == '}') {\n    ret = \"block\";\n  } else {\n    return \"error\";\n  }\n  num = 0;\n  dot = 0;\n  for (i = 0; i < len; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      num++;\n    } else if (s[i] == '.') {\n      dot++;\n    } else {\n      break;\n    }\n  }\n  if (num >= 4) {\n    return \"error\";\n  }\n  if (dot == 1) {\n    return \"error\";\n  }\n  return ret;\n}",
    "c_func_re_decompile": "char *func0(char *s) {\n  int i, len, num, dot;\n  char *ret;\n  len = strlen(s);\n  if (len < 5) {\n    return \"error\";\n  }\n  if (s[0] >= '0' && s[0] <= '9') {\n    ret = \"integer\";\n  } else if (s[0] >= 'A' && s[0] <= 'Z') {\n    ret = \"identifier\";\n  } else if (s[0] == '[' && s[len - 1] == ']') {\n    ret = \"array\";\n  } else if (s[0] == '(' && s[len - 1] == ')') {\n    ret = \"function\";\n  } else if (s[0] == '{' && s[len - 1] == '}') {\n    ret = \"block\";\n  } else {\n    return \"error\";\n  }\n  num = 0;\n  dot = 0;\n  for (i = 0; i < len; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      num++;\n    } else if (s[i] == '.') {\n      dot++;\n    } else {\n      break;\n    }\n  }\n  if (num >= 4) {\n    return \"error\";\n  }\n  if (dot == 1) {\n    return \"error\";\n  }\n  return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
    "c_func_decompile": "void func0(char *s, char *t) {\n    int i, j, k, n;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (j > 1) {\n                n = j;\n                for (j = 2; j * j <= n; j++) {\n                    if (n % j == 0) {\n                        break;\n                    }\n                }\n                if (j * j > n) {\n                    if (k != 0) {\n                        t[k++] = ' ';\n                    }\n                    memcpy(t + k, s + i - j, j);\n                    k += j;\n                }\n            }\n            j = 0;\n        } else {\n            j++;\n        }\n        i++;\n    }\n    if (j > 1) {\n        n = j;\n        for (j = 2; j * j <= n; j++) {\n            if (n % j == 0) {\n                break;\n            }\n        }\n        if (j * j > n) {\n            if (k != 0) {\n                t[k++] = ' ';\n            }\n            memcpy(t + k, s + i - j, j);\n            k += j;\n        }\n    }\n    t[k] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, char *t) {\n    int i, j, k, n;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (j > 1) {\n                n = j;\n                for (j = 2; j * j <= n; j++) {\n                    if (n % j == 0) {\n                        break;\n                    }\n                }\n                if (j * j > n) {\n                    if (k != 0) {\n                        t[k++] = ' ';\n                    }\n                    memcpy(t + k, s + i - j, j);\n                    k += j;\n                }\n            }\n            j = 0;\n        } else {\n            j++;\n        }\n        i++;\n    }\n    if (j > 1) {\n        n = j;\n        for (j = 2; j * j <= n; j++) {\n            if (n % j == 0) {\n                break;\n            }\n        }\n        if (j * j > n) {\n            if (k != 0) {\n                t[k++] = ' ';\n            }\n            memcpy(t + k, s + i - j, j);\n            k += j;\n        }\n    }\n    t[k] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
    "c_func_decompile": "void func0(char *s, char *t) {\n    int i, j, k, n;\n    char flag;\n    n = 0;\n    k = 0;\n    i = 0;\n    j = 0;\n    while (s[j] != '\\0') {\n        if (s[j] != ' ') {\n            n++;\n        } else {\n            if (n > 1) {\n                flag = 1;\n                for (i = 2; i * i <= n; i++) {\n                    if (n % i == 0) {\n                        flag = 0;\n                        break;\n                    }\n                }\n            } else {\n                flag = 0;\n            }\n            if (flag) {\n                if (k > 0) {\n                    t[k++] = ' ';\n                }\n                memcpy(t + k, s + j - n, n);\n                k += n;\n            }\n            n = 0;\n        }\n        j++;\n    }\n    if (n > 1) {\n        flag = 1;\n        for (i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                flag = 0;\n                break;\n            }\n        }\n    } else {\n        flag = 0;\n    }\n    if (flag) {\n        if (k > 0) {\n            t[k++] = ' ';\n        }\n        memcpy(t + k, s + j - n, n);\n        k += n;\n    }\n    t[k] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, char *t) {\n    int i, j, k, n;\n    char flag;\n    n = 0;\n    k = 0;\n    i = 0;\n    j = 0;\n    while (s[j] != '\\0') {\n        if (s[j] != ' ') {\n            n++;\n        } else {\n            if (n > 1) {\n                flag = 1;\n                for (i = 2; i * i <= n; i++) {\n                    if (n % i == 0) {\n                        flag = 0;\n                        break;\n                    }\n                }\n            } else {\n                flag = 0;\n            }\n            if (flag) {\n                if (k > 0) {\n                    t[k++] = ' ';\n                }\n                memcpy(t + k, s + j - n, n);\n                k += n;\n            }\n            n = 0;\n        }\n        j++;\n    }\n    if (n > 1) {\n        flag = 1;\n        for (i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                flag = 0;\n                break;\n            }\n        }\n    } else {\n        flag = 0;\n    }\n    if (flag) {\n        if (k > 0) {\n            t[k++] = ' ';\n        }\n        memcpy(t + k, s + j - n, n);\n        k += n;\n    }\n    t[k] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "int func0(int* a, int n) {\n    int i, cnt = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            if (a[i] % 10 == 0 || a[i] % 10 == 5) {\n                if (a[i] % 2 == 1) {\n                    cnt++;\n                }\n            }\n        }\n    }\n    return cnt;\n}",
    "c_func_re_decompile": "int func0(int* a, int n) {\n    int i, cnt = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            if (a[i] / 10 % 2 == 1 && a[i] % 10 % 2 == 1) {\n                cnt++;\n            }\n        }\n    }\n    return cnt;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
    "c_func_decompile": "void func0(char *s, char *t) {\n    int i, j, k, n;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (j > 1) {\n                n = j;\n                for (j = 2; j * j <= n; j++) {\n                    if (n % j == 0) {\n                        break;\n                    }\n                }\n                if (j * j > n) {\n                    if (k != 0) {\n                        t[k++] = ' ';\n                    }\n                    memcpy(t + k, s + i - j, j);\n                    k += j;\n                }\n            }\n            j = 0;\n        } else {\n            j++;\n        }\n        i++;\n    }\n    if (j > 1) {\n        n = j;\n        for (j = 2; j * j <= n; j++) {\n            if (n % j == 0) {\n                break;\n            }\n        }\n        if (j * j > n) {\n            if (k != 0) {\n                t[k++] = ' ';\n            }\n            memcpy(t + k, s + i - j, j);\n            k += j;\n        }\n    }\n    t[k] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, char *t) {\n    int i, j, k, n;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (j > 1) {\n                n = j;\n                for (j = 2; j * j <= n; j++) {\n                    if (n % j == 0) {\n                        break;\n                    }\n                }\n                if (j * j > n) {\n                    if (k != 0) {\n                        t[k++] = ' ';\n                    }\n                    memcpy(t + k, s + i - j, j);\n                    k += j;\n                }\n            }\n            j = 0;\n        } else {\n            j++;\n        }\n        i++;\n    }\n    if (j > 1) {\n        n = j;\n        for (j = 2; j * j <= n; j++) {\n            if (n % j == 0) {\n                break;\n            }\n        }\n        if (j * j > n) {\n            if (k != 0) {\n                t[k++] = ' ';\n            }\n            memcpy(t + k, s + i - j, j);\n            k += j;\n        }\n    }\n    t[k] = '\\0';\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(char *a, char *b) {\n  int i, j;\n  char buf[100];\n  char buf2[100];\n  int x, y, z, w;\n  i = 0;\n  while (a[i] != '/') {\n    buf[i] = a[i];\n    i++;\n  }\n  buf[i] = '\\0';\n  x = atoi(buf);\n  j = 0;\n  i++;\n  while (a[i] != '\\0') {\n    buf2[j] = a[i];\n    i++;\n    j++;\n  }\n  buf2[j] = '\\0';\n  y = atoi(buf2);\n  i = 0;\n  while (b[i] != '/') {\n    buf[i] = b[i];\n    i++;\n  }\n  buf[i] = '\\0';\n  z = atoi(buf);\n  j = 0;\n  i++;\n  while (b[i] != '\\0') {\n    buf2[j] = b[i];\n    i++;\n    j++;\n  }\n  buf2[j] = '\\0';\n  w = atoi(buf2);\n  if (x * z % (y * w) == 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n}",
    "c_func_re_decompile": "int func0(char *a, char *b) {\n  int i, j;\n  char buf[100];\n  char buf2[100];\n  int x, y, z, w;\n  i = 0;\n  while (a[i] != '/') {\n    buf[i] = a[i];\n    i++;\n  }\n  buf[i] = '\\0';\n  x = atoi(buf);\n  j = 0;\n  i++;\n  while (a[i] != '\\0') {\n    buf2[j] = a[i];\n    i++;\n    j++;\n  }\n  buf2[j] = '\\0';\n  y = atoi(buf2);\n  i = 0;\n  while (b[i] != '/') {\n    buf[i] = b[i];\n    i++;\n  }\n  buf[i] = '\\0';\n  z = atoi(buf);\n  j = 0;\n  i++;\n  while (b[i] != '\\0') {\n    buf2[j] = b[i];\n    i++;\n    j++;\n  }\n  buf2[j] = '\\0';\n  w = atoi(buf2);\n  if (x * z % (y * w) == 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "int func0(int* arr, int size) {\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int count = 0;\n    for (i = 0; i < size; i++) {\n        if (arr[i] > 10) {\n            j = arr[i] % 10;\n            k = arr[i];\n            while (k > 9) {\n                k = k / 10;\n                l = k % 10;\n                if (l % 2 == 1 && j % 2 == 1) {\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int* arr, int size) {\n    int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    int count = 0;\n    for (i = 0; i < size; i++) {\n        if (arr[i] > 10) {\n            j = arr[i] % 10;\n            k = arr[i];\n            while (k > 9) {\n                k = k / 10;\n                l = k % 10;\n                if (l % 2 == 1 && j % 2 == 1) {\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nvoid func0(const char* sentence, char* out) {\n    int index = 0, word_len = 0;\n    int out_index = 0;\n    bool is_prime;\n    int i, j;\n\n    for (i = 0; sentence[i] != '\\0'; ++i) {\n        if (sentence[i] != ' ') {\n            word_len++;\n        } else {\n            if (word_len > 1) {\n                is_prime = true;\n                for (j = 2; j * j <= word_len; ++j) {\n                    if (word_len % j == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n            } else {\n                is_prime = false;\n            }\n\n            if (is_prime) {\n                if (out_index > 0) {\n                    out[out_index++] = ' ';\n                }\n                memcpy(out + out_index, sentence + i - word_len, word_len);\n                out_index += word_len;\n            }\n            word_len = 0;\n        }\n    }\n\n    if (word_len > 1) {\n        is_prime = true;\n        for (j = 2; j * j <= word_len; ++j) {\n            if (word_len % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    } else {\n        is_prime = false;\n    }\n\n    if (is_prime) {\n        if (out_index > 0) {\n            out[out_index++] = ' ';\n        }\n        memcpy(out + out_index, sentence + i - word_len, word_len);\n        out_index += word_len;\n    }\n\n    out[out_index] = '\\0';\n}",
    "c_func_decompile": "void func0(char *s, char *t) {\n    int i, j, k, n;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (j > 1) {\n                if (j < 4) {\n                    for (n = 2; n * n <= j; n++) {\n                        if (j % n == 0) {\n                            j = 0;\n                            break;\n                        }\n                    }\n                    if (j > 1) {\n                        if (k > 0) {\n                            t[k] = ' ';\n                            k++;\n                        }\n                        memcpy(t + k, s + i - j, j);\n                        k += j;\n                    }\n                }\n                j = 0;\n            } else {\n                j = 0;\n            }\n        } else {\n            j++;\n        }\n        i++;\n    }\n    if (j > 1) {\n        if (j < 4) {\n            for (n = 2; n * n <= j; n++) {\n                if (j % n == 0) {\n                    j = 0;\n                    break;\n                }\n            }\n            if (j > 1) {\n                if (k > 0) {\n                    t[k] = ' ';\n                    k++;\n                }\n                memcpy(t + k, s + i - j, j);\n                k += j;\n            }\n        } else {\n            if (k > 0) {\n                t[k] = ' ';\n                k++;\n            }\n            memcpy(t + k, s + i - j, j);\n            k += j;\n        }\n    }\n    t[k] = '\\0';\n}",
    "c_func_re_decompile": "void func0(char *s, char *t) {\n    int i, j, k, n;\n    i = j = k = 0;\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (j > 1) {\n                for (n = 2; n * n <= j; n++) {\n                    if (j % n == 0) {\n                        j = 0;\n                        break;\n                    }\n                }\n                if (j > 1) {\n                    if (k > 0) {\n                        t[k] = ' ';\n                        k++;\n                    }\n                    memcpy(t + k, s + i - j, j);\n                    k += j;\n                }\n            }\n            j = 0;\n        } else {\n            j++;\n        }\n        i++;\n    }\n    if (j > 1) {\n        for (n = 2; n * n <= j; n++) {\n            if (j % n == 0) {\n                j = 0;\n                break;\n            }\n        }\n        if (j > 1) {\n            if (k > 0) {\n                t[k] = ' ';\n                k++;\n            }\n            memcpy(t + k, s + i - j, j);\n            k += j;\n        }\n    }\n    t[k] = '\\0';\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(char *a, char *b) {\n  char buf[100];\n  int i = 0;\n  while (a[i] != '/') {\n    buf[i] = a[i];\n    i++;\n  }\n  buf[i] = '\\0';\n  long x = strtol(buf, NULL, 10);\n  i++;\n  int j = 0;\n  while (a[i] != '\\0') {\n    buf[j] = a[i];\n    i++;\n    j++;\n  }\n  buf[j] = '\\0';\n  long y = strtol(buf, NULL, 10);\n  i = 0;\n  while (b[i] != '/') {\n    buf[i] = b[i];\n    i++;\n  }\n  buf[i] = '\\0';\n  long m = strtol(buf, NULL, 10);\n  i++;\n  j = 0;\n  while (b[i] != '\\0') {\n    buf[j] = b[i];\n    i++;\n    j++;\n  }\n  buf[j] = '\\0';\n  long n = strtol(buf, NULL, 10);\n  return (x * m) % (y * n) == 0;\n}",
    "c_func_re_decompile": "int func0(char *a, char *b) {\n  char buf[100];\n  int i = 0;\n  while (a[i] != '/') {\n    buf[i] = a[i];\n    i++;\n  }\n  buf[i] = '\\0';\n  long x = strtol(buf, NULL, 10);\n  i++;\n  int j = 0;\n  while (a[i] != '\\0') {\n    buf[j] = a[i];\n    i++;\n    j++;\n  }\n  buf[j] = '\\0';\n  long y = strtol(buf, NULL, 10);\n  i = 0;\n  while (b[i] != '/') {\n    buf[i] = b[i];\n    i++;\n  }\n  buf[i] = '\\0';\n  long m = strtol(buf, NULL, 10);\n  i++;\n  j = 0;\n  while (b[i] != '\\0') {\n    buf[j] = b[i];\n    i++;\n    j++;\n  }\n  buf[j] = '\\0';\n  long n = strtol(buf, NULL, 10);\n  return (x * m) % (y * n) == 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, cnt = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            int t = a[i];\n            while (t > 99) {\n                t /= 10;\n            }\n            if (t % 2 != 0 && a[i] % 2 != 0) {\n                cnt++;\n            }\n        }\n    }\n    return cnt;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, cnt = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            int t = a[i];\n            while (t > 99) {\n                t /= 10;\n            }\n            if (t % 2 != 0 && a[i] % 2 != 0) {\n                cnt++;\n            }\n        }\n    }\n    return cnt;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
    "c_func_decompile": "int* func0(int* a, int n) {\n    int* b = (int*)malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) {\n        char buf[12];\n        sprintf(buf, \"%d\", a[i] > 0 ? a[i] : -a[i]);\n        int sum = 0;\n        int len = strlen(buf);\n        for (int j = 1; j < len; j++) {\n            sum += buf[j] - '0';\n        }\n        if (a[i] > 0) {\n            sum += buf[0] - '0';\n        } else {\n            sum -= buf[0] - '0';\n        }\n        b[i] = sum;\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            if (b[j - 1] > b[j]) {\n                int tmp = b[j];\n                b[j] = b[j - 1];\n                b[j - 1] = tmp;\n                tmp = a[j];\n                a[j] = a[j - 1];\n                a[j - 1] = tmp;\n            }\n        }\n    }\n    free(b);\n    return a;\n}",
    "c_func_re_decompile": "int* func0(int* a, int n) {\n    int* b = (int*)malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) {\n        char buf[12];\n        sprintf(buf, \"%d\", a[i] > 0 ? a[i] : -a[i]);\n        int sum = 0;\n        int len = strlen(buf);\n        for (int j = 1; j < len; j++) {\n            sum += buf[j] - '0';\n        }\n        if (a[i] > 0) {\n            sum += buf[0] - '0';\n        } else {\n            sum -= buf[0] - '0';\n        }\n        b[i] = sum;\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            if (b[j - 1] > b[j]) {\n                int tmp = b[j];\n                b[j] = b[j - 1];\n                b[j - 1] = tmp;\n                tmp = a[j];\n                a[j] = a[j - 1];\n                a[j - 1] = tmp;\n            }\n        }\n    }\n    free(b);\n    return a;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(char *a, char *b) {\n  int i = 0;\n  char buf1[128];\n  char buf2[128];\n  char buf3[128];\n  while (a[i] != '/') {\n    buf1[i] = a[i];\n    i++;\n  }\n  buf1[i] = '\\0';\n  long int num1 = strtol(buf1, NULL, 10);\n  i++;\n  int j = 0;\n  while (a[i] != '\\0') {\n    buf2[j] = a[i];\n    i++;\n    j++;\n  }\n  buf2[j] = '\\0';\n  long int num2 = strtol(buf2, NULL, 10);\n  i = 0;\n  j = 0;\n  while (b[i] != '/') {\n    buf1[i] = b[i];\n    i++;\n  }\n  buf1[i] = '\\0';\n  long int num3 = strtol(buf1, NULL, 10);\n  i++;\n  while (b[i] != '\\0') {\n    buf2[j] = b[i];\n    i++;\n    j++;\n  }\n  buf2[j] = '\\0';\n  long int num4 = strtol(buf2, NULL, 10);\n  if (num1 * num4 % (num2 * num3) == 0)\n    return 1;\n  else\n    return 0;\n}",
    "c_func_re_decompile": "int func0(char *a, char *b) {\n  int i = 0;\n  char buf1[128];\n  char buf2[128];\n  char buf3[128];\n  while (a[i] != '/') {\n    buf1[i] = a[i];\n    i++;\n  }\n  buf1[i] = '\\0';\n  int num1 = strtol(buf1, NULL, 10);\n  i++;\n  int j = 0;\n  while (a[i] != '\\0') {\n    buf2[j] = a[i];\n    i++;\n    j++;\n  }\n  buf2[j] = '\\0';\n  int num2 = strtol(buf2, NULL, 10);\n  i = 0;\n  j = 0;\n  while (b[i] != '/') {\n    buf1[i] = b[i];\n    i++;\n  }\n  buf1[i] = '\\0';\n  int num3 = strtol(buf1, NULL, 10);\n  i++;\n  while (b[i] != '\\0') {\n    buf2[j] = b[i];\n    i++;\n    j++;\n  }\n  buf2[j] = '\\0';\n  int num4 = strtol(buf2, NULL, 10);\n  if (num1 * num4 % (num2 * num3) == 0)\n    return 1;\n  else\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(const char* x, const char* n){\n    int a, b, c, d, i, j;\n    char num[101], den[101];\n\n    for (i = 0; x[i] != '/'; i++) {\n        num[i] = x[i];\n    }\n    num[i] = '\\0';\n    a = atoi(num);\n\n    for (j = 0, i = i + 1; x[i] != '\\0'; i++, j++) {\n        den[j] = x[i];\n    }\n    den[j] = '\\0';\n    b = atoi(den);\n\n    for (i = 0; n[i] != '/'; i++) {\n        num[i] = n[i];\n    }\n    num[i] = '\\0';\n    c = atoi(num);\n\n    for (j = 0, i = i + 1; n[i] != '\\0'; i++, j++) {\n        den[j] = n[i];\n    }\n    den[j] = '\\0';\n    d = atoi(den);\n\n    if ((a * c) % (b * d) == 0) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(char *a, char *b) {\n  int i = 0;\n  char buf1[128];\n  char buf2[128];\n  char buf3[128];\n  while (a[i] != '/') {\n    buf1[i] = a[i];\n    i++;\n  }\n  buf1[i] = '\\0';\n  long int num1 = strtol(buf1, NULL, 10);\n  i++;\n  int j = 0;\n  while (a[i] != '\\0') {\n    buf2[j] = a[i];\n    i++;\n    j++;\n  }\n  buf2[j] = '\\0';\n  long int num2 = strtol(buf2, NULL, 10);\n  i = 0;\n  j = 0;\n  while (b[i] != '/') {\n    buf1[i] = b[i];\n    i++;\n  }\n  buf1[i] = '\\0';\n  long int num3 = strtol(buf1, NULL, 10);\n  i++;\n  while (b[i] != '\\0') {\n    buf2[j] = b[i];\n    i++;\n    j++;\n  }\n  buf2[j] = '\\0';\n  long int num4 = strtol(buf2, NULL, 10);\n  if (num1 * num4 % (num2 * num3) == 0)\n    return 1;\n  else\n    return 0;\n}",
    "c_func_re_decompile": "int func0(char *a, char *b) {\n  int i = 0;\n  char buf1[128];\n  char buf2[128];\n  char buf3[128];\n  while (a[i] != '/') {\n    buf1[i] = a[i];\n    i++;\n  }\n  buf1[i] = '\\0';\n  int num1 = strtol(buf1, NULL, 10);\n  i++;\n  int j = 0;\n  while (a[i] != '\\0') {\n    buf2[j] = a[i];\n    i++;\n    j++;\n  }\n  buf2[j] = '\\0';\n  int num2 = strtol(buf2, NULL, 10);\n  i = 0;\n  j = 0;\n  while (b[i] != '/') {\n    buf1[i] = b[i];\n    i++;\n  }\n  buf1[i] = '\\0';\n  int num3 = strtol(buf1, NULL, 10);\n  i++;\n  while (b[i] != '\\0') {\n    buf2[j] = b[i];\n    i++;\n    j++;\n  }\n  buf2[j] = '\\0';\n  int num4 = strtol(buf2, NULL, 10);\n  if (num1 * num4 % (num2 * num3) == 0)\n    return 1;\n  else\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int nums[], int size) {\n    int num = 0;\n    for (int i = 0; i < size; i++) {\n        if (nums[i] > 10) {\n            int first, last;\n            last = nums[i] % 10;\n            int n = nums[i];\n            while (n >= 10) {\n                n /= 10;\n            }\n            first = n;\n            if (first % 2 == 1 && last % 2 == 1) {\n                num += 1;\n            }\n        }\n    }\n    return num;\n}",
    "c_func_decompile": "int func0(int *a, int n) {\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            j = a[i];\n            while (j > 99) {\n                j /= 10;\n            }\n            if (j % 2 != 0 && a[i] % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
    "c_func_re_decompile": "int func0(int *a, int n) {\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        if (a[i] > 10) {\n            j = a[i];\n            while (j > 99) {\n                j /= 10;\n            }\n            if (j % 2 != 0 && a[i] % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
    "c_func_decompile": "int* func0(int* array, int len) {\n    int* new_array = (int*)malloc(len * sizeof(int));\n    int i, j;\n    for (i = 0; i < len; i++) {\n        char str[12];\n        int num = array[i] > 0 ? array[i] : -array[i];\n        __sprintf_chk(str, 1, 12, \"%d\", num);\n        int len = strlen(str);\n        int sum = 0;\n        for (j = 1; j < len; j++) {\n            sum += str[j] - '0';\n        }\n        if (array[i] > 0) {\n            new_array[i] = sum + str[0] - '0';\n        } else {\n            new_array[i] = -(sum + str[0] - '0');\n        }\n    }\n    for (i = 0; i < len; i++) {\n        for (j = 1; j < len; j++) {\n            if (new_array[j - 1] > new_array[j]) {\n                int tmp = new_array[j - 1];\n                new_array[j - 1] = new_array[j];\n                new_array[j] = tmp;\n                tmp = array[j - 1];\n                array[j - 1] = array[j];\n                array[j] = tmp;\n            }\n        }\n    }\n    free(new_array);\n    return array;\n}",
    "c_func_re_decompile": "int* func0(int* array, int len) {\n    int* new_array = (int*)malloc(len * sizeof(int));\n    int i, j;\n    for (i = 0; i < len; i++) {\n        char str[12];\n        int num = array[i] > 0 ? array[i] : -array[i];\n        __sprintf_chk(str, 1, 12, \"%d\", num);\n        int len = strlen(str);\n        int sum = 0;\n        for (j = 1; j < len; j++) {\n            sum += str[j] - '0';\n        }\n        if (array[i] > 0) {\n            new_array[i] = sum + str[0] - '0';\n        } else {\n            new_array[i] = -(sum + str[0] - '0');\n        }\n    }\n    for (i = 0; i < len; i++) {\n        for (j = 1; j < len; j++) {\n            if (new_array[j - 1] > new_array[j]) {\n                int tmp = new_array[j - 1];\n                new_array[j - 1] = new_array[j];\n                new_array[j] = tmp;\n                tmp = array[j - 1];\n                array[j - 1] = array[j];\n                array[j] = tmp;\n            }\n        }\n    }\n    free(new_array);\n    return array;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
    "c_func_decompile": "int* func0(int* nums, int numsSize) {\n    int* res = (int*)malloc(sizeof(int) * numsSize);\n    for (int i = 0; i < numsSize; i++) {\n        char buf[12];\n        int n = nums[i] > 0 ? nums[i] : -nums[i];\n        __sprintf_chk(buf, 1, 12, \"%d\", n);\n        int len = strlen(buf);\n        int sum = 0;\n        for (int j = 0; j < len - 1; j++) {\n            sum += buf[j] - '0';\n        }\n        if (nums[i] > 0) {\n            res[i] = sum + (buf[0] - '0');\n        } else {\n            res[i] = sum - (buf[0] - '0');\n        }\n    }\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (res[j] < res[i]) {\n                int tmp = res[j];\n                res[j] = res[i];\n                res[i] = tmp;\n                int tmp2 = nums[j];\n                nums[j] = nums[i];\n                nums[i] = tmp2;\n            }\n        }\n    }\n    free(res);\n    return nums;\n}",
    "c_func_re_decompile": "int* func0(int* nums, int numsSize) {\n    int* res = (int*)malloc(sizeof(int) * numsSize);\n    for (int i = 0; i < numsSize; i++) {\n        char buf[12];\n        int n = nums[i] > 0 ? nums[i] : -nums[i];\n        __sprintf_chk(buf, 1, 12, \"%d\", n);\n        int len = strlen(buf);\n        int sum = 0;\n        for (int j = 0; j < len - 1; j++) {\n            sum += buf[j] - '0';\n        }\n        if (nums[i] > 0) {\n            res[i] = sum + (buf[0] - '0');\n        } else {\n            res[i] = sum - (buf[0] - '0');\n        }\n    }\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (res[j] < res[i]) {\n                int tmp = res[j];\n                res[j] = res[i];\n                res[i] = tmp;\n                int tmp2 = nums[j];\n                nums[j] = nums[i];\n                nums[i] = tmp2;\n            }\n        }\n    }\n    free(res);\n    return nums;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint* func0(int nums[], int size) {\n    int* sumdigit = (int*)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        char w[12]; // Assuming the integer won't exceed the length of an int in string form.\n        sprintf(w, \"%d\", abs(nums[i]));\n        int sum = 0, length = strlen(w);\n        for (int j = 1; j < length; j++)\n            sum += w[j] - '0';\n        if (nums[i] > 0) sum += w[0] - '0';\n        else sum -= w[0] - '0';\n        sumdigit[i] = sum;\n    }\n    int m;\n    for (int i = 0; i < size; i++)\n        for (int j = 1; j < size; j++)\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                m = sumdigit[j]; sumdigit[j] = sumdigit[j - 1]; sumdigit[j - 1] = m;\n                m = nums[j]; nums[j] = nums[j - 1]; nums[j - 1] = m;\n            }\n    \n    free(sumdigit);\n    return nums;\n}",
    "c_func_decompile": "int* func0(int* array, int size) {\n    int* new_array = (int*)malloc(size * sizeof(int));\n    int i, j;\n    for (i = 0; i < size; i++) {\n        char str[12];\n        size_t len;\n        int num = array[i];\n        if (num < 0) {\n            num = -num;\n        }\n        __sprintf_chk(str, 1, 12, \"%d\", num);\n        len = strlen(str);\n        int sum = 0;\n        for (j = 0; j < len; j++) {\n            sum += str[j] - '0';\n        }\n        if (array[i] > 0) {\n            new_array[i] = sum;\n        } else {\n            new_array[i] = -sum;\n        }\n    }\n    for (i = 0; i < size; i++) {\n        for (j = 0; j < size - 1; j++) {\n            if (new_array[j] > new_array[j + 1]) {\n                int temp = new_array[j];\n                new_array[j] = new_array[j + 1];\n                new_array[j + 1] = temp;\n                temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n            }\n        }\n    }\n    free(new_array);\n    return array;\n}",
    "c_func_re_decompile": "int* func0(int* array, int size) {\n    int* new_array = (int*)malloc(size * sizeof(int));\n    int i, j;\n    for (i = 0; i < size; i++) {\n        char str[12];\n        size_t len;\n        int num = array[i];\n        if (num < 0) {\n            num = -num;\n        }\n        __sprintf_chk(str, 1, 12, \"%d\", num);\n        len = strlen(str);\n        int sum = 0;\n        for (j = 0; j < len; j++) {\n            sum += str[j] - '0';\n        }\n        if (array[i] > 0) {\n            new_array[i] = sum;\n        } else {\n            new_array[i] = -sum;\n        }\n    }\n    for (i = 0; i < size; i++) {\n        for (j = 0; j < size - 1; j++) {\n            if (new_array[j] > new_array[j + 1]) {\n                int temp = new_array[j];\n                new_array[j] = new_array[j + 1];\n                new_array[j + 1] = temp;\n                temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n            }\n        }\n    }\n    free(new_array);\n    return array;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
    "c_func_decompile": "char **func0(char *a, char *b, int *c) {\n  char *s[8] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n  int i, j = -1, k = -1;\n  for (i = 0; i < 8; i++) {\n    if (!strcmp(s[i], a))\n      j = i;\n    if (!strcmp(s[i], b))\n      k = i;\n  }\n  if (j == -1 || k == -1 || j == k) {\n    *c = 0;\n    return NULL;\n  }\n  if (j > k) {\n    int t = j;\n    j = k;\n    k = t;\n  }\n  *c = k - j - 1;\n  if (*c <= 0) {\n    *c = 0;\n    return NULL;\n  }\n  char **r = (char **)malloc(sizeof(char *) * *c);\n  for (i = 0; i < *c; i++)\n    r[i] = s[j + 1 + i];\n  return r;\n}",
    "c_func_re_decompile": "char **func0(char *a, char *b, int *c) {\n  char *s[8] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n  int i, j = -1, k = -1;\n  for (i = 0; i < 8; i++) {\n    if (!strcmp(s[i], a))\n      j = i;\n    if (!strcmp(s[i], b))\n      k = i;\n  }\n  if (j == -1 || k == -1 || j == k) {\n    *c = 0;\n    return NULL;\n  }\n  if (j > k) {\n    int t = j;\n    j = k;\n    k = t;\n  }\n  *c = k - j - 1;\n  if (*c <= 0) {\n    *c = 0;\n    return NULL;\n  }\n  char **r = (char **)malloc(sizeof(char *) * *c);\n  for (i = 0; i < *c; i++)\n    r[i] = s[j + 1 + i];\n  return r;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
    "c_func_decompile": "char **func0(char *a, char *b, int *c) {\n  char *s[] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n  int i, j, k, l;\n  char **r;\n  i = -1;\n  j = -1;\n  for (k = 0; k < 8; k++) {\n    if (!strcmp(s[k], a))\n      i = k;\n    if (!strcmp(s[k], b))\n      j = k;\n  }\n  if (i == -1 || j == -1 || i == j) {\n    *c = 0;\n    return 0;\n  }\n  if (i > j) {\n    l = i;\n    i = j;\n    j = l;\n  }\n  *c = j - i - 1;\n  if (*c <= 0) {\n    *c = 0;\n    return 0;\n  }\n  r = (char **)malloc((size_t)(*c) * sizeof(char *));\n  for (k = i + 1; k < j; k++)\n    r[k - i - 1] = s[k];\n  return r;\n}",
    "c_func_re_decompile": "char **func0(char *a, char *b, int *c) {\n  char *s[] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n  int i, j, k, l;\n  char **r;\n  i = -1;\n  j = -1;\n  for (k = 0; k < 8; k++) {\n    if (!strcmp(s[k], a))\n      i = k;\n    if (!strcmp(s[k], b))\n      j = k;\n  }\n  if (i == -1 || j == -1 || i == j) {\n    *c = 0;\n    return 0;\n  }\n  if (i > j) {\n    l = i;\n    i = j;\n    j = l;\n  }\n  *c = j - i - 1;\n  if (*c <= 0) {\n    *c = 0;\n    return 0;\n  }\n  r = (char **)malloc((size_t)(*c) * sizeof(char *));\n  for (k = i + 1; k < j; k++)\n    r[k - i - 1] = s[k];\n  return r;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
    "c_func_decompile": "char **func0(char *s1, char *s2, int *n) {\n    char *strs[] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n    int i, s1_index = -1, s2_index = -1;\n    for (i = 0; i < 8; i++) {\n        if (!strcmp(strs[i], s1)) {\n            s1_index = i;\n        }\n        if (!strcmp(strs[i], s2)) {\n            s2_index = i;\n        }\n    }\n    if (s1_index == -1 || s2_index == -1 || s1_index == s2_index) {\n        *n = 0;\n        return NULL;\n    }\n    if (s1_index > s2_index) {\n        int tmp = s1_index;\n        s1_index = s2_index;\n        s2_index = tmp;\n    }\n    *n = s2_index - s1_index - 1;\n    if (*n <= 0) {\n        return NULL;\n    }\n    char **ret = (char **)malloc(sizeof(char *) * (*n));\n    for (i = s1_index + 1; i < s2_index; i++) {\n        ret[i - s1_index - 1] = strs[i];\n    }\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *s1, char *s2, int *n) {\n    char *strs[] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n    int i, s1_index = -1, s2_index = -1;\n    for (i = 0; i < 8; i++) {\n        if (!strcmp(strs[i], s1)) {\n            s1_index = i;\n        }\n        if (!strcmp(strs[i], s2)) {\n            s2_index = i;\n        }\n    }\n    if (s1_index == -1 || s2_index == -1 || s1_index == s2_index) {\n        *n = 0;\n        return NULL;\n    }\n    if (s1_index > s2_index) {\n        int tmp = s1_index;\n        s1_index = s2_index;\n        s2_index = tmp;\n    }\n    *n = s2_index - s1_index - 1;\n    if (*n <= 0) {\n        return NULL;\n    }\n    char **ret = (char **)malloc(sizeof(char *) * (*n));\n    for (i = s1_index + 1; i < s2_index; i++) {\n        ret[i - s1_index - 1] = strs[i];\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
    "c_func_decompile": "char **func0(char **arr, int n, int *m) {\n    int i, j;\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*m] = arr[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            size_t len1 = strlen(arr[j]);\n            size_t len2 = strlen(arr[j + 1]);\n            if (len1 > len2 || (len1 == len2 && strcmp(arr[j], arr[j + 1]) > 0)) {\n                char *tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    char **res = (char **)malloc(sizeof(char *) * (*m));\n    for (i = 0; i < *m; i++) {\n        res[i] = arr[i];\n    }\n    return res;\n}",
    "c_func_re_decompile": "char **func0(char **arr, int n, int *m) {\n    int i, j;\n    *m = 0;\n    for (i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*m] = arr[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            size_t len1 = strlen(arr[j]);\n            size_t len2 = strlen(arr[j + 1]);\n            if (len1 > len2 || (len1 == len2 && strcmp(arr[j], arr[j + 1]) > 0)) {\n                char *tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    char **res = (char **)malloc(sizeof(char *) * (*m));\n    for (i = 0; i < *m; i++) {\n        res[i] = arr[i];\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
    "c_func_decompile": "char **func0(char **arr, int n, int *m) {\n    *m = 0;\n    for (int i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*m] = arr[i];\n            (*m)++;\n        }\n    }\n    for (int i = 0; i < *m - 1; i++) {\n        for (int j = 0; j < *m - i - 1; j++) {\n            if (strlen(arr[j]) > strlen(arr[j + 1]) ||\n                (strlen(arr[j]) == strlen(arr[j + 1]) &&\n                 strcmp(arr[j], arr[j + 1]) > 0)) {\n                char *tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    char **res = (char **)malloc(sizeof(char *) * (*m));\n    for (int i = 0; i < *m; i++) {\n        res[i] = arr[i];\n    }\n    return res;\n}",
    "c_func_re_decompile": "char **func0(char **arr, int n, int *m) {\n    *m = 0;\n    for (int i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*m] = arr[i];\n            (*m)++;\n        }\n    }\n    for (int i = 0; i < *m - 1; i++) {\n        for (int j = 0; j < *m - i - 1; j++) {\n            if (strlen(arr[j]) > strlen(arr[j + 1]) ||\n                (strlen(arr[j]) == strlen(arr[j + 1]) &&\n                 strcmp(arr[j], arr[j + 1]) > 0)) {\n                char *tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    char **res = (char **)malloc(sizeof(char *) * (*m));\n    for (int i = 0; i < *m; i++) {\n        res[i] = arr[i];\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
    "c_func_decompile": "int func0(int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a = (int *)malloc(n * sizeof(int));\n  int **b = (int **)malloc((n + 1) * sizeof(int *));\n  int **c = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *)calloc(3, sizeof(int));\n    c[i] = (int *)calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (i = 1; i <= n; i++) {\n    a[i - 1] = (i * i - i + 1) % 3;\n    for (j = 0; j < 3; j++)\n      b[i][j] = b[i - 1][j];\n    b[i][a[i - 1]]++;\n  }\n  for (k = 0; k < 3; k++) {\n    for (l = 1; l <= n; l++) {\n      for (m = 0; m < 3; m++)\n        c[l][m] = c[l - 1][m];\n      if (l > 0)\n        for (o = 0; o < 3; o++)\n          c[l][(a[l - 1] + o) % 3] += b[l - 1][o];\n    }\n    for (p = 0; p <= n; p++) {\n      for (q = 0; q < 3; q++) {\n        b[p][q] = c[p][q];\n        c[p][q] = 0;\n      }\n    }\n  }\n  z = b[n][0];\n  for (r = 0; r <= n; r++) {\n    free(b[r]);\n    free(c[r]);\n  }\n  free(b);\n  free(c);\n  free(a);\n  return z;\n}",
    "c_func_re_decompile": "int func0(int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a = (int *)malloc(n * sizeof(int));\n  int **b = (int **)malloc((n + 1) * sizeof(int *));\n  int **c = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *)calloc(3, sizeof(int));\n    c[i] = (int *)calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (i = 1; i <= n; i++) {\n    a[i - 1] = (i * i - i + 1) % 3;\n    for (j = 0; j < 3; j++)\n      b[i][j] = b[i - 1][j];\n    b[i][a[i - 1]]++;\n  }\n  for (k = 0; k < 3; k++) {\n    for (l = 1; l <= n; l++) {\n      for (m = 0; m < 3; m++)\n        c[l][m] = c[l - 1][m];\n      if (l > 0)\n        for (o = 0; o < 3; o++)\n          c[l][(a[l - 1] + o) % 3] += b[l - 1][o];\n    }\n    for (p = 0; p <= n; p++) {\n      for (q = 0; q < 3; q++) {\n        b[p][q] = c[p][q];\n        c[p][q] = 0;\n      }\n    }\n  }\n  z = b[n][0];\n  for (r = 0; r <= n; r++) {\n    free(b[r]);\n    free(c[r]);\n  }\n  free(b);\n  free(c);\n  free(a);\n  return z;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar** func0(const char* planet1, const char* planet2, int* returnSize) {\n    const char* planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < 8; m++) {\n        if (strcmp(planets[m], planet1) == 0) pos1 = m;\n        if (strcmp(planets[m], planet2) == 0) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1 || pos1 == pos2) {\n        *returnSize = 0;\n        return NULL;\n    }\n    if (pos1 > pos2) { int temp = pos1; pos1 = pos2; pos2 = temp; }\n    *returnSize = pos2 - pos1 - 1;\n    if (*returnSize <= 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    char** out = malloc(*returnSize * sizeof(char*));\n    for (m = pos1 + 1; m < pos2; m++) {\n        out[m - pos1 - 1] = (char*)planets[m];\n    }\n    return out;\n}",
    "c_func_decompile": "char **func0(char *s1, char *s2, int *n) {\n    char *strs[] = {\"abc\", \"ab\", \"a\", \"b\", \"c\", \"abcd\", \"abd\", \"abdc\"};\n    int i, j, k, m = -1, n1 = -1;\n    for (i = 0; i < 8; i++) {\n        if (!strcmp(strs[i], s1))\n            m = i;\n        if (!strcmp(strs[i], s2))\n            n1 = i;\n    }\n    if (m == -1 || n1 == -1)\n        return NULL;\n    if (m == n1)\n        return NULL;\n    if (m > n1) {\n        k = m;\n        m = n1;\n        n1 = k;\n    }\n    for (i = m; i <= n1; i++) {\n        if (!strcmp(strs[i], s1) && !strcmp(strs[i], s2))\n            break;\n    }\n    if (i == n1 + 1)\n        return NULL;\n    *n = n1 - m - 1;\n    if (*n <= 0)\n        return NULL;\n    char **ret = (char **)malloc(sizeof(char *) * (*n));\n    for (i = m + 1, j = 0; i < n1; i++, j++)\n        ret[j] = strs[i];\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char *s1, char *s2, int *n) {\n    char *strs[] = {\"abc\", \"ab\", \"a\", \"b\", \"c\", \"abcd\", \"abd\", \"abdc\"};\n    int i, j, k, m = -1, n1 = -1;\n    for (i = 0; i < 8; i++) {\n        if (!strcmp(strs[i], s1))\n            m = i;\n        if (!strcmp(strs[i], s2))\n            n1 = i;\n    }\n    if (m == -1 || n1 == -1)\n        return NULL;\n    if (m == n1)\n        return NULL;\n    if (m > n1) {\n        k = m;\n        m = n1;\n        n1 = k;\n    }\n    for (i = m; i <= n1; i++) {\n        if (!strcmp(strs[i], s1) && !strcmp(strs[i], s2))\n            break;\n    }\n    if (i == n1 + 1)\n        return NULL;\n    *n = n1 - m - 1;\n    if (*n <= 0)\n        return NULL;\n    char **ret = (char **)malloc(sizeof(char *) * (*n));\n    for (i = m + 1, j = 0; i < n1; i++, j++)\n        ret[j] = strs[i];\n    return ret;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
    "c_func_decompile": "int func0(int n, int a, int b) {\n    int i, flag = 1;\n    if (n <= 1)\n        flag = 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            flag = 0;\n    return flag ? a : b;\n}",
    "c_func_re_decompile": "int func0(int n, int a, int b) {\n    int i, flag = 1;\n    if (n <= 1)\n        flag = 0;\n    for (i = 2; i * i <= n; i++)\n        if (n % i == 0)\n            flag = 0;\n    return flag ? a : b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
    "c_func_decompile": "char **func0(char **arr, int n, int *m) {\n    *m = 0;\n    int i, j;\n    for (i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*m] = arr[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            if (strlen(arr[j]) > strlen(arr[j + 1]) ||\n                (strlen(arr[j]) == strlen(arr[j + 1]) &&\n                 strcmp(arr[j], arr[j + 1]) > 0)) {\n                char *tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    char **ret = (char **)malloc(sizeof(char *) * (*m));\n    for (i = 0; i < *m; i++) {\n        ret[i] = arr[i];\n    }\n    return ret;\n}",
    "c_func_re_decompile": "char **func0(char **arr, int n, int *m) {\n    *m = 0;\n    int i, j;\n    for (i = 0; i < n; i++) {\n        if (strlen(arr[i]) % 2 == 0) {\n            arr[*m] = arr[i];\n            (*m)++;\n        }\n    }\n    for (i = 0; i < *m - 1; i++) {\n        for (j = 0; j < *m - i - 1; j++) {\n            if (strlen(arr[j]) > strlen(arr[j + 1]) ||\n                (strlen(arr[j]) == strlen(arr[j + 1]) &&\n                 strcmp(arr[j], arr[j + 1]) > 0)) {\n                char *tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    char **ret = (char **)malloc(sizeof(char *) * (*m));\n    for (i = 0; i < *m; i++) {\n        ret[i] = arr[i];\n    }\n    return ret;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
    "c_func_decompile": "int func0(int n, int a, int b) {\n    int i, flag = 0;\n    if (n > 1)\n        flag = 1;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            flag = 0;\n            break;\n        }\n    }\n    return flag ? a : b;\n}",
    "c_func_re_decompile": "int func0(int n, int a, int b) {\n    int i, flag = 0;\n    if (n > 1)\n        flag = 1;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            flag = 0;\n            break;\n        }\n    }\n    return flag ? a : b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
    "c_func_decompile": "int func0(int n, int a, int b) {\n    int i, flag = 0;\n    if (n <= 1)\n        flag = 1;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag)\n        return a;\n    else\n        return b;\n}",
    "c_func_re_decompile": "int func0(int n, int a, int b) {\n    int i, flag = 0;\n    if (n <= 1)\n        flag = 1;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag)\n        return a;\n    else\n        return b;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nint func0(int n, int x, int y) {\n    int isp = 1;\n    if (n < 2) isp = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) isp = 0;\n    }\n    if (isp) return x;\n    return y;\n}",
    "c_func_decompile": "int func0(int n, int a, int b) {\n    int i, flag = 0;\n    if (n <= 1)\n        flag = 1;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag)\n        return a;\n    else\n        return b;\n}",
    "c_func_re_decompile": "int func0(int n, int a, int b) {\n    int i, flag = 0;\n    if (n <= 1)\n        flag = 1;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag)\n        return a;\n    else\n        return b;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar** func0(char **lst, int lst_size, int *return_size) {\n    int i, j;\n    char *temp;\n\n    *return_size = 0;\n    for (i = 0; i < lst_size; ++i) {\n        if (strlen(lst[i]) % 2 == 0) {\n            lst[*return_size] = lst[i];\n            (*return_size)++;\n        }\n    }\n\n    for (i = 0; i < *return_size - 1; ++i) {\n        for (j = 0; j < *return_size - i - 1; ++j) {\n            size_t len_j = strlen(lst[j]);\n            size_t len_j1 = strlen(lst[j + 1]);\n            if (len_j > len_j1 || (len_j == len_j1 && strcmp(lst[j], lst[j + 1]) > 0)) {\n                temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n\n    char **out = malloc(*return_size * sizeof(char *));\n    for (i = 0; i < *return_size; ++i) {\n        out[i] = lst[i];\n    }\n\n    return out;\n}",
    "c_func_decompile": "char **func0(char **array, int size, int *new_size) {\n    *new_size = 0;\n    for (int i = 0; i < size; i++) {\n        if (strlen(array[i]) % 2 == 0) {\n            array[*new_size] = array[i];\n            (*new_size)++;\n        }\n    }\n    for (int i = 0; i < *new_size - 1; i++) {\n        for (int j = 0; j < *new_size - i - 1; j++) {\n            if (strlen(array[j]) > strlen(array[j + 1])) {\n                char *tmp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = tmp;\n            } else if (strlen(array[j]) == strlen(array[j + 1])) {\n                if (strcmp(array[j], array[j + 1]) > 0) {\n                    char *tmp = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = tmp;\n                }\n            }\n        }\n    }\n    char **new_array = malloc(sizeof(char *) * (*new_size));\n    for (int i = 0; i < *new_size; i++) {\n        new_array[i] = array[i];\n    }\n    return new_array;\n}",
    "c_func_re_decompile": "char **func0(char **array, int size, int *new_size) {\n    *new_size = 0;\n    for (int i = 0; i < size; i++) {\n        if (strlen(array[i]) % 2 == 0) {\n            array[*new_size] = array[i];\n            (*new_size)++;\n        }\n    }\n    for (int i = 0; i < *new_size - 1; i++) {\n        for (int j = 0; j < *new_size - i - 1; j++) {\n            if (strlen(array[j]) > strlen(array[j + 1])) {\n                char *tmp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = tmp;\n            } else if (strlen(array[j]) == strlen(array[j + 1])) {\n                if (strcmp(array[j], array[j + 1]) > 0) {\n                    char *tmp = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = tmp;\n                }\n            }\n        }\n    }\n    char **new_array = malloc(sizeof(char *) * (*new_size));\n    for (int i = 0; i < *new_size; i++) {\n        new_array[i] = array[i];\n    }\n    return new_array;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "long func0(float *x, int n) {\n  int i;\n  long sum = 0;\n  for (i = 0; i < n; i++) {\n    if (fabs(x[i] - round(x[i])) < 0.000001 && x[i] > 0 && (int)round(x[i]) % 2 == 1) {\n      sum += (int)round(x[i]) * (int)round(x[i]);\n    }\n  }\n  return sum;\n}",
    "c_func_re_decompile": "long func0(float *x, int n) {\n  int i;\n  long sum = 0;\n  for (i = 0; i < n; i++) {\n    if (fabs(x[i] - round(x[i])) < 0.000001 && x[i] > 0 && (int)round(x[i]) % 2 == 1) {\n      sum += (int)round(x[i]) * (int)round(x[i]);\n    }\n  }\n  return sum;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "long func0(float *a, int n) {\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.00001 && x > 0 && (int)y % 2 == 1) {\n            sum += y * y;\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "long func0(float *a, int n) {\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.00001 && x > 0 && (int)y % 2 == 1) {\n            sum += y * y;\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
    "c_func_decompile": "void func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    c[i] = abs(a[i] - b[i]);\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    c[i] = abs(a[i] - b[i]);\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "long func0(float *a, int n) {\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.00001 && x > 0 && (int)y % 2 == 1) {\n            sum += y * y;\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "long func0(float *a, int n) {\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.00001 && x > 0 && (int)y % 2 == 1) {\n            sum += (int)y * (int)y;\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
    "c_func_decompile": "void func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    c[i] = abs(a[i] - b[i]);\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    c[i] = abs(a[i] - b[i]);\n  }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
    "c_func_decompile": "void func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    c[i] = abs(a[i] - b[i]);\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    c[i] = abs(a[i] - b[i]);\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nlong long func0(float lst[], int lst_size) {\n    long long sum = 0;\n    for (int i = 0; i < lst_size; i++) {\n        if (fabs(lst[i] - round(lst[i])) < 1e-4) {\n            if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n                sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n            }\n        }\n    }\n    return sum;\n}",
    "c_func_decompile": "long func0(float *a, int n) {\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.00001 && x > 0 && (int)y % 2 == 1) {\n            sum += y * y;\n        }\n    }\n    return sum;\n}",
    "c_func_re_decompile": "long func0(float *a, int n) {\n    int i;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        float x = a[i];\n        float y = roundf(x);\n        if (fabs(x - y) < 0.00001 && x > 0 && (int)y % 2 == 1) {\n            sum += (int)y * (int)y;\n        }\n    }\n    return sum;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
    "c_func_decompile": "int func0(int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c;\n  a = (int *)malloc(n * sizeof(int));\n  b = (int **)malloc((n + 1) * sizeof(int *));\n  c = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *)calloc(3, sizeof(int));\n    c[i] = (int *)calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < 3; j++) {\n      b[i + 1][j] = b[i][j];\n    }\n    k = (i * (i + 1)) % 3;\n    a[i] = k;\n    b[i + 1][k]++;\n  }\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < 3; j++) {\n      c[i + 1][j] = c[i][j];\n    }\n    k = a[i];\n    c[i + 1][k] += b[i][0];\n    c[i + 1][(k + 1) % 3] += b[i][1];\n    c[i + 1][(k + 2) % 3] += b[i][2];\n  }\n  for (i = 0; i <= n; i++) {\n    for (j = 0; j < 3; j++) {\n      k = c[i][j];\n      c[i][j] = 0;\n      b[i][j] = k;\n    }\n  }\n  for (i = 0; i <= n; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free(b);\n  free(c);\n  free(a);\n  return k;\n}",
    "c_func_re_decompile": "int func0(int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c;\n  a = (int *)malloc(n * sizeof(int));\n  b = (int **)malloc((n + 1) * sizeof(int *));\n  c = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *)calloc(3, sizeof(int));\n    c[i] = (int *)calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < 3; j++) {\n      b[i + 1][j] = b[i][j];\n    }\n    k = (i * (i + 1)) % 3;\n    a[i] = k;\n    b[i + 1][k]++;\n  }\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < 3; j++) {\n      c[i + 1][j] = c[i][j];\n    }\n    k = a[i];\n    c[i + 1][k] += b[i][0];\n    c[i + 1][(k + 1) % 3] += b[i][1];\n    c[i + 1][(k + 2) % 3] += b[i][2];\n  }\n  for (i = 0; i <= n; i++) {\n    for (j = 0; j < 3; j++) {\n      k = c[i][j];\n      c[i][j] = 0;\n      b[i][j] = k;\n    }\n  }\n  for (i = 0; i <= n; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free(b);\n  free(c);\n  free(a);\n  return k;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nint func0(int n) {\n    int *a = (int *)malloc(n * sizeof(int));\n    int **sum = (int **)malloc((n + 1) * sizeof(int *));\n    int **sum2 = (int **)malloc((n + 1) * sizeof(int *));\n    for (int i = 0; i <= n; i++) {\n        sum[i] = (int *)calloc(3, sizeof(int));\n        sum2[i] = (int *)calloc(3, sizeof(int));\n    }\n    sum[0][0] = sum[0][1] = sum[0][2] = 0;\n    sum2[0][0] = sum2[0][1] = sum2[0][2] = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i - 1] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i][j] = sum[i - 1][j];\n        }\n        sum[i][a[i - 1]] += 1;\n    }\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i][j] = sum2[i - 1][j];\n            }\n            if (i >= 1) {\n                for (int j = 0; j <= 2; j++) {\n                    sum2[i][(a[i - 1] + j) % 3] += sum[i - 1][j];\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum[i][j] = sum2[i][j];\n                sum2[i][j] = 0;\n            }\n        }\n    }\n\n    int result = sum[n][0];\n    for (int i = 0; i <= n; ++i) {\n        free(sum[i]);\n        free(sum2[i]);\n    }\n    free(sum);\n    free(sum2);\n    free(a);\n    return result;\n}",
    "c_func_decompile": "int func0(int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c;\n  a = (int *)malloc(n * sizeof(int));\n  b = (int **)malloc((n + 1) * sizeof(int *));\n  c = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *)calloc(3, sizeof(int));\n    c[i] = (int *)calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (i = 1; i <= n; i++) {\n    a[i - 1] = (i * (i - 1) + 1) % 3;\n    b[i][0] = b[i - 1][0];\n    b[i][1] = b[i - 1][1];\n    b[i][2] = b[i - 1][2];\n    b[i][a[i - 1]]++;\n  }\n  for (i = 1; i <= n; i++) {\n    c[i][0] = c[i - 1][0];\n    c[i][1] = c[i - 1][1];\n    c[i][2] = c[i - 1][2];\n    c[i][(a[i - 1] + a[i]) % 3]++;\n  }\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];\n    c[i][1] = c[i][2];\n    c[i][2] = t;\n  }\n  for (i = 0; i <= n; i++) {\n    t = b[i][0];\n    b[i][0] = b[i][1];\n    b[i][1] = b[i][2];\n    b[i][2] = t;\n  }\n  for (i = 0; i <= n; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free(b);\n  free(c);\n  free(a);\n  return t;\n}",
    "c_func_re_decompile": "int func0(int n) {\n  int i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n  int *a, **b, **c;\n  a = (int *)malloc(n * sizeof(int));\n  b = (int **)malloc((n + 1) * sizeof(int *));\n  c = (int **)malloc((n + 1) * sizeof(int *));\n  for (i = 0; i <= n; i++) {\n    b[i] = (int *)calloc(3, sizeof(int));\n    c[i] = (int *)calloc(3, sizeof(int));\n  }\n  b[0][0] = b[0][1] = b[0][2] = 0;\n  c[0][0] = c[0][1] = c[0][2] = 0;\n  for (i = 1; i <= n; i++) {\n    a[i - 1] = (i * (i - 1) + 1) % 3;\n    b[i][0] = b[i - 1][0];\n    b[i][1] = b[i - 1][1];\n    b[i][2] = b[i - 1][2];\n    b[i][a[i - 1]]++;\n  }\n  for (i = 1; i <= n; i++) {\n    c[i][0] = c[i - 1][0];\n    c[i][1] = c[i - 1][1];\n    c[i][2] = c[i - 1][2];\n    c[i][(a[i - 1] + a[i]) % 3]++;\n  }\n  for (i = 0; i <= n; i++) {\n    t = c[i][0];\n    c[i][0] = c[i][1];\n    c[i][1] = c[i][2];\n    c[i][2] = t;\n  }\n  for (i = 0; i <= n; i++) {\n    t = b[i][0];\n    b[i][0] = b[i][1];\n    b[i][1] = b[i][2];\n    b[i][2] = t;\n  }\n  for (i = 0; i <= n; i++) {\n    free(b[i]);\n    free(c[i]);\n  }\n  free(b);\n  free(c);\n  free(a);\n  return t;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int* game, int* guess, int* out, int length) {\n    for (int i = 0; i < length; i++) {\n        out[i] = abs(game[i] - guess[i]);\n    }\n}",
    "c_func_decompile": "void func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i=0; i<n; i++) {\n    c[i] = (a[i]-b[i] >= 0 ? a[i]-b[i] : -(a[i]-b[i]));\n  }\n}",
    "c_func_re_decompile": "void func0(int *a, int *b, int *c, int n) {\n  int i;\n  for (i=0; i<n; i++) {\n    c[i] = (a[i]-b[i] >= 0 ? a[i]-b[i] : -(a[i]-b[i]));\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
    "c_func_decompile": "void func0(char *s, char **a, int n, char *s1) {\n    int i, j, k, max = -1000;\n    char *p, c;\n    p = NULL;\n    for (i = 0; i < n; i++) {\n        k = 0;\n        for (j = 0; a[i][j]; j++) {\n            c = a[i][j];\n            if (c >= 'A' && c <= 'Z')\n                k++;\n            if (c >= 'a' && c <= 'z')\n                k--;\n        }\n        if (k > max) {\n            max = k;\n            p = a[i];\n        }\n    }\n    sprintf(s1, \"%s %s\", s, p);\n}",
    "c_func_re_decompile": "void func0(char *s, char **a, int n, char *s1) {\n    int i, j, k, max = -1000;\n    char *p, c;\n    p = NULL;\n    for (i = 0; i < n; i++) {\n        char *p = a[i];\n        k = 0;\n        for (j = 0; p[j]; j++) {\n            c = p[j];\n            if (c >= 'A' && c <= 'Z')\n                k++;\n            if (c >= 'a' && c <= 'z')\n                k--;\n        }\n        if (k > max) {\n            max = k;\n            p = a[i];\n        }\n    }\n    sprintf(s1, \"%s %s\", s, p);\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
    "c_func_decompile": "void func0(char *s, char **a, int n, char *buf) {\n    int i, j, k, max = -1000;\n    char *p = NULL;\n    for (i = 0; i < n; i++) {\n        for (j = 0, k = 0; a[i][j]; j++) {\n            if (a[i][j] >= 'A' && a[i][j] <= 'Z')\n                k++;\n            else if (a[i][j] >= 'a' && a[i][j] <= 'z')\n                k--;\n        }\n        if (k > max) {\n            max = k;\n            p = a[i];\n        }\n    }\n    __sprintf_chk(buf, 1, -1, \"%s\", p);\n}",
    "c_func_re_decompile": "void func0(char *s, char **a, int n, char *buf) {\n    int i, j, k, max = -1000;\n    char *p = NULL;\n    for (i = 0; i < n; i++) {\n        for (j = 0, k = 0; a[i][j]; j++) {\n            if (a[i][j] >= 'A' && a[i][j] <= 'Z')\n                k++;\n            else if (a[i][j] >= 'a' && a[i][j] <= 'z')\n                k--;\n        }\n        if (k > max) {\n            max = k;\n            p = a[i];\n        }\n    }\n    __sprintf_chk(buf, 1, -1, \"%s\", p);\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int i, j, len, count = 0;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (((__ctype_b_loc()->*((int*)+2))[(unsigned char)(str[i])] & (02000))) {\n            if (((__ctype_b_loc()->*((int*)+2))[(unsigned char)(str[i])] & (01000))) {\n                str[i] = tolower(str[i]);\n            } else if (((__ctype_b_loc()->*((int*)+2))[(unsigned char)(str[i])] & (04000))) {\n                str[i] = toupper(str[i]);\n            }\n        } else {\n            count++;\n        }\n    }\n    if (count == len) {\n        char temp;\n        for (j = 0; j < len / 2; j++) {\n            temp = str[j];\n            str[j] = str[len - j - 1];\n            str[len - j - 1] = temp;\n        }\n    }\n    return str;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int i, j, len;\n    len = strlen(str);\n    for (i = 0, j = len - 1; i < len; i++, j--) {\n        if (((*(__ctype_b_loc())).*((unsigned short*)str+(unsigned char)(str[i])) & (0x0400)) && ((*(__ctype_b_loc())).*((unsigned short*)str+(unsigned char)(str[i])) & (0x0100))) {\n            str[i] = (*(*(__ctype_tolower_loc())).*((unsigned int*)str+(unsigned char)(str[i])));\n        } else if (((*(__ctype_b_loc())).*((unsigned short*)str+(unsigned char)(str[i])) & (0x0400)) && ((*(__ctype_b_loc())).*((unsigned short*)str+(unsigned char)(str[i])) & (0x0200))) {\n            str[i] = (*(*(__ctype_toupper_loc())).*((unsigned int*)str+(unsigned char)(str[i])));\n        }\n    }\n    for (i = 0, j = len - 1; i < len / 2; i++, j--) {\n        char tmp = str[i];\n        str[i] = str[j];\n        str[j] = tmp;\n    }\n    return str;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
    "c_func_decompile": "void func0(char *s, char **a, int n, char *buf) {\n    int i, j, k, max = -1000, cnt;\n    char *p = NULL;\n    for (i = 0; i < n; i++) {\n        cnt = 0;\n        for (j = 0; a[i][j]; j++) {\n            if (a[i][j] >= 'A' && a[i][j] <= 'Z')\n                cnt++;\n            else if (a[i][j] >= 'a' && a[i][j] <= 'z')\n                cnt--;\n        }\n        if (cnt > max) {\n            max = cnt;\n            p = a[i];\n        }\n    }\n    __sprintf_chk(buf, 1, ~0, \"%s\", p);\n}",
    "c_func_re_decompile": "void func0(char *s, char **a, int n, char *buf) {\n    int i, j, k, max = -1000, cnt;\n    char *p = NULL;\n    for (i = 0; i < n; i++) {\n        cnt = 0;\n        for (j = 0; a[i][j]; j++) {\n            if (a[i][j] >= 'A' && a[i][j] <= 'Z')\n                cnt++;\n            else if (a[i][j] >= 'a' && a[i][j] <= 'z')\n                cnt--;\n        }\n        if (cnt > max) {\n            max = cnt;\n            p = a[i];\n        }\n    }\n    __sprintf_chk(buf, 1, ~0, \"%s\", p);\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
    "c_func_decompile": "int func0(char **argv, int *argc, int *argi, int argn) {\n  int *a, *b, i, j, k, l;\n  a = (int *)malloc(argn * sizeof(int));\n  b = (int *)malloc(argn * sizeof(int));\n  for (i = 0; i < argn; i++) {\n    a[i] = argc[i];\n    b[i] = i;\n  }\n  for (i = 0; i < argn; i++) {\n    if (!strcmp(argv[i], \"pow\")) {\n      while (b[i] != b[b[i]]) b[i] = b[b[i]];\n      a[b[i]] = pow(a[b[i]], a[b[i + 1]]);\n      b[i + 1] = b[i];\n    }\n  }\n  for (i = 0; i < argn; i++) {\n    if (!strcmp(argv[i], \"mul\") || !strcmp(argv[i], \"div\")) {\n      while (b[i] != b[b[i]]) b[i] = b[b[i]];\n      a[b[i]] = a[b[i]] * a[b[i + 1]];\n      b[i + 1] = b[i];\n    }\n  }\n  for (i = 0; i < argn; i++) {\n    if (!strcmp(argv[i], \"add\")) {\n      while (b[i] != b[b[i]]) b[i] = b[b[i]];\n      a[b[i]] = a[b[i]] + a[b[i + 1]];\n    } else {\n      while (b[i] != b[b[i]]) b[i] = b[b[i]];\n      a[b[i]] = a[b[i]] - a[b[i + 1]];\n    }\n    b[i + 1] = b[i];\n  }\n  k = a[0];\n  free(a);\n  free(b);\n  return k;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
    "c_func_decompile": "void func0(int n, int *a) {\n    int i, j;\n    for (i = 0, j = 0; n > 0; n /= 10) {\n        if (n % 2) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    a[0] = i;\n    a[1] = j;\n}",
    "c_func_re_decompile": "void func0(int n, int *a) {\n    int i, j;\n    for (i = 0, j = 0; n > 0; n /= 10) {\n        if (n % 2) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    a[0] = i;\n    a[1] = j;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(const char* class_name, const char** extensions, int ext_count, char* output) {\n    int max_strength = -1000;\n    const char* strongest = NULL;\n    for (int i = 0; i < ext_count; i++) {\n        const char* extension = extensions[i];\n        int strength = 0;\n        for (int j = 0; extension[j] != '\\0'; j++) {\n            char chr = extension[j];\n            if (chr >= 'A' && chr <= 'Z') strength++;\n            if (chr >= 'a' && chr <= 'z') strength--;\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest = extension;\n        }\n    }\n    sprintf(output, \"%s.%s\", class_name, strongest);\n}",
    "c_func_decompile": "void func0(char *s, char **a, int n, char *buf) {\n    int i, j, k, max = -1000, cnt;\n    char *p = NULL;\n    for (i = 0; i < n; i++) {\n        cnt = 0;\n        for (j = 0; a[i][j]; j++) {\n            if (a[i][j] >= 'A' && a[i][j] <= 'Z')\n                cnt++;\n            else if (a[i][j] >= 'a' && a[i][j] <= 'z')\n                cnt--;\n        }\n        if (cnt > max) {\n            max = cnt;\n            p = a[i];\n        }\n    }\n    __sprintf_chk(buf, 1, ~0, \"%s\", p);\n}",
    "c_func_re_decompile": "void func0(char *s, char **a, int n, char *buf) {\n    int i, j, k, max = -1000, cnt;\n    char *p = NULL;\n    for (i = 0; i < n; i++) {\n        cnt = 0;\n        for (j = 0; a[i][j]; j++) {\n            if (a[i][j] >= 'A' && a[i][j] <= 'Z')\n                cnt++;\n            else if (a[i][j] >= 'a' && a[i][j] <= 'z')\n                cnt--;\n        }\n        if (cnt > max) {\n            max = cnt;\n            p = a[i];\n        }\n    }\n    __sprintf_chk(buf, 1, ~0, \"%s\", p);\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
    "c_func_decompile": "void func0(int n, int *p) {\n    int even = 0, odd = 0;\n    n = n > 0 ? n : -n;\n    while (n > 0) {\n        if (n % 2 == 0)\n            even++;\n        else\n            odd++;\n        n /= 10;\n    }\n    p[0] = even;\n    p[1] = odd;\n}",
    "c_func_re_decompile": "void func0(int n, int *p) {\n    int even = 0, odd = 0;\n    n = n > 0 ? n : -n;\n    while (n > 0) {\n        if (n % 2 == 0)\n            even++;\n        else\n            odd++;\n        n /= 10;\n    }\n    p[0] = even;\n    p[1] = odd;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
    "c_func_decompile": "void func0(int n, int *a) {\n    int even = 0, odd = 0;\n    n = n < 0 ? -n : n;\n    do {\n        int r = n % 10;\n        if (r % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        n /= 10;\n    } while (n > 0);\n    a[0] = even;\n    a[1] = odd;\n}",
    "c_func_re_decompile": "void func0(int n, int *a) {\n    int even = 0, odd = 0;\n    n = n < 0 ? -n : n;\n    do {\n        int r = n % 10;\n        if (r % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        n /= 10;\n    } while (n > 0);\n    a[0] = even;\n    a[1] = odd;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
    "c_func_decompile": "int func0(char *str, char *substr) {\n    int len = strlen(substr);\n    char *tmp = (char *)malloc(sizeof(char) * (len * 2 + 1));\n    int i;\n    for (i = 0; i < len; i++) {\n        strncpy(tmp, substr + i, len - i);\n        strncpy(tmp + len - i, substr, i);\n        tmp[len] = '\\0';\n        if (strstr(str, tmp)) {\n            free(tmp);\n            return 1;\n        }\n    }\n    free(tmp);\n    return 0;\n}",
    "c_func_re_decompile": "int func0(char *str, char *substr) {\n    int len = strlen(substr);\n    char *tmp = (char *)malloc(sizeof(char) * (len * 2 + 1));\n    int i;\n    for (i = 0; i < len; i++) {\n        strncpy(tmp, substr + i, len - i);\n        strncpy(tmp + len - i, substr, i);\n        tmp[len] = '\\0';\n        if (strstr(str, tmp)) {\n            free(tmp);\n            return 1;\n        }\n    }\n    free(tmp);\n    return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
    "c_func_decompile": "int func0(char *s1, char *s2) {\n    int i, len = strlen(s2);\n    char *s = (char *)malloc(sizeof(char) * (len * 2 + 1));\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len * 2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}",
    "c_func_re_decompile": "int func0(char *s1, char *s2) {\n    int i, len = strlen(s2);\n    char *s = (char *)malloc(sizeof(char) * (len * 2 + 1));\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len * 2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid func0(int num, int *result) {\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    \n    do {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n\n    result[0] = even_count;\n    result[1] = odd_count;\n}",
    "c_func_decompile": "void func0(int n, int *p) {\n    int c0 = 0, c1 = 0;\n    unsigned int m = n > 0 ? n : -n;\n    while (m > 9) {\n        if (m % 2)\n            c1++;\n        else\n            c0++;\n        m /= 10;\n    }\n    p[0] = c0;\n    p[1] = c1;\n}",
    "c_func_re_decompile": "void func0(int n, int *p) {\n    int c0 = 0, c1 = 0;\n    unsigned int m = n > 0 ? n : -n;\n    while (m > 9) {\n        if (m % 2)\n            c1++;\n        else\n            c0++;\n        m /= 10;\n    }\n    p[0] = c0;\n    p[1] = c1;\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
    "c_func_decompile": "int func0(char *str1, char *str2) {\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    char *str = (char *)malloc(sizeof(char) * (len2 * 2 + 1));\n    int i;\n    for (i = 0; i < len2; i++) {\n        strncpy(str, str2 + i, len2 - i);\n        strncpy(str + len2 - i, str2, i);\n        str[len2] = '\\0';\n        if (strstr(str1, str) != NULL) {\n            free(str);\n            return 1;\n        }\n    }\n    free(str);\n    return 0;\n}",
    "c_func_re_decompile": "int func0(char *str1, char *str2) {\n    int len1 = strlen(str1);\n    int len2 = strlen(str2);\n    char *str = (char *)malloc(sizeof(char) * (len2 * 2 + 1));\n    int i;\n    for (i = 0; i < len2; i++) {\n        strncpy(str, str2 + i, len2 - i);\n        strncpy(str + len2 - i, str2, i);\n        str[len2] = '\\0';\n        if (strstr(str1, str) != NULL) {\n            free(str);\n            return 1;\n        }\n    }\n    free(str);\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nbool func0(const char *a, const char *b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    char *temp = (char *)malloc(2 * len_b + 1);\n\n    for (int i = 0; i < len_b; i++) {\n        strncpy(temp, b + i, len_b - i);\n        strncpy(temp + len_b - i, b, i);\n        temp[len_b] = '\\0';\n        if (strstr(a, temp)) {\n            free(temp);\n            return true;\n        }\n    }\n\n    free(temp);\n    return false;\n}",
    "c_func_decompile": "int func0(char *s1, char *s2) {\n    int i, len = strlen(s2);\n    char *s = (char *)malloc(sizeof(char) * (len * 2 + 1));\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len * 2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}",
    "c_func_re_decompile": "int func0(char *s1, char *s2) {\n    int i, len = strlen(s2);\n    char *s = (char *)malloc(sizeof(char) * (len * 2 + 1));\n    for (i = 0; i < len; i++) {\n        strncpy(s, s2 + i, len - i);\n        strncpy(s + len - i, s2, i);\n        s[len * 2] = '\\0';\n        if (strstr(s1, s)) {\n            free(s);\n            return 1;\n        }\n    }\n    free(s);\n    return 0;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 0,
    "re_run": 0,
    "re_compile": 0,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int i, j, len = strlen(str);\n    int count = 0;\n    for (i = 0; i < len; i++) {\n        if (((*(__ctype_b_loc())).*((unsigned short*)str+(unsigned char)(str[i])) & (0200)) != 0) {\n            if (((*(__ctype_b_loc())).*((unsigned short*)str+(unsigned char)(str[i])) & (0400)) != 0) {\n                str[i] = (*(__ctype_tolower_loc())).*((unsigned short*)str+(unsigned char)(str[i]));\n            } else if (((*(__ctype_b_loc())).*((unsigned short*)str+(unsigned char)(str[i])) & (0200)) != 0) {\n                str[i] = (*(__ctype_toupper_loc())).*((unsigned short*)str+(unsigned char)(str[i]));\n            }\n            count++;\n        }\n    }\n    if (count == len) {\n        for (i = 0, j = len - 1; i < j; i++, j--) {\n            char tmp = str[i];\n            str[i] = str[j];\n            str[j] = tmp;\n        }\n    }\n    return str;\n}",
    "c_func_re_decompile": null
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(float x, float y, float z) {\n  return (fabs(x*x + y*y - z*z) < 0.000001) ||\n         (fabs(x*x + z*z - y*y) < 0.000001) ||\n         (fabs(y*y + z*z - x*x) < 0.000001);\n}",
    "c_func_re_decompile": "int func0(float x, float y, float z) {\n  return (fabs(x*x + y*y - z*z) < 0.000001) ||\n         (fabs(x*x + z*z - y*y) < 0.000001) ||\n         (fabs(y*y + z*z - x*x) < 0.000001);\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(float x, float y, float z) {\n  return (fabs(x*x + y*y - z*z) < 0.000001) ||\n         (fabs(x*x - y*y + z*z) < 0.000001) ||\n         (fabs(x*x + z*z - y*y) < 0.000001);\n}",
    "c_func_re_decompile": "int func0(float x, float y, float z) {\n  return (fabs(x*x + y*y - z*z) < 0.000001) ||\n         (fabs(x*x + z*z - y*y) < 0.000001) ||\n         (fabs(y*y + z*z - x*x) < 0.000001);\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(float x, float y, float z) {\n  if (fabsf(x * x + y * y - z * z) < 0.000001)\n    return 1;\n  if (fabsf(x * x - y * y + z * z) < 0.000001)\n    return 1;\n  if (fabsf(x * x + z * z - y * y) < 0.000001)\n    return 1;\n  return 0;\n}",
    "c_func_re_decompile": "int func0(float x, float y, float z) {\n  if (fabsf(x * x + y * y - z * z) < 0.000001)\n    return 1;\n  if (fabsf(x * x - y * y + z * z) < 0.000001)\n    return 1;\n  if (fabsf(x * x + z * z - y * y) < 0.000001)\n    return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
    "c_func_decompile": "void func0(int n, char *s) {\n    char *num[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int val[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int i = 0;\n    s[0] = '\\0';\n    while (n > 0) {\n        strcat(s, num[i]);\n        n -= val[i];\n        if (n < val[i] && n > 0) {\n            i++;\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int n, char *s) {\n    char *num[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int val[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int i = 0;\n    s[0] = '\\0';\n    while (n > 0) {\n        strcat(s, num[i]);\n        n -= val[i];\n        if (n < val[i] && n > 0) {\n            i++;\n        }\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
    "c_func_decompile": "void func0(int a, int b, int c, int *d) {\n  if (b > c) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}",
    "c_func_re_decompile": "void func0(int a, int b, int c, int *d) {\n  if (b > c) {\n    d[0] = a + c;\n    d[1] = 0;\n  } else {\n    d[0] = a + b;\n    d[1] = c - b;\n  }\n}"
  },
  {
    "opt_state": "O2",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
    "c_func_decompile": "void func0(int a, int b, int c, int *p) {\n  if (b > c) {\n    p[0] = a + c;\n    p[1] = 0;\n  } else {\n    p[0] = a + b;\n    p[1] = c - b;\n  }\n}",
    "c_func_re_decompile": "void func0(int a, int b, int c, int *p) {\n  if (b > c) {\n    p[0] = a + c;\n    p[1] = 0;\n  } else {\n    p[0] = a + b;\n    p[1] = c - b;\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n\nint func0(float a, float b, float c) {\n    if (fabs(a*a + b*b - c*c) < 1e-4 || fabs(a*a + c*c - b*b) < 1e-4 || fabs(b*b + c*c - a*a) < 1e-4) return 1;\n    return 0;\n}",
    "c_func_decompile": "int func0(float x, float y, float z) {\n  if (fabsf(x * x + y * y - z * z) < 0.000001)\n    return 1;\n  if (fabsf(x * x - y * y + z * z) < 0.000001)\n    return 1;\n  if (fabsf(x * x + z * z - y * y) < 0.000001)\n    return 1;\n  return 0;\n}",
    "c_func_re_decompile": "int func0(float x, float y, float z) {\n  if (fabsf(x * x + y * y - z * z) < 0.000001)\n    return 1;\n  if (fabsf(x * x - y * y + z * z) < 0.000001)\n    return 1;\n  if (fabsf(x * x + z * z - y * y) < 0.000001)\n    return 1;\n  return 0;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
    "c_func_decompile": "void func0(int num, char *str) {\n    int i = 0;\n    int base[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *roman[13] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    *str = '\\0';\n    while (num > 0) {\n        while (num >= base[i]) {\n            str = strcat(str, roman[i]);\n            num -= base[i];\n        }\n        i++;\n    }\n}",
    "c_func_re_decompile": "void func0(int num, char *str) {\n    int i = 0;\n    int base[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *roman[13] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    *str = '\\0';\n    while (num > 0) {\n        while (num >= base[i]) {\n            str = strcat(str, roman[i]);\n            num -= base[i];\n        }\n        i++;\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
    "c_func_decompile": "void func0(int a, int b, int c, int *p) {\n  if (b > c) {\n    p[0] = a + c;\n    p[1] = 0;\n  } else {\n    p[0] = a + b;\n    p[1] = c - b;\n  }\n}",
    "c_func_re_decompile": "void func0(int a, int b, int c, int *p) {\n  if (b > c) {\n    p[0] = a + c;\n    p[1] = 0;\n  } else {\n    p[0] = a + b;\n    p[1] = c - b;\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int number, int need, int remaining, int result[2]) {\n    if (need > remaining) {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining - need;\n    }\n}",
    "c_func_decompile": "void func0(int a, int b, int c, int *p) {\n  if (b > c) {\n    p[0] = a + c;\n    p[1] = 0;\n  } else {\n    p[0] = a + b;\n    p[1] = c - b;\n  }\n}",
    "c_func_re_decompile": "void func0(int a, int b, int c, int *p) {\n  if (b > c) {\n    p[0] = a + c;\n    p[1] = 0;\n  } else {\n    p[0] = a + b;\n    p[1] = c - b;\n  }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
    "c_func_decompile": "void func0(int num, char *str) {\n    char *strs[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int nums[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int i;\n    *str = '\\0';\n    for (i = 0; i < 13 && num > 0; i++) {\n        while (num >= nums[i]) {\n            strcat(str, strs[i]);\n            num -= nums[i];\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int num, char *str) {\n    char *strs[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int nums[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int i;\n    *str = '\\0';\n    for (i = 0; i < 13 && num > 0; i++) {\n        while (num >= nums[i]) {\n            strcat(str, strs[i]);\n            num -= nums[i];\n        }\n    }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nvoid func0(int number, char *result) {\n    const char *rep[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    const int num[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int pos = 0;\n    result[0] = '\\0';\n\n    while(number > 0) {\n        while (number >= num[pos]) {\n            strcat(result, rep[pos]);\n            number -= num[pos];\n        }\n        if (number > 0) pos++;\n    }\n}",
    "c_func_decompile": "void func0(int num, char *str) {\n    int i;\n    int val[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *sym[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    *str = '\\0';\n    for (i = 0; i < 13; i++) {\n        while (num >= val[i]) {\n            str = strcat(str, sym[i]);\n            num -= val[i];\n        }\n        if (num == 0)\n            break;\n    }\n}",
    "c_func_re_decompile": "void func0(int num, char *str) {\n    int i;\n    int val[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *sym[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    *str = '\\0';\n    for (i = 0; i < 13; i++) {\n        while (num >= val[i]) {\n            str = strcat(str, sym[i]);\n            num -= val[i];\n        }\n        if (num == 0)\n            break;\n    }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
    "c_func_decompile": "char *func0(char **str, int n) {\n    char *res = \"\";\n    int max = 0;\n    for (int i = 0; i < n; i++) {\n        char tmp[200] = {0};\n        int cnt = 0;\n        for (int j = 0; str[i][j]; j++) {\n            if (strchr(tmp, str[i][j]) == NULL) {\n                int len = strlen(tmp);\n                tmp[len] = str[i][j];\n                tmp[len + 1] = '\\0';\n                cnt++;\n            }\n        }\n        if (cnt > max || (cnt == max && strcmp(str[i], res) < 0)) {\n            res = str[i];\n            max = cnt;\n        }\n    }\n    return res;\n}",
    "c_func_re_decompile": "char *func0(char **str, int n) {\n    char *res = \"\";\n    int max = 0;\n    for (int i = 0; i < n; i++) {\n        char tmp[200] = {0};\n        int cnt = 0;\n        for (int j = 0; str[i][j]; j++) {\n            if (strchr(tmp, str[i][j]) == NULL) {\n                int len = strlen(tmp);\n                tmp[len] = str[i][j];\n                tmp[len + 1] = '\\0';\n                cnt++;\n            }\n        }\n        if (cnt > max || (cnt == max && strcmp(str[i], res) < 0)) {\n            res = str[i];\n            max = cnt;\n        }\n    }\n    return res;\n}"
  },
  {
    "opt_state": "O1",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
    "c_func_decompile": "char *func0(char **argv, int argc) {\n    char *result = \"\";\n    int i, j, k, len, max = 0;\n    char *p, *q;\n    char buf[256];\n    for (i = 0; i < argc; i++) {\n        buf[0] = '\\0';\n        for (p = argv[i], j = 0; *p != '\\0'; p++) {\n            if (strchr(buf, *p) == NULL) {\n                len = strlen(buf);\n                buf[len] = *p;\n                buf[len + 1] = '\\0';\n                j++;\n            }\n        }\n        if (j > max || (j == max && strcmp(argv[i], result) < 0)) {\n            max = j;\n            result = argv[i];\n        }\n    }\n    return result;\n}",
    "c_func_re_decompile": "char *func0(char **argv, int argc) {\n    char *result = \"\";\n    int i, j, k, len, max = 0;\n    char *p, *q;\n    char buf[256];\n    for (i = 0; i < argc; i++) {\n        buf[0] = '\\0';\n        for (p = argv[i], j = 0; *p != '\\0'; p++) {\n            if (strchr(buf, *p) == NULL) {\n                len = strlen(buf);\n                buf[len] = *p;\n                buf[len + 1] = '\\0';\n                j++;\n            }\n        }\n        if (j > max || (j == max && strcmp(argv[i], result) < 0)) {\n            max = j;\n            result = argv[i];\n        }\n    }\n    return result;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
    "c_func_decompile": "void func0(int a, int b, int *c, int *d) {\n  *d = 0;\n  for (; a < b; a++) {\n    if (a < 10 && a % 2 == 0) {\n      c[*d] = a;\n      (*d)++;\n    }\n  }\n}",
    "c_func_re_decompile": "void func0(int a, int b, int *c, int *d) {\n  *d = 0;\n  for (; a < b; a++) {\n    if (a < 10 && a % 2 == 0) {\n      c[(*d)++] = a;\n    }\n  }\n}"
  },
  {
    "opt_state": "O0",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
    "c_func_decompile": "void func0(int a, int b, int *c, int *d) {\n  int i, t;\n  *d = 0;\n  if (b < a) {\n    t = a;\n    a = b;\n    b = t;\n  }\n  for (i = a; i <= b; i++) {\n    if (i < 10 && i % 2 == 0) {\n      c[(*d)++] = i;\n    }\n  }\n}",
    "c_func_re_decompile": "void func0(int a, int b, int *c, int *d) {\n  int i, t;\n  *d = 0;\n  if (b < a) {\n    t = a;\n    a = b;\n    b = t;\n  }\n  for (i = a; i <= b; i++) {\n    if (i < 10 && i % 2 == 0) {\n      c[(*d)++] = i;\n    }\n  }\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
    "c_func_decompile": "char *func0(char **argv, int argc) {\n    int i, j, k, max = 0;\n    char *p, *q, *r, *s = \"\";\n    for (i = 0; i < argc; i++) {\n        p = argv[i];\n        q = \"\";\n        for (j = 0; p[j]; j++) {\n            r = strchr(q, p[j]);\n            if (r == NULL) {\n                k = strlen(q);\n                q[k] = p[j];\n                q[k + 1] = '\\0';\n            }\n        }\n        if (j > max) {\n            max = j;\n            s = p;\n        } else if (j == max) {\n            if (strcmp(p, s) < 0)\n                s = p;\n        }\n    }\n    return s;\n}",
    "c_func_re_decompile": "char *func0(char **argv, int argc) {\n    int i, j, k, max = 0;\n    char *p, *q, *r, *s = \"\";\n    for (i = 0; i < argc; i++) {\n        p = argv[i];\n        q = \"\";\n        for (j = 0; p[j]; j++) {\n            r = strchr(q, p[j]);\n            if (r == NULL) {\n                k = strlen(q);\n                q[k] = p[j];\n                q[k + 1] = '\\0';\n            }\n        }\n        if (j > max) {\n            max = j;\n            s = p;\n        } else if (j == max) {\n            if (strcmp(p, s) < 0)\n                s = p;\n        }\n    }\n    return s;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
    "c_func_decompile": "void func0(int a, int b, int *c, int *d) {\n    *d = 0;\n    for (int i = a; i < b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            c[*d] = i;\n            (*d)++;\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int a, int b, int *c, int *d) {\n    *d = 0;\n    if (a > b) {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            c[(*d)++] = i;\n        }\n    }\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
    "c_func_decompile": "char *func0(char *s) {\n    unsigned int i, c;\n    char *p;\n    for (i = 0, c = ~0; s[i]; i++)\n        c = c ^ s[i];\n    if (c == 0)\n        return strdup(\"\");\n    p = malloc(9);\n    if (p)\n        __sprintf_chk(p, 1, 9, \"%08x\", ~c);\n    return p;\n}",
    "c_func_re_decompile": "char *func0(char *s) {\n    unsigned int i, c;\n    char *p;\n    for (i = 0, c = ~0; s[i]; i++) {\n        c = c ^ s[i];\n        for (int j = 8; j > 0; j--)\n            c = c & 1 ? (c >> 1) ^ 0xedb88320 : c >> 1;\n    }\n    if (c == 0)\n        return strdup(\"\");\n    p = malloc(9);\n    if (p)\n        __sprintf_chk(p, 1, 9, \"%08x\", ~c);\n    return p;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n\nchar *func0(char *words[], int count) {\n    char *max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < count; i++) {\n        char unique[256] = {0};\n        int unique_count = 0;\n        for (int j = 0; words[i][j] != '\\0'; j++) {\n            if (!strchr(unique, words[i][j])) {\n                int len = strlen(unique);\n                unique[len] = words[i][j];\n                unique[len + 1] = '\\0';\n                unique_count++;\n            }\n        }\n        if (unique_count > maxu || (unique_count == maxu && strcmp(words[i], max) < 0)) {\n            max = words[i];\n            maxu = unique_count;\n        }\n    }\n    return max;\n}",
    "c_func_decompile": "char *func0(char **argv, int argc) {\n    int i, j, k, max = 0;\n    char *p, *q, *r, *s = \"\";\n    char buf[256] = {0};\n    for (i = 0; i < argc; i++) {\n        p = argv[i];\n        q = buf;\n        for (j = 0, k = 0; *p; p++) {\n            if (strchr(q, *p) == NULL) {\n                q[strlen(q)] = *p;\n                q[strlen(q) + 1] = '\\0';\n                k++;\n            }\n        }\n        if (k > max) {\n            max = k;\n            r = argv[i];\n        } else if (k == max) {\n            if (strcmp(argv[i], s) < 0) {\n                r = argv[i];\n            }\n        }\n    }\n    return r;\n}",
    "c_func_re_decompile": "char *func0(char **argv, int argc) {\n    int i, j, k, max = 0;\n    char *p, *q, *r, *s = \"\";\n    char buf[256] = {0};\n    for (i = 0; i < argc; i++) {\n        p = argv[i];\n        q = buf;\n        for (j = 0, k = 0; *p; p++) {\n            if (strchr(q, *p) == NULL) {\n                q[strlen(q)] = *p;\n                q[strlen(q) + 1] = '\\0';\n                k++;\n            }\n        }\n        if (k > max) {\n            max = k;\n            r = argv[i];\n        } else if (k == max) {\n            if (strcmp(argv[i], s) < 0) {\n                r = argv[i];\n            }\n        }\n    }\n    return r;\n}"
  },
  {
    "opt_state": "O0",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
    "c_func_decompile": "char *func0(char *s) {\n  unsigned int i, j, c;\n  char *r;\n  if (s[0] == '\\0')\n    return strdup(\"\");\n  c = 0xFFFFFFFF;\n  for (i = 0; s[i] != '\\0'; i++) {\n    unsigned char ch = s[i];\n    c = c ^ ch;\n    for (j = 0; j < 8; j++) {\n      if (c & 1)\n        c = (c >> 1) ^ 0xEDB88320;\n      else\n        c = c >> 1;\n    }\n  }\n  c = ~c;\n  r = (char *)malloc(9);\n  if (r)\n    sprintf(r, \"%08X\", c);\n  return r;\n}",
    "c_func_re_decompile": "char *func0(char *s) {\n  unsigned int i, j, c;\n  char *r;\n  if (s[0] == '\\0')\n    return strdup(\"\");\n  c = 0xFFFFFFFF;\n  for (i = 0; s[i] != '\\0'; i++) {\n    unsigned char ch = s[i];\n    c = c ^ ch;\n    for (j = 0; j < 8; j++) {\n      if (c & 1)\n        c = (c >> 1) ^ 0xEDB88320;\n      else\n        c = c >> 1;\n    }\n  }\n  c = ~c;\n  r = (char *)malloc(9);\n  if (r)\n    sprintf(r, \"%08X\", c);\n  return r;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* func0(char *s){\n    int nletter = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        if (isalpha((unsigned char)s[i])) {\n            if (isupper((unsigned char)s[i])) s[i] = tolower((unsigned char)s[i]);\n            else if (islower((unsigned char)s[i])) s[i] = toupper((unsigned char)s[i]);\n        } else {\n            nletter += 1;\n        }\n    }\n    if (nletter == length) {\n        for (int i = 0; i < length / 2; i++) {\n            char temp = s[i];\n            s[i] = s[length - i - 1];\n            s[length - i - 1] = temp;\n        }\n    }\n    return s;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    int i, j, len, count = 0;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0400)) != 0) {\n            if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0100)) != 0) {\n                str[i] = (*(__ctype_tolower_loc()))[(unsigned char)(str[i])];\n            } else if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0200)) != 0) {\n                str[i] = (*(__ctype_toupper_loc()))[(unsigned char)(str[i])];\n            }\n            count++;\n        }\n    }\n    if (count == len) {\n        for (i = 0, j = len - 1; i < j; i++, j--) {\n            char temp = str[i];\n            str[i] = str[j];\n            str[j] = temp;\n        }\n    }\n    return str;\n}",
    "c_func_re_decompile": "char *func0(char *str) {\n    int i, j, len, count = 0;\n    len = strlen(str);\n    for (i = 0; i < len; i++) {\n        if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0400)) != 0) {\n            if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0100)) != 0) {\n                str[i] = (*(__ctype_tolower_loc()))[(unsigned char)(str[i])];\n            } else if (((*(__ctype_b_loc()))[(unsigned char)(str[i])] & (0x0200)) != 0) {\n                str[i] = (*(__ctype_toupper_loc()))[(unsigned char)(str[i])];\n            }\n            count++;\n        }\n    }\n    if (count == len) {\n        for (i = 0, j = len - 1; i < j; i++, j--) {\n            char temp = str[i];\n            str[i] = str[j];\n            str[j] = temp;\n        }\n    }\n    return str;\n}"
  },
  {
    "opt_state": "O3",
    "run": 1,
    "compile": 1,
    "re_run": 1,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n\nvoid func0(int a, int b, int *out, int *size) {\n    int m;\n    *size = 0;\n\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    for (int i = a; i <= b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            out[(*size)++] = i;\n        }\n    }\n}",
    "c_func_decompile": "void func0(int a, int b, int *c, int *d) {\n    *d = 0;\n    if (a > b) {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    if (b > 9) {\n        b = 9;\n    }\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0) {\n            c[*d] = i;\n            (*d)++;\n        }\n    }\n}",
    "c_func_re_decompile": "void func0(int a, int b, int *c, int *d) {\n    *d = 0;\n    if (a > b) {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    if (b > 9) {\n        b = 9;\n    }\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0) {\n            c[*d] = i;\n            (*d)++;\n        }\n    }\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
    "c_func_decompile": "char *func0(char *str) {\n    unsigned int i, j, k;\n    unsigned int crc = 0xffffffff;\n    char *crc_str;\n    for (i = 0; str[i] != '\\0'; i++) {\n        crc ^= str[i];\n        for (j = 0; j < 8; j++) {\n            k = crc & 1;\n            crc >>= 1;\n            if (k) {\n                crc ^= 0xedb88320;\n            }\n        }\n    }\n    crc_str = malloc(9);\n    if (crc_str == NULL) {\n        return strdup(\"00000000\");\n    }\n    __sprintf_chk(crc_str, 1, 9, \"%08x\", ~crc);\n    return crc_str;\n}",
    "c_func_re_decompile": "char *func0(char *str) {\n    unsigned int i, j, k;\n    unsigned int crc = 0xffffffff;\n    char *crc_str;\n    for (i = 0; str[i] != '\\0'; i++) {\n        crc ^= str[i];\n        for (j = 0; j < 8; j++) {\n            k = crc & 1;\n            crc >>= 1;\n            if (k) {\n                crc ^= 0xedb88320;\n            }\n        }\n    }\n    crc_str = malloc(9);\n    if (crc_str == NULL) {\n        return strdup(\"00000000\");\n    }\n    __sprintf_chk(crc_str, 1, 9, \"%08x\", ~crc);\n    return crc_str;\n}"
  },
  {
    "opt_state": "O1",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
    "c_func_decompile": "int func0(char **s, int *a, int n, int m) {\n    int *b = malloc(m * sizeof(int));\n    int *p = malloc(m * sizeof(int));\n    for (int i = 0; i < m; i++) {\n        b[i] = a[i];\n        p[i] = i;\n    }\n    for (int i = 0; i < n; i++) {\n        if (!strcmp(s[i], \"pow\")) {\n            int *q = p + p[p[i]];\n            *q = pow(*q, b[p[i]]);\n            p[i] = p[p[i]];\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (!strcmp(s[i], \"*\") || !strcmp(s[i], \"x\")) {\n            int *q = p + p[p[i]];\n            while (p[p[i]] != p[i]) p[i] = p[p[i]];\n            while (p[p[i]] != p[i]) p[i] = p[p[i]];\n            if (!strcmp(s[i], \"*\")) *q *= b[p[i]];\n            else *q /= b[p[i]];\n            p[i] = p[p[i]];\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (!strcmp(s[i], \"+\") || !strcmp(s[i], \"a\")) {\n            int *q = p + p[p[i]];\n            while (p[p[i]] != p[i]) p[i] = p[p[i]];\n            while (p[p[i]] != p[i]) p[i] = p[p[i]];\n            if (!strcmp(s[i], \"+\")) *q += b[p[i]];\n            else *q -= b[p[i]];\n            p[i] = p[p[i]];\n        }\n    }\n    int ret = b[0];\n    free(b);\n    free(p);\n    return ret;\n}",
    "c_func_re_decompile": "int func0(char **s, int *a, int n, int m) {\n    int *b = malloc(m * sizeof(int));\n    int *p = malloc(m * sizeof(int));\n    for (int i = 0; i < m; i++) {\n        b[i] = a[i];\n        p[i] = i;\n    }\n    for (int i = 0; i < n; i++) {\n        if (!strcmp(s[i], \"pow\")) {\n            int *q = p + p[p[i]];\n            while (p[p[i]] != p[i]) p[i] = p[p[i]];\n            while (p[p[i]] != p[i]) p[i] = p[p[i]];\n            *q = pow(*q, b[p[i]]);\n            p[i] = p[p[i]];\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (!strcmp(s[i], \"*\") || !strcmp(s[i], \"x\")) {\n            int *q = p + p[p[i]];\n            while (p[p[i]] != p[i]) p[i] = p[p[i]];\n            while (p[p[i]] != p[i]) p[i] = p[p[i]];\n            if (!strcmp(s[i], \"*\")) *q *= b[p[i]];\n            else *q /= b[p[i]];\n            p[i] = p[p[i]];\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (!strcmp(s[i], \"+\") || !strcmp(s[i], \"a\")) {\n            int *q = p + p[p[i]];\n            while (p[p[i]] != p[i]) p[i] = p[p[i]];\n            while (p[p[i]] != p[i]) p[i] = p[p[i]];\n            if (!strcmp(s[i], \"+\")) *q += b[p[i]];\n            else *q -= b[p[i]];\n            p[i] = p[p[i]];\n        }\n    }\n    int ret = b[0];\n    free(b);\n    free(p);\n    return ret;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// CRC32 function\nchar* func0(const char* text) {\n    if(strlen(text) == 0) {\n        return strdup(\"None\");\n    }\n\n    unsigned int crc = 0xFFFFFFFF; \n    unsigned int i, j;\n    unsigned char byte;\n\n    for(i = 0; text[i] != '\\0'; i++) {\n        byte = text[i];\n        crc = crc ^ byte;\n        for(j = 0; j < 8; j++) {\n            if(crc & 1) {\n                crc = (crc >> 1) ^ 0xEDB88320;\n            } else {\n                crc = crc >> 1;\n            }\n        }\n    }\n    crc = ~crc;\n\n    char* result = malloc(9);\n    if(result != NULL) {\n        sprintf(result, \"%08X\", crc);\n    }\n\n    return result;\n}",
    "c_func_decompile": "char *func0(char *s) {\n    unsigned int c = 0xFFFFFFFF;\n    unsigned int i = 0;\n    while (s[i]) {\n        c ^= s[i];\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        i++;\n    }\n    c = ~c;\n    char *ret = malloc(9);\n    if (!ret) {\n        return strdup(\"\");\n    }\n    __sprintf_chk(ret, 1, 9, \"%08X\", c);\n    return ret;\n}",
    "c_func_re_decompile": "char *func0(char *s) {\n    unsigned int c = 0xFFFFFFFF;\n    unsigned int i = 0;\n    while (s[i]) {\n        c ^= s[i];\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);\n        i++;\n    }\n    c = ~c;\n    char *ret = malloc(9);\n    if (!ret) {\n        return strdup(\"\");\n    }\n    __sprintf_chk(ret, 1, 9, \"%08X\", c);\n    return ret;\n}"
  },
  {
    "opt_state": "O2",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
    "c_func_decompile": "int func0(char **a, int *b, int c, int d) {\n  int *e = (int*)malloc(d * sizeof(int));\n  int *f = (int*)malloc(d * sizeof(int));\n  int g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n  for (i = 0; i < d; i++) {\n    e[i] = b[i];\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '*' && a[i][1] == '*' && a[i][2] == '\\0') {\n      for (j = f[i]; j != f[j]; j = f[j]) {\n        f[i] = f[j];\n      }\n      for (j = f[i]; j != f[j]; j = f[j]) {\n        f[j] = f[f[j]];\n      }\n      e[f[i]] = pow((double)e[f[i]], (double)e[f[j]]);\n      f[i] = f[j];\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '*' && a[i][1] == '\\0') {\n      for (j = f[i]; j != f[j]; j = f[j]) {\n        f[i] = f[j];\n      }\n      for (j = f[i]; j != f[j]; j = f[j]) {\n        f[j] = f[f[j]];\n      }\n      if (a[i][0] == '*' - 42) {\n        e[f[i]] *= e[f[j]];\n      } else if (a[i][0] == '/' && a[i][1] == '/' && a[i][2] == '\\0') {\n        e[f[i]] /= e[f[j]];\n      }\n      f[i] = f[j];\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '+' && a[i][1] == '\\0') {\n      for (j = f[i]; j != f[j]; j = f[j]) {\n        f[i] = f[j];\n      }\n      for (j = f[i]; j != f[j]; j = f[j]) {\n        f[j] = f[f[j]];\n      }\n      if (a[i][0] == '+' - 42) {\n        e[f[i]] += e[f[j]];\n      } else if (a[i][0] == '-' && a[i][1] == '\\0') {\n        e[f[i]] -= e[f[j]];\n      }\n      f[i] = f[j];\n    }\n  }\n  int result = e[0];\n  free(e);\n  free(f);\n  return result;\n}",
    "c_func_re_decompile": "int func0(char **a, int *b, int c, int d) {\n  int *e = (int*)malloc(d * sizeof(int));\n  int *f = (int*)malloc(d * sizeof(int));\n  int g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n  for (i = 0; i < d; i++) {\n    e[i] = b[i];\n  }\n  for (i = 0; i < d; i++) {\n    f[i] = i;\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '*' && a[i][1] == '*' && a[i][2] == '\\0') {\n      for (j = f[i]; j != f[j]; j = f[j]) {\n        f[i] = f[j];\n      }\n      for (j = f[i]; j != f[j]; j = f[j]) {\n        f[j] = f[f[j]];\n      }\n      e[f[i]] = pow((double)e[f[i]], (double)e[f[j]]);\n      f[i] = f[j];\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '*' && a[i][1] == '\\0') {\n      for (j = f[i]; j != f[j]; j = f[j]) {\n        f[i] = f[j];\n      }\n      for (j = f[i]; j != f[j]; j = f[j]) {\n        f[j] = f[f[j]];\n      }\n      if (a[i][0] == '*' - 42) {\n        e[f[i]] *= e[f[j]];\n      } else if (a[i][0] == '/' && a[i][1] == '/' && a[i][2] == '\\0') {\n        e[f[i]] /= e[f[j]];\n      }\n      f[i] = f[j];\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '+' && a[i][1] == '\\0') {\n      for (j = f[i]; j != f[j]; j = f[j]) {\n        f[i] = f[j];\n      }\n      for (j = f[i]; j != f[j]; j = f[j]) {\n        f[j] = f[f[j]];\n      }\n      if (a[i][0] == '+' - 42) {\n        e[f[i]] += e[f[j]];\n      } else if (a[i][0] == '-' && a[i][1] == '\\0') {\n        e[f[i]] -= e[f[j]];\n      }\n      f[i] = f[j];\n    }\n  }\n  int result = e[0];\n  free(e);\n  free(f);\n  return result;\n}"
  },
  {
    "opt_state": "O3",
    "run": 0,
    "compile": 1,
    "re_run": 0,
    "re_compile": 1,
    "c_func": "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n\nint func0(const char **operato, const int *operand, int operato_size, int operand_size) {\n    int *num = (int*)malloc(operand_size * sizeof(int));\n    int *posto = (int*)malloc(operand_size * sizeof(int));\n    for (int i = 0; i < operand_size; i++) {\n        num[i] = operand[i];\n        posto[i] = i;\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"**\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            num[posto[i]] = pow(num[posto[i]], num[posto[i + 1]]);\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"*\") == 0 || strcmp(operato[i], \"//\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"*\") == 0)\n                num[posto[i]] *= num[posto[i + 1]];\n            else\n                num[posto[i]] /= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    for (int i = 0; i < operato_size; i++) {\n        if (strcmp(operato[i], \"+\") == 0 || strcmp(operato[i], \"-\") == 0) {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[i + 1]];\n            if (strcmp(operato[i], \"+\") == 0)\n                num[posto[i]] += num[posto[i + 1]];\n            else\n                num[posto[i]] -= num[posto[i + 1]];\n            posto[i + 1] = posto[i];\n        }\n    }\n    int result = num[0];\n    free(num);\n    free(posto);\n    return result;\n}",
    "c_func_decompile": "int func0(char **a, int *b, int c, int d) {\n  int *e = malloc(d * sizeof(int));\n  int *f = malloc(d * sizeof(int));\n  int g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n  for (i = 0; i < d; i++) {\n    e[i] = b[i];\n  }\n  for (i = 0; i < d; i++) {\n    f[i] = i;\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '*' && a[i][1] == '*' && a[i][2] == '\\0') {\n      g = f[i];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[i] = g;\n      e[g] = pow((double)e[g], (double)e[h]);\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '*' && a[i][1] == '\\0') {\n      g = f[i];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[i] = g;\n      e[g] *= e[h];\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '/' && a[i][1] == '/' && a[i][2] == '\\0') {\n      g = f[i];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[i] = g;\n      e[g] /= e[h];\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '+' && a[i][1] == '\\0') {\n      g = f[i];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[i] = g;\n      e[g] += e[h];\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '-' && a[i][1] == '\\0') {\n      g = f[i];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[i] = g;\n      e[g] -= e[h];\n    }\n  }\n  k = e[0];\n  free(e);\n  free(f);\n  return k;\n}",
    "c_func_re_decompile": "int func0(char **a, int *b, int c, int d) {\n  int *e = malloc(d * sizeof(int));\n  int *f = malloc(d * sizeof(int));\n  int g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n  for (i = 0; i < d; i++) {\n    e[i] = b[i];\n  }\n  for (i = 0; i < d; i++) {\n    f[i] = i;\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '*' && a[i][1] == '*' && a[i][2] == '\\0') {\n      g = f[i];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[i] = g;\n      e[g] = pow((double)e[g], (double)e[h]);\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '*' && a[i][1] == '\\0') {\n      g = f[i];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[i] = g;\n      e[g] *= e[h];\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '/' && a[i][1] == '/' && a[i][2] == '\\0') {\n      g = f[i];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[i] = g;\n      e[g] /= e[h];\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '+' && a[i][1] == '\\0') {\n      g = f[i];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[i] = g;\n      e[g] += e[h];\n    }\n  }\n  for (i = 0; i < c; i++) {\n    if (a[i][0] == '-' && a[i][1] == '\\0') {\n      g = f[i];\n      h = f[g];\n      while (g != h) {\n        g = h;\n        h = f[g];\n      }\n      f[i] = g;\n      e[g] -= e[h];\n    }\n  }\n  k = e[0];\n  free(e);\n  free(f);\n  return k;\n}"
  }
]